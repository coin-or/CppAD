<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>to_string: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="to_string: Example and Test">
<meta name="keywords" id="keywords" content=" to_string: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_to_string.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="to_string.htm" target="_top">Prev</a>
</td><td><a href="ludetandsolve.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>utility</option>
<option>to_string</option>
<option>to_string.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_utility_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_to_string_htm.js'></script>
</td>
<td>to_string.cpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@


<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>to_string: Example and Test</big></big></b></center>
<pre><tt>
<i><font color="#9A1900">// Examples with fundamental types</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/utility/to_string.hpp&gt;</font>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
    <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Integer</font><font color="#990000">&gt;</font>
    <font color="#008080">Integer</font> <b><font color="#000000">string2signed</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font> s<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#008080">Integer</font> result <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <font color="#008080">size_t</font> index   <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> s<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#FF0000">'-'</font> <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <font color="#990000">++</font>index<font color="#990000">;</font>
            <b><font color="#0000FF">while</font></b><font color="#990000">(</font> index <font color="#990000">&lt;</font> s<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">)</font>
                result <font color="#990000">=</font> <b><font color="#000000">Integer</font></b><font color="#990000">(</font><font color="#993399">10</font><font color="#990000">)</font> <font color="#990000">*</font> result <font color="#990000">-</font> <b><font color="#000000">Integer</font></b><font color="#990000">(</font>s<font color="#990000">[</font>index<font color="#990000">++]</font> <font color="#990000">-</font> <font color="#FF0000">'0'</font> <font color="#990000">);</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">else</font></b>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">while</font></b><font color="#990000">(</font> index <font color="#990000">&lt;</font> s<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">)</font>
                result <font color="#990000">=</font> <b><font color="#000000">Integer</font></b><font color="#990000">(</font><font color="#993399">10</font><font color="#990000">)</font> <font color="#990000">*</font> result <font color="#990000">+</font> <b><font color="#000000">Integer</font></b><font color="#990000">(</font>s<font color="#990000">[</font>index<font color="#990000">++]</font> <font color="#990000">-</font> <font color="#FF0000">'0'</font> <font color="#990000">);</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">return</font></b> result<font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Integer</font><font color="#990000">&gt;</font>
    <font color="#008080">Integer</font> <b><font color="#000000">string2unsigned</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font> s<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#008080">Integer</font> result <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <font color="#008080">size_t</font> index   <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <b><font color="#0000FF">while</font></b><font color="#990000">(</font> index <font color="#990000">&lt;</font> s<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">)</font>
            result <font color="#990000">=</font> <b><font color="#000000">Integer</font></b><font color="#990000">(</font><font color="#993399">10</font> <font color="#990000">*</font> result <font color="#990000">+</font> <b><font color="#000000">Integer</font></b><font color="#990000">(</font>s<font color="#990000">[</font>index<font color="#990000">++])</font> <font color="#990000">-</font> <font color="#FF0000">'0'</font><font color="#990000">);</font>
        <b><font color="#0000FF">return</font></b> result<font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Integer</font><font color="#990000">&gt;</font>
    <font color="#009900">bool</font> <b><font color="#000000">signed_integer</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <font color="#008080">Integer</font> max    <font color="#990000">=</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font>Integer<font color="#990000">&gt;::</font><b><font color="#000000">max</font></b><font color="#990000">();</font>
        std<font color="#990000">::</font><font color="#008080">string</font> s  <font color="#990000">=</font> CppAD<font color="#990000">::</font><b><font color="#000000">to_string</font></b><font color="#990000">(</font>max<font color="#990000">);</font>
        <font color="#008080">Integer</font> check  <font color="#990000">=</font> string2signed<font color="#990000">&lt;</font>Integer<font color="#990000">&gt;(</font>s<font color="#990000">);</font>
        ok            <font color="#990000">&amp;=</font> max <font color="#990000">==</font> check<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <font color="#008080">Integer</font> min    <font color="#990000">=</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font>Integer<font color="#990000">&gt;::</font><b><font color="#000000">min</font></b><font color="#990000">();</font>
        s              <font color="#990000">=</font> CppAD<font color="#990000">::</font><b><font color="#000000">to_string</font></b><font color="#990000">(</font>min<font color="#990000">);</font>
        check          <font color="#990000">=</font> string2signed<font color="#990000">&lt;</font>Integer<font color="#990000">&gt;(</font>s<font color="#990000">);</font>
        ok            <font color="#990000">&amp;=</font> min <font color="#990000">==</font> check<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Integer</font><font color="#990000">&gt;</font>
    <font color="#009900">bool</font> <b><font color="#000000">unsigned_integer</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <font color="#008080">Integer</font> max    <font color="#990000">=</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font>Integer<font color="#990000">&gt;::</font><b><font color="#000000">max</font></b><font color="#990000">();</font>
        std<font color="#990000">::</font><font color="#008080">string</font> s  <font color="#990000">=</font> CppAD<font color="#990000">::</font><b><font color="#000000">to_string</font></b><font color="#990000">(</font>max<font color="#990000">);</font>
        <font color="#008080">Integer</font> check  <font color="#990000">=</font> string2unsigned<font color="#990000">&lt;</font>Integer<font color="#990000">&gt;(</font>s<font color="#990000">);</font>
        ok            <font color="#990000">&amp;=</font> max <font color="#990000">==</font> check<font color="#990000">;</font>
        ok            <font color="#990000">&amp;=</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font>Integer<font color="#990000">&gt;::</font><b><font color="#000000">min</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Float</font><font color="#990000">&gt;</font>
    <font color="#009900">bool</font> <b><font color="#000000">floating</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#009900">bool</font>  ok  <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
        <font color="#008080">Float</font> eps <font color="#990000">=</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font>Float<font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>
        <font color="#008080">Float</font> pi  <font color="#990000">=</font> <b><font color="#000000">Float</font></b><font color="#990000">(</font> <font color="#993399">4.0</font> <font color="#990000">*</font> std<font color="#990000">::</font><b><font color="#000000">atan</font></b><font color="#990000">(</font><font color="#993399">1.0</font><font color="#990000">)</font> <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        std<font color="#990000">::</font><font color="#008080">string</font> s <font color="#990000">=</font> CppAD<font color="#990000">::</font><b><font color="#000000">to_string</font></b><font color="#990000">(</font> pi <font color="#990000">);</font>
        <font color="#008080">Float</font> check   <font color="#990000">=</font> <b><font color="#000000">Float</font></b><font color="#990000">(</font> std<font color="#990000">::</font><b><font color="#000000">atof</font></b><font color="#990000">(</font> s<font color="#990000">.</font><b><font color="#000000">c_str</font></b><font color="#990000">()</font> <font color="#990000">)</font> <font color="#990000">);</font>
        ok           <font color="#990000">&amp;=</font> std<font color="#990000">::</font><b><font color="#000000">fabs</font></b><font color="#990000">(</font> check <font color="#990000">/</font> pi <font color="#990000">-</font> <font color="#993399">1.0</font> <font color="#990000">)</font> <font color="#990000">&lt;=</font> <font color="#993399">2.0</font> <font color="#990000">*</font> eps<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
    <font color="#FF0000">}</font>
<font color="#FF0000">}</font>

<i><font color="#9A1900">// Examples with AD types</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
    <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font>
    <font color="#009900">bool</font> <b><font color="#000000">ad_floating</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#009900">bool</font>  ok  <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
        <font color="#008080">Base</font> eps  <font color="#990000">=</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font>Base<font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>
        <font color="#008080">Base</font> pi   <font color="#990000">=</font> <b><font color="#000000">Base</font></b><font color="#990000">(</font> <font color="#993399">4.0</font> <font color="#990000">*</font> std<font color="#990000">::</font><b><font color="#000000">atan</font></b><font color="#990000">(</font><font color="#993399">1.0</font><font color="#990000">)</font> <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        std<font color="#990000">::</font><font color="#008080">string</font> s <font color="#990000">=</font> CppAD<font color="#990000">::</font><b><font color="#000000">to_string</font></b><font color="#990000">(</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;(</font> pi <font color="#990000">)</font> <font color="#990000">);</font>
        <font color="#008080">Base</font> check    <font color="#990000">=</font> <b><font color="#000000">Base</font></b><font color="#990000">(</font> std<font color="#990000">::</font><b><font color="#000000">atof</font></b><font color="#990000">(</font> s<font color="#990000">.</font><b><font color="#000000">c_str</font></b><font color="#990000">()</font> <font color="#990000">)</font> <font color="#990000">);</font>
        ok           <font color="#990000">&amp;=</font> <b><font color="#000000">fabs</font></b><font color="#990000">(</font> check <font color="#990000">/</font> pi <font color="#990000">-</font> <b><font color="#000000">Base</font></b><font color="#990000">(</font><font color="#993399">1.0</font><font color="#990000">)</font> <font color="#990000">)</font> <font color="#990000">&lt;=</font> <b><font color="#000000">Base</font></b><font color="#990000">(</font> <font color="#993399">2.0</font> <font color="#990000">)</font> <font color="#990000">*</font> eps<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
    <font color="#FF0000">}</font>
<font color="#FF0000">}</font>

<i><font color="#9A1900">// Test driver</font></i>
<font color="#009900">bool</font> <b><font color="#000000">to_string</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>

    ok <font color="#990000">&amp;=</font> unsigned_integer<font color="#990000">&lt;</font><font color="#009900">unsigned</font> <font color="#009900">short</font><font color="#990000">&gt;();</font>
    ok <font color="#990000">&amp;=</font> signed_integer<font color="#990000">&lt;</font><font color="#009900">signed</font> <font color="#009900">int</font><font color="#990000">&gt;();</font>
    <i><font color="#9A1900">//</font></i>
    ok <font color="#990000">&amp;=</font> unsigned_integer<font color="#990000">&lt;</font><font color="#009900">unsigned</font> <font color="#009900">long</font><font color="#990000">&gt;();</font>
    ok <font color="#990000">&amp;=</font> signed_integer<font color="#990000">&lt;</font><font color="#009900">signed</font> <font color="#009900">long</font><font color="#990000">&gt;();</font>
    ok <font color="#990000">&amp;=</font> unsigned_integer<font color="#990000">&lt;</font><font color="#009900">unsigned</font> <font color="#009900">long</font> <font color="#009900">long</font><font color="#990000">&gt;();</font>
    ok <font color="#990000">&amp;=</font> signed_integer<font color="#990000">&lt;</font><font color="#009900">signed</font> <font color="#009900">long</font> <font color="#009900">long</font><font color="#990000">&gt;();</font>
    <i><font color="#9A1900">//</font></i>
    ok <font color="#990000">&amp;=</font> floating<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;();</font>
    ok <font color="#990000">&amp;=</font> floating<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;();</font>
    ok <font color="#990000">&amp;=</font> floating<font color="#990000">&lt;</font><font color="#009900">long</font> <font color="#009900">double</font><font color="#990000">&gt;();</font>
    <i><font color="#9A1900">//</font></i>
    ok <font color="#990000">&amp;=</font> ad_floating<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;();</font>
    ok <font color="#990000">&amp;=</font> ad_floating<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;();</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
</tt></pre>

<hr>Input File: example/utility/to_string.cpp

</body>
</html>
