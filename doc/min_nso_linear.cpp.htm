<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>abs_normal min_nso_linear: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="abs_normal min_nso_linear: Example and Test">
<meta name="keywords" id="keywords" content=" abs_normal min_nso_linear: example test purpose discussion source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_min_nso_linear.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="min_nso_linear.htm" target="_top">Prev</a>
</td><td><a href="min_nso_linear.hpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>other_adfun</option>
<option>abs_normal_fun</option>
<option>example_abs_normal</option>
<option>min_nso_linear</option>
<option>min_nso_linear.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_abs_normal_fun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_example_abs_normal_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_min_nso_linear_htm.js'></script>
</td>
<td>min_nso_linear.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Discussion</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@



<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>abs_normal min_nso_linear: Example and Test</big></big></b></center>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
We minimize the function
<small>@(@
f : \B{R}^3 \rightarrow \B{R}
@)@</small> defined by
<small>@[@

\begin{array}{rcl}
f( x_0, x_1, x_2  ) & = & x_0^2 + 2 (x_0 + x_1)^2 + | x_2 |
\end{array}

@]@</small>

<br>
<br>
<b><big><a name="Discussion" id="Discussion">Discussion</a></big></b>
<br>
This routine uses <a href="abs_min_linear.htm" target="_top"><span style='white-space: nowrap'>abs_min_linear</span></a>
 which uses <a href="lp_box.htm" target="_top"><span style='white-space: nowrap'>lp_box</span></a>
,
a linear programming algorithm.
It is mean to be compared with <a href="min_nso_quad.cpp.htm" target="_top"><span style='white-space: nowrap'>min_nso_quad.cpp</span></a>
 which uses
a quadratic programing algorithm for the same problem.
To see this comparison, set 
<code><i><font color="black"><span style='white-space: nowrap'>level</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;1</span></font></code>
 is both examples.


<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">"min_nso_linear.hpp"</font>

<font color="#009900">bool</font> <b><font color="#000000">min_nso_linear</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>ADFun<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>size_t<font color="#990000">)</font>       s_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font>       d_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font> ad_vector<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <font color="#008080">size_t</font> level <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>    <i><font color="#9A1900">// level of tracing</font></i>
    <font color="#008080">size_t</font> n     <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>    <i><font color="#9A1900">// size of x</font></i>
    <font color="#008080">size_t</font> m     <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>    <i><font color="#9A1900">// size of y</font></i>
    <font color="#008080">size_t</font> s     <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>    <i><font color="#9A1900">// number of data points and absolute values</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// start recording the function f(x)</font></i>
    <font color="#008080">ad_vector</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">ay</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        ax<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>j <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>
    <b><font color="#000000">Independent</font></b><font color="#990000">(</font> ax <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    ay<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>  <font color="#990000">=</font>  ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
    ay<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> <font color="#993399">2.0</font> <font color="#990000">*</font> <font color="#990000">(</font>ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+</font> ax<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">])</font> <font color="#990000">*</font> <font color="#990000">(</font>ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+</font> ax<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]);</font>
    ay<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> <b><font color="#000000">fabs</font></b><font color="#990000">(</font> ax<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">);</font>
    <font color="#008080">ADFun&lt;double&gt;</font> <b><font color="#000000">f</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// create its abs_normal representation in g, a</font></i>
    <font color="#008080">ADFun&lt;double&gt;</font> g<font color="#990000">,</font> a<font color="#990000">;</font>
    f<font color="#990000">.</font><b><font color="#000000">abs_normal_fun</font></b><font color="#990000">(</font>g<font color="#990000">,</font> a<font color="#990000">);</font>

    <i><font color="#9A1900">// check dimension of domain and range space for g</font></i>
    ok <font color="#990000">&amp;=</font> g<font color="#990000">.</font><b><font color="#000000">Domain</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">+</font> s<font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> g<font color="#990000">.</font><b><font color="#000000">Range</font></b><font color="#990000">()</font>  <font color="#990000">==</font> m <font color="#990000">+</font> s<font color="#990000">;</font>

    <i><font color="#9A1900">// check dimension of domain and range space for a</font></i>
    ok <font color="#990000">&amp;=</font> a<font color="#990000">.</font><b><font color="#000000">Domain</font></b><font color="#990000">()</font> <font color="#990000">==</font> n<font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> a<font color="#990000">.</font><b><font color="#000000">Range</font></b><font color="#990000">()</font>  <font color="#990000">==</font> s<font color="#990000">;</font>

    <i><font color="#9A1900">// epsilon</font></i>
    <font color="#008080">d_vector</font> <b><font color="#000000">epsilon</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">);</font>
    <font color="#009900">double</font> eps <font color="#990000">=</font> <font color="#993399">1e-3</font><font color="#990000">;</font>
    epsilon<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> eps<font color="#990000">;</font>
    epsilon<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> eps<font color="#990000">;</font>

    <i><font color="#9A1900">// maxitr</font></i>
    <font color="#008080">s_vector</font> <b><font color="#000000">maxitr</font></b><font color="#990000">(</font><font color="#993399">3</font><font color="#990000">);</font>
    maxitr<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">100</font><font color="#990000">;</font>
    maxitr<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">20</font><font color="#990000">;</font>
    maxitr<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">20</font><font color="#990000">;</font>

    <i><font color="#9A1900">// b_in</font></i>
    <font color="#009900">double</font> b_in <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>

    <i><font color="#9A1900">// call min_nso_linear</font></i>
    <font color="#008080">d_vector</font> <b><font color="#000000">x_in</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">x_out</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        x_in<font color="#990000">[</font>j<font color="#990000">]</font>  <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>j <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>

    <i><font color="#9A1900">//</font></i>
    ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">min_nso_linear</font></b><font color="#990000">(</font>
        level<font color="#990000">,</font> g<font color="#990000">,</font> a<font color="#990000">,</font> epsilon<font color="#990000">,</font> maxitr<font color="#990000">,</font> b_in<font color="#990000">,</font> x_in<font color="#990000">,</font> x_out
    <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        ok <font color="#990000">&amp;=</font> std<font color="#990000">::</font><b><font color="#000000">fabs</font></b><font color="#990000">(</font> x_out<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">)</font> <font color="#990000">&lt;</font> eps<font color="#990000">;</font>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/abs_normal/min_nso_linear.cpp

</body>
</html>
