<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>The CppAD::vector Template Class</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="The CppAD::vector Template Class">
<meta name="keywords" id="keywords" content=" the cppad::vector template class syntax description include deprecated 2019-08-19 integer size capacity swap assignment check return reference move semantics element access i error checking push_back push_vector output resize data memory clear iterators itr citr begin end operator[] vectorbool bit_per_unit type parallel mode example exercise ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_cppad_vector_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="ode_gear_control.cpp.htm" target="_top">Prev</a>
</td><td><a href="cppad_vector.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>utility</option>
<option>CppAD_vector</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_utility_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_vector_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Description</option>
<option>Include</option>
<option>---..Deprecated 2019-08-19</option>
<option>Integer Size</option>
<option>capacity</option>
<option>swap</option>
<option>Assignment</option>
<option>---..Check Size</option>
<option>---..Return Reference</option>
<option>---..Move Semantics</option>
<option>Element Access</option>
<option>---..i</option>
<option>---..Error Checking</option>
<option>push_back</option>
<option>push_vector</option>
<option>Output</option>
<option>resize</option>
<option>---..data</option>
<option>---..memory</option>
<option>clear</option>
<option>data</option>
<option>Iterators</option>
<option>---..Syntax</option>
<option>---..itr</option>
<option>---..citr</option>
<option>---..begin</option>
<option>---..end</option>
<option>---..operator[]</option>
<option>---..Error Checking</option>
<option>vectorBool</option>
<option>---..Memory</option>
<option>---..bit_per_unit</option>
<option>---..data</option>
<option>---..Iterators</option>
<option>---..Output</option>
<option>---..Element Type</option>
<option>Memory and Parallel Mode</option>
<option>Example</option>
<option>Exercise</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>The CppAD::vector Template Class</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>#&nbsp;include&nbsp;&lt;cppad/utility/vector.hpp&gt;<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>#&nbsp;include&nbsp;&lt;cppad/utility/vector_bool.hpp&gt;<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>CppAD::vector&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="Description" id="Description">Description</a></big></b>
<br>
The include file <code><font color="blue">cppad/vector.hpp</font></code> defines the
vector template class <code><font color="blue">CppAD::vector</font></code>.
This is a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 template class and in addition
it has the features listed below.
The purposes for this template vector class are as follows:
<ol type="1"><li>
If <code><font color="blue">NDEBUG</font></code> is not defined, it checks for all
memory accesses to make sure the corresponding index is valid.
This includes when using its
<a href="cppad_vector.htm#Iterators" target="_top"><span style='white-space: nowrap'>iterators</span></a>

</li><li>

It has a simple set of private member variables that make it
easy to understand when viewing its values in a C++ debugger.
</li><li>

It uses the <a href="thread_alloc.htm" target="_top"><span style='white-space: nowrap'>thread_alloc</span></a>
 memory allocator which makes it fast
in a multi-threading environment; see
<a href="cppad_vector.htm#Memory and Parallel Mode" target="_top"><span style='white-space: nowrap'>memory&nbsp;and&nbsp;parallel&nbsp;mode</span></a>
.
</li><li>

The operations it has are like the corresponding <code><font color="blue">std::vector</font></code>
operation so it is easy to use.
</li></ol>


<br>
<br>
<b><big><a name="Include" id="Include">Include</a></big></b>
<br>
The files
<code><font color="blue">cppad/utility/vector.hpp</font></code> and <code><font color="blue">cppad/utility/vector_bool.hpp</font></code> are
included by <code><font color="blue">cppad/cppad.hpp</font></code>.
They can also be included separately with out the rest of the
CppAD include files.

<br>
<br>
<big><a name="Include.Deprecated 2019-08-19" id="Include.Deprecated 2019-08-19">Deprecated 2019-08-19</a></big>
<br>
The file <code><font color="blue">cppad/utility/vector.hpp</font></code>
includes the <code><font color="blue">cppad/utility/vector_bool.hpp</font></code>
because they used to be one file.
If you want <a href="cppad_vector.htm#vectorBool" target="_top"><span style='white-space: nowrap'>vectorBool</span></a>
,
and not the rest of CppAD, you should include
<code><font color="blue">cppad/utility/vector_bool.hpp</font></code>.

<br>
<br>
<b><big><a name="Integer Size" id="Integer Size">Integer Size</a></big></b>
<br>
The size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 in the constructor syntax below can be an
<code><font color="blue">int</font></code> (all simple vectors support <code><font color="blue">size_t</font></code>):

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;CppAD::vector&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
<br>
<b><big><a name="capacity" id="capacity">capacity</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>cap</span></font></i></code>
 is a <code><font color="blue">size_t</font></code> object,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cap</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.capacity()<br>
</span></font></code>
set 
<code><i><font color="black"><span style='white-space: nowrap'>cap</span></font></i></code>
 to the number of 
<code><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i></code>
 objects that
could fit in the memory currently allocated for 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
.
Note that

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.capacity()<br>
</span></font></code>
<br>
<b><big><a name="swap" id="swap">swap</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.swap(</span></font><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
exchanges the contents of 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
.
For example <a href="cppad_vector.htm#data" target="_top"><span style='white-space: nowrap'>vec.data()</span></a>
 after the <code><font color="blue">swap</font></code>
is equal to 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'>.data()</span></font></code>
 before <code><font color="blue">swap</font></code>.


<br>
<br>
<b><big><a name="Assignment" id="Assignment">Assignment</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
has all the properties listed for a
<a href="simplevector.htm#Assignment" target="_top"><span style='white-space: nowrap'>simple&nbsp;vector&nbsp;assignment</span></a>

plus the following:

<br>
<br>
<big><a name="Assignment.Check Size" id="Assignment.Check Size">Check Size</a></big>
<br>
It is no longer necessary for 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 to have the
same size as 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
.
This makes <code><font color="blue">CppAD::vector</font></code> more like <code><font color="blue">std::vector</font></code>.

<br>
<br>
<big><a name="Assignment.Return Reference" id="Assignment.Return Reference">Return Reference</a></big>
<br>
A reference to the vector 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 is returned.
An example use of this reference is in multiple assignments of the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>another</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>another</span></font></i></code>
 is a 
<code><font color="blue"><span style='white-space: nowrap'>CppAD::vector&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 object.

<br>
<br>
<big><a name="Assignment.Move Semantics" id="Assignment.Move Semantics">Move Semantics</a></big>
<br>
If the C++ compiler supports move semantic rvalues using the <code><font color="blue">&amp;&amp;</font></code>
syntax, then it will be used during the vector assignment statement.
This means that return values and other temporaries are not be copied,
but rather pointers are transferred.

<br>
<br>
<b><big><a name="Element Access" id="Element Access">Element Access</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i></code>
 has type <code><font color="blue">size_t</font></code>,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
has all the properties listed for a
<a href="simplevector.htm#Element Access" target="_top"><span style='white-space: nowrap'>simple&nbsp;vector&nbsp;element&nbsp;access</span></a>

plus the following:

<br>
<br>
<big><a name="Element Access.i" id="Element Access.i">i</a></big>
<br>
This operation is defined for any 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i></code>

that has a conversion to <code><font color="blue">size_t</font></code>.
The object 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 has type 
<code><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i></code>

(is not possibly a different type that can be converted to 
<code><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i></code>
).

<br>
<br>
<big><a name="Element Access.Error Checking" id="Element Access.Error Checking">Error Checking</a></big>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i></code>
 is not less than the size of the 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
,
and <code><font color="blue">NDEBUUG</font></code> is not defined,
<code><font color="blue">CppAD::vector</font></code> will use
<a href="errorhandler.htm" target="_top"><span style='white-space: nowrap'>ErrorHandler</span></a>

to generate an appropriate error report.

<br>
<br>
<b><big><a name="push_back" id="push_back">push_back</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 has size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 and

<code><i><font color="black"><span style='white-space: nowrap'>scalar</span></font></i></code>
 has type 
<code><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i></code>
,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.push_back(</span></font><i><font color="black"><span style='white-space: nowrap'>scalar</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
extends the vector so that its new size is 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>+1</span></font></code>

and 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 is equal to 
<code><i><font color="black"><span style='white-space: nowrap'>s</span></font></i></code>

(equal in the sense of the 
<code><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i></code>
 assignment operator).

<br>
<br>
<b><big><a name="push_vector" id="push_vector">push_vector</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 has size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 and

<code><i><font color="black"><span style='white-space: nowrap'>simple_vec</span></font></i></code>
 is a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>simple&nbsp;vector</span></a>

with elements of type 
<code><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i></code>
 and size 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.push_vector(</span></font><i><font color="black"><span style='white-space: nowrap'>simple_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
extends the vector 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 so that its new size is 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>+</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>

and 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 is equal to 
<code><i><font color="black"><span style='white-space: nowrap'>simple_vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>

for 
<code><i><font color="black"><span style='white-space: nowrap'>i&nbsp;=&nbsp;1&nbsp;,&nbsp;...&nbsp;,&nbsp;m-1</span></font></i></code>

(equal in the sense of the 
<code><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i></code>
 assignment operator).

<br>
<br>
<b><big><a name="Output" id="Output">Output</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>os</span></font></i></code>
 is an <code><font color="blue">std::ostream</font></code>, the operation

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>os</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
will output 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 to the standard output stream 
<code><i><font color="black"><span style='white-space: nowrap'>os</span></font></i></code>
.
The elements of 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 are enclosed at the beginning by a
<code><font color="blue">{</font></code> character,
they are separated by <code><font color="blue">,</font></code> characters,
and they are enclosed at the end by <code><font color="blue">}</font></code> character.
It is assumed by this operation that if 
<code><i><font color="black"><span style='white-space: nowrap'>scalar</span></font></i></code>

is an object with type 
<code><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i></code>
,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>os</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>scalar</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
will output the value 
<code><i><font color="black"><span style='white-space: nowrap'>scalar</span></font></i></code>
 to 
<code><i><font color="black"><span style='white-space: nowrap'>os</span></font></i></code>
.

<br>
<br>
<b><big><a name="resize" id="resize">resize</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 is a <code><font color="blue">size_t</font></code>,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.resize(</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
sets the size of 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 equal to 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.

<br>
<br>
<big><a name="resize.data" id="resize.data">data</a></big>
<br>
The elements in 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 before the resize operation are preserved.

<br>
<br>
<big><a name="resize.memory" id="resize.memory">memory</a></big>
<br>
If before the resize, 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.capacity()</span></font></code>
,
no memory is freed or allocated and
the capacity of 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 does not change.
Otherwise, new memory is allocated and the elements before the resize
are copied to the new memory.
If you do not need to the elements previously in the vector,
you can resize to zero and then to the new size to avoid the copy.

<br>
<br>
<b><big><a name="clear" id="clear">clear</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.clear()<br>
</span></font></code>
frees all memory allocated for 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>

and both its size and capacity are set to zero.
This can be useful when using very large vectors
and when checking for memory leaks (and there are global vectors)
see the <a href="cppad_vector.htm#Memory and Parallel Mode" target="_top"><span style='white-space: nowrap'>memory</span></a>
 discussion.

<br>
<br>
<b><big><a name="data" id="data">data</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.data()<br>
</span></font></code>
returns a pointer to a 
<code><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i></code>
 object such that for

<code><font color="blue"><span style='white-space: nowrap'>0&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()</span></font></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.data()[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>

are the same 
<code><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i></code>
 object.
If 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 is <code><font color="blue">const</font></code>, the pointer is <code><font color="blue">const</font></code>.
If 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.capacity()</span></font></code>
 is zero, the value of the pointer is not defined.
The pointer may no longer be valid after the following operations on

<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
:
its destructor,
<code><font color="blue">clear</font></code>,
<code><font color="blue">resize</font></code>,
<code><font color="blue">push_back</font></code>,
<code><font color="blue">push_vector</font></code>,
assignment to another vector when original size of 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 is zero.

<br>
<br>
<b><big><a name="Iterators" id="Iterators">Iterators</a></big></b>


<br>
<br>
<big><a name="Iterators.Syntax" id="Iterators.Syntax">Syntax</a></big>

<br>

<code><font color="blue"><span style='white-space: nowrap'>typename&nbsp;CppAD::vector&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;::iterator&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>itr</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>typename&nbsp;CppAD::vector&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;::const_iterator&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>citr</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.begin()<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.end()<br>
</span></font></code>
<br>
<big><a name="Iterators.itr" id="Iterators.itr">itr</a></big>
<br>
is a random access iterator type for non <code><font color="blue">const</font></code> objects.

<br>
<br>
<big><a name="Iterators.citr" id="Iterators.citr">citr</a></big>
<br>
is a random access iterator type for a <code><font color="blue">const</font></code> objects.
An <code><font color="blue">iterator</font></code> can be converted to a <code><font color="blue">const_iterator</font></code>,
but not the other way around.

<br>
<br>
<big><a name="Iterators.begin" id="Iterators.begin">begin</a></big>
<br>
is an iterator corresponding to the first element of the vector.
It is a <code><font color="blue">const_iterator</font></code> (<code><font color="blue">iterator</font></code>)
depending on if 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 is <code><font color="blue">const</font></code> (not <code><font color="blue">const</font></code>)

<br>
<br>
<big><a name="Iterators.end" id="Iterators.end">end</a></big>
<br>
is an iterator corresponding to just beyond the last element of the vector.
It is a <code><font color="blue">const_iterator</font></code> (<code><font color="blue">iterator</font></code>)
depending on if 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 is <code><font color="blue">const</font></code> (not <code><font color="blue">const</font></code>)

<br>
<br>
<big><a name="Iterators.operator[]" id="Iterators.operator[]">operator[]</a></big>
<br>
The syntax 
<code><i><font color="black"><span style='white-space: nowrap'>itr</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>

and 
<code><i><font color="black"><span style='white-space: nowrap'>citr</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 is extended
(from a normal random access iterator) to include the case where

<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i></code>
 is <code><font color="blue">size_t</font></code> object.

<br>
<br>
<big><a name="Iterators.Error Checking" id="Iterators.Error Checking">Error Checking</a></big>
<br>
Each element access (dereference of the iterator)
does an error check similar to the element access
<a href="cppad_vector.htm#Element Access.Error Checking" target="_top"><span style='white-space: nowrap'>error&nbsp;checking</span></a>
 above.
The error handler will also be called,
if <code><font color="blue">NDEBUG</font></code> is not defined and
a comparison operator (e.g. <code><font color="blue">&gt;</font></code>) is used between
two iterators that correspond to different vectors.

<br>
<br>
<b><big><a name="vectorBool" id="vectorBool">vectorBool</a></big></b>
<br>
The file <code><font color="blue">&lt;cppad/utility/vector_bool.hpp&gt;</font></code> defines the class
<code><font color="blue">CppAD::vectorBool</font></code>.
This has the same specifications as <code><font color="blue">CppAD::vector&lt;bool&gt;</font></code>
with the following exceptions:

<br>
<br>
<big><a name="vectorBool.Memory" id="vectorBool.Memory">Memory</a></big>
<br>
The class <code><font color="blue">vectorBool</font></code> conserves on memory,
on the other hand, <code><font color="blue">CppAD::vector&lt;bool&gt;</font></code> is expected to be faster
than <code><font color="blue">vectorBool</font></code>.

<br>
<br>
<big><a name="vectorBool.bit_per_unit" id="vectorBool.bit_per_unit">bit_per_unit</a></big>
<br>
The static function call

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>size</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;vectorBool::bit_per_unit()<br>
</span></font></code>
returns the <code><font color="blue">size_t</font></code> value 
<code><i><font color="black"><span style='white-space: nowrap'>s</span></font></i></code>

which is equal to the number of boolean values (bits) that are
packed into one operation unit.
Bits are accessed using a mask with the size of an operation unit.

<br>
<br>
<big><a name="vectorBool.data" id="vectorBool.data">data</a></big>
<br>
The <a href="cppad_vector.htm#data" target="_top"><span style='white-space: nowrap'>data</span></a>
 function is not supported by
<code><font color="blue">vectorBool</font></code>.

<br>
<br>
<big><a name="vectorBool.Iterators" id="vectorBool.Iterators">Iterators</a></big>
<br>
The <a href="cppad_vector.htm#Iterators" target="_top"><span style='white-space: nowrap'>Iterators</span></a>
 are not supported by
<code><font color="blue">vectorBool</font></code>.

<br>
<br>
<big><a name="vectorBool.Output" id="vectorBool.Output">Output</a></big>
<br>
The <code><font color="blue">CppAD::vectorBool</font></code> output operator
prints each boolean value as
a <code><font color="blue">0</font></code> for false,
a <code><font color="blue">1</font></code> for true,
and does not print any other output; i.e.,
the vector is written a long sequence of zeros and ones with no
surrounding <code><font color="blue">{</font></code>, <code><font color="blue">}</font></code> and with no separating commas or spaces.

<br>
<br>
<big><a name="vectorBool.Element Type" id="vectorBool.Element Type">Element Type</a></big>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>vec_bool</span></font></i></code>
 has type <code><font color="blue">vectorBool</font></code>
and 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i></code>
 has type <code><font color="blue">size_t</font></code>,
the element access value 
<code><i><font color="black"><span style='white-space: nowrap'>vec_bool</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 has an unspecified type,
referred to here as 
<code><i><font color="black"><span style='white-space: nowrap'>element_t</span></font></i></code>
, that supports the following
operations:

<ol type="1"><li>

<code><i><font color="black"><span style='white-space: nowrap'>element_t</span></font></i></code>
 can be converted to <code><font color="blue">bool</font></code>; e.g.
the following syntax is supported:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;static_cast&lt;bool&gt;(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec_bool</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;)<br>
</span></font></code>
</li><li>

<code><i><font color="black"><span style='white-space: nowrap'>element_t</span></font></i></code>
 supports the assignment operator <code><font color="blue">=</font></code> where the
right hand side is a <code><font color="blue">bool</font></code> or an 
<code><i><font color="black"><span style='white-space: nowrap'>element_t</span></font></i></code>
 object; e.g.,
if 
<code><i><font color="black"><span style='white-space: nowrap'>flag</span></font></i></code>
 has type <code><font color="blue">bool</font></code>, the following syntax is supported:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec_bool</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>flag</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
</li><li>
The result of an assignment to an 
<code><i><font color="black"><span style='white-space: nowrap'>element_t</span></font></i></code>

also has type 
<code><i><font color="black"><span style='white-space: nowrap'>element_t</span></font></i></code>
.
For example, if 
<code><i><font color="black"><span style='white-space: nowrap'>other_flag</span></font></i></code>
 has type <code><font color="blue">bool</font></code>,
the following syntax is supported:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>other_flag</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec_bool</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>flag</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
</li></ol>
<br>
<b><big><a name="Memory and Parallel Mode" id="Memory and Parallel Mode">Memory and Parallel Mode</a></big></b>
<br>
These vectors use the multi-threaded fast memory allocator
<a href="thread_alloc.htm" target="_top"><span style='white-space: nowrap'>thread_alloc</span></a>
:

<ol type="1"><li>
The <a href="ta_hold_memory.htm" target="_top"><span style='white-space: nowrap'>hold_memory</span></a>
 routine can be used
to make memory allocation faster.
</li><li>

The routine <a href="ta_parallel_setup.htm" target="_top"><span style='white-space: nowrap'>parallel_setup</span></a>
 must
be called before these vectors can be used
<a href="ta_in_parallel.htm" target="_top"><span style='white-space: nowrap'>in&nbsp;parallel</span></a>
.
</li><li>

Using these vectors affects the amount of memory
<a href="ta_inuse.htm" target="_top"><span style='white-space: nowrap'>in_use</span></a>
 and <a href="ta_available.htm" target="_top"><span style='white-space: nowrap'>available</span></a>
.
</li><li>

Calling <a href="cppad_vector.htm#clear" target="_top"><span style='white-space: nowrap'>clear</span></a>
,
makes the corresponding memory available (though <code><font color="blue">thread_alloc</font></code>)
to the current thread.
</li><li>

Available memory
can then be completely freed using <a href="ta_free_available.htm" target="_top"><span style='white-space: nowrap'>free_available</span></a>
.
</li></ol>


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
The files
<a href="cppad_vector.cpp.htm" target="_top"><span style='white-space: nowrap'>cppad_vector.cpp</span></a>
 and
<a href="vector_bool.cpp.htm" target="_top"><span style='white-space: nowrap'>vector_bool.cpp</span></a>
 each
contain an example and test of this template class.
They return true if they succeed and false otherwise.

<br>
<br>
<b><big><a name="Exercise" id="Exercise">Exercise</a></big></b>
<br>
Create and run a program that contains the following code:
<code><font color='blue'><pre style='display:inline'> 
    CppAD::vector&lt;double&gt; x(3);
    size_t i;
    for(i = 0; i &lt; 3; i++)
        x[i] = 4. - i;
    std::cout &lt;&lt; &quot;x = &quot; &lt;&lt; x &lt;&lt; std::endl;
</pre></font></code>

<hr>Input File: include/cppad/utility/omh/cppad_vector.omh

</body>
</html>
