<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Jacobian Sparsity Pattern: Reverse Mode</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Jacobian Sparsity Pattern: Reverse Mode">
<meta name="keywords" id="keywords" content=" jacobian sparsity pattern: reverse mode syntax purpose f x q transpose dependency r false true s setvector entire pattern example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_revsparsejac_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="for_sparse_jac.cpp.htm" target="_top">Prev</a>
</td><td><a href="rev_sparse_jac.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>sparsity_pattern</option>
<option>RevSparseJac</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_sparsity_pattern_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_revsparsejac_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>f</option>
<option>x</option>
<option>q</option>
<option>transpose</option>
<option>dependency</option>
<option>r</option>
<option>---..transpose false</option>
<option>---..transpose true</option>
<option>s</option>
<option>---..transpose false</option>
<option>---..transpose true</option>
<option>SetVector</option>
<option>Entire Sparsity Pattern</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Jacobian Sparsity Pattern: Reverse Mode</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>s</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.RevSparseJac(</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>r</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>s</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.RevSparseJac(</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>r</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>transpose</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dependency</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
We use <small>@(@
F : \B{R}^n \rightarrow \B{R}^m
@)@</small> to denote the
<a href="glossary.htm#AD Function" target="_top"><span style='white-space: nowrap'>AD&nbsp;function</span></a>
 corresponding to 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.
For a fixed matrix <small>@(@
R \in \B{R}^{q \times m}
@)@</small>,
the Jacobian of <small>@(@
R * F( x )
@)@</small>
with respect to <small>@(@
x
@)@</small> is
<small>@[@

    S(x) = R * F^{(1)} ( x )

@]@</small>
Given a
<a href="glossary.htm#Sparsity Pattern" target="_top"><span style='white-space: nowrap'>sparsity&nbsp;pattern</span></a>

for <small>@(@
R
@)@</small>,
<code><font color="blue">RevSparseJac</font></code> returns a sparsity pattern for the <small>@(@
S(x)
@)@</small>.

<br>
<br>
<b><big><a name="f" id="f">f</a></big></b>
<br>
The object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
If the operation sequence in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 is
<a href="glossary.htm#Operation.Independent" target="_top"><span style='white-space: nowrap'>independent</span></a>
 of
the independent variables in <small>@(@
x \in \B{R}^n
@)@</small>,
the sparsity pattern is valid for all values of
(even if it has <a href="condexp.htm" target="_top"><span style='white-space: nowrap'>CondExp</span></a>
 or <a href="vecad.htm" target="_top"><span style='white-space: nowrap'>VecAD</span></a>
 operations).

<br>
<br>
<b><big><a name="q" id="q">q</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the number of rows in
<small>@(@
R \in \B{R}^{q \times m}
@)@</small> and the
Jacobian <small>@(@
S(x) \in \B{R}^{q \times n}
@)@</small>.

<br>
<br>
<b><big><a name="transpose" id="transpose">transpose</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>transpose</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>transpose</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The default value <code><font color="blue">false</font></code> is used when 
<code><i><font color="black"><span style='white-space: nowrap'>transpose</span></font></i></code>
 is not present.

<br>
<br>
<b><big><a name="dependency" id="dependency">dependency</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>dependency</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dependency</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
If 
<code><i><font color="black"><span style='white-space: nowrap'>dependency</span></font></i></code>
 is true,
the <a href="dependency.cpp.htm#Dependency Pattern" target="_top"><span style='white-space: nowrap'>dependency&nbsp;pattern</span></a>

(instead of sparsity pattern) is computed.

<br>
<br>
<b><big><a name="r" id="r">r</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>s</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>SetVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>r</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
see <a href="revsparsejac.htm#SetVector" target="_top"><span style='white-space: nowrap'>SetVector</span></a>
 below.

<br>
<br>
<big><a name="r.transpose false" id="r.transpose false">transpose false</a></big>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>r</span></font></i></code>
 has elements of type <code><font color="blue">bool</font></code>,
its size is <small>@(@
q * m
@)@</small>.
If it has elements of type <code><font color="blue">std::set&lt;size_t&gt;</font></code>,
its size is 
<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i></code>
 and all its set elements are between
zero and <small>@(@
m - 1
@)@</small>.
It specifies a
<a href="glossary.htm#Sparsity Pattern" target="_top"><span style='white-space: nowrap'>sparsity&nbsp;pattern</span></a>

for the matrix <small>@(@
R \in \B{R}^{q \times m}
@)@</small>.

<br>
<br>
<big><a name="r.transpose true" id="r.transpose true">transpose true</a></big>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>r</span></font></i></code>
 has elements of type <code><font color="blue">bool</font></code>,
its size is <small>@(@
m * q
@)@</small>.
If it has elements of type <code><font color="blue">std::set&lt;size_t&gt;</font></code>,
its size is 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
 and all its set elements are between
zero and <small>@(@
q - 1
@)@</small>.
It specifies a
<a href="glossary.htm#Sparsity Pattern" target="_top"><span style='white-space: nowrap'>sparsity&nbsp;pattern</span></a>

for the matrix <small>@(@
R^\R{T} \in \B{R}^{m \times q}
@)@</small>.

<br>
<br>
<b><big><a name="s" id="s">s</a></big></b>
<br>
The return value 
<code><i><font color="black"><span style='white-space: nowrap'>s</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>SetVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
see <a href="revsparsejac.htm#SetVector" target="_top"><span style='white-space: nowrap'>SetVector</span></a>
 below.

<br>
<br>
<big><a name="s.transpose false" id="s.transpose false">transpose false</a></big>
<br>
If it has elements of type <code><font color="blue">bool</font></code>,
its size is <small>@(@
q * n
@)@</small>.
If it has elements of type <code><font color="blue">std::set&lt;size_t&gt;</font></code>,
its size is 
<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i></code>
 and all its set elements are between
zero and <small>@(@
n - 1
@)@</small>.
It specifies a
<a href="glossary.htm#Sparsity Pattern" target="_top"><span style='white-space: nowrap'>sparsity&nbsp;pattern</span></a>

for the matrix <small>@(@
S(x) \in {q \times n}
@)@</small>.

<br>
<br>
<big><a name="s.transpose true" id="s.transpose true">transpose true</a></big>
<br>
If it has elements of type <code><font color="blue">bool</font></code>,
its size is <small>@(@
n * q
@)@</small>.
If it has elements of type <code><font color="blue">std::set&lt;size_t&gt;</font></code>,
its size is 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 and all its set elements are between
zero and <small>@(@
q - 1
@)@</small>.
It specifies a
<a href="glossary.htm#Sparsity Pattern" target="_top"><span style='white-space: nowrap'>sparsity&nbsp;pattern</span></a>

for the matrix <small>@(@
S(x)^\R{T} \in {n \times q}
@)@</small>.

<br>
<br>
<b><big><a name="SetVector" id="SetVector">SetVector</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>SetVector</span></font></i></code>
 must be a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with
<a href="simplevector.htm#Elements of Specified Type" target="_top"><span style='white-space: nowrap'>elements&nbsp;of&nbsp;type</span></a>

<code><font color="blue">bool</font></code> or <code><font color="blue">std::set&lt;size_t&gt;</font></code>;
see <a href="glossary.htm#Sparsity Pattern" target="_top"><span style='white-space: nowrap'>sparsity&nbsp;pattern</span></a>
 for a discussion
of the difference.

<br>
<br>
<b><big><a name="Entire Sparsity Pattern" id="Entire Sparsity Pattern">Entire Sparsity Pattern</a></big></b>
<br>
Suppose that <small>@(@
q = m
@)@</small> and
<small>@(@
R
@)@</small> is the <small>@(@
m \times m
@)@</small> identity matrix.
In this case,
the corresponding value for 
<code><i><font color="black"><span style='white-space: nowrap'>s</span></font></i></code>
 is a
sparsity pattern for the Jacobian <small>@(@
S(x) = F^{(1)} ( x )
@)@</small>.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
The file
<a href="rev_sparse_jac.cpp.htm" target="_top"><span style='white-space: nowrap'>rev_sparse_jac.cpp</span></a>

contains an example and test of this operation.


<hr>Input File: include/cppad/core/rev_sparse_jac.hpp

</body>
</html>
