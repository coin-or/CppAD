<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Extending to_string To Another Floating Point Type</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Extending to_string To Another Floating Point Type">
<meta name="keywords" id="keywords" content=" extending to_string to another floating point type base requirement cppad_to_string ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_base_to_string_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="base_limits.htm" target="_top">Prev</a>
</td><td><a href="base_hash.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>base_require</option>
<option>base_to_string</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_ad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_base_require_htm.js'></script>
</td>
<td>base_to_string</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Base Requirement</option>
<option>CPPAD_TO_STRING</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Extending to_string To Another Floating Point Type</big></big></b></center>
<br>
<b><big><a name="Base Requirement" id="Base Requirement">Base Requirement</a></big></b>
<br>
If the function <a href="to_string.htm" target="_top"><span style='white-space: nowrap'>to_string</span></a>
 is used by an
<a href="glossary.htm#AD Type Above Base" target="_top"><span style='white-space: nowrap'>AD&nbsp;type&nbsp;above&nbsp;Base</span></a>
,
A specialization for the template structure
<code><font color="blue">CppAD::to_string_struct</font></code> must be defined.

<br>
<br>
<b><big><a name="CPPAD_TO_STRING" id="CPPAD_TO_STRING">CPPAD_TO_STRING</a></big></b>
<br>
For most 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 types,
the following can be used to define the specialization:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;namespace&nbsp;CppAD&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CPPAD_TO_STRING(</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
</span></font></code>
Note that the <code><font color="blue">CPPAD_TO_STRING</font></code> macro assumes that the
<a href="base_limits.htm" target="_top"><span style='white-space: nowrap'>base_limits</span></a>
 and <a href="base_std_math.htm" target="_top"><span style='white-space: nowrap'>base_std_math</span></a>
 have already been defined
for this type.
This macro is defined as follows:
<pre><tt><b><font color="#000080"># define</font></b> <b><font color="#000000">CPPAD_TO_STRING</font></b><font color="#990000">(</font>Base<font color="#990000">)</font> <font color="#990000">\</font>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;&gt;</font> <b><font color="#0000FF">struct</font></b> <font color="#008080">to_string_struct</font><font color="#990000">&lt;</font>Base<font color="#990000">&gt;\</font>
<font color="#FF0000">{</font>   std<font color="#990000">::</font><font color="#008080">string</font> <b><font color="#0000FF">operator</font></b><font color="#990000">()(</font><b><font color="#0000FF">const</font></b> Base<font color="#990000">&amp;</font> value<font color="#990000">)</font> <font color="#990000">\</font>
    <font color="#FF0000">{</font>   std<font color="#990000">::</font><font color="#008080">stringstream</font> os<font color="#990000">;\</font>
        <font color="#009900">int</font> n_digits <font color="#990000">=</font> <font color="#993399">1</font> <font color="#990000">+</font> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font>Base<font color="#990000">&gt;::</font>digits10<font color="#990000">;</font> <font color="#990000">\</font>
        os <font color="#990000">&lt;&lt;</font> std<font color="#990000">::</font><b><font color="#000000">setprecision</font></b><font color="#990000">(</font>n_digits<font color="#990000">);\</font>
        os <font color="#990000">&lt;&lt;</font> value<font color="#990000">;\</font>
        <b><font color="#0000FF">return</font></b> os<font color="#990000">.</font><b><font color="#000000">str</font></b><font color="#990000">();\</font>
    <font color="#FF0000">}</font><font color="#990000">\</font>
<font color="#FF0000">}</font><font color="#990000">;</font></tt></pre>

<hr>Input File: include/cppad/core/base_to_string.hpp

</body>
</html>
