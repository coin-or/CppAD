<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Common Variables use by Multi-Threaded Newton Method</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Common Variables use by Multi-Threaded Newton Method">
<meta name="keywords" id="keywords" content=" common variables use multi-threaded newton method purpose source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_multi_newton_common_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="multi_newton.cpp.htm" target="_top">Prev</a>
</td><td><a href="multi_newton_setup.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>multi_newton.cpp</option>
<option>multi_newton_common</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_multi_thread_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_thread_test.cpp_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_multi_newton.cpp_htm.js'></script>
</td>
<td>multi_newton_common</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Common Variables use by Multi-Threaded Newton Method</big></big></b></center>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This source code defined the common
include files, defines, and variables that are used by the
multi-newton method.

<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/utility/time_test.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cmath&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cstring&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">"multi_newton.hpp"</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">"team_thread.hpp"</font>
<b><font color="#000080"># define</font></b> USE_THREAD_ALLOC_FOR_WORK_ALL <font color="#993399">1</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>thread_alloc<font color="#990000">;</font> <i><font color="#9A1900">// fast multi-threadeding memory allocator</font></i>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">;</font>       <i><font color="#9A1900">// uses thread_alloc</font></i>

    <i><font color="#9A1900">// number of threads, set by multi_newton_time.</font></i>
    <font color="#008080">size_t</font> num_threads_ <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>

    <i><font color="#9A1900">// function we are finding zeros of, set by multi_newton_time</font></i>
    <font color="#009900">void</font> <font color="#990000">(*</font>fun_<font color="#990000">)(</font><font color="#009900">double</font> x<font color="#990000">,</font> <font color="#009900">double</font><font color="#990000">&amp;</font> f<font color="#990000">,</font> <font color="#009900">double</font><font color="#990000">&amp;</font> df<font color="#990000">)</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>

    <i><font color="#9A1900">// convergence criteria, set by multi_newton_setup</font></i>
    <font color="#009900">double</font> epsilon_ <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>

    <i><font color="#9A1900">// maximum number of iterations, set by  multi_newton_setup</font></i>
    <font color="#008080">size_t</font> max_itr_ <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>

    <i><font color="#9A1900">// length for all sub-intervals</font></i>
    <font color="#009900">double</font> sub_length_ <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>

    <i><font color="#9A1900">// structure with information for one thread</font></i>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#0000FF">struct</font></b> <font color="#FF0000">{</font>
        <i><font color="#9A1900">// number of sub intervals (worker input)</font></i>
        <font color="#008080">size_t</font> num_sub<font color="#990000">;</font>
        <i><font color="#9A1900">// beginning of interval (worker input)</font></i>
        <font color="#009900">double</font> xlow<font color="#990000">;</font>
        <i><font color="#9A1900">// end of interval (worker input)</font></i>
        <font color="#009900">double</font> xup<font color="#990000">;</font>
        <i><font color="#9A1900">// vector of zero candidates (worker output)</font></i>
        <i><font color="#9A1900">// after call to multi_newton_setup:    x.size() == 0</font></i>
        <i><font color="#9A1900">// after call to multi_newton_work:     x.size() is number of zeros</font></i>
        <i><font color="#9A1900">// after call to multi_newton_takedown: x.size() == 0</font></i>
        <font color="#008080">vector&lt;double&gt;</font> x<font color="#990000">;</font>
        <i><font color="#9A1900">// false if an error occurs, true otherwise (worker output)</font></i>
        <font color="#009900">bool</font>   ok<font color="#990000">;</font>
    <font color="#FF0000">}</font> work_one_t<font color="#990000">;</font>
    <i><font color="#9A1900">// vector with information for all threads</font></i>
    <i><font color="#9A1900">// after call to multi_newton_setup:    work_all.size() == num_threads</font></i>
    <i><font color="#9A1900">// after call to multi_newton_takedown: work_all.size() == 0</font></i>
    <i><font color="#9A1900">// (use pointers instead of values to avoid false sharing)</font></i>
    <font color="#008080">vector&lt;work_one_t*&gt;</font> work_all_<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/multi_thread/multi_newton.cpp

</body>
</html>
