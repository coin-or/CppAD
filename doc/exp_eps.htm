<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>An Epsilon Accurate Exponential Approximation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="An Epsilon Accurate Exponential Approximation">
<meta name="keywords" id="keywords" content=" epsilon accurate exponential approximation syntax purpose mathematical function include x y type implementation test exercises ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_exp_eps_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="exp_2_cppad.htm" target="_top">Prev</a>
</td><td><a href="exp_eps.hpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Theory</option>
<option>Introduction</option>
<option>exp_eps</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_theory_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_introduction_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_exp_eps_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Mathematical Function</option>
<option>include</option>
<option>x</option>
<option>epsilon</option>
<option>y</option>
<option>Type</option>
<option>Implementation</option>
<option>Test</option>
<option>Exercises</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>An Epsilon Accurate Exponential Approximation</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>#&nbsp;include&nbsp;&quot;exp_eps.hpp&quot;</span></font></code>

<code><span style='white-space: nowrap'><br>
</span></code>
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;exp_eps(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>



<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This is a an example algorithm that is used to demonstrate
how Algorithmic Differentiation works with loops and
boolean decision variables
(see <a href="exp_2.htm" target="_top"><span style='white-space: nowrap'>exp_2</span></a>
 for a simpler example).

<br>
<br>
<b><big><a name="Mathematical Function" id="Mathematical Function">Mathematical Function</a></big></b>
<br>
The exponential function can be defined by
<small>@[@

    \exp (x) = 1 + x^1 / 1 ! + x^2 / 2 ! + \cdots

@]@</small>
We define <small>@(@
k ( x, \varepsilon )
@)@</small> as the smallest
non-negative integer such that <small>@(@
\varepsilon \geq x^k / k !
@)@</small>; i.e.,
<small>@[@

k( x, \varepsilon ) =
    \min \{ k \in {\rm Z}_+ \; | \; \varepsilon \geq x^k / k ! \}

@]@</small>
The mathematical form for our approximation of the exponential function is
<small>@[@

\begin{array}{rcl}
{\rm exp\_eps} (x , \varepsilon ) & = & \left\{
\begin{array}{ll}
\frac{1}{ {\rm exp\_eps} (-x , \varepsilon ) }
    & {\rm if} \; x < 0
\\
1 + x^1 / 1 ! + \cdots + x^{k( x, \varepsilon)} / k( x, \varepsilon ) !
    & {\rm otherwise}
\end{array}
\right.
\end{array}

@]@</small>


<br>
<br>
<b><big><a name="include" id="include">include</a></big></b>
<br>
The include command in the syntax is relative to

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;cppad-</span></font><i><font color="black"><span style='white-space: nowrap'>yyyymmdd</span></font></i><font color="blue"><span style='white-space: nowrap'>/introduction/exp_apx<br>
</span></font></code>
where 
<code><font color="blue"><span style='white-space: nowrap'>cppad-</span></font><i><font color="black"><span style='white-space: nowrap'>yyyymmdd</span></font></i></code>
 is the distribution directory
created during the beginning steps of the
<a href="install.htm" target="_top"><span style='white-space: nowrap'>installation</span></a>
 of CppAD.


<br>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Type</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
(see 
<code><i><font color="black"><span style='white-space: nowrap'>Type</span></font></i></code>
 below).
It specifies the point at which to evaluate the
approximation for the exponential function.

<br>
<br>
<b><big><a name="epsilon" id="epsilon">epsilon</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Type</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the accuracy with which
to approximate the exponential function value; i.e.,
it is the value of <small>@(@
\varepsilon
@)@</small> in the
exponential function approximation defined above.

<br>
<br>
<b><big><a name="y" id="y">y</a></big></b>
<br>
The result 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Type</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is the value of the exponential function
approximation defined above.

<br>
<br>
<b><big><a name="Type" id="Type">Type</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>u</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>v</span></font></i></code>
 are 
<code><i><font color="black"><span style='white-space: nowrap'>Type</span></font></i></code>
 objects and 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i></code>

is an <code><font color="blue">int</font></code>:

<table><tr><td align='left'  valign='top'>

<b>Operation</b>  </td><td align='left'  valign='top'>
 <b>Result Type</b> </td><td align='left'  valign='top'>
 <b>Description</b>
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>Type</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>

    </td><td align='left'  valign='top'>
 
<code><i><font color="black"><span style='white-space: nowrap'>Type</span></font></i></code>

    </td><td align='left'  valign='top'>
 object with value equal to 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i></code>

</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>Type&nbsp;u&nbsp;</span></font></i><font color="blue"><span style='white-space: nowrap'>=</span></font><i><font color="black"><span style='white-space: nowrap'>&nbsp;v</span></font></i></code>

    </td><td align='left'  valign='top'>
 
<code><i><font color="black"><span style='white-space: nowrap'>Type</span></font></i></code>

    </td><td align='left'  valign='top'>
 construct 
<code><i><font color="black"><span style='white-space: nowrap'>u</span></font></i></code>
 with value equal to 
<code><i><font color="black"><span style='white-space: nowrap'>v</span></font></i></code>

</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>u</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>v</span></font></i></code>

    </td><td align='left'  valign='top'>
 <code><font color="blue">bool</font></code>
    </td><td align='left'  valign='top'>
 true,
    if 
<code><i><font color="black"><span style='white-space: nowrap'>u</span></font></i></code>
 greater than 
<code><i><font color="black"><span style='white-space: nowrap'>v</span></font></i></code>
, an false otherwise
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>u</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>v</span></font></i></code>

    </td><td align='left'  valign='top'>
 
<code><i><font color="black"><span style='white-space: nowrap'>Type</span></font></i></code>

    </td><td align='left'  valign='top'>
 new 
<code><i><font color="black"><span style='white-space: nowrap'>u</span></font></i></code>
 (and result) is value of 
<code><i><font color="black"><span style='white-space: nowrap'>v</span></font></i></code>

</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>u</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>v</span></font></i></code>

    </td><td align='left'  valign='top'>
 
<code><i><font color="black"><span style='white-space: nowrap'>Type</span></font></i></code>

    </td><td align='left'  valign='top'>
 result is value of <small>@(@
u * v
@)@</small>
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>u</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;/&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>v</span></font></i></code>

    </td><td align='left'  valign='top'>
 
<code><i><font color="black"><span style='white-space: nowrap'>Type</span></font></i></code>

    </td><td align='left'  valign='top'>
 result is value of <small>@(@
u / v
@)@</small>
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>u</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>v</span></font></i></code>

    </td><td align='left'  valign='top'>
 
<code><i><font color="black"><span style='white-space: nowrap'>Type</span></font></i></code>

    </td><td align='left'  valign='top'>
 result is value of <small>@(@
u + v
@)@</small>
</td></tr><tr><td align='left'  valign='top'>


<code><font color="blue"><span style='white-space: nowrap'>-</span></font><i><font color="black"><span style='white-space: nowrap'>u</span></font></i></code>

    </td><td align='left'  valign='top'>
 
<code><i><font color="black"><span style='white-space: nowrap'>Type</span></font></i></code>

    </td><td align='left'  valign='top'>
 result is value of <small>@(@
- u
@)@</small>
</td></tr>
</table>
<br>
<b><big><a name="Implementation" id="Implementation">Implementation</a></big></b>
<br>
The file <a href="exp_eps.hpp.htm" target="_top"><span style='white-space: nowrap'>exp_eps.hpp</span></a>

contains a C++ implementation of this function.

<br>
<br>
<b><big><a name="Test" id="Test">Test</a></big></b>
<br>
The file <a href="exp_eps.cpp.htm" target="_top"><span style='white-space: nowrap'>exp_eps.cpp</span></a>

contains a test of this implementation.

<br>
<br>
<b><big><a name="Exercises" id="Exercises">Exercises</a></big></b>

<ol type="1"><li>
Using the definition of <small>@(@
k( x, \varepsilon )
@)@</small> above,
what is the value of
<small>@(@
k(.5, 1)
@)@</small>, <small>@(@
k(.5, .1)
@)@</small>, and <small>@(@
k(.5, .01)
@)@</small> ?
</li><li>

Suppose that we make the following call to <code><font color="blue">exp_eps</font></code>:
<code><font color='blue'><pre style='display:inline'> 
    double x       = 1.;
    double epsilon = .01;
    double y = exp_eps(x, epsilon);
</pre></font></code>
What is the value assigned to
<code><font color="blue">k</font></code>, <code><font color="blue">temp</font></code>, <code><font color="blue">term</font></code>, and <code><font color="blue">sum</font></code>
the first time through the <code><font color="blue">while</font></code> loop in <a href="exp_eps.hpp.htm" target="_top"><span style='white-space: nowrap'>exp_eps.hpp</span></a>
 ?
</li><li>

Continuing the previous exercise,
what is the value assigned to
<code><font color="blue">k</font></code>, <code><font color="blue">temp</font></code>, <code><font color="blue">term</font></code>, and <code><font color="blue">sum</font></code>
the second time through the <code><font color="blue">while</font></code> loop in <a href="exp_eps.hpp.htm" target="_top"><span style='white-space: nowrap'>exp_eps.hpp</span></a>
 ?
</li></ol>




<hr>Input File: introduction/exp_eps.hpp

</body>
</html>
