<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Base Type Requirements for Ordered Comparisons</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Base Type Requirements for Ordered Comparisons">
<meta name="keywords" id="keywords" content=" base type requirements ordered comparisons purpose not special independent optimize printfor ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_base_ordered_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="base_identical.htm" target="_top">Prev</a>
</td><td><a href="base_std_math.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>base_require</option>
<option>base_ordered</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_ad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_base_require_htm.js'></script>
</td>
<td>base_ordered</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Ordered Type</option>
<option>Not Ordered</option>
<option>Special Requirements</option>
<option>---..Independent</option>
<option>---..Optimize</option>
<option>---..PrintFor</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@



<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Base Type Requirements for Ordered Comparisons</big></big></b></center>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
The following operations
(in the CppAD namespace) are required to use the type

<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
:

<table><tr><td align='left'  valign='top'>

<b>Syntax</b> </td><td align='left'  valign='top'>
 <b>Result</b>
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>b</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;GreaterThanZero(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
   <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>
    </td><td align='left'  valign='top'>
 <small>@(@
x > 0
@)@</small>
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>b</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;GreaterThanOrZero(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>
    </td><td align='left'  valign='top'>
 <small>@(@
x \geq 0
@)@</small>
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>b</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;LessThanZero(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
      <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>
    </td><td align='left'  valign='top'>
 <small>@(@
x < 0
@)@</small>
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>b</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;LessThanOrZero(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
    <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>
    </td><td align='left'  valign='top'>
 <small>@(@
x \leq 0
@)@</small>
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>b</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;abs_geq(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
      <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>
    </td><td align='left'  valign='top'>
 <small>@(@
|x| \geq |y|
@)@</small>.
</td></tr>
</table>
where the arguments and return value have the prototypes

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;&nbsp;</span></font><i><font color="black"></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>b</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="Ordered Type" id="Ordered Type">Ordered Type</a></big></b>
<br>
If the type 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 supports ordered operations,
these functions should have their corresponding definitions.
For example,

<code><font color="blue"><span style='white-space: nowrap'><br>
namespace&nbsp;CppAD&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;inline&nbsp;bool&nbsp;GreaterThanZero(const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;x)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;return&nbsp;(x&nbsp;&gt;&nbsp;0);<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
}<br>
</span></font></code>
The other functions would replace <code><font color="blue">&gt;</font></code> by the corresponding operator.
For example, see
<a href="base_alloc.hpp.htm#Ordered" target="_top"><span style='white-space: nowrap'>base_alloc</span></a>
.


<br>
<br>
<b><big><a name="Not Ordered" id="Not Ordered">Not Ordered</a></big></b>
<br>
If the type 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 does not support ordering,
one might (but need not) define <code><font color="blue">GreaterThanZero</font></code> as follows:

<code><font color="blue"><span style='white-space: nowrap'><br>
namespace&nbsp;CppAD&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;inline&nbsp;bool&nbsp;GreaterThanZero(const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;x)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;//&nbsp;attempt&nbsp;to&nbsp;use&nbsp;GreaterThanZero&nbsp;with&nbsp;a&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;argument<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assert(0);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;}<br>
}<br>
</span></font></code>
The other functions would have the corresponding definition.
For example, see
<a href="base_complex.hpp.htm#Ordered" target="_top"><span style='white-space: nowrap'>complex&nbsp;Ordered</span></a>
.

<br>
<br>
<b><big><a name="Special Requirements" id="Special Requirements">Special Requirements</a></big></b>
<br>
The following are special requirements when
there is no ordered comparison for the base type:

<br>
<br>
<big><a name="Special Requirements.Independent" id="Special Requirements.Independent">Independent</a></big>

<br>
<a href="independent.htm#record_compare" target="_top"><span style='white-space: nowrap'>record_compare</span></a>
 must be false
in the call to <code><font color="blue">Independent</font></code>.

<br>
<br>
<big><a name="Special Requirements.Optimize" id="Special Requirements.Optimize">Optimize</a></big>
<br>
The <a href="optimize.htm#options.no_conditional_skip" target="_top"><span style='white-space: nowrap'>no_conditional_skip</span></a>

option must be present when <code><font color="blue">optimize</font></code> is used.

<br>
<br>
<big><a name="Special Requirements.PrintFor" id="Special Requirements.PrintFor">PrintFor</a></big>
<br>
The <a href="printfor.htm" target="_top"><span style='white-space: nowrap'>PrintFor</span></a>
 operator cannot be used.


<hr>Input File: omh/base_require/base_ordered.omh

</body>
</html>
