<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Cppad Speed: Sparse Jacobian</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Cppad Speed: Sparse Jacobian">
<meta name="keywords" id="keywords" content=" cppad speed: sparse jacobian specifications implementation ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_cppad_sparse_jacobian.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="cppad_sparse_hessian.cpp.htm" target="_top">Prev</a>
</td><td><a href="speed_fadbad.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_cppad</option>
<option>cppad_sparse_jacobian.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_speed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_speed_cppad_htm.js'></script>
</td>
<td>cppad_sparse_jacobian.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Specifications</option>
<option>Implementation</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Cppad Speed: Sparse Jacobian</big></big></b></center>
<br>
<b><big><a name="Specifications" id="Specifications">Specifications</a></big></b>
<br>
See <a href="link_sparse_jacobian.htm" target="_top"><span style='white-space: nowrap'>link_sparse_jacobian</span></a>
.

<br>
<br>
<b><big><a name="Implementation" id="Implementation">Implementation</a></big></b>


<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/speed/uniform_01.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/speed/sparse_jac_fun.hpp&gt;</font>

<i><font color="#9A1900">// Note that CppAD uses global_option["memory"] at the main program level</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;map&gt;</font>
<b><font color="#0000FF">extern</font></b> std<font color="#990000">::</font><font color="#008080">map&lt;std::string, bool&gt;</font> global_option<font color="#990000">;</font>
<i><font color="#9A1900">// see comments in main program for this external</font></i>
<b><font color="#0000FF">extern</font></b> <font color="#008080">size_t</font> global_cppad_thread_alloc_inuse<font color="#990000">;</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;double&gt;</font>                     a_double<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <font color="#008080">vector&lt;size_t&gt;</font>                        s_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <font color="#008080">vector&lt;bool&gt;</font>                          b_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <font color="#008080">vector&lt;double&gt;</font>                        d_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <font color="#008080">vector&lt;a_double&gt;</font>                      a_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">sparse_rc&lt;s_vector&gt;</font>            sparsity<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">sparse_rcv&lt;s_vector, d_vector&gt;</font> sparse_matrix<font color="#990000">;</font>


    <font color="#009900">void</font> <b><font color="#000000">calc_sparsity</font></b><font color="#990000">(</font>
        CppAD<font color="#990000">::</font>sparse_rc<font color="#990000">&lt;</font>s_vector<font color="#990000">&gt;&amp;</font> pattern <font color="#990000">,</font>
        CppAD<font color="#990000">::</font>ADFun<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>       f        <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#009900">bool</font> reverse       <font color="#990000">=</font> global_option<font color="#990000">[</font><font color="#FF0000">"revsparsity"</font><font color="#990000">];</font>
        <font color="#009900">bool</font> transpose     <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
        <font color="#009900">bool</font> internal_bool <font color="#990000">=</font> global_option<font color="#990000">[</font><font color="#FF0000">"boolsparsity"</font><font color="#990000">];</font>
        <font color="#009900">bool</font> dependency    <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
        <font color="#009900">bool</font> subgraph      <font color="#990000">=</font> global_option<font color="#990000">[</font><font color="#FF0000">"subsparsity"</font><font color="#990000">];</font>
        <font color="#008080">size_t</font> n <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Domain</font></b><font color="#990000">();</font>
        <font color="#008080">size_t</font> m <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Range</font></b><font color="#990000">();</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> subgraph <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <font color="#008080">b_vector</font> <b><font color="#000000">select_domain</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">select_range</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
                select_domain<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
                select_range<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
            f<font color="#990000">.</font><b><font color="#000000">subgraph_sparsity</font></b><font color="#990000">(</font>
                select_domain<font color="#990000">,</font> select_range<font color="#990000">,</font> transpose<font color="#990000">,</font> pattern
            <font color="#990000">);</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">else</font></b>
        <font color="#FF0000">{</font>   <font color="#008080">size_t</font> q <font color="#990000">=</font> n<font color="#990000">;</font>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> reverse <font color="#990000">)</font>
                q <font color="#990000">=</font> m<font color="#990000">;</font>
            <i><font color="#9A1900">//</font></i>
            CppAD<font color="#990000">::</font><font color="#008080">sparse_rc&lt;s_vector&gt;</font> identity<font color="#990000">;</font>
            identity<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font>q<font color="#990000">,</font> q<font color="#990000">,</font> q<font color="#990000">);</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> q<font color="#990000">;</font> k<font color="#990000">++)</font>
                identity<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>k<font color="#990000">,</font> k<font color="#990000">,</font> k<font color="#990000">);</font>
            <i><font color="#9A1900">//</font></i>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> reverse <font color="#990000">)</font>
            <font color="#FF0000">{</font>   f<font color="#990000">.</font><b><font color="#000000">rev_jac_sparsity</font></b><font color="#990000">(</font>
                    identity<font color="#990000">,</font> transpose<font color="#990000">,</font> dependency<font color="#990000">,</font> internal_bool<font color="#990000">,</font> pattern
                <font color="#990000">);</font>
            <font color="#FF0000">}</font>
            <b><font color="#0000FF">else</font></b>
            <font color="#FF0000">{</font>   f<font color="#990000">.</font><b><font color="#000000">for_jac_sparsity</font></b><font color="#990000">(</font>
                    identity<font color="#990000">,</font> transpose<font color="#990000">,</font> dependency<font color="#990000">,</font> internal_bool<font color="#990000">,</font> pattern
                <font color="#990000">);</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// --------------------------------------------------------------------</font></i>
    <font color="#009900">void</font> <b><font color="#000000">setup</font></b><font color="#990000">(</font>
        <i><font color="#9A1900">// inputs</font></i>
        <font color="#008080">size_t</font>                  size    <font color="#990000">,</font>
        <font color="#008080">size_t</font>                  m       <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> s_vector<font color="#990000">&amp;</font>         row     <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> s_vector<font color="#990000">&amp;</font>         col     <font color="#990000">,</font>
        <i><font color="#9A1900">// outputs</font></i>
        size_t<font color="#990000">&amp;</font>                 n_color <font color="#990000">,</font>
        CppAD<font color="#990000">::</font>ADFun<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>   f       <font color="#990000">,</font>
        sparse_matrix<font color="#990000">&amp;</font>          subset  <font color="#990000">,</font>
        CppAD<font color="#990000">::</font>sparse_jac_work<font color="#990000">&amp;</font> work    <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// optimization options</font></i>
        std<font color="#990000">::</font><font color="#008080">string</font> optimize_options <font color="#990000">=</font>
            <font color="#FF0000">"no_conditional_skip no_compare_op no_print_for_op"</font><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// default value for n_color</font></i>
        n_color <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// independent variable vector</font></i>
        <font color="#008080">size_t</font> nc <font color="#990000">=</font> size<font color="#990000">;</font>
        <font color="#008080">a_vector</font> <b><font color="#000000">a_x</font></b><font color="#990000">(</font>nc<font color="#990000">);</font>
        <font color="#008080">d_vector</font> <b><font color="#000000">x</font></b><font color="#990000">(</font>nc<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// dependent variable vector</font></i>
        <font color="#008080">size_t</font> nr <font color="#990000">=</font> m<font color="#990000">;</font>
        <font color="#008080">a_vector</font> <b><font color="#000000">a_y</font></b><font color="#990000">(</font>nr<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// choose a value for independent variable vector</font></i>
        CppAD<font color="#990000">::</font><b><font color="#000000">uniform_01</font></b><font color="#990000">(</font>nc<font color="#990000">,</font> x<font color="#990000">);</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nc<font color="#990000">;</font> j<font color="#990000">++)</font>
            a_x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font>j<font color="#990000">];</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// declare independent variables</font></i>
        <font color="#008080">size_t</font> abort_op_index <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <font color="#009900">bool</font> record_compare   <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
        CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>a_x<font color="#990000">,</font> abort_op_index<font color="#990000">,</font> record_compare<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// AD computation of f(x)</font></i>
        <font color="#008080">size_t</font> order <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        CppAD<font color="#990000">::</font>sparse_jac_fun<font color="#990000">&lt;</font>a_double<font color="#990000">&gt;(</font>nr<font color="#990000">,</font> nc<font color="#990000">,</font> a_x<font color="#990000">,</font> row<font color="#990000">,</font> col<font color="#990000">,</font> order<font color="#990000">,</font> a_y<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// create function object f : x -&gt; y</font></i>
        f<font color="#990000">.</font><b><font color="#000000">Dependent</font></b><font color="#990000">(</font>a_x<font color="#990000">,</font> a_y<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> global_option<font color="#990000">[</font><font color="#FF0000">"optimize"</font><font color="#990000">]</font> <font color="#990000">)</font>
            f<font color="#990000">.</font><b><font color="#000000">optimize</font></b><font color="#990000">(</font>optimize_options<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// coloring method</font></i>
        std<font color="#990000">::</font><font color="#008080">string</font> coloring <font color="#990000">=</font> <font color="#FF0000">"cppad"</font><font color="#990000">;</font>
<b><font color="#000080"># if</font></b> CPPAD_HAS_COLPACK
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> global_option<font color="#990000">[</font><font color="#FF0000">"colpack"</font><font color="#990000">]</font> <font color="#990000">)</font>
            coloring <font color="#990000">=</font> <font color="#FF0000">"colpack"</font><font color="#990000">;</font>
<b><font color="#000080"># else</font></b>
        <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> <font color="#990000">!</font> global_option<font color="#990000">[</font><font color="#FF0000">"colpack"</font><font color="#990000">]</font> <font color="#990000">);</font>
<b><font color="#000080"># endif</font></b>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// sparsity pattern for subset of Jacobian that is evaluated</font></i>
        <font color="#008080">size_t</font> nnz <font color="#990000">=</font> row<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
        <font color="#008080">sparsity</font> <b><font color="#000000">subset_pattern</font></b><font color="#990000">(</font>nr<font color="#990000">,</font> nc<font color="#990000">,</font> nnz<font color="#990000">);</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> nnz<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font>
            subset_pattern<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>k<font color="#990000">,</font> row<font color="#990000">[</font>k<font color="#990000">],</font> col<font color="#990000">[</font>k<font color="#990000">]);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// sparse matrix for subset of Jacobian that is evaluated</font></i>
        subset <font color="#990000">=</font> <b><font color="#000000">sparse_matrix</font></b><font color="#990000">(</font> subset_pattern <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// maximum number of colors at once</font></i>
        <font color="#008080">size_t</font> group_max <font color="#990000">=</font> <font color="#993399">25</font><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> global_option<font color="#990000">[</font><font color="#FF0000">"subgraph"</font><font color="#990000">]</font> <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// This would cache some information in f,  but would it enough ?</font></i>
            <i><font color="#9A1900">// The time it takes to compute derivatives that are not used</font></i>
            <i><font color="#9A1900">// slows down the test when onetape is false.</font></i>
            <i><font color="#9A1900">// f.subgraph_jac_rev(x, ac_subset);</font></i>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">else</font></b>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// need full sparsity pattern</font></i>
            <i><font color="#9A1900">// (could use subset_sparsity, but pretend we do not konw that)</font></i>
            <font color="#008080">sparsity</font> pattern<font color="#990000">;</font>
            <b><font color="#000000">calc_sparsity</font></b><font color="#990000">(</font>pattern<font color="#990000">,</font> f<font color="#990000">);</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// Use forward mode to compute the Jacobian</font></i>
            <i><font color="#9A1900">// (this caches informaiton in work),</font></i>
            work<font color="#990000">.</font><b><font color="#000000">clear</font></b><font color="#990000">();</font>
            n_color <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">sparse_jac_for</font></b><font color="#990000">(</font>
                group_max<font color="#990000">,</font> x<font color="#990000">,</font> subset<font color="#990000">,</font> pattern<font color="#990000">,</font> coloring<font color="#990000">,</font> work
            <font color="#990000">);</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">link_sparse_jacobian</font></b><font color="#990000">(</font>
    <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font>               job      <font color="#990000">,</font>
    <font color="#008080">size_t</font>                           size     <font color="#990000">,</font>
    <font color="#008080">size_t</font>                           repeat   <font color="#990000">,</font>
    <font color="#008080">size_t</font>                           m        <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font>     row      <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font>     col      <font color="#990000">,</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>     x        <font color="#990000">,</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>     jacobian <font color="#990000">,</font>
          size_t<font color="#990000">&amp;</font>                    n_color  <font color="#990000">)</font>
<font color="#FF0000">{</font>   global_cppad_thread_alloc_inuse <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>

    <i><font color="#9A1900">// --------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// check global options</font></i>
    <b><font color="#0000FF">const</font></b> <font color="#009900">char</font><font color="#990000">*</font> valid<font color="#990000">[]</font> <font color="#990000">=</font> <font color="#FF0000">{</font>
        <font color="#FF0000">"memory"</font><font color="#990000">,</font> <font color="#FF0000">"onetape"</font><font color="#990000">,</font> <font color="#FF0000">"optimize"</font><font color="#990000">,</font> <font color="#FF0000">"subgraph"</font><font color="#990000">,</font>
        <font color="#FF0000">"boolsparsity"</font><font color="#990000">,</font> <font color="#FF0000">"revsparsity"</font><font color="#990000">,</font> <font color="#FF0000">"subsparsity"</font>
<b><font color="#000080"># if</font></b> CPPAD_HAS_COLPACK
        <font color="#990000">,</font> <font color="#FF0000">"colpack"</font>
<b><font color="#000080"># endif</font></b>
    <font color="#FF0000">}</font><font color="#990000">;</font>
    <font color="#008080">size_t</font> n_valid <font color="#990000">=</font> <b><font color="#0000FF">sizeof</font></b><font color="#990000">(</font>valid<font color="#990000">)</font> <font color="#990000">/</font> <b><font color="#0000FF">sizeof</font></b><font color="#990000">(</font>valid<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]);</font>
    <b><font color="#0000FF">typedef</font></b> std<font color="#990000">::</font>map<font color="#990000">&lt;</font>std<font color="#990000">::</font>string<font color="#990000">,</font> <font color="#009900">bool</font><font color="#990000">&gt;::</font><font color="#008080">iterator</font> iterator<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">iterator</font> itr<font color="#990000">=</font>global_option<font color="#990000">.</font><b><font color="#000000">begin</font></b><font color="#990000">();</font> itr<font color="#990000">!=</font>global_option<font color="#990000">.</font><b><font color="#000000">end</font></b><font color="#990000">();</font> <font color="#990000">++</font>itr<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">if</font></b><font color="#990000">(</font> itr<font color="#990000">-&gt;</font>second <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_valid<font color="#990000">;</font> i<font color="#990000">++)</font>
                ok <font color="#990000">|=</font> itr<font color="#990000">-&gt;</font>first <font color="#990000">==</font> valid<font color="#990000">[</font>i<font color="#990000">];</font>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> ok <font color="#990000">)</font>
                <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> global_option<font color="#990000">[</font><font color="#FF0000">"subsparsity"</font><font color="#990000">]</font> <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">if</font></b><font color="#990000">(</font> global_option<font color="#990000">[</font><font color="#FF0000">"boolsparisty"</font><font color="#990000">]</font>
        <font color="#990000">||</font>  global_option<font color="#990000">[</font><font color="#FF0000">"revsparsity"</font><font color="#990000">]</font>
        <font color="#990000">||</font>  global_option<font color="#990000">[</font><font color="#FF0000">"colpack"</font><font color="#990000">]</font>  <font color="#990000">)</font>
            <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// -----------------------------------------------------</font></i>
    <i><font color="#9A1900">// size corresponding to static_f</font></i>
    <b><font color="#0000FF">static</font></b> <font color="#008080">size_t</font> static_size <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// function object corresponding to f(x)</font></i>
    <b><font color="#0000FF">static</font></b> CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> static_f<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// subset of Jacobian that we are using</font></i>
    <b><font color="#0000FF">static</font></b> <font color="#008080">sparse_matrix</font> static_subset<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// information used by for_sparse_jac_for</font></i>
    <b><font color="#0000FF">static</font></b> CppAD<font color="#990000">::</font><font color="#008080">sparse_jac_work</font> static_work<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// sparsity pattern not used because work is non-empty</font></i>
    <font color="#008080">sparsity</font> empty_pattern<font color="#990000">;</font>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// default value for n_color</font></i>
    n_color <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <font color="#009900">bool</font> onetape <font color="#990000">=</font> global_option<font color="#990000">[</font><font color="#FF0000">"onetape"</font><font color="#990000">];</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> job <font color="#990000">==</font> <font color="#FF0000">"setup"</font> <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">if</font></b><font color="#990000">(</font> onetape <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#000000">setup</font></b><font color="#990000">(</font>size<font color="#990000">,</font> m<font color="#990000">,</font> row<font color="#990000">,</font> col<font color="#990000">,</font>
                n_color<font color="#990000">,</font> static_f<font color="#990000">,</font> static_subset<font color="#990000">,</font> static_work
            <font color="#990000">);</font>
            static_size <font color="#990000">=</font> size<font color="#990000">;</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">else</font></b>
        <font color="#FF0000">{</font>   static_size <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> job <font color="#990000">==</font> <font color="#FF0000">"teardown"</font> <font color="#990000">)</font>
    <font color="#FF0000">{</font>   static_f      <font color="#990000">=</font> CppAD<font color="#990000">::</font>ADFun<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;();</font>
        <font color="#008080">sparse_matrix</font> empty_matrix<font color="#990000">;</font>
        static_subset<font color="#990000">.</font><b><font color="#000000">swap</font></b><font color="#990000">(</font> empty_matrix <font color="#990000">);</font>
        static_work<font color="#990000">.</font><b><font color="#000000">clear</font></b><font color="#990000">();</font>
        static_size <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// ------------------------------------------------------------------------</font></i>
    <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> job <font color="#990000">==</font> <font color="#FF0000">"run"</font> <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// number of independent variables</font></i>
    <b><font color="#0000FF">static</font></b> <font color="#008080">size_t</font> n <font color="#990000">=</font> size<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// maximum number of colors at once</font></i>
    <font color="#008080">size_t</font> group_max <font color="#990000">=</font> <font color="#993399">25</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// coloring method</font></i>
    std<font color="#990000">::</font><font color="#008080">string</font> coloring <font color="#990000">=</font> <font color="#FF0000">"cppad"</font><font color="#990000">;</font>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> global_option<font color="#990000">[</font><font color="#FF0000">"colpack"</font><font color="#990000">]</font> <font color="#990000">)</font>
        coloring <font color="#990000">=</font> <font color="#FF0000">"colpack"</font><font color="#990000">;</font>
    <i><font color="#9A1900">// ------------------------------------------------------</font></i>
    <b><font color="#0000FF">while</font></b><font color="#990000">(</font>repeat<font color="#990000">--)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">if</font></b><font color="#990000">(</font> onetape <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">if</font></b><font color="#990000">(</font> size <font color="#990000">!=</font> static_size <font color="#990000">)</font>
                <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> size <font color="#990000">==</font> static_size <font color="#990000">);</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">else</font></b>
        <font color="#FF0000">{</font>   <b><font color="#000000">setup</font></b><font color="#990000">(</font>size<font color="#990000">,</font> m<font color="#990000">,</font> row<font color="#990000">,</font> col<font color="#990000">,</font>
                n_color<font color="#990000">,</font> static_f<font color="#990000">,</font> static_subset<font color="#990000">,</font> static_work
            <font color="#990000">);</font>
        <font color="#FF0000">}</font>
        <i><font color="#9A1900">// choose a value for x</font></i>
        CppAD<font color="#990000">::</font><b><font color="#000000">uniform_01</font></b><font color="#990000">(</font>n<font color="#990000">,</font> x<font color="#990000">);</font>

        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> global_option<font color="#990000">[</font><font color="#FF0000">"subgraph"</font><font color="#990000">]</font> <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// user reverse mode becasue forward not yet implemented</font></i>
            static_f<font color="#990000">.</font><b><font color="#000000">subgraph_jac_rev</font></b><font color="#990000">(</font>x<font color="#990000">,</font> static_subset<font color="#990000">);</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">else</font></b>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// Use forward mode because m &gt; n (is this sufficient reason ?)</font></i>
            n_color <font color="#990000">=</font> static_f<font color="#990000">.</font><b><font color="#000000">sparse_jac_for</font></b><font color="#990000">(</font>group_max<font color="#990000">,</font> x<font color="#990000">,</font>
                static_subset<font color="#990000">,</font> empty_pattern<font color="#990000">,</font> coloring<font color="#990000">,</font> static_work
            <font color="#990000">);</font>
        <font color="#FF0000">}</font>
        jacobian <font color="#990000">=</font> static_subset<font color="#990000">.</font><b><font color="#000000">val</font></b><font color="#990000">();</font>
    <font color="#FF0000">}</font>
    <font color="#008080">size_t</font> thread                   <font color="#990000">=</font> CppAD<font color="#990000">::</font>thread_alloc<font color="#990000">::</font><b><font color="#000000">thread_num</font></b><font color="#990000">();</font>
    global_cppad_thread_alloc_inuse <font color="#990000">=</font> CppAD<font color="#990000">::</font>thread_alloc<font color="#990000">::</font><b><font color="#000000">inuse</font></b><font color="#990000">(</font>thread<font color="#990000">);</font>
    <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: speed/cppad/sparse_jacobian.cpp

</body>
</html>
