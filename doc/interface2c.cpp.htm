<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Interfacing to C: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Interfacing to C: Example and Test">
<meta name="keywords" id="keywords" content=" interfacing to c: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_interface2c.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="hes_lu_det.cpp.htm" target="_top">Prev</a>
</td><td><a href="jac_minor_det.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>General</option>
<option>interface2c.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_example_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_general_htm.js'></script>
</td>
<td>interface2c.cpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Interfacing to C: Example and Test</big></big></b></center>
<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>  <i><font color="#9A1900">// CppAD utilities</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cassert&gt;</font>        <i><font color="#9A1900">// assert macro</font></i>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font> <i><font color="#9A1900">// Begin empty namespace</font></i>
<i><font color="#9A1900">/*</font></i>
<i><font color="#9A1900">Compute the value of a sum of Gaussians defined by a and evaluated at x</font></i>
<i><font color="#9A1900">    y = sum_{i=1}^n a[3*i] exp( (x - a[3*i+1])^2 / a[3*i+2])^2 )</font></i>
<i><font color="#9A1900">where the floating point type is a template parameter</font></i>
<i><font color="#9A1900">*/</font></i>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Float</font><font color="#990000">&gt;</font>
<font color="#008080">Float</font> <b><font color="#000000">sumGauss</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> <font color="#008080">Float</font> <font color="#990000">&amp;</font>x<font color="#990000">,</font> <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font><font color="#008080">vector&lt;Float&gt;</font> <font color="#990000">&amp;</font>a<font color="#990000">)</font>
<font color="#FF0000">{</font>
    <i><font color="#9A1900">// number of components in a</font></i>
    <font color="#008080">size_t</font> na <font color="#990000">=</font> a<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>

    <i><font color="#9A1900">// number of Gaussians</font></i>
    <font color="#008080">size_t</font> n <font color="#990000">=</font> na <font color="#990000">/</font> <font color="#993399">3</font><font color="#990000">;</font>

    <i><font color="#9A1900">// check the restricitons on na</font></i>
    <b><font color="#000000">assert</font></b><font color="#990000">(</font> na <font color="#990000">==</font> n <font color="#990000">*</font> <font color="#993399">3</font> <font color="#990000">);</font>

    <i><font color="#9A1900">// declare temporaries used inside of loop</font></i>
    <font color="#008080">Float</font> ex<font color="#990000">,</font> arg<font color="#990000">;</font>

    <i><font color="#9A1900">// initialize sum</font></i>
    <font color="#008080">Float</font> y <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>

    <i><font color="#9A1900">// loop with respect to Gaussians</font></i>
    <font color="#008080">size_t</font> i<font color="#990000">;</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">;</font> i<font color="#990000">++)</font>
    <font color="#FF0000">{</font>
        arg <font color="#990000">=</font>   <font color="#990000">(</font>x <font color="#990000">-</font> a<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">*</font>i<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">])</font> <font color="#990000">/</font> a<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">*</font>i<font color="#990000">+</font><font color="#993399">2</font><font color="#990000">];</font>
        ex  <font color="#990000">=</font>   <b><font color="#000000">exp</font></b><font color="#990000">(-</font>arg <font color="#990000">*</font> arg<font color="#990000">);</font>
        y  <font color="#990000">+=</font>   a<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">*</font>i<font color="#990000">]</font> <font color="#990000">*</font> ex<font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">return</font></b> y<font color="#990000">;</font>
<font color="#FF0000">}</font>
<i><font color="#9A1900">/*</font></i>
<i><font color="#9A1900">Create a C function interface that computes both</font></i>
<i><font color="#9A1900">    y = sum_{i=1}^n a[3*i] exp( (x - a[3*i+1])^2 / a[3*i+2])^2 )</font></i>
<i><font color="#9A1900">and its derivative with respect to the parameter vector a.</font></i>
<i><font color="#9A1900">*/</font></i>
<b><font color="#0000FF">extern</font></b> <font color="#FF0000">"C"</font>
<font color="#009900">void</font> <b><font color="#000000">sumGauss</font></b><font color="#990000">(</font><font color="#009900">float</font> x<font color="#990000">,</font> <font color="#009900">float</font> a<font color="#990000">[],</font> <font color="#009900">float</font> <font color="#990000">*</font>y<font color="#990000">,</font> <font color="#009900">float</font> dyda<font color="#990000">[],</font> <font color="#008080">size_t</font> na<font color="#990000">)</font>
<font color="#FF0000">{</font>   <i><font color="#9A1900">// Note that any simple vector could replace CppAD::vector;</font></i>
    <i><font color="#9A1900">// for example, std::vector, std::valarray</font></i>

    <i><font color="#9A1900">// check the restrictions on na</font></i>
    <b><font color="#000000">assert</font></b><font color="#990000">(</font> na <font color="#990000">%</font> <font color="#993399">3</font> <font color="#990000">==</font> <font color="#993399">0</font> <font color="#990000">);</font>  <i><font color="#9A1900">// mod(na, 3) = 0</font></i>

    <i><font color="#9A1900">// use the shorthand ADfloat for the type CppAD::AD&lt;float&gt;</font></i>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;float&gt;</font> ADfloat<font color="#990000">;</font>

    <i><font color="#9A1900">// vector for indpendent variables</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;ADfloat&gt;</font> <b><font color="#000000">A</font></b><font color="#990000">(</font>na<font color="#990000">);</font>      <i><font color="#9A1900">// used with template function above</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;float&gt;</font>   <b><font color="#000000">acopy</font></b><font color="#990000">(</font>na<font color="#990000">);</font>  <i><font color="#9A1900">// used for derivative calculations</font></i>

    <i><font color="#9A1900">// vector for the dependent variables (there is only one)</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;ADfloat&gt;</font> <b><font color="#000000">Y</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>

    <i><font color="#9A1900">// copy the independent variables from C vector to CppAD vectors</font></i>
    <font color="#008080">size_t</font> i<font color="#990000">;</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> na<font color="#990000">;</font> i<font color="#990000">++)</font>
        A<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> acopy<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> a<font color="#990000">[</font>i<font color="#990000">];</font>

    <i><font color="#9A1900">// declare that A is the independent variable vector</font></i>
    CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>A<font color="#990000">);</font>

    <i><font color="#9A1900">// value of x as an ADfloat object</font></i>
    <font color="#008080">ADfloat</font> X <font color="#990000">=</font> x<font color="#990000">;</font>

    <i><font color="#9A1900">// Evaluate template version of sumGauss with ADfloat as the template</font></i>
    <i><font color="#9A1900">// parameter. Set the independent variable to the resulting value</font></i>
    Y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">sumGauss</font></b><font color="#990000">(</font>X<font color="#990000">,</font> A<font color="#990000">);</font>

    <i><font color="#9A1900">// create the AD function object F : A -&gt; Y</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;float&gt;</font> <b><font color="#000000">F</font></b><font color="#990000">(</font>A<font color="#990000">,</font> Y<font color="#990000">);</font>

    <i><font color="#9A1900">// use Value to convert Y[0] to float and return y = F(a)</font></i>
    <font color="#990000">*</font>y <font color="#990000">=</font> CppAD<font color="#990000">::</font><b><font color="#000000">Value</font></b><font color="#990000">(</font>Y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]);</font>

    <i><font color="#9A1900">// evaluate the derivative F'(a)</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;float&gt;</font> <b><font color="#000000">J</font></b><font color="#990000">(</font>na<font color="#990000">);</font>
    J <font color="#990000">=</font> F<font color="#990000">.</font><b><font color="#000000">Jacobian</font></b><font color="#990000">(</font>acopy<font color="#990000">);</font>

    <i><font color="#9A1900">// return the value of dyda = F'(a) as a C vector</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> na<font color="#990000">;</font> i<font color="#990000">++)</font>
        dyda<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> J<font color="#990000">[</font>i<font color="#990000">];</font>

    <b><font color="#0000FF">return</font></b><font color="#990000">;</font>
<font color="#FF0000">}</font>
<i><font color="#9A1900">/*</font></i>
<i><font color="#9A1900">Link CppAD::NearEqual so do not have to use namespace notation in Interface2C</font></i>
<i><font color="#9A1900">*/</font></i>
<font color="#009900">bool</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font><font color="#009900">float</font> x<font color="#990000">,</font> <font color="#009900">float</font> y<font color="#990000">,</font> <font color="#009900">float</font> r<font color="#990000">,</font> <font color="#009900">float</font> a<font color="#990000">)</font>
<font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>x<font color="#990000">,</font> y<font color="#990000">,</font> r<font color="#990000">,</font> a<font color="#990000">);</font>
<font color="#FF0000">}</font>

<font color="#FF0000">}</font> <i><font color="#9A1900">// End empty namespace</font></i>

<font color="#009900">bool</font> <b><font color="#000000">Interface2C</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <i><font color="#9A1900">// This routine is intentionally coded as if it were a C routine</font></i>
    <i><font color="#9A1900">// except for the fact that it uses the predefined type bool.</font></i>
    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>

    <i><font color="#9A1900">// declare variables</font></i>
    <font color="#009900">float</font> x<font color="#990000">,</font> a<font color="#990000">[</font><font color="#993399">6</font><font color="#990000">],</font> y<font color="#990000">,</font> dyda<font color="#990000">[</font><font color="#993399">6</font><font color="#990000">],</font> tmp<font color="#990000">[</font><font color="#993399">6</font><font color="#990000">];</font>
    <font color="#008080">size_t</font> na<font color="#990000">,</font> i<font color="#990000">;</font>

    <i><font color="#9A1900">// number of parameters (3 for each Gaussian)</font></i>
    na <font color="#990000">=</font> <font color="#993399">6</font><font color="#990000">;</font>

    <i><font color="#9A1900">// number of Gaussians: n  = na / 3;</font></i>

    <i><font color="#9A1900">// value of x</font></i>
    x <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>

    <i><font color="#9A1900">// value of the parameter vector a</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> na<font color="#990000">;</font> i<font color="#990000">++)</font>
        a<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">(</font><font color="#009900">float</font><font color="#990000">)</font> <font color="#990000">(</font>i<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">);</font>

    <i><font color="#9A1900">// evaulate function and derivative</font></i>
    <b><font color="#000000">sumGauss</font></b><font color="#990000">(</font>x<font color="#990000">,</font> a<font color="#990000">,</font> <font color="#990000">&amp;</font>y<font color="#990000">,</font> dyda<font color="#990000">,</font> na<font color="#990000">);</font>

    <i><font color="#9A1900">// compare dyda to central difference approximation for deriative</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> na<font color="#990000">;</font> i<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// local variables</font></i>
        <font color="#009900">float</font> eps<font color="#990000">,</font> ai<font color="#990000">,</font> yp<font color="#990000">,</font> ym<font color="#990000">,</font> dy_da<font color="#990000">;</font>

        <i><font color="#9A1900">// We assume that the type float has at least 7 digits of</font></i>
        <i><font color="#9A1900">// precision, so we choose eps to be about pow(10., -7./2.).</font></i>
        eps  <font color="#990000">=</font> <font color="#990000">(</font><font color="#009900">float</font><font color="#990000">)</font> <font color="#993399">3e-4</font><font color="#990000">;</font>

        <i><font color="#9A1900">// value of this component of a</font></i>
        ai    <font color="#990000">=</font> a<font color="#990000">[</font>i<font color="#990000">];</font>

        <i><font color="#9A1900">// evaluate F( a + eps * ei )</font></i>
        a<font color="#990000">[</font>i<font color="#990000">]</font>  <font color="#990000">=</font> ai <font color="#990000">+</font> eps<font color="#990000">;</font>
        <b><font color="#000000">sumGauss</font></b><font color="#990000">(</font>x<font color="#990000">,</font> a<font color="#990000">,</font> <font color="#990000">&amp;</font>yp<font color="#990000">,</font> tmp<font color="#990000">,</font> na<font color="#990000">);</font>

        <i><font color="#9A1900">// evaluate F( a - eps * ei )</font></i>
        a<font color="#990000">[</font>i<font color="#990000">]</font>  <font color="#990000">=</font> ai <font color="#990000">-</font> eps<font color="#990000">;</font>
        <b><font color="#000000">sumGauss</font></b><font color="#990000">(</font>x<font color="#990000">,</font> a<font color="#990000">,</font> <font color="#990000">&amp;</font>ym<font color="#990000">,</font> tmp<font color="#990000">,</font> na<font color="#990000">);</font>

        <i><font color="#9A1900">// evaluate central difference approximates for partial</font></i>
        dy_da <font color="#990000">=</font> <font color="#990000">(</font>yp <font color="#990000">-</font> ym<font color="#990000">)</font> <font color="#990000">/</font> <font color="#990000">(</font><font color="#993399">2</font> <font color="#990000">*</font> eps<font color="#990000">);</font>

        <i><font color="#9A1900">// restore this component of a</font></i>
        a<font color="#990000">[</font>i<font color="#990000">]</font>  <font color="#990000">=</font> ai<font color="#990000">;</font>

        ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>dyda<font color="#990000">[</font>i<font color="#990000">],</font> dy_da<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/general/interface2c.cpp

</body>
</html>
