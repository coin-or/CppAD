<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>C++ AD Graph Atomic Four Functions: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="C++ AD Graph Atomic Four Functions: Example and Test">
<meta name="keywords" id="keywords" content=" c++ ad graph atomic four functions: example test source code ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_graph_atom4_op.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="graph_atom_op.cpp.htm" target="_top">Prev</a>
</td><td><a href="graph_print_op.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>other_adfun</option>
<option>cpp_ad_graph</option>
<option>graph_op_enum</option>
<option>graph_atom4_op.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_other_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cpp_ad_graph_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_graph_op_enum_htm.js'></script>
</td>
<td>graph_atom4_op.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Source Code</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>C++ AD Graph Atomic Four Functions: Example and Test</big></big></b></center>
<br>
<b><big><a name="Source Code" id="Source Code">Source Code</a></big></b>

<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
    <b><font color="#0000FF">class</font></b> <font color="#008080">atomic_int_pow</font> <font color="#990000">:</font> <b><font color="#0000FF">public</font></b> CppAD<font color="#990000">::</font>atomic_four<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#FF0000">{</font>
    <b><font color="#0000FF">public</font></b><font color="#990000">:</font>
        <b><font color="#000000">atomic_int_pow</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font> <font color="#990000">:</font> CppAD<font color="#990000">::</font>atomic_four<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;(</font><font color="#FF0000">"int_pow"</font><font color="#990000">)</font>
        <font color="#FF0000">{</font> <font color="#FF0000">}</font>
    <b><font color="#0000FF">private</font></b><font color="#990000">:</font>
        <i><font color="#9A1900">// for_type</font></i>
        <font color="#009900">bool</font> <b><font color="#000000">for_type</font></b><font color="#990000">(</font>
            <font color="#008080">size_t</font>                                     call_id     <font color="#990000">,</font>
            <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font>  type_x      <font color="#990000">,</font>
            CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font>        type_y      <font color="#990000">)</font> <b><font color="#0000FF">override</font></b>
        <font color="#FF0000">{</font>   type_y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> type_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
            <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
        <font color="#FF0000">}</font>
        <i><font color="#9A1900">// forward</font></i>
        <font color="#009900">bool</font> <b><font color="#000000">forward</font></b><font color="#990000">(</font>
            <font color="#008080">size_t</font>                              call_id      <font color="#990000">,</font>
            <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>          select_y     <font color="#990000">,</font>
            <font color="#008080">size_t</font>                              order_low    <font color="#990000">,</font>
            <font color="#008080">size_t</font>                              order_up     <font color="#990000">,</font>
            <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>        taylor_x     <font color="#990000">,</font>
            CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>              taylor_y     <font color="#990000">)</font> <b><font color="#0000FF">override</font></b>
        <font color="#FF0000">{</font>
            <i><font color="#9A1900">// order_up</font></i>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> order_up <font color="#990000">!=</font> <font color="#993399">0</font> <font color="#990000">)</font>
                <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// taylor_y</font></i>
            taylor_y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> call_id<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
                taylor_y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*=</font> taylor_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
            <i><font color="#9A1900">//</font></i>
            <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font><font color="#990000">;</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">atom4_op</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> std<font color="#990000">::</font>string<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// reciprocal</font></i>
    <font color="#008080">atomic_int_pow</font> int_pow<font color="#990000">;</font>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// This function has an atomic function operator with name int_pow</font></i>
    <i><font color="#9A1900">// node_1 : p[0]</font></i>
    <i><font color="#9A1900">// node_2 : x[0]</font></i>
    <i><font color="#9A1900">// node_3 : p[0] + x[0]</font></i>
    <i><font color="#9A1900">// node_4 : int_pow( p[0] + x[0] )</font></i>
    <i><font color="#9A1900">// y[0]   = ( p[0] + x[0] ) ** call_id</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// call_id</font></i>
    <font color="#008080">size_t</font> call_id <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// C++ graph object</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">cpp_graph</font> graph_obj<font color="#990000">;</font>
    graph_obj<font color="#990000">.</font><b><font color="#000000">initialize</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// operator being used</font></i>
    CppAD<font color="#990000">::</font>graph<font color="#990000">::</font><font color="#008080">graph_op_enum</font> op_enum<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    graph_obj<font color="#990000">.</font><b><font color="#000000">function_name_set</font></b><font color="#990000">(</font><font color="#FF0000">"g(p; x)"</font><font color="#990000">);</font>
    graph_obj<font color="#990000">.</font><b><font color="#000000">n_dynamic_ind_set</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
    graph_obj<font color="#990000">.</font><b><font color="#000000">n_variable_ind_set</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// node_3 : p[0] + x[0]</font></i>
    op_enum <font color="#990000">=</font> CppAD<font color="#990000">::</font>graph<font color="#990000">::</font>add_graph_op<font color="#990000">;</font>
    graph_obj<font color="#990000">.</font><b><font color="#000000">operator_vec_push_back</font></b><font color="#990000">(</font>op_enum<font color="#990000">);</font>
    graph_obj<font color="#990000">.</font><b><font color="#000000">operator_arg_push_back</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
    graph_obj<font color="#990000">.</font><b><font color="#000000">operator_arg_push_back</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// node_4 : f( p[0] + x[0] )</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// name_index, n_result, n_arg come before first_node</font></i>
    <font color="#008080">size_t</font> name_index <font color="#990000">=</font> graph_obj<font color="#990000">.</font><b><font color="#000000">atomic_name_vec_size</font></b><font color="#990000">();</font>
    graph_obj<font color="#990000">.</font><b><font color="#000000">atomic_name_vec_push_back</font></b><font color="#990000">(</font><font color="#FF0000">"int_pow"</font><font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    op_enum <font color="#990000">=</font> CppAD<font color="#990000">::</font>graph<font color="#990000">::</font>atom4_graph_op<font color="#990000">;</font>
    graph_obj<font color="#990000">.</font><b><font color="#000000">operator_vec_push_back</font></b><font color="#990000">(</font>op_enum<font color="#990000">);</font>
    graph_obj<font color="#990000">.</font><b><font color="#000000">operator_arg_push_back</font></b><font color="#990000">(</font>name_index<font color="#990000">);</font>  <i><font color="#9A1900">// name_index</font></i>
    graph_obj<font color="#990000">.</font><b><font color="#000000">operator_arg_push_back</font></b><font color="#990000">(</font>call_id<font color="#990000">);</font>     <i><font color="#9A1900">// call_id</font></i>
    graph_obj<font color="#990000">.</font><b><font color="#000000">operator_arg_push_back</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>           <i><font color="#9A1900">// n_result</font></i>
    graph_obj<font color="#990000">.</font><b><font color="#000000">operator_arg_push_back</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>           <i><font color="#9A1900">// n_node_arg</font></i>
    graph_obj<font color="#990000">.</font><b><font color="#000000">operator_arg_push_back</font></b><font color="#990000">(</font><font color="#993399">3</font><font color="#990000">);</font>           <i><font color="#9A1900">// first and last node arg</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// y[0]  = int_pow( p[0] + x[0] ) = ( p[0] + x[0] ) ** call_id</font></i>
    graph_obj<font color="#990000">.</font><b><font color="#000000">dependent_vec_push_back</font></b><font color="#990000">(</font><font color="#993399">4</font><font color="#990000">);</font>
    <i><font color="#9A1900">// ------------------------------------------------------------------------</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> g<font color="#990000">;</font>
    g<font color="#990000">.</font><b><font color="#000000">from_graph</font></b><font color="#990000">(</font>graph_obj<font color="#990000">);</font>
    <i><font color="#9A1900">// ------------------------------------------------------------------------</font></i>
    ok <font color="#990000">&amp;=</font> g<font color="#990000">.</font><b><font color="#000000">Domain</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> g<font color="#990000">.</font><b><font color="#000000">Range</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> g<font color="#990000">.</font><b><font color="#000000">size_dyn_ind</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// set p in g(p; x)</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font> <b><font color="#000000">p</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
    p<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">2.0</font><font color="#990000">;</font>
    g<font color="#990000">.</font><b><font color="#000000">new_dynamic</font></b><font color="#990000">(</font>p<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// evalute g(p; x)</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font> <b><font color="#000000">x</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">),</font> <b><font color="#000000">y</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
    x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">3.0</font><font color="#990000">;</font>
    y    <font color="#990000">=</font> g<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// check value</font></i>
    <font color="#009900">double</font> eps99 <font color="#990000">=</font> <font color="#993399">99.0</font> <font color="#990000">*</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>
    <font color="#009900">double</font> check <font color="#990000">=</font> std<font color="#990000">::</font><b><font color="#000000">pow</font></b><font color="#990000">(</font> p<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+</font> x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> <font color="#009900">double</font><font color="#990000">(</font>call_id<font color="#990000">)</font> <font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> check<font color="#990000">,</font> eps99<font color="#990000">,</font> eps99<font color="#990000">);</font>
    <i><font color="#9A1900">// ------------------------------------------------------------------------</font></i>
    g<font color="#990000">.</font><b><font color="#000000">to_graph</font></b><font color="#990000">(</font>graph_obj<font color="#990000">);</font>
    g<font color="#990000">.</font><b><font color="#000000">from_graph</font></b><font color="#990000">(</font>graph_obj<font color="#990000">);</font>
    <i><font color="#9A1900">// ------------------------------------------------------------------------</font></i>
    ok <font color="#990000">&amp;=</font> g<font color="#990000">.</font><b><font color="#000000">Domain</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> g<font color="#990000">.</font><b><font color="#000000">Range</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> g<font color="#990000">.</font><b><font color="#000000">size_dyn_ind</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// set p in g(p; x)</font></i>
    p<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">4.0</font><font color="#990000">;</font>
    g<font color="#990000">.</font><b><font color="#000000">new_dynamic</font></b><font color="#990000">(</font>p<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// evalute g(p; x)</font></i>
    x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">5.0</font><font color="#990000">;</font>
    y    <font color="#990000">=</font> g<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// check value</font></i>
    check <font color="#990000">=</font> std<font color="#990000">::</font><b><font color="#000000">pow</font></b><font color="#990000">(</font> p<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+</font> x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> <font color="#009900">double</font><font color="#990000">(</font>call_id<font color="#990000">)</font> <font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> check<font color="#990000">,</font> eps99<font color="#990000">,</font> eps99<font color="#990000">);</font>
    <i><font color="#9A1900">// ------------------------------------------------------------------------</font></i>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/graph/atom4_op.cpp

</body>
</html>
