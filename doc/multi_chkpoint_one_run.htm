<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Run Multi-Threaded chkpoint_one Calculation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Run Multi-Threaded chkpoint_one Calculation">
<meta name="keywords" id="keywords" content=" run multi-threaded chkpoint_one calculation syntax thread y_squared square_root ok source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_multi_chkpoint_one_run_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="multi_chkpoint_one_takedown.htm" target="_top">Prev</a>
</td><td><a href="multi_chkpoint_one_time.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>deprecated</option>
<option>multi_chkpoint_one.cpp</option>
<option>multi_chkpoint_one_run</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_appendix_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_deprecated_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_multi_chkpoint_one.cpp_htm.js'></script>
</td>
<td>multi_chkpoint_one_run</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Thread</option>
<option>y_squared</option>
<option>square_root</option>
<option>ok</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Run Multi-Threaded chkpoint_one Calculation</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;multi_chkpoint_one_run(</span></font><i><font color="black"><span style='white-space: nowrap'>y_squared</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>square_root</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Thread" id="Thread">Thread</a></big></b>
<br>
It is assumed that this function is called by thread zero
and all the other threads are blocked (waiting).

<br>
<br>
<b><big><a name="y_squared" id="y_squared">y_squared</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y_squared</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and its size is equal to the number of threads.
It is the values that we are computing the square root of.

<br>
<br>
<b><big><a name="square_root" id="square_root">square_root</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>square_root</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The input value of 
<code><i><font color="black"><span style='white-space: nowrap'>square_root</span></font></i></code>
 does not matter.
Upon return,
it has the same size and
is the element by element square root of 
<code><i><font color="black"><span style='white-space: nowrap'>y_squared</span></font></i></code>
.

<br>
<br>
<b><big><a name="ok" id="ok">ok</a></big></b>
<br>
This return value has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
If it is false,
<code><font color="blue">multi_chkpoint_one_run</font></code> detected an error.

<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
<font color="#009900">bool</font> <b><font color="#000000">multi_chkpoint_one_run</font></b><font color="#990000">(</font>
    <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> y_squared  <font color="#990000">,</font>
    vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>      square_root <font color="#990000">)</font>
<font color="#FF0000">{</font>
    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    ok     <font color="#990000">&amp;=</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">thread_num</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>

    <i><font color="#9A1900">// setup the work for multi-threading</font></i>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">multi_chkpoint_one_setup</font></b><font color="#990000">(</font>y_squared<font color="#990000">);</font>

    <i><font color="#9A1900">// now do the work for each thread</font></i>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> num_threads_ <font color="#990000">&gt;</font> <font color="#993399">0</font> <font color="#990000">)</font>
        <b><font color="#000000">team_work</font></b><font color="#990000">(</font> multi_chkpoint_one_worker <font color="#990000">);</font>
    <b><font color="#0000FF">else</font></b>
        <b><font color="#000000">multi_chkpoint_one_worker</font></b><font color="#990000">();</font>

    <i><font color="#9A1900">// combine the result for each thread and takedown the multi-threading.</font></i>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">multi_chkpoint_one_takedown</font></b><font color="#990000">(</font>square_root<font color="#990000">);</font>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/multi_thread/multi_chkpoint_one.cpp

</body>
</html>
