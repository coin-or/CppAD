<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Multi-Threaded chkpoint_two Take Down</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Multi-Threaded chkpoint_two Take Down">
<meta name="keywords" id="keywords" content=" multi-threaded chkpoint_two take down syntax purpose thread square_root ok source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_multi_chkpoint_two_takedown_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="multi_chkpoint_two_worker.htm" target="_top">Prev</a>
</td><td><a href="multi_chkpoint_two_run.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>multi_chkpoint_two.cpp</option>
<option>multi_chkpoint_two_takedown</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_multi_thread_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_thread_test.cpp_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_multi_chkpoint_two.cpp_htm.js'></script>
</td>
<td>multi_chkpoint_two_takedown</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Thread</option>
<option>square_root</option>
<option>ok</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Multi-Threaded chkpoint_two Take Down</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;multi_chkpoint_two_takedown(</span></font><i><font color="black"><span style='white-space: nowrap'>square_root</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This routine gathers up the results for each thread and
frees memory that was allocated by <a href="multi_chkpoint_two_setup.htm" target="_top"><span style='white-space: nowrap'>multi_chkpoint_two_setup</span></a>
.

<br>
<br>
<b><big><a name="Thread" id="Thread">Thread</a></big></b>
<br>
It is assumed that this function is called by thread zero
and all the other threads are blocked (waiting).

<br>
<br>
<b><big><a name="square_root" id="square_root">square_root</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>square_root</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The input value of 
<code><i><font color="black"><span style='white-space: nowrap'>square_root</span></font></i></code>
 does not matter.
Upon return,
it has the same size and is the element by element square root of
<a href="multi_chkpoint_two_setup.htm#y_squared" target="_top"><span style='white-space: nowrap'>y_squared</span></a>
.

<br>
<br>
<b><big><a name="ok" id="ok">ok</a></big></b>
<br>
This return value has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
If it is false,
<code><font color="blue">multi_chkpoint_two_takedown</font></code> detected an error.

<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
<font color="#009900">bool</font> <b><font color="#000000">multi_chkpoint_two_takedown</font></b><font color="#990000">(</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> square_root<font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok            <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    ok                <font color="#990000">&amp;=</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">thread_num</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
    <font color="#008080">size_t</font> num_threads <font color="#990000">=</font> std<font color="#990000">::</font><b><font color="#000000">max</font></b><font color="#990000">(</font>num_threads_<font color="#990000">,</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">));</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// extract square roots in original order</font></i>
    square_root<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> thread_num <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> thread_num <font color="#990000">&lt;</font> num_threads<font color="#990000">;</font> thread_num<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// results for this thread</font></i>
        <font color="#008080">size_t</font> n <font color="#990000">=</font> work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>square_root<font color="#990000">-&gt;</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">;</font> i<font color="#990000">++)</font>
            square_root<font color="#990000">.</font><b><font color="#000000">push_back</font></b><font color="#990000">((*</font> work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>square_root <font color="#990000">)[</font>i<font color="#990000">]);</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// go down so that free memory for other threads before memory for master</font></i>
    <font color="#008080">size_t</font> thread_num <font color="#990000">=</font> num_threads<font color="#990000">;</font>
    <b><font color="#0000FF">while</font></b><font color="#990000">(</font>thread_num<font color="#990000">--)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// check that this tread was ok with the work it did</font></i>
        ok  <font color="#990000">&amp;=</font> work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>ok<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// run destructor on vector object for this thread</font></i>
        <b><font color="#0000FF">delete</font></b> work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>y_squared<font color="#990000">;</font>
        <b><font color="#0000FF">delete</font></b> work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>square_root<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// run destructor on function object for this thread</font></i>
        <b><font color="#0000FF">delete</font></b> work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>fun<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// delete problem specific information</font></i>
        <font color="#009900">void</font><font color="#990000">*</font> v_ptr <font color="#990000">=</font> <b><font color="#0000FF">static_cast</font></b><font color="#990000">&lt;</font><font color="#009900">void</font><font color="#990000">*&gt;(</font> work_all_<font color="#990000">[</font>thread_num<font color="#990000">]</font> <font color="#990000">);</font>
        thread_alloc<font color="#990000">::</font><b><font color="#000000">return_memory</font></b><font color="#990000">(</font> v_ptr <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// Note that checkpoint object has memory connect to each thread</font></i>
        <i><font color="#9A1900">// thread_alloc::inuse(thread_num) cannot be zero until it is deleted</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> thread_num <font color="#990000">&gt;</font> <font color="#993399">0</font> <font color="#990000">)</font>
        <font color="#FF0000">{</font>   ok <font color="#990000">&amp;=</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">inuse</font></b><font color="#990000">(</font>thread_num<font color="#990000">)</font> <font color="#990000">&gt;</font> <font color="#993399">0</font><font color="#990000">;</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// return all memory that is not in use and</font></i>
            <i><font color="#9A1900">// but being held for future use by this thread</font></i>
            thread_alloc<font color="#990000">::</font><b><font color="#000000">free_available</font></b><font color="#990000">(</font>thread_num<font color="#990000">);</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/multi_thread/multi_chkpoint_two.cpp

</body>
</html>
