<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>C Source Code Corresponding to an ADFun Object</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="C Source Code Corresponding to an ADFun Object">
<meta name="keywords" id="keywords" content=" c source code corresponding to adfun object syntax prototype fun base recbase os c_type jit functions atomic callbacks call_id nx x ny y compare_change flag restrictions example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_to_csrc_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="check_for_nan.cpp.htm" target="_top">Prev</a>
</td><td><a href="example_jit.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>to_csrc</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_to_csrc_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Prototype</option>
<option>fun</option>
<option>Base</option>
<option>RecBase</option>
<option>os</option>
<option>c_type</option>
<option>JIT Functions</option>
<option>Atomic Callbacks</option>
<option>call_id</option>
<option>nx</option>
<option>x</option>
<option>ny</option>
<option>y</option>
<option>compare_change</option>
<option>flag</option>
<option>Restrictions</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<center><b><big><big>C Source Code Corresponding to an ADFun Object</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fun</span></font></i><font color="blue"><span style='white-space: nowrap'>.to_csrc(</span></font><i><font color="black"><span style='white-space: nowrap'>os</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>c_type</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
<br>
<b><big><a name="Prototype" id="Prototype">Prototype</a></big></b>

<pre><tt>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">,</font> <b><font color="#0000FF">class</font></b> <font color="#008080">RecBase</font><font color="#990000">&gt;</font>
<font color="#009900">void</font> CppAD<font color="#990000">::</font>ADFun<font color="#990000">&lt;</font>Base<font color="#990000">,</font>RecBase<font color="#990000">&gt;::</font><b><font color="#000000">to_csrc</font></b><font color="#990000">(</font>
    std<font color="#990000">::</font>ostream<font color="#990000">&amp;</font>      os     <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font> c_type <font color="#990000">)</font></tt></pre>
<br>
<b><big><a name="fun" id="fun">fun</a></big></b>
<br>
is the <a href="adfun.htm" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object.

<br>
<br>
<b><big><a name="Base" id="Base">Base</a></big></b>
<br>
is the type corresponding to this <a href="adfun.htm" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object;
i.e., its calculations are done using the type 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
.

<br>
<br>
<b><big><a name="RecBase" id="RecBase">RecBase</a></big></b>
<br>
in the prototype above, 
<code><i><font color="black"><span style='white-space: nowrap'>RecBase</span></font></i></code>
 is the same type as 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
.

<br>
<br>
<b><big><a name="os" id="os">os</a></big></b>
<br>
The C source code representation of the function 
<code><i><font color="black"><span style='white-space: nowrap'>fun</span></font></i></code>

is written to 
<code><i><font color="black"><span style='white-space: nowrap'>os</span></font></i></code>
.

<br>
<br>
<b><big><a name="c_type" id="c_type">c_type</a></big></b>
<br>
The possible values for this argument are:
<code><font color="blue">float</font></code>, <code><font color="blue">double</font></code>, or <code><font color="blue">long_double</font></code>.

<br>
<br>
<b><big><a name="JIT Functions" id="JIT Functions">JIT Functions</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>flag</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;cppad_jit_</span></font><i><font color="black"><span style='white-space: nowrap'>function_name</span></font></i><font color="blue"><span style='white-space: nowrap'>(<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nx</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ny</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>compare_change</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
)</span></font></code>


<code><font color="blue"><span style='white-space: nowrap'><br>
typedef&nbsp;int&nbsp;(*jit_</span></font><i><font color="black"><span style='white-space: nowrap'>c_type</span></font></i><font color="blue"><span style='white-space: nowrap'>)(<br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t,&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>type</span></font></i><font color="blue"><span style='white-space: nowrap'>*,&nbsp;size_t,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>type</span></font></i><font color="blue"><span style='white-space: nowrap'>*,&nbsp;size_t*<br>
)<br>
</span></font></code>
Here 
<code><i><font color="black"><span style='white-space: nowrap'>type</span></font></i></code>
 is the same as 
<code><i><font color="black"><span style='white-space: nowrap'>c_type</span></font></i></code>
 except that the
underbar in <code><font color="blue">long_double</font></code> is replaced by a space.
The function type 
<code><font color="blue"><span style='white-space: nowrap'>jit_</span></font><i><font color="black"><span style='white-space: nowrap'>c_type</span></font></i></code>
 is defined in the CppAD namespace.
In the case of the Visual C++ compiler (<code><font color="blue">_MSC_VER</font></code> is defined),
<code><font color="blue">__cdecl</font></code> and <code><font color="blue">__declspec(dllimport)</font></code> are added to
the function type definition.

<br>
<br>
<b><big><a name="Atomic Callbacks" id="Atomic Callbacks">Atomic Callbacks</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>flag</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;cppad_atomic_</span></font><i><font color="black"><span style='white-space: nowrap'>function_name</span></font></i><font color="blue"><span style='white-space: nowrap'>(<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>call_id</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nx</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ny</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>compare_change</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
)</span></font></code>


<code><font color="blue"><span style='white-space: nowrap'><br>
typedef&nbsp;int&nbsp;(*jit_</span></font><i><font color="black"><span style='white-space: nowrap'>c_type</span></font></i><font color="blue"><span style='white-space: nowrap'>)(<br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t,&nbsp;size_t,&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>type</span></font></i><font color="blue"><span style='white-space: nowrap'>*,&nbsp;size_t,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>type</span></font></i><font color="blue"><span style='white-space: nowrap'>*,&nbsp;size_t*<br>
)<br>
</span></font></code>
The function type 
<code><font color="blue"><span style='white-space: nowrap'>atomic_</span></font><i><font color="black"><span style='white-space: nowrap'>c_type</span></font></i></code>
 is defined in the CppAD namespace.
The corresponding function evaluates zero order forward mode for the
atomic function with the specified 
<code><i><font color="black"><span style='white-space: nowrap'>function_name</span></font></i></code>
.

<br>
<br>
<b><big><a name="call_id" id="call_id">call_id</a></big></b>
<br>
This argument is only used during atomic four function callbacks,
in which case it is the corresponding
<a href="atomic_four_call.htm#call_id" target="_top"><span style='white-space: nowrap'>call_id</span></a>
.

<br>
<br>
<b><big><a name="nx" id="nx">nx</a></big></b>
<br>
is the number of independent variables plus number of independent dynamic
parameters for this function.

<br>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
is a C vector of size 
<code><i><font color="black"><span style='white-space: nowrap'>nx</span></font></i></code>
 containing the independent variables
and independent dynamic parameters.
The dynamic parameter come first and then the variables.

<br>
<br>
<b><big><a name="ny" id="ny">ny</a></big></b>
<br>
is the number of dependent values for this function
(a dependent value can be a variable, dynamic parameter, or constant parameter).

<br>
<br>
<b><big><a name="y" id="y">y</a></big></b>
<br>
is a C vector of size 
<code><i><font color="black"><span style='white-space: nowrap'>ny</span></font></i></code>
.
This input values of its elements do not matter.
Upon return, it contains the function value correspond to 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
.

<br>
<br>
<b><big><a name="compare_change" id="compare_change">compare_change</a></big></b>
<br>
This argument is both an input and an output.
The number of comparison operators that change their bool result value
is added to 
<code><i><font color="black"><span style='white-space: nowrap'>compare_change</span></font></i></code>
. This way, 
<code><i><font color="black"><span style='white-space: nowrap'>compare_change</span></font></i></code>

can be used to accumulate the number of changes between multiplier calls.

<br>
<br>
<b><big><a name="flag" id="flag">flag</a></big></b>
<br>
If this is zero, no error was detected.
If it is one (two), 
<code><i><font color="black"><span style='white-space: nowrap'>nx</span></font></i></code>
 (
<code><i><font color="black"><span style='white-space: nowrap'>ny</span></font></i></code>
) does not have its expected value.

<br>
<br>
<b><big><a name="Restrictions" id="Restrictions">Restrictions</a></big></b>
<br>
The <code><font color="blue">to_csrc</font></code> routine is not implemented for
<a href="vecad.htm" target="_top"><span style='white-space: nowrap'>VecAD</span></a>
 operations.


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The section <a href="example_jit.htm" target="_top"><span style='white-space: nowrap'>example_jit</span></a>
 contains examples and tests
that use <code><font color="blue">to_csrc</font></code>.



<hr>Input File: include/cppad/core/to_csrc.hpp

</body>
</html>
