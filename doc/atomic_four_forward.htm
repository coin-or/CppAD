<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Atomic Function Forward Mode</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Atomic Function Forward Mode">
<meta name="keywords" id="keywords" content=" atomic function forward mode syntax base ad&lt;base&gt; prototype vector usage implementation call_id select_y order_low p order_up q taylor_x parameters ataylor_x taylor_y ataylor_y ok discussion example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_four_forward_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_four_for_type.htm" target="_top">Prev</a>
</td><td><a href="atomic_four_reverse.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_four</option>
<option>atomic_four_define</option>
<option>atomic_four_forward</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_define_htm.js'></script>
</td>
<td>atomic_four_forward</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>---..Base</option>
<option>---..AD&lt;Base&gt;</option>
<option>Prototype</option>
<option>---..Base</option>
<option>---..AD&lt;Base&gt;</option>
<option>Base</option>
<option>vector</option>
<option>Usage</option>
<option>---..Base</option>
<option>---..AD&lt;Base&gt;</option>
<option>Implementation</option>
<option>call_id</option>
<option>select_y</option>
<option>order_low</option>
<option>---..p</option>
<option>order_up</option>
<option>---..q</option>
<option>taylor_x</option>
<option>---..parameters</option>
<option>ataylor_x</option>
<option>taylor_y</option>
<option>ataylor_y</option>
<option>ok</option>
<option>Discussion</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Atomic Function Forward Mode</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>


<br>
<br>
<big><a name="Syntax.Base" id="Syntax.Base">Base</a></big>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i><font color="blue"><span style='white-space: nowrap'>.forward(<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>call_id</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>select_y</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>order_low</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>order_up</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>type_x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>taylor_x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>taylor_y</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
)</span></font></code>


<br>
<br>
<big><a name="Syntax.AD&lt;Base&gt;" id="Syntax.AD&lt;Base&gt;">AD&lt;Base&gt;</a></big>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i><font color="blue"><span style='white-space: nowrap'>.forward(<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>call_id</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>select_y</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>order_low</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>order_up</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>type_x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ataylor_x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ataylor_y</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
)</span></font></code>


<br>
<br>
<b><big><a name="Prototype" id="Prototype">Prototype</a></big></b>


<br>
<br>
<big><a name="Prototype.Base" id="Prototype.Base">Base</a></big>

<pre><tt>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font>
<font color="#009900">bool</font> atomic_four<font color="#990000">&lt;</font>Base<font color="#990000">&gt;::</font><b><font color="#000000">forward</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font>                       call_id     <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>          select_y    <font color="#990000">,</font>
    <font color="#008080">size_t</font>                       order_low   <font color="#990000">,</font>
    <font color="#008080">size_t</font>                       order_up    <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>          taylor_x    <font color="#990000">,</font>
    vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                taylor_y    <font color="#990000">)</font></tt></pre>
<br>
<big><a name="Prototype.AD&lt;Base&gt;" id="Prototype.AD&lt;Base&gt;">AD&lt;Base&gt;</a></big>

<pre><tt>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font>
<font color="#009900">bool</font> atomic_four<font color="#990000">&lt;</font>Base<font color="#990000">&gt;::</font><b><font color="#000000">forward</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font>                       call_id      <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>          select_y    <font color="#990000">,</font>
    <font color="#008080">size_t</font>                       order_low    <font color="#990000">,</font>
    <font color="#008080">size_t</font>                       order_up     <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font> AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>    ataylor_x    <font color="#990000">,</font>
    vector<font color="#990000">&lt;</font> AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>          ataylor_y    <font color="#990000">)</font></tt></pre>
<br>
<b><big><a name="Base" id="Base">Base</a></big></b>
<br>
see <a href="atomic_four_call.htm#Base" target="_top"><span style='white-space: nowrap'>Base</span></a>
.

<br>
<br>
<b><big><a name="vector" id="vector">vector</a></big></b>
<br>
is the <a href="cppad_vector.htm" target="_top"><span style='white-space: nowrap'>CppAD_vector</span></a>
 template class.


<br>
<br>
<b><big><a name="Usage" id="Usage">Usage</a></big></b>


<br>
<br>
<big><a name="Usage.Base" id="Usage.Base">Base</a></big>
<br>
The 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 syntax and prototype are used by a
<a href="atomic_four_call.htm" target="_top"><span style='white-space: nowrap'>call</span></a>
 to the atomic function 
<code><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i></code>
.
They are also used by

<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Forward</span></font></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.new_dynamic</span></font></code>

where 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and 
<code><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i></code>
 is used during the recording of 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.

<br>
<br>
<big><a name="Usage.AD&lt;Base&gt;" id="Usage.AD&lt;Base&gt;">AD&lt;Base&gt;</a></big>
<br>
The 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 syntax and prototype are used by

<code><i><font color="black"><span style='white-space: nowrap'>af</span></font></i><font color="blue"><span style='white-space: nowrap'>.Forward</span></font></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>af</span></font></i><font color="blue"><span style='white-space: nowrap'>.new_dynamic</span></font></code>

where 
<code><i><font color="black"><span style='white-space: nowrap'>af</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;&nbsp;AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>af</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and 
<code><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i></code>
 is used in a function 
<code><i><font color="black"><span style='white-space: nowrap'>af</span></font></i></code>
,
created from 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 using <a href="base2ad.htm" target="_top"><span style='white-space: nowrap'>base2ad</span></a>
.

<br>
<br>
<b><big><a name="Implementation" id="Implementation">Implementation</a></big></b>
<br>
The 
<code><i><font color="black"><span style='white-space: nowrap'>taylor_x</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>taylor_y</span></font></i></code>
 version of this function
must be defined by the
<a href="atomic_four_ctor.htm#atomic_user" target="_top"><span style='white-space: nowrap'>atomic_user</span></a>
 class.
It can return 
<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;==&nbsp;false</span></font></code>

(and not compute anything) for values
of 
<code><i><font color="black"><span style='white-space: nowrap'>order_up</span></font></i></code>
 that are greater than those used by your
<a href="forward.htm" target="_top"><span style='white-space: nowrap'>forward</span></a>
 mode calculations.
Order zero must be implemented.

<br>
<br>
<b><big><a name="call_id" id="call_id">call_id</a></big></b>
<br>
See <a href="atomic_four_call.htm#call_id" target="_top"><span style='white-space: nowrap'>call_id</span></a>
.

<br>
<br>
<b><big><a name="select_y" id="select_y">select_y</a></big></b>
<br>
This argument has size equal to the number of results to this
atomic function; i.e. the size of <a href="atomic_four_call.htm#ay" target="_top"><span style='white-space: nowrap'>ay</span></a>
.
It specifies which components of 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 the corresponding
Taylor coefficients must be computed.

<br>
<br>
<b><big><a name="order_low" id="order_low">order_low</a></big></b>
<br>
This argument
specifies the lowest order Taylor coefficient that we are computing.

<br>
<br>
<big><a name="order_low.p" id="order_low.p">p</a></big>
<br>
We sometimes use the notation 
<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>order_low</span></font></i></code>
 below.

<br>
<br>
<b><big><a name="order_up" id="order_up">order_up</a></big></b>
<br>
This argument is the highest order Taylor coefficient that we
are computing (
<code><i><font color="black"><span style='white-space: nowrap'>order_low</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>order_up</span></font></i></code>
).

<br>
<br>
<big><a name="order_up.q" id="order_up.q">q</a></big>
<br>
We use the notation 
<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>order_up</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;1</span></font></code>
 below.
This is the number of Taylor coefficients for each
component of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
.

<br>
<br>
<b><big><a name="taylor_x" id="taylor_x">taylor_x</a></big></b>
<br>
The size of 
<code><i><font color="black"><span style='white-space: nowrap'>taylor_x</span></font></i></code>
 is 
<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>*</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
For <small>@(@
j = 0 , \ldots , n-1
@)@</small> and <small>@(@
k = 0 , \ldots , q-1
@)@</small>,
we use the Taylor coefficient notation
<small>@[@

\begin{array}{rcl}
    x_j^k    & = & \R{taylor\_x} [ j * q + k ]
    \\
    X_j (t)  & = & x_j^0 + x_j^1 t^1 + \cdots + x_j^{q-1} t^{q-1}
\end{array}

@]@</small>
Note that superscripts represent an index for <small>@(@
x_j^k
@)@</small>
and an exponent for <small>@(@
t^k
@)@</small>.
Also note that the Taylor coefficients for <small>@(@
X(t)
@)@</small> correspond
to the derivatives of <small>@(@
X(t)
@)@</small> at <small>@(@
t = 0
@)@</small> in the following way:
<small>@[@

    x_j^k = \frac{1}{ k ! } X_j^{(k)} (0)

@]@</small>

<br>
<br>
<big><a name="taylor_x.parameters" id="taylor_x.parameters">parameters</a></big>
<br>
If the <code><i>j</i></code>-th component of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 is a parameter,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>type_x</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;&lt;&nbsp;CppAD::variable_enum<br>
</span></font></code>
In this case, for 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;&nbsp;0</span></font></code>
,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>taylor_x</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]&nbsp;==&nbsp;0<br>
</span></font></code>
<br>
<b><big><a name="ataylor_x" id="ataylor_x">ataylor_x</a></big></b>
<br>
The specifications for 
<code><i><font color="black"><span style='white-space: nowrap'>ataylor_x</span></font></i></code>
 is the same as for 
<code><i><font color="black"><span style='white-space: nowrap'>taylor_x</span></font></i></code>

(only the type of 
<code><i><font color="black"><span style='white-space: nowrap'>ataylor_x</span></font></i></code>
 is different).

<br>
<br>
<b><big><a name="taylor_y" id="taylor_y">taylor_y</a></big></b>
<br>
The size of 
<code><i><font color="black"><span style='white-space: nowrap'>taylor_y</span></font></i></code>
 is 
<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>*</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
.
Upon return,
For <small>@(@
i = 0 , \ldots , m-1
@)@</small> and <small>@(@
k = 0 , \ldots , q-1
@)@</small>,
if 
<code><i><font color="black"><span style='white-space: nowrap'>select_y[i]</span></font></i></code>
 is true,
<small>@[@

\begin{array}{rcl}
    Y_i (t)  & = & g_i [ X(t) ]
    \\
    Y_i (t)  & = & y_i^0 + y_i^1 t^1 + \cdots + y_i^{q-1} t^{q-1} + o( t^{q-1} )
    \\
    \R{taylor\_y}  [ i * q + k ] & = & y_i^k
\end{array}

@]@</small>
where <small>@(@
o( t^{q-1} ) / t^{q-1} \rightarrow 0
@)@</small>
as <small>@(@
t \rightarrow 0
@)@</small>.
Note that superscripts represent an index for <small>@(@
y_j^k
@)@</small>
and an exponent for <small>@(@
t^k
@)@</small>.
Also note that the Taylor coefficients for <small>@(@
Y(t)
@)@</small> correspond
to the derivatives of <small>@(@
Y(t)
@)@</small> at <small>@(@
t = 0
@)@</small> in the following way:
<small>@[@

    y_j^k = \frac{1}{ k ! } Y_j^{(k)} (0)

@]@</small>
If <small>@(@
p > 0
@)@</small>,
for <small>@(@
i = 0 , \ldots , m-1
@)@</small> and <small>@(@
k = 0 , \ldots , p-1
@)@</small>,
the input of 
<code><i><font color="black"><span style='white-space: nowrap'>taylor_y</span></font></i></code>
 satisfies
<small>@[@

    \R{taylor\_y}  [ i * q + k ] = y_i^k

@]@</small>
These values do not need to be recalculated
and can be used during the computation of the higher order coefficients.

<br>
<br>
<b><big><a name="ataylor_y" id="ataylor_y">ataylor_y</a></big></b>
<br>
The specifications for 
<code><i><font color="black"><span style='white-space: nowrap'>ataylor_y</span></font></i></code>
 is the same as for 
<code><i><font color="black"><span style='white-space: nowrap'>taylor_y</span></font></i></code>

(only the type of 
<code><i><font color="black"><span style='white-space: nowrap'>ataylor_y</span></font></i></code>
 is different).

<br>
<br>
<b><big><a name="ok" id="ok">ok</a></big></b>
<br>
If this calculation succeeded, 
<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i></code>
 is true.
Otherwise, it is false.

<br>
<br>
<b><big><a name="Discussion" id="Discussion">Discussion</a></big></b>
<br>
For example, suppose that 
<code><i><font color="black"><span style='white-space: nowrap'>order_up</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;==&nbsp;2</span></font></code>
,
and you know how to compute the function <small>@(@
g(x)
@)@</small>,
its first derivative <small>@(@
g^{(1)} (x)
@)@</small>,
and it component wise Hessian <small>@(@
g_i^{(2)} (x)
@)@</small>.
Then you can compute 
<code><i><font color="black"><span style='white-space: nowrap'>taylor_x</span></font></i></code>
 using the following formulas:
<small>@[@

\begin{array}{rcl}
y_i^0 & = & Y(0)
        = g_i ( x^0 )
\\
y_i^1 & = & Y^{(1)} ( 0 )
        = g_i^{(1)} ( x^0 ) X^{(1)} ( 0 )
        = g_i^{(1)} ( x^0 ) x^1
\\
y_i^2
& = & \frac{1}{2 !} Y^{(2)} (0)
\\
& = & \frac{1}{2} X^{(1)} (0)^\R{T} g_i^{(2)} ( x^0 ) X^{(1)} ( 0 )
  +   \frac{1}{2} g_i^{(1)} ( x^0 ) X^{(2)} ( 0 )
\\
& = & \frac{1}{2} (x^1)^\R{T} g_i^{(2)} ( x^0 ) x^1
  +    g_i^{(1)} ( x^0 ) x^2
\end{array}

@]@</small>
For <small>@(@
i = 0 , \ldots , m-1
@)@</small>, and <small>@(@
k = 0 , 1 , 2
@)@</small>,
<small>@[@

    \R{taylor\_y} [ i * q + k ] = y_i^k

@]@</small>


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The following is an example <code><font color="blue">forward</font></code> definition taken from
<a href="atomic_four_norm_sq.cpp.htm" target="_top"><span style='white-space: nowrap'>atomic_four_norm_sq.cpp</span></a>
:
<pre><tt>        <font color="#009900">bool</font> <b><font color="#000000">forward</font></b><font color="#990000">(</font>
            <font color="#008080">size_t</font>                             call_id     <font color="#990000">,</font>
            <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>         select_y    <font color="#990000">,</font>
            <font color="#008080">size_t</font>                             order_low   <font color="#990000">,</font>
            <font color="#008080">size_t</font>                             order_up    <font color="#990000">,</font>
            <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>       tx          <font color="#990000">,</font>
            CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>             ty          <font color="#990000">)</font> <b><font color="#0000FF">override</font></b>
        <font color="#FF0000">{</font>
            <font color="#008080">size_t</font> q <font color="#990000">=</font> order_up <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">;</font>
            <font color="#008080">size_t</font> n <font color="#990000">=</font> tx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> q<font color="#990000">;</font>
<b><font color="#000080">    # ifndef</font></b> NDEBUG
            <font color="#008080">size_t</font> m <font color="#990000">=</font> ty<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> q<font color="#990000">;</font>
            <b><font color="#000000">assert</font></b><font color="#990000">(</font> call_id <font color="#990000">==</font> <font color="#993399">0</font> <font color="#990000">);</font>
            <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
            <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> select_y<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
<b><font color="#000080">    # endif</font></b>
            <i><font color="#9A1900">// ok</font></i>
            <font color="#009900">bool</font> ok <font color="#990000">=</font> order_up <font color="#990000">&lt;=</font> <font color="#993399">1</font> <font color="#990000">&amp;&amp;</font> order_low <font color="#990000">&lt;=</font> order_up<font color="#990000">;</font>
            <b><font color="#0000FF">if</font></b> <font color="#990000">(</font> <font color="#990000">!</font> ok <font color="#990000">)</font>
                <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// sum = x_0^0 * x_0^0 + x_1^0 * x_1^0 + ...</font></i>
            <font color="#009900">double</font> sum <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
            <font color="#FF0000">{</font>   <font color="#009900">double</font> xj0 <font color="#990000">=</font> tx<font color="#990000">[</font> j <font color="#990000">*</font> q <font color="#990000">+</font> <font color="#993399">0</font><font color="#990000">];</font>
                sum       <font color="#990000">+=</font> xj0 <font color="#990000">*</font> xj0<font color="#990000">;</font>
            <font color="#FF0000">}</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// ty[0] = sum</font></i>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> order_low <font color="#990000">&lt;=</font> <font color="#993399">0</font> <font color="#990000">)</font>
                ty<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> sum<font color="#990000">;</font>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> order_up <font color="#990000">&lt;</font> <font color="#993399">1</font> <font color="#990000">)</font>
                <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>

            <i><font color="#9A1900">// sum = x_0^0 * x_0^1 + x_1^0 ^ x_1^1 + ...</font></i>
            sum   <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
            <font color="#FF0000">{</font>   <font color="#009900">double</font> xj0 <font color="#990000">=</font> tx<font color="#990000">[</font> j <font color="#990000">*</font> q <font color="#990000">+</font> <font color="#993399">0</font><font color="#990000">];</font>
                <font color="#009900">double</font> xj1 <font color="#990000">=</font> tx<font color="#990000">[</font> j <font color="#990000">*</font> q <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">];</font>
                sum       <font color="#990000">+=</font> xj0 <font color="#990000">*</font> xj1<font color="#990000">;</font>
            <font color="#FF0000">}</font>
            <i><font color="#9A1900">// ty[1] = 2.0 * sum</font></i>
            <b><font color="#000000">assert</font></b><font color="#990000">(</font> order_up <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
            ty<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">2.0</font> <font color="#990000">*</font> sum<font color="#990000">;</font>
            <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>

            <i><font color="#9A1900">// Assume we are not using forward mode with order &gt; 1</font></i>
            <b><font color="#000000">assert</font></b><font color="#990000">(</font> <font color="#990000">!</font> ok <font color="#990000">);</font>
            <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
        <font color="#FF0000">}</font>        </tt></pre>

<hr>Input File: include/cppad/core/atomic/four/forward.hpp

</body>
</html>
