<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Sparse Jacobian: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Sparse Jacobian: Example and Test">
<meta name="keywords" id="keywords" content=" sparse jacobian: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_sparse_jacobian.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="sparse_jacobian.htm" target="_top">Prev</a>
</td><td><a href="sparse_hes.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>sparse_derivative</option>
<option>sparse_jacobian</option>
<option>sparse_jacobian.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_sparse_derivative_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_sparse_jacobian_htm.js'></script>
</td>
<td>sparse_jacobian.cpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@



<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Sparse Jacobian: Example and Test</big></big></b></center>
<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font> <i><font color="#9A1900">// ---------------------------------------------------------</font></i>
<font color="#009900">bool</font> <b><font color="#000000">reverse</font></b><font color="#990000">()</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>NearEqual<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;)</font>   a_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font>       d_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>size_t<font color="#990000">)</font>       i_vector<font color="#990000">;</font>
    <font color="#008080">size_t</font> i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">,</font> ell<font color="#990000">;</font>
    <font color="#009900">double</font> eps <font color="#990000">=</font> <font color="#993399">10</font><font color="#990000">.</font> <font color="#990000">*</font> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>

    <i><font color="#9A1900">// domain space vector</font></i>
    <font color="#008080">size_t</font> n <font color="#990000">=</font> <font color="#993399">4</font><font color="#990000">;</font>
    <font color="#008080">a_vector</font>  <b><font color="#000000">a_x</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        a_x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>

    <i><font color="#9A1900">// declare independent variables and starting recording</font></i>
    CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>a_x<font color="#990000">);</font>

    <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>
    <font color="#008080">a_vector</font>  <b><font color="#000000">a_y</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    a_y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> a_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+</font> a_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
    a_y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> a_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">+</font> a_x<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">];</font>
    a_y<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> a_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+</font> a_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">+</font> a_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">+</font> a_x<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">]</font> <font color="#990000">*</font> a_x<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">]</font> <font color="#990000">/</font> <font color="#993399">2</font><font color="#990000">.;</font>

    <i><font color="#9A1900">// create f: x -&gt; y and stop tape recording</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> <b><font color="#000000">f</font></b><font color="#990000">(</font>a_x<font color="#990000">,</font> a_y<font color="#990000">);</font>

    <i><font color="#9A1900">// new value for the independent variable vector</font></i>
    <font color="#008080">d_vector</font> <b><font color="#000000">x</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>j<font color="#990000">);</font>

    <i><font color="#9A1900">// Jacobian of y without sparsity pattern</font></i>
    <font color="#008080">d_vector</font> <b><font color="#000000">jac</font></b><font color="#990000">(</font>m <font color="#990000">*</font> n<font color="#990000">);</font>
    jac <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">SparseJacobian</font></b><font color="#990000">(</font>x<font color="#990000">);</font>
    <i><font color="#9A1900">/*</font></i>
<i><font color="#9A1900">          [ 1 1 0 0  ]</font></i>
<i><font color="#9A1900">    jac = [ 0 0 1 1  ]</font></i>
<i><font color="#9A1900">          [ 1 1 1 x_3]</font></i>
<i><font color="#9A1900">    */</font></i>
    <font color="#008080">d_vector</font> <b><font color="#000000">check</font></b><font color="#990000">(</font>m <font color="#990000">*</font> n<font color="#990000">);</font>
    check<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font> check<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font> check<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font> check<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
    check<font color="#990000">[</font><font color="#993399">4</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font> check<font color="#990000">[</font><font color="#993399">5</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font> check<font color="#990000">[</font><font color="#993399">6</font><font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font> check<font color="#990000">[</font><font color="#993399">7</font><font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
    check<font color="#990000">[</font><font color="#993399">8</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font> check<font color="#990000">[</font><font color="#993399">9</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font> check<font color="#990000">[</font><font color="#993399">10</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font> check<font color="#990000">[</font><font color="#993399">11</font><font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">];</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font>check<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">());</font> ell<font color="#990000">++)</font>
        ok <font color="#990000">&amp;=</font>  <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>check<font color="#990000">[</font>ell<font color="#990000">],</font> jac<font color="#990000">[</font>ell<font color="#990000">],</font> eps<font color="#990000">,</font> eps <font color="#990000">);</font>

    <i><font color="#9A1900">// using packed boolean sparsity patterns</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vectorBool</font> <b><font color="#000000">s_b</font></b><font color="#990000">(</font>m <font color="#990000">*</font> m<font color="#990000">),</font> <b><font color="#000000">p_b</font></b><font color="#990000">(</font>m <font color="#990000">*</font> n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> i<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font>ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;</font> m<font color="#990000">;</font> ell<font color="#990000">++)</font>
            s_b<font color="#990000">[</font>i <font color="#990000">*</font> m <font color="#990000">+</font> ell<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
        s_b<font color="#990000">[</font>i <font color="#990000">*</font> m <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    p_b   <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">RevSparseJac</font></b><font color="#990000">(</font>m<font color="#990000">,</font> s_b<font color="#990000">);</font>
    jac   <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">SparseJacobian</font></b><font color="#990000">(</font>x<font color="#990000">,</font> p_b<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font>check<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">());</font> ell<font color="#990000">++)</font>
        ok <font color="#990000">&amp;=</font>  <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>check<font color="#990000">[</font>ell<font color="#990000">],</font> jac<font color="#990000">[</font>ell<font color="#990000">],</font> eps<font color="#990000">,</font> eps <font color="#990000">);</font>

    <i><font color="#9A1900">// using vector of sets sparsity patterns</font></i>
    std<font color="#990000">::</font><font color="#008080">vector&lt; std::set&lt;size_t&gt; &gt;</font> <b><font color="#000000">s_s</font></b><font color="#990000">(</font>m<font color="#990000">),</font>  <b><font color="#000000">p_s</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> i<font color="#990000">++)</font>
        s_s<font color="#990000">[</font>i<font color="#990000">].</font><b><font color="#000000">insert</font></b><font color="#990000">(</font>i<font color="#990000">);</font>
    p_s   <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">RevSparseJac</font></b><font color="#990000">(</font>m<font color="#990000">,</font> s_s<font color="#990000">);</font>
    jac   <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">SparseJacobian</font></b><font color="#990000">(</font>x<font color="#990000">,</font> p_s<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font>check<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">());</font> ell<font color="#990000">++)</font>
        ok <font color="#990000">&amp;=</font>  <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>check<font color="#990000">[</font>ell<font color="#990000">],</font> jac<font color="#990000">[</font>ell<font color="#990000">],</font> eps<font color="#990000">,</font> eps <font color="#990000">);</font>

    <i><font color="#9A1900">// using row and column indices to compute non-zero in rows 1 and 2</font></i>
    <i><font color="#9A1900">// (skip row 0).</font></i>
    <font color="#008080">size_t</font> K <font color="#990000">=</font> <font color="#993399">6</font><font color="#990000">;</font>
    <font color="#008080">i_vector</font> <b><font color="#000000">row</font></b><font color="#990000">(</font>K<font color="#990000">),</font> <b><font color="#000000">col</font></b><font color="#990000">(</font>K<font color="#990000">);</font>
    jac<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font>K<font color="#990000">);</font>
    k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> i<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   ell <font color="#990000">=</font> i <font color="#990000">*</font> n <font color="#990000">+</font> j<font color="#990000">;</font>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> p_b<font color="#990000">[</font>ell<font color="#990000">]</font> <font color="#990000">)</font>
            <font color="#FF0000">{</font>   ok <font color="#990000">&amp;=</font> check<font color="#990000">[</font>ell<font color="#990000">]</font> <font color="#990000">!=</font> <font color="#993399">0</font><font color="#990000">.;</font>
                row<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> i<font color="#990000">;</font>
                col<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> j<font color="#990000">;</font>
                k<font color="#990000">++;</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    ok <font color="#990000">&amp;=</font> k <font color="#990000">==</font> K<font color="#990000">;</font>

    <i><font color="#9A1900">// empty work structure</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">sparse_jacobian_work</font> work<font color="#990000">;</font>

    <i><font color="#9A1900">// could use p_b</font></i>
    <font color="#008080">size_t</font> n_sweep <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">SparseJacobianReverse</font></b><font color="#990000">(</font>x<font color="#990000">,</font> p_s<font color="#990000">,</font> row<font color="#990000">,</font> col<font color="#990000">,</font> jac<font color="#990000">,</font> work<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> K<font color="#990000">;</font> k<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   ell <font color="#990000">=</font> row<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">*</font> n <font color="#990000">+</font> col<font color="#990000">[</font>k<font color="#990000">];</font>
        ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>check<font color="#990000">[</font>ell<font color="#990000">],</font> jac<font color="#990000">[</font>k<font color="#990000">],</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
    <font color="#FF0000">}</font>
    ok <font color="#990000">&amp;=</font> n_sweep <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">;</font>

    <i><font color="#9A1900">// now recompute at a different x value (using work from previous call)</font></i>
    check<font color="#990000">[</font><font color="#993399">11</font><font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">10</font><font color="#990000">.;</font>
    std<font color="#990000">::</font><font color="#008080">vector&lt; std::set&lt;size_t&gt; &gt;</font> not_used<font color="#990000">;</font>
    n_sweep <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">SparseJacobianReverse</font></b><font color="#990000">(</font>x<font color="#990000">,</font> not_used<font color="#990000">,</font> row<font color="#990000">,</font> col<font color="#990000">,</font> jac<font color="#990000">,</font> work<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> K<font color="#990000">;</font> k<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   ell <font color="#990000">=</font> row<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">*</font> n <font color="#990000">+</font> col<font color="#990000">[</font>k<font color="#990000">];</font>
        ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>check<font color="#990000">[</font>ell<font color="#990000">],</font> jac<font color="#990000">[</font>k<font color="#990000">],</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
    <font color="#FF0000">}</font>
    ok <font color="#990000">&amp;=</font> n_sweep <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">;</font>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">forward</font></b><font color="#990000">()</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>NearEqual<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;)</font> a_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font>       d_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>size_t<font color="#990000">)</font>       i_vector<font color="#990000">;</font>
    <font color="#008080">size_t</font> i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">,</font> ell<font color="#990000">;</font>
    <font color="#009900">double</font> eps <font color="#990000">=</font> <font color="#993399">10</font><font color="#990000">.</font> <font color="#990000">*</font> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>

    <i><font color="#9A1900">// domain space vector</font></i>
    <font color="#008080">size_t</font> n <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>
    <font color="#008080">a_vector</font>  <b><font color="#000000">a_x</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        a_x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>

    <i><font color="#9A1900">// declare independent variables and starting recording</font></i>
    CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>a_x<font color="#990000">);</font>

    <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#993399">4</font><font color="#990000">;</font>
    <font color="#008080">a_vector</font>  <b><font color="#000000">a_y</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    a_y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> a_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+</font> a_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">];</font>
    a_y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> a_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+</font> a_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">];</font>
    a_y<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> a_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">+</font> a_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">];</font>
    a_y<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">]</font> <font color="#990000">=</font> a_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">+</font> a_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">*</font> a_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">/</font> <font color="#993399">2</font><font color="#990000">.;</font>

    <i><font color="#9A1900">// create f: x -&gt; y and stop tape recording</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> <b><font color="#000000">f</font></b><font color="#990000">(</font>a_x<font color="#990000">,</font> a_y<font color="#990000">);</font>

    <i><font color="#9A1900">// new value for the independent variable vector</font></i>
    <font color="#008080">d_vector</font> <b><font color="#000000">x</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>j<font color="#990000">);</font>

    <i><font color="#9A1900">// Jacobian of y without sparsity pattern</font></i>
    <font color="#008080">d_vector</font> <b><font color="#000000">jac</font></b><font color="#990000">(</font>m <font color="#990000">*</font> n<font color="#990000">);</font>
    jac <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">SparseJacobian</font></b><font color="#990000">(</font>x<font color="#990000">);</font>
    <i><font color="#9A1900">/*</font></i>
<i><font color="#9A1900">          [ 1 0 1   ]</font></i>
<i><font color="#9A1900">    jac = [ 1 0 1   ]</font></i>
<i><font color="#9A1900">          [ 0 1 1   ]</font></i>
<i><font color="#9A1900">          [ 0 1 x_2 ]</font></i>
<i><font color="#9A1900">    */</font></i>
    <font color="#008080">d_vector</font> <b><font color="#000000">check</font></b><font color="#990000">(</font>m <font color="#990000">*</font> n<font color="#990000">);</font>
    check<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font> check<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font> check<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
    check<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font> check<font color="#990000">[</font><font color="#993399">4</font><font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font> check<font color="#990000">[</font><font color="#993399">5</font><font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
    check<font color="#990000">[</font><font color="#993399">6</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font> check<font color="#990000">[</font><font color="#993399">7</font><font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font> check<font color="#990000">[</font><font color="#993399">8</font><font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
    check<font color="#990000">[</font><font color="#993399">9</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font> check<font color="#990000">[</font><font color="#993399">10</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font> check<font color="#990000">[</font><font color="#993399">11</font><font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">];</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font>check<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">());</font> ell<font color="#990000">++)</font>
        ok <font color="#990000">&amp;=</font>  <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>check<font color="#990000">[</font>ell<font color="#990000">],</font> jac<font color="#990000">[</font>ell<font color="#990000">],</font> eps<font color="#990000">,</font> eps <font color="#990000">);</font>

    <i><font color="#9A1900">// test using packed boolean vectors for sparsity pattern</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vectorBool</font> <b><font color="#000000">r_b</font></b><font color="#990000">(</font>n <font color="#990000">*</font> n<font color="#990000">),</font> <b><font color="#000000">p_b</font></b><font color="#990000">(</font>m <font color="#990000">*</font> n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font>ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;</font> n<font color="#990000">;</font> ell<font color="#990000">++)</font>
            r_b<font color="#990000">[</font>j <font color="#990000">*</font> n <font color="#990000">+</font> ell<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
        r_b<font color="#990000">[</font>j <font color="#990000">*</font> n <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    p_b <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">ForSparseJac</font></b><font color="#990000">(</font>n<font color="#990000">,</font> r_b<font color="#990000">);</font>
    jac <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">SparseJacobian</font></b><font color="#990000">(</font>x<font color="#990000">,</font> p_b<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font>check<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">());</font> ell<font color="#990000">++)</font>
        ok <font color="#990000">&amp;=</font>  <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>check<font color="#990000">[</font>ell<font color="#990000">],</font> jac<font color="#990000">[</font>ell<font color="#990000">],</font> eps<font color="#990000">,</font> eps <font color="#990000">);</font>

    <i><font color="#9A1900">// test using vector of sets for sparsity pattern</font></i>
    std<font color="#990000">::</font><font color="#008080">vector&lt; std::set&lt;size_t&gt; &gt;</font> <b><font color="#000000">r_s</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">p_s</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        r_s<font color="#990000">[</font>j<font color="#990000">].</font><b><font color="#000000">insert</font></b><font color="#990000">(</font>j<font color="#990000">);</font>
    p_s <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">ForSparseJac</font></b><font color="#990000">(</font>n<font color="#990000">,</font> r_s<font color="#990000">);</font>
    jac <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">SparseJacobian</font></b><font color="#990000">(</font>x<font color="#990000">,</font> p_s<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font>check<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">());</font> ell<font color="#990000">++)</font>
        ok <font color="#990000">&amp;=</font>  <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>check<font color="#990000">[</font>ell<font color="#990000">],</font> jac<font color="#990000">[</font>ell<font color="#990000">],</font> eps<font color="#990000">,</font> eps <font color="#990000">);</font>

    <i><font color="#9A1900">// using row and column indices to compute non-zero elements excluding</font></i>
    <i><font color="#9A1900">// row 0 and column 0.</font></i>
    <font color="#008080">size_t</font> K <font color="#990000">=</font> <font color="#993399">5</font><font color="#990000">;</font>
    <font color="#008080">i_vector</font> <b><font color="#000000">row</font></b><font color="#990000">(</font>K<font color="#990000">),</font> <b><font color="#000000">col</font></b><font color="#990000">(</font>K<font color="#990000">);</font>
    jac<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font>K<font color="#990000">);</font>
    k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> i<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   ell <font color="#990000">=</font> i <font color="#990000">*</font> n <font color="#990000">+</font> j<font color="#990000">;</font>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> p_b<font color="#990000">[</font>ell<font color="#990000">]</font> <font color="#990000">)</font>
            <font color="#FF0000">{</font>   ok <font color="#990000">&amp;=</font> check<font color="#990000">[</font>ell<font color="#990000">]</font> <font color="#990000">!=</font> <font color="#993399">0</font><font color="#990000">.;</font>
                row<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> i<font color="#990000">;</font>
                col<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> j<font color="#990000">;</font>
                k<font color="#990000">++;</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    ok <font color="#990000">&amp;=</font> k <font color="#990000">==</font> K<font color="#990000">;</font>

    <i><font color="#9A1900">// empty work structure</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">sparse_jacobian_work</font> work<font color="#990000">;</font>

    <i><font color="#9A1900">// could use p_s</font></i>
    <font color="#008080">size_t</font> n_sweep <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">SparseJacobianForward</font></b><font color="#990000">(</font>x<font color="#990000">,</font> p_b<font color="#990000">,</font> row<font color="#990000">,</font> col<font color="#990000">,</font> jac<font color="#990000">,</font> work<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> K<font color="#990000">;</font> k<font color="#990000">++)</font>
    <font color="#FF0000">{</font>    ell <font color="#990000">=</font> row<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">*</font> n <font color="#990000">+</font> col<font color="#990000">[</font>k<font color="#990000">];</font>
        ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>check<font color="#990000">[</font>ell<font color="#990000">],</font> jac<font color="#990000">[</font>k<font color="#990000">],</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
    <font color="#FF0000">}</font>
    ok <font color="#990000">&amp;=</font> n_sweep <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">;</font>

    <i><font color="#9A1900">// now recompute at a different x value (using work from previous call)</font></i>
    check<font color="#990000">[</font><font color="#993399">11</font><font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">10</font><font color="#990000">.;</font>
    n_sweep <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">SparseJacobianForward</font></b><font color="#990000">(</font>x<font color="#990000">,</font> p_s<font color="#990000">,</font> row<font color="#990000">,</font> col<font color="#990000">,</font> jac<font color="#990000">,</font> work<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> K<font color="#990000">;</font> k<font color="#990000">++)</font>
    <font color="#FF0000">{</font>    ell <font color="#990000">=</font> row<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">*</font> n <font color="#990000">+</font> col<font color="#990000">[</font>k<font color="#990000">];</font>
        ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>check<font color="#990000">[</font>ell<font color="#990000">],</font> jac<font color="#990000">[</font>k<font color="#990000">],</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
    <font color="#FF0000">}</font>
    ok <font color="#990000">&amp;=</font> n_sweep <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">;</font>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
<font color="#FF0000">}</font> <i><font color="#9A1900">// End empty namespace</font></i>

<font color="#009900">bool</font> <b><font color="#000000">sparse_jacobian</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">forward</font></b><font color="#990000">();</font>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">reverse</font></b><font color="#990000">();</font>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/sparse/sparse_jacobian.cpp

</body>
</html>
