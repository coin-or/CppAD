<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>C++ AD Graph Operator Enum Type</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="C++ AD Graph Operator Enum Type">
<meta name="keywords" id="keywords" content=" c++ ad graph operator enum type unary binary conditional expression other comparisons comparison summation discrete function atomic print missing operators values examples ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_graph_op_enum_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="cpp_ad_graph.htm" target="_top">Prev</a>
</td><td><a href="graph_azmul_op.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>other_adfun</option>
<option>cpp_ad_graph</option>
<option>graph_op_enum</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_other_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cpp_ad_graph_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_graph_op_enum_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Unary</option>
<option>Binary</option>
<option>Conditional Expression</option>
<option>---..Other Comparisons</option>
<option>Comparison</option>
<option>---..Other Comparisons</option>
<option>Summation</option>
<option>Discrete Function</option>
<option>Atomic Function</option>
<option>Print</option>
<option>Missing Operators</option>
<option>Enum Values</option>
<option>Examples</option>
<option>Contents</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>C++ AD Graph Operator Enum Type</big></big></b></center>
<br>
<b><big><a name="Unary" id="Unary">Unary</a></big></b>
<br>
The unary operators have one argument and one result node.
The argument is a node index and the result is the next node.

<br>
<br>
<b><big><a name="Binary" id="Binary">Binary</a></big></b>
<br>
The binary operators have two arguments and one result node.
The arguments are node indices and the result is the next node.
The first (second) argument is the left (right) operand node index.

<br>
<br>
<b><big><a name="Conditional Expression" id="Conditional Expression">Conditional Expression</a></big></b>
<br>
The conditional expression operators have four arguments and one result node.
The arguments are node indices and the result is the next node.
The first argument is <a href="condexp.htm#left" target="_top"><span style='white-space: nowrap'>left</span></a>
,
the second is <a href="condexp.htm#right" target="_top"><span style='white-space: nowrap'>right</span></a>
,
the third is <a href="condexp.htm#if_true" target="_top"><span style='white-space: nowrap'>if_true</span></a>
,
the fourth is <a href="condexp.htm#if_false" target="_top"><span style='white-space: nowrap'>if_false</span></a>
,
the result is given by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cop</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>result</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>if_true</span></font></i><font color="blue"><span style='white-space: nowrap'>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>result</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>if_false</span></font></i><font color="blue"><span style='white-space: nowrap'>;<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>cop</span></font></i></code>
 is given in the comment after the enum type values below.

<br>
<br>
<big><a name="Conditional Expression.Other Comparisons" id="Conditional Expression.Other Comparisons">Other Comparisons</a></big>
<br>
Note that

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;CondExpGt(</span></font><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>if_true</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>if_false</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
is equivalent to

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;CondExpLe(</span></font><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>if_false</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>if_true</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
Similar conversions can be used for all the possible
<a href="condexp.htm" target="_top"><span style='white-space: nowrap'>conditional&nbsp;expressions</span></a>
.

<br>
<br>
<b><big><a name="Comparison" id="Comparison">Comparison</a></big></b>
<br>
The comparison operators have two arguments and no result node.
The first (second) argument is the left (right) operand node index.
The comparison result was true for the value of the independent
dynamic parameters and independent variables at which this graph was created.

<br>
<br>
<big><a name="Comparison.Other Comparisons" id="Comparison.Other Comparisons">Other Comparisons</a></big>
<br>
The comparison result true for 
<code><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i></code>

is equivalent to the comparison result true for 
<code><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>left</span></font></i></code>
.
The comparison result false for 
<code><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i></code>

is equivalent to the comparison result true for 
<code><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i></code>
.
In a similar fashion, all the possible comparisons results
can be converted to a true result for one of the comparisons above.

<br>
<br>
<b><big><a name="Summation" id="Summation">Summation</a></big></b>
<br>
The summation operator has one node result and a variable
number of arguments.
The first argument is the number of nodes in the summation,
and the other arguments are the indices of the nodes to be summed.
The total number of arguments for this operator
is one plus the number of nodes in the summation.

<br>
<br>
<b><big><a name="Discrete Function" id="Discrete Function">Discrete Function</a></big></b>
<br>
The discrete function operator has two arguments and one node result.
The first argument is the index in
<a href="cpp_ad_graph.htm#discrete_name_vec" target="_top"><span style='white-space: nowrap'>discrete_name_vec</span></a>
 for the
<a href="discrete.htm#name" target="_top"><span style='white-space: nowrap'>name</span></a>
 of the discrete function that is called.
The second argument is the index of the node that is the argument
to the discrete function.

<br>
<br>
<b><big><a name="Atomic Function" id="Atomic Function">Atomic Function</a></big></b>
<br>
The atomic function operator has a variable number of arguments
and a variable number of result nodes.
There are three extra arguments for <a href="atomic_three.htm" target="_top"><span style='white-space: nowrap'>atomic_three</span></a>
 functions and
four extra arguments for <a href="atomic_four.htm" target="_top"><span style='white-space: nowrap'>atomic_four</span></a>
 functions.
The total number of operator arguments is
the number of extra arguments
plus the number of arguments for the function being called.
The extra arguments come before the function arguments.

<ol type="1"><li>
The first operator argument is function name represented by it's index in the
<a href="cpp_ad_graph.htm#atomic_name_vec" target="_top"><span style='white-space: nowrap'>atomic_name_vec</span></a>
.
</li><li>

If this is an atomic four function call,
the second operator argument is the <a href="atomic_four_call.htm#call_id" target="_top"><span style='white-space: nowrap'>call_id</span></a>
.
</li><li>

In the atomic three (atomic four) case, second (third) operator argument
is the number of results for this function call.
The order of the function results is determined by the function being called.
</li><li>

In the atomic three (atomic four) case, the third (fourth) operator argument
is the number of arguments for this function call.
</li><li>

The rest of the operator arguments are the node indices for each of the
function arguments.
The order of the function arguments is determined by function being called.
</li></ol>


<br>
<br>
<b><big><a name="Print" id="Print">Print</a></big></b>
<br>
The print operator has four arguments.
<ol type="1"><li>
The first argument is the index in
<a href="cpp_ad_graph.htm#print_text_vec" target="_top"><span style='white-space: nowrap'>print_text_vec</span></a>
 for the
<a href="printfor.htm#before" target="_top"><span style='white-space: nowrap'>before</span></a>
 text for this print operator.
</li><li>

The second argument is the index in
<a href="cpp_ad_graph.htm#print_text_vec" target="_top"><span style='white-space: nowrap'>print_text_vec</span></a>
 for the
<a href="printfor.htm#after" target="_top"><span style='white-space: nowrap'>after</span></a>
 text for this print operator.
</li><li>

The third argument is the node corresponding to
<a href="printfor.htm#notpos" target="_top"><span style='white-space: nowrap'>notpos</span></a>
 for this print operator.
</li><li>

The fourth argument is the node corresponding to
<a href="printfor.htm#value" target="_top"><span style='white-space: nowrap'>value</span></a>
 for this print operator.
</li></ol>



<br>
<br>
<b><big><a name="Missing Operators" id="Missing Operators">Missing Operators</a></big></b>
<br>
As of yet the following <a href="adfun.htm" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 operators do not have a corresponding
graph operator:
<ol type="1"><li>
Operators to load and store <a href="vecad.htm" target="_top"><span style='white-space: nowrap'>VecAD</span></a>
 elements.
</li><li>

An operator for the <a href="atomic_two.htm" target="_top"><span style='white-space: nowrap'>atomic_two</span></a>
 interface.
</li></ol>



<br>
<br>
<b><big><a name="Enum Values" id="Enum Values">Enum Values</a></big></b>

<pre><tt>
<b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font> <b><font color="#0000FF">namespace</font></b> graph <font color="#FF0000">{</font>
    <b><font color="#0000FF">enum</font></b> <font color="#008080">graph_op_enum</font> <font color="#FF0000">{</font>
        abs_graph_op<font color="#990000">,</font>      <i><font color="#9A1900">// unary: absolute value</font></i>
        acos_graph_op<font color="#990000">,</font>     <i><font color="#9A1900">// unary: inverse cosine</font></i>
        acosh_graph_op<font color="#990000">,</font>    <i><font color="#9A1900">// unary: inverse hyperbolic cosine</font></i>
        add_graph_op<font color="#990000">,</font>      <i><font color="#9A1900">// binary: addition</font></i>
        asin_graph_op<font color="#990000">,</font>     <i><font color="#9A1900">// unary: inverse sine</font></i>
        asinh_graph_op<font color="#990000">,</font>    <i><font color="#9A1900">// unary: inverse hyperbolic sine</font></i>
        atan_graph_op<font color="#990000">,</font>     <i><font color="#9A1900">// unary: inverse tangent</font></i>
        atanh_graph_op<font color="#990000">,</font>    <i><font color="#9A1900">// unary: inverse hyperbolic tangent</font></i>
        atom_graph_op<font color="#990000">,</font>     <i><font color="#9A1900">// atomic three function call</font></i>
        atom4_graph_op<font color="#990000">,</font>    <i><font color="#9A1900">// atomic four function call</font></i>
        azmul_graph_op<font color="#990000">,</font>    <i><font color="#9A1900">// binary: absolute zero multiplication</font></i>
        cexp_eq_graph_op<font color="#990000">,</font>  <i><font color="#9A1900">// conditional expression: ==</font></i>
        cexp_le_graph_op<font color="#990000">,</font>  <i><font color="#9A1900">// conditional expression: &lt;=</font></i>
        cexp_lt_graph_op<font color="#990000">,</font>  <i><font color="#9A1900">// conditional expression: &lt;</font></i>
        comp_eq_graph_op<font color="#990000">,</font>  <i><font color="#9A1900">// comparison: ==</font></i>
        comp_le_graph_op<font color="#990000">,</font>  <i><font color="#9A1900">// comparison: &lt;=</font></i>
        comp_lt_graph_op<font color="#990000">,</font>  <i><font color="#9A1900">// comparison: &lt;</font></i>
        comp_ne_graph_op<font color="#990000">,</font>  <i><font color="#9A1900">// comparison: !=</font></i>
        cos_graph_op<font color="#990000">,</font>      <i><font color="#9A1900">// unary: cosine</font></i>
        cosh_graph_op<font color="#990000">,</font>     <i><font color="#9A1900">// unary: hyperbolic cosine</font></i>
        discrete_graph_op<font color="#990000">,</font> <i><font color="#9A1900">// discrete function</font></i>
        div_graph_op<font color="#990000">,</font>      <i><font color="#9A1900">// binary: division</font></i>
        erf_graph_op<font color="#990000">,</font>      <i><font color="#9A1900">// unary: error function</font></i>
        erfc_graph_op<font color="#990000">,</font>     <i><font color="#9A1900">// unary: complementary error function</font></i>
        exp_graph_op<font color="#990000">,</font>      <i><font color="#9A1900">// unary: exponential</font></i>
        expm1_graph_op<font color="#990000">,</font>    <i><font color="#9A1900">// unary: exponential minus one</font></i>
        log1p_graph_op<font color="#990000">,</font>    <i><font color="#9A1900">// unary: logarithm of one plus argument</font></i>
        log_graph_op<font color="#990000">,</font>      <i><font color="#9A1900">// unary: logarithm</font></i>
        neg_graph_op<font color="#990000">,</font>      <i><font color="#9A1900">// unary: minus</font></i>
        mul_graph_op<font color="#990000">,</font>      <i><font color="#9A1900">// binary: multiplication</font></i>
        pow_graph_op<font color="#990000">,</font>      <i><font color="#9A1900">// binary: first argument raised to second argument</font></i>
        print_graph_op<font color="#990000">,</font>    <i><font color="#9A1900">// print during zero order forward</font></i>
        sign_graph_op<font color="#990000">,</font>     <i><font color="#9A1900">// unary: sign of argument</font></i>
        sin_graph_op<font color="#990000">,</font>      <i><font color="#9A1900">// unary: sine</font></i>
        sinh_graph_op<font color="#990000">,</font>     <i><font color="#9A1900">// unary: hyperbolic sine</font></i>
        sqrt_graph_op<font color="#990000">,</font>     <i><font color="#9A1900">// unary: square root</font></i>
        sub_graph_op<font color="#990000">,</font>      <i><font color="#9A1900">// binary: subtraction</font></i>
        sum_graph_op<font color="#990000">,</font>      <i><font color="#9A1900">// summation</font></i>
        tan_graph_op<font color="#990000">,</font>      <i><font color="#9A1900">// unary: tangent</font></i>
        tanh_graph_op<font color="#990000">,</font>     <i><font color="#9A1900">// unary: hyperbolic tangent</font></i>
        n_graph_op         <i><font color="#9A1900">// number of graph_op_enum operators</font></i>
    <font color="#FF0000">}</font><font color="#990000">;</font>
<font color="#FF0000">}</font> <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="Examples" id="Examples">Examples</a></big></b>


<br>
<br>
<b><big><a name="Contents" id="Contents">Contents</a></big></b>
<br>
<table>
<tr><td><a href="graph_azmul_op.cpp.htm" target="_top">graph_azmul_op.cpp</a></td><td>C++&nbsp;AD&nbsp;Graph&nbsp;add&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="graph_add_op.cpp.htm" target="_top">graph_add_op.cpp</a></td><td>C++&nbsp;AD&nbsp;Graph&nbsp;add&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="graph_div_op.cpp.htm" target="_top">graph_div_op.cpp</a></td><td>C++&nbsp;AD&nbsp;Graph&nbsp;div&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="graph_mul_op.cpp.htm" target="_top">graph_mul_op.cpp</a></td><td>C++&nbsp;AD&nbsp;Graph&nbsp;mul&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="graph_pow_op.cpp.htm" target="_top">graph_pow_op.cpp</a></td><td>C++&nbsp;AD&nbsp;Graph&nbsp;pow&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="graph_sub_op.cpp.htm" target="_top">graph_sub_op.cpp</a></td><td>C++&nbsp;AD&nbsp;Graph&nbsp;sub&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="graph_unary_op.cpp.htm" target="_top">graph_unary_op.cpp</a></td><td>Graph&nbsp;Unary&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="graph_sum_op.cpp.htm" target="_top">graph_sum_op.cpp</a></td><td>C++&nbsp;AD&nbsp;Graph&nbsp;sum&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="graph_comp_op.cpp.htm" target="_top">graph_comp_op.cpp</a></td><td>C++&nbsp;AD&nbsp;Graph&nbsp;Comparison&nbsp;Operators:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="graph_cexp_op.cpp.htm" target="_top">graph_cexp_op.cpp</a></td><td>C++&nbsp;AD&nbsp;Graph&nbsp;Conditional&nbsp;Expressions:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="graph_discrete_op.cpp.htm" target="_top">graph_discrete_op.cpp</a></td><td>C++&nbsp;AD&nbsp;Graph&nbsp;add&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="graph_atom_op.cpp.htm" target="_top">graph_atom_op.cpp</a></td><td>C++&nbsp;AD&nbsp;Graph&nbsp;Atomic&nbsp;Three&nbsp;Functions:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="graph_atom4_op.cpp.htm" target="_top">graph_atom4_op.cpp</a></td><td>C++&nbsp;AD&nbsp;Graph&nbsp;Atomic&nbsp;Four&nbsp;Functions:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="graph_print_op.cpp.htm" target="_top">graph_print_op.cpp</a></td><td>C++&nbsp;AD&nbsp;Graph&nbsp;print&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr></table>
<hr>Input File: include/cppad/core/graph/graph_op_enum.hpp

</body>
</html>
