<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Atomic Linear ODE Class: Example Implementation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Atomic Linear ODE Class: Example Implementation">
<meta name="keywords" id="keywords" content=" atomic linear ode class: example implementation ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_four_lin_ode.hpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_four_lin_ode_implement.htm" target="_top">Prev</a>
</td><td><a href="atomic_four_lin_ode_set.hpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_four</option>
<option>atomic_four_example</option>
<option>atomic_four_lin_ode</option>
<option>atomic_four_lin_ode_implement</option>
<option>atomic_four_lin_ode.hpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_example_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_lin_ode_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_lin_ode_implement_htm.js'></script>
</td>
<td>atomic_four_lin_ode.hpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<center><b><big><big>Atomic Linear ODE Class: Example Implementation</big></big></b></center>
<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>

<b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font> <i><font color="#9A1900">// BEGIN_CPPAD_NAMESPACE</font></i>
<i><font color="#9A1900">//</font></i>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font>
<b><font color="#0000FF">class</font></b> <font color="#008080">atomic_lin_ode</font> <font color="#990000">:</font> <b><font color="#0000FF">public</font></b> CppAD<font color="#990000">::</font>atomic_four<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#FF0000">{</font>
<i><font color="#9A1900">//</font></i>
<b><font color="#0000FF">public</font></b><font color="#990000">:</font>
    <i><font color="#9A1900">// BEGIN sparse_rc_typedef</font></i>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">sparse_rc&lt; CppAD::vector&lt;size_t&gt; &gt;</font> sparse_rc<font color="#990000">;</font>
    <i><font color="#9A1900">// END sparse_rc_typedef</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// ctor</font></i>
    <b><font color="#000000">atomic_lin_ode</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font> name<font color="#990000">)</font> <font color="#990000">:</font>
    CppAD<font color="#990000">::</font>atomic_four<font color="#990000">&lt;</font>Base<font color="#990000">&gt;(</font>name<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> thread <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> thread <font color="#990000">&lt;</font> CPPAD_MAX_NUM_THREADS<font color="#990000">;</font> <font color="#990000">++</font>thread<font color="#990000">)</font>
            work_<font color="#990000">[</font>thread<font color="#990000">]</font> <font color="#990000">=</font> nullptr<font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// destructor</font></i>
    <font color="#990000">~</font><b><font color="#000000">atomic_lin_ode</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> thread <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> thread <font color="#990000">&lt;</font> CPPAD_MAX_NUM_THREADS<font color="#990000">;</font> <font color="#990000">++</font>thread<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">if</font></b><font color="#990000">(</font> work_<font color="#990000">[</font>thread<font color="#990000">]</font> <font color="#990000">!=</font> nullptr  <font color="#990000">)</font>
            <font color="#FF0000">{</font>   <i><font color="#9A1900">// allocated in set member function</font></i>
                <b><font color="#0000FF">delete</font></b> work_<font color="#990000">[</font>thread<font color="#990000">];</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// set</font></i>
    <font color="#008080">size_t</font> <b><font color="#000000">set</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> Base<font color="#990000">&amp;</font> r<font color="#990000">,</font> sparse_rc<font color="#990000">&amp;</font> pattern<font color="#990000">,</font> <b><font color="#0000FF">const</font></b> <font color="#009900">bool</font><font color="#990000">&amp;</font> transpose<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// get</font></i>
    <font color="#009900">void</font> <b><font color="#000000">get</font></b><font color="#990000">(</font><font color="#008080">size_t</font> call_id<font color="#990000">,</font> Base<font color="#990000">&amp;</font> r<font color="#990000">,</font> sparse_rc<font color="#990000">&amp;</font> pattern<font color="#990000">,</font> <font color="#009900">bool</font><font color="#990000">&amp;</font> transpose<font color="#990000">);</font>
<b><font color="#0000FF">private</font></b><font color="#990000">:</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// information connected to one call of this atomic function</font></i>
    <i><font color="#9A1900">// pattern points to pattern_vec for this thread</font></i>
    <b><font color="#0000FF">struct</font></b> <font color="#008080">call_struct</font> <font color="#FF0000">{</font>
        <font color="#008080">size_t</font> thread<font color="#990000">;</font> <font color="#008080">Base</font> r<font color="#990000">;</font> <font color="#008080">size_t</font> pattern_index<font color="#990000">;</font> <font color="#009900">bool</font> transpose<font color="#990000">;</font>
    <font color="#FF0000">}</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// information connected to each thread</font></i>
    <i><font color="#9A1900">// patterns are in a separate vector so do not need one for every call</font></i>
    <b><font color="#0000FF">struct</font></b> <font color="#008080">thread_struct</font> <font color="#FF0000">{</font>
        CppAD<font color="#990000">::</font><font color="#008080">vector&lt;sparse_rc&gt;</font>   pattern_vec<font color="#990000">;</font>
        CppAD<font color="#990000">::</font><font color="#008080">vector&lt;call_struct&gt;</font> call_vec<font color="#990000">;</font>
    <font color="#FF0000">}</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// Use pointers, to avoid false sharing between threads.</font></i>
    thread_struct<font color="#990000">*</font> work_<font color="#990000">[</font>CPPAD_MAX_NUM_THREADS<font color="#990000">];</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// base_lin_ode</font></i>
    <b><font color="#0000FF">static</font></b> <font color="#009900">void</font> <b><font color="#000000">base_lin_ode</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> Base<font color="#990000">&amp;</font>                r          <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> sparse_rc<font color="#990000">&amp;</font>           pattern    <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> <font color="#009900">bool</font><font color="#990000">&amp;</font>                transpose  <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font> x          <font color="#990000">,</font>
        CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>       y
    <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// overrides</font></i>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
<b><font color="#000080"># if</font></b> <font color="#993399">1</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// for_type</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">for_type</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font>                                        call_id<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font>     type_x<font color="#990000">,</font>
        CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font>           type_y
    <font color="#990000">)</font> <b><font color="#0000FF">override</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// Base forward</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">forward</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font>                                           call_id<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                       select_y<font color="#990000">,</font>
        <font color="#008080">size_t</font>                                           order_low<font color="#990000">,</font>
        <font color="#008080">size_t</font>                                           order_up<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                       taylor_x<font color="#990000">,</font>
        CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                             taylor_y
    <font color="#990000">)</font> <b><font color="#0000FF">override</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">// Cases not yet implemented</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// AD&lt;Base&gt; forward</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">forward</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font>                                           call_id<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                       select_y<font color="#990000">,</font>
        <font color="#008080">size_t</font>                                           order_low<font color="#990000">,</font>
        <font color="#008080">size_t</font>                                           order_up<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>          ataylor_x<font color="#990000">,</font>
        CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>                ataylor_y
    <font color="#990000">)</font> <b><font color="#0000FF">override</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// Base reverse</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">reverse</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font>                                           call_id<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                       select_x<font color="#990000">,</font>
        <font color="#008080">size_t</font>                                           order_up<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                       taylor_x<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                       taylor_y<font color="#990000">,</font>
        CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                             partial_x<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                       partial_y
    <font color="#990000">)</font> <b><font color="#0000FF">override</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// AD&lt;Base&gt; reverse</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">reverse</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font>                                           call_id<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                       select_x<font color="#990000">,</font>
        <font color="#008080">size_t</font>                                           order_up<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>          ataylor_x<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>          ataylor_y<font color="#990000">,</font>
        CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>                apartial_x<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>          apartial_y
    <font color="#990000">)</font> <b><font color="#0000FF">override</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// jac_sparsity</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">jac_sparsity</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font>                                         call_id<font color="#990000">,</font>
        <font color="#009900">bool</font>                                           dependency<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                     ident_zero_x<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                     select_x<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                     select_y<font color="#990000">,</font>
        CppAD<font color="#990000">::</font>sparse_rc<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>     pattern_out
    <font color="#990000">)</font> <b><font color="#0000FF">override</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// hes_sparsity</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">hes_sparsity</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font>                                         call_id<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                     ident_zero_x<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                     select_x<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                     select_y<font color="#990000">,</font>
        CppAD<font color="#990000">::</font>sparse_rc<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>     pattern_out
    <font color="#990000">)</font> <b><font color="#0000FF">override</font></b><font color="#990000">;</font>
<b><font color="#000080"># else</font></b>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// rev_depend</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">rev_depend</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font>                                         call_id<font color="#990000">,</font>
        CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                           depend_x<font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                     depend_y
    <font color="#990000">)</font> <b><font color="#0000FF">override</font></b><font color="#990000">;</font>
<b><font color="#000080"># endif</font></b>
<font color="#FF0000">}</font><font color="#990000">;</font>
<font color="#FF0000">}</font> <i><font color="#9A1900">// END_CPPAD_NAMESPACE</font></i>

<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/example/atomic_four/lin_ode/set.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/example/atomic_four/lin_ode/get.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/example/atomic_four/lin_ode/base_lin_ode.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/example/atomic_four/lin_ode/for_type.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/example/atomic_four/lin_ode/forward.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/example/atomic_four/lin_ode/reverse.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/example/atomic_four/lin_ode/jac_sparsity.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/example/atomic_four/lin_ode/hes_sparsity.hpp&gt;</font></tt></pre>

<hr>Input File: include/cppad/example/atomic_four/lin_ode/lin_ode.hpp

</body>
</html>
