<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Atomic Linear ODE Reverse Mode: Example Implementation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Atomic Linear ODE Reverse Mode: Example Implementation">
<meta name="keywords" id="keywords" content=" atomic linear ode reverse mode: example implementation purpose first order theory second simpson's rule source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_four_lin_ode_reverse.hpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_four_lin_ode_forward.hpp.htm" target="_top">Prev</a>
</td><td><a href="atomic_four_lin_ode_reverse_2.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_four</option>
<option>atomic_four_example</option>
<option>atomic_four_lin_ode</option>
<option>atomic_four_lin_ode_implement</option>
<option>atomic_four_lin_ode_reverse.hpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_example_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_lin_ode_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_lin_ode_implement_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_lin_ode_reverse.hpp_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>First Order Theory</option>
<option>Second Order Theory</option>
<option>Simpson's Rule</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<center><b><big><big>Atomic Linear ODE Reverse Mode: Example Implementation</big></big></b></center>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
The <code><font color="blue">reverse</font></code> routine overrides the virtual functions
used by the atomic_four base; see
<a href="atomic_four_reverse.htm" target="_top"><span style='white-space: nowrap'>reverse</span></a>
.

<br>
<br>
<b><big><a name="First Order Theory" id="First Order Theory">First Order Theory</a></big></b>
<br>
We are given a vector <small>@(@
w \in \B{R}^m
@)@</small> and need to compute
<small>@[@

    \partial_x w^\R{T} z(r, x)

@]@</small>
see the definition of <a href="atomic_four_lin_ode.htm#z(t, x)" target="_top"><span style='white-space: nowrap'>z(t,&nbsp;x)</span></a>
.
Consider the Lagrangian corresponding to
<small>@(@
w^\R{T} z(r, x)
@)@</small> as the objective and the ODE as the constraint:
<small>@[@

    L(x, \lambda)
    =
    w^\R{T} z(r, x) +
        \int_0^r \lambda(t, x)^\R{T}
            [ A(x) z(t, x) - z_t (t, x) ] \R{d} t

@]@</small>
where <small>@(@
\lambda : \R{R} \times \B{R}^n \rightarrow \B{R}^m
@)@</small>
is a smooth function.
If <small>@(@
z(t, x)
@)@</small> satisfies its ODE, then
<small>@[@

    \partial_x w^\R{T} z(r, x)
    =
    \partial_x L(x, \lambda)

@]@</small>
We use the following integration by parts to replace the <small>@(@
z_t (t, x)
@)@</small>
term in the integral defining <small>@(@
L(x, \lambda)
@)@</small>:
<small>@[@

    - \int_0^r \lambda(t, x)^\R{T} z_t (t, x) \R{d} t
    =
    - \left. \lambda(t, x)^\R{T} z(t, x) \right|_0^r
    +
    \int_0^r \lambda_t (t, x)^\R{T} z(t, x) \R{d} t

@]@</small>
Adding the condition <small>@(@
\lambda(r, x) = w
@)@</small>,
and noting that <small>@(@
z(0, x) = b(x)
@)@</small>, we have
<small>@[@

    L(x, \lambda)
    =
    \lambda(0, x)^\R{T} z(0, x)
    +
    \int_0^r \lambda_t (t, x)^\R{T} z(t, x) \R{d} t
    +
    \int_0^r \lambda(t, x)^\R{T} A(x) z(t, x) \R{d} t

@]@</small>
<small>@[@

    L(x, \lambda)
    =
    \lambda(0, x)^\R{T} b (x)
    +
    \int_0^r [ \lambda_t (t, x)^\R{T} + \lambda(t, x)^\R{T} A(x) ]
        z(t, x) \R{d} t

@]@</small>
<small>@[@

    L(x, \lambda)
    =
    \lambda(0, x)^\R{T} b (x)
    +
    \int_0^r z(t, x)^\R{T}
        [ \lambda_t (t, x) + A(x)^\R{T} \lambda(t, x) ] \R{d} t

@]@</small>
The partial derivative
of <small>@(@
L(x, \lambda)
@)@</small> with respect to <small>@(@
b_j
@)@</small>,
(not including the dependence of <small>@(@
\lambda(t, x)
@)@</small> on <small>@(@
x
@)@</small>)
is :
<small>@[@

    \partial_{b(j)} L(x, \lambda)
    =
    \lambda_j (0, x)

@]@</small>
The partial derivative
of <small>@(@
L(x, \lambda)
@)@</small> with respect to <small>@(@
A_{i,j}
@)@</small>
(not including The dependence of <small>@(@
\lambda(t, x)
@)@</small> on <small>@(@
x
@)@</small>)
is :
<small>@[@

    \partial_{A(i,j)} L(x, \lambda)
    =
    \int_0^r \partial_{A(i,j)} z(t, x)^\R{T}
        [ \lambda_t (t, x) + A(x)^\R{T} \lambda(t, x) ] \R{d} t
    +
    \int_0^r z_j (t, x) \lambda_i (t, x) \R{d} t

@]@</small>
If <small>@(@
\lambda(t, x)
@)@</small> satisfies the ODE
<small>@[@

    0 = \lambda_t (t, x) + A(x)^\R{T} \lambda(t, x)

@]@</small>
The partial derivative with respect to <small>@(@
A_{i,j}
@)@</small> is
<small>@[@

    \partial_{A(i,j)} L(x, \lambda)
    =
    \int_0^r z_j (t, x) \lambda_i (t, x) \R{d} t

@]@</small>
In summary, we can compute
an approximate solution for the initial value ODE:
<small>@[@

    z_t (t, x) = A(x) z(t, x) \W{,} z(0, x) = b(x)

@]@</small>
and approximate solution for the final value ODE:
<small>@[@

    \lambda_t (t, x) = - A(x)^\R{T} \lambda(t, x)
    \W{,}
    \lambda(r, x) = w

@]@</small>
Using the notation
<a href="atomic_four_lin_ode.htm#pattern.nnz" target="_top"><span style='white-space: nowrap'>nnz</span></a>
,
<a href="atomic_four_lin_ode.htm#pattern.row" target="_top"><span style='white-space: nowrap'>row</span></a>
, and
<a href="atomic_four_lin_ode.htm#pattern.col" target="_top"><span style='white-space: nowrap'>col</span></a>
,
We can compute an approximation for
<small>@[@

    \partial_{x(k)} w^\R{T} z(r, x)
    =
    \left\{ \begin{array}{lll}
    \int_0^r \lambda_i (t, x) z_j (r, x) \R{d} t
    & \R{where} \; i = \R{row} [k] \W{,} j = \R{col}[k]
    & \R{if} \; k < nnz
    \\
    \lambda_i (0, x)
    & \R{where} \; i = k - nnz
    & \R{otherwise}
    %
    \end{array} \right.

@]@</small>


<br>
<br>
<b><big><a name="Second Order Theory" id="Second Order Theory">Second Order Theory</a></big></b>

<br>
<a href="atomic_four_lin_ode_reverse_2.htm" target="_top"><span style='white-space: nowrap'>atomic_four_lin_ode_reverse_2</span></a>
.

<br>
<br>
<b><big><a name="Simpson's Rule" id="Simpson's Rule">Simpson's Rule</a></big></b>
<br>
This example uses Simpson's rule to approximate the integral
<small>@[@

    \int_0^r \lambda_i (t, x) z_j (t, x) \R{d} t

@]@</small>
Any other approximation for this integral can be used.


<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/example/atomic_four/lin_ode/lin_ode.hpp&gt;</font>

<b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font> <i><font color="#9A1900">// BEGIN_CPPAD_NAMESPACE</font></i>
<i><font color="#9A1900">// ----------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// reverse override for Base</font></i>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font>
<font color="#009900">bool</font> atomic_lin_ode<font color="#990000">&lt;</font>Base<font color="#990000">&gt;::</font><b><font color="#000000">reverse</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font>                                     call_id     <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                 select_x    <font color="#990000">,</font>
    <font color="#008080">size_t</font>                                     order_up    <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                 taylor_x    <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                 taylor_y    <font color="#990000">,</font>
    CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                       partial_x   <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                 partial_y   <font color="#990000">)</font>
<font color="#FF0000">{</font>
    <i><font color="#9A1900">// order_up</font></i>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> order_up <font color="#990000">&gt;</font> <font color="#993399">0</font> <font color="#990000">)</font>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// r, step, pattern, transpose</font></i>
    <font color="#008080">Base</font>      r<font color="#990000">;</font>
    <font color="#008080">Base</font>      step<font color="#990000">;</font>
    <font color="#008080">sparse_rc</font> pattern<font color="#990000">;</font>
    <font color="#009900">bool</font>      transpose<font color="#990000">;</font>
    <b><font color="#000000">get</font></b><font color="#990000">(</font>call_id<font color="#990000">,</font> r<font color="#990000">,</font> step<font color="#990000">,</font> pattern<font color="#990000">,</font> transpose<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#000000">reverse_one</font></b><font color="#990000">(</font>
        r<font color="#990000">,</font> step<font color="#990000">,</font> pattern<font color="#990000">,</font> transpose<font color="#990000">,</font> select_x<font color="#990000">,</font> taylor_x<font color="#990000">,</font> partial_y<font color="#990000">,</font> partial_x
    <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
<font color="#FF0000">}</font>
<i><font color="#9A1900">// ---------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// reverse override for AD&lt;Base&gt;</font></i>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font>
<font color="#009900">bool</font> atomic_lin_ode<font color="#990000">&lt;</font>Base<font color="#990000">&gt;::</font><b><font color="#000000">reverse</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font>                                           call_id    <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                       select_x   <font color="#990000">,</font>
    <font color="#008080">size_t</font>                                           order_up   <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>          ataylor_x  <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>          ataylor_y  <font color="#990000">,</font>
    CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>                apartial_x <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>          apartial_y <font color="#990000">)</font>
<font color="#FF0000">{</font>
    <i><font color="#9A1900">// order_up</font></i>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> order_up <font color="#990000">&gt;</font> <font color="#993399">0</font> <font color="#990000">)</font>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#000000">reverse_one</font></b><font color="#990000">(</font>call_id<font color="#990000">,</font> select_x<font color="#990000">,</font> ataylor_x<font color="#990000">,</font> apartial_y<font color="#990000">,</font> apartial_x<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
<font color="#FF0000">}</font>
<i><font color="#9A1900">// ---------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// reverse_one</font></i>
<i><font color="#9A1900">// Base version of first order reverse mode calculation as in Theory above</font></i>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font>
<font color="#009900">void</font> atomic_lin_ode<font color="#990000">&lt;</font>Base<font color="#990000">&gt;::</font><b><font color="#000000">reverse_one</font></b><font color="#990000">(</font>
    <b><font color="#0000FF">const</font></b> Base<font color="#990000">&amp;</font>                                r           <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> Base<font color="#990000">&amp;</font>                                step        <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> sparse_rc<font color="#990000">&amp;</font>                           pattern     <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> <font color="#009900">bool</font><font color="#990000">&amp;</font>                                transpose   <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                 select_x    <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                 x           <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                 w           <font color="#990000">,</font>
    CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                       partial_x   <font color="#990000">)</font>
<font color="#FF0000">{</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// nnz</font></i>
    <font color="#008080">size_t</font> nnz    <font color="#990000">=</font> pattern<font color="#990000">.</font><b><font color="#000000">nnz</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// m</font></i>
    <font color="#008080">size_t</font> m <font color="#990000">=</font> w<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
    <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> w<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> m <font color="#990000">);</font>
    <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> pattern<font color="#990000">.</font><b><font color="#000000">nr</font></b><font color="#990000">()</font> <font color="#990000">==</font> m <font color="#990000">);</font>
    <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> pattern<font color="#990000">.</font><b><font color="#000000">nc</font></b><font color="#990000">()</font> <font color="#990000">==</font> m <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// n</font></i>
<b><font color="#000080"># ifndef</font></b> NDEBUG
    <font color="#008080">size_t</font> n <font color="#990000">=</font> nnz <font color="#990000">+</font> m<font color="#990000">;</font>
<b><font color="#000080"># endif</font></b>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// x, partial_x</font></i>
    <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font>  <font color="#990000">==</font> n <font color="#990000">);</font>
    <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> partial_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// n_step</font></i>
    <font color="#008080">size_t</font> n_step <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> step <font color="#990000">&lt;</font> <b><font color="#000000">abs</font></b><font color="#990000">(</font>r<font color="#990000">)</font> <font color="#990000">/</font> <b><font color="#000000">Base</font></b><font color="#990000">(</font>n_step<font color="#990000">)</font> <font color="#990000">)</font>
        n_step <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> <b><font color="#000000">abs</font></b><font color="#990000">(</font>r<font color="#990000">)</font> <font color="#990000">/</font> step <font color="#990000">);</font>
    <b><font color="#0000FF">while</font></b><font color="#990000">(</font> step <font color="#990000">&lt;</font> <b><font color="#000000">abs</font></b><font color="#990000">(</font>r<font color="#990000">)</font> <font color="#990000">/</font> <b><font color="#000000">Base</font></b><font color="#990000">(</font>n_step<font color="#990000">)</font> <font color="#990000">)</font>
        <font color="#990000">++</font>n_step<font color="#990000">;</font>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> n_step <font color="#990000">%</font> <font color="#993399">2</font> <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">)</font>
        <font color="#990000">++</font>n_step<font color="#990000">;</font>
    <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> n_step <font color="#990000">%</font> <font color="#993399">2</font> <font color="#990000">==</font> <font color="#993399">0</font> <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// h</font></i>
    <font color="#008080">Base</font> h <font color="#990000">=</font> r <font color="#990000">/</font> <b><font color="#000000">Base</font></b><font color="#990000">(</font>n_step<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// x_tmp = [A, b]</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;Base&gt;</font> x_tmp <font color="#990000">=</font> x<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// z_all</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt; CppAD::vector&lt;Base&gt; &gt;</font> <b><font color="#000000">z_all</font></b><font color="#990000">(</font>n_step <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// z_all[0] = z(0, x)</font></i>
    z_all<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">].</font><b><font color="#000000">resize</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
        z_all<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">][</font>i<font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font>nnz <font color="#990000">+</font> i<font color="#990000">];</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// p</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> p <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> p <font color="#990000">&lt;</font> n_step<font color="#990000">;</font> <font color="#990000">++</font>p<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// x_tmp = [A, z(h*p, x) ]</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nnz<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
            x_tmp<font color="#990000">[</font>nnz <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">=</font> z_all<font color="#990000">[</font>p<font color="#990000">][</font>i<font color="#990000">];</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// z_all[p+1] = z( h*(p+1), x)</font></i>
        z_all<font color="#990000">[</font>p<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">].</font><b><font color="#000000">resize</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
        <b><font color="#000000">base_solver</font></b><font color="#990000">(</font>h<font color="#990000">,</font> step<font color="#990000">,</font> pattern<font color="#990000">,</font> transpose<font color="#990000">,</font> x_tmp<font color="#990000">,</font> z_all<font color="#990000">[</font>p<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">]);</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// lambda_previous = lambda(r, x) = w</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;Base&gt;</font> lambda_previous <font color="#990000">=</font> w<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// lambda_middle, lambda_next</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;Base&gt;</font> <b><font color="#000000">lambda_middle</font></b><font color="#990000">(</font>m<font color="#990000">),</font> <b><font color="#000000">lambda_next</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// partial_x</font></i>
    <i><font color="#9A1900">// partial_A L(x, lambda)</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> nnz<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font>
        partial_x<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">Base</font></b><font color="#990000">(</font><font color="#993399">0.0</font><font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// p</font></i>
    <font color="#008080">size_t</font> p <font color="#990000">=</font> n_step <font color="#990000">-</font> <font color="#993399">1</font><font color="#990000">;</font>
    <b><font color="#0000FF">while</font></b><font color="#990000">(</font>p<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> p <font color="#990000">%</font> <font color="#993399">2</font> <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// x_tmp = [ A, lambda( (p+1)*h, x ) ]</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
            x_tmp<font color="#990000">[</font>nnz <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">=</font> lambda_previous<font color="#990000">[</font>i<font color="#990000">];</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// lambda_middle = lambda(p*h, x)</font></i>
        <i><font color="#9A1900">// We convert the final value ODE to an initial value ODE by changing</font></i>
        <i><font color="#9A1900">// the sign of A^T and changing limits from [(p+1)*h, p*h] -&gt; [0, h].</font></i>
        <b><font color="#000000">base_solver</font></b><font color="#990000">(</font>h<font color="#990000">,</font> step<font color="#990000">,</font> pattern<font color="#990000">,</font> <font color="#990000">!</font> transpose<font color="#990000">,</font> x_tmp<font color="#990000">,</font> lambda_middle<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// x_tmp = [ A, lambda(p*h, x)]</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
            x_tmp<font color="#990000">[</font>nnz <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">=</font> lambda_middle<font color="#990000">[</font>i<font color="#990000">];</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// lambda_next = lambda((p-1), x)</font></i>
        <b><font color="#000000">base_solver</font></b><font color="#990000">(</font>h<font color="#990000">,</font> step<font color="#990000">,</font> pattern<font color="#990000">,</font> <font color="#990000">!</font> transpose<font color="#990000">,</font> x_tmp<font color="#990000">,</font> lambda_next<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// partial_x</font></i>
        <i><font color="#9A1900">// partail_A L(x, lambda)</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> nnz<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font> <b><font color="#0000FF">if</font></b><font color="#990000">(</font> select_x<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i <font color="#990000">=</font> pattern<font color="#990000">.</font><b><font color="#000000">row</font></b><font color="#990000">()[</font>k<font color="#990000">];</font>
            <font color="#008080">size_t</font> j <font color="#990000">=</font> pattern<font color="#990000">.</font><b><font color="#000000">col</font></b><font color="#990000">()[</font>k<font color="#990000">];</font>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> transpose <font color="#990000">)</font>
                std<font color="#990000">::</font><b><font color="#000000">swap</font></b><font color="#990000">(</font>i<font color="#990000">,</font> j<font color="#990000">);</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// sum  = lambda_i ((p+1)*h, x) * z_j ((p+1)*h, x)</font></i>
            <font color="#008080">Base</font> sum <font color="#990000">=</font> lambda_previous<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">*</font> z_all<font color="#990000">[</font>p<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">][</font>j<font color="#990000">];</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// sum += 4 * lambad_i(p*h, x) * z_j(p*h, x)</font></i>
            sum <font color="#990000">+=</font> <b><font color="#000000">Base</font></b><font color="#990000">(</font><font color="#993399">4.0</font><font color="#990000">)</font> <font color="#990000">*</font> lambda_middle<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">*</font> z_all<font color="#990000">[</font>p<font color="#990000">][</font>j<font color="#990000">];</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// sum += lambda_i ((p-1)*h, x) * z_j ((p-1)*h, x)</font></i>
            sum <font color="#990000">+=</font> lambda_next<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">*</font> z_all<font color="#990000">[</font>p<font color="#990000">-</font><font color="#993399">1</font><font color="#990000">][</font>j<font color="#990000">];</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// Simpson's rule for int_0^2*h lambda_i (t, x) z_j (t, x) dt</font></i>
            <font color="#008080">Base</font> integral <font color="#990000">=</font> h <font color="#990000">*</font> sum <font color="#990000">/</font> <b><font color="#000000">Base</font></b><font color="#990000">(</font><font color="#993399">3.0</font><font color="#990000">);</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// partial_{A(i,j)}</font></i>
            partial_x<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">+=</font> integral<font color="#990000">;</font>
        <font color="#FF0000">}</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// lambda_previous</font></i>
        lambda_previous <font color="#990000">=</font> lambda_next<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// p</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> p <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">)</font>
            p <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <b><font color="#0000FF">else</font></b>
            p <font color="#990000">-=</font> <font color="#993399">2</font><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// partial_x</font></i>
    <i><font color="#9A1900">// partial_b L(x, lambda) = lambda(0, x)</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// partial_{b(i)}</font></i>
        partial_x<font color="#990000">[</font>nnz <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">=</font> lambda_next<font color="#990000">[</font>i<font color="#990000">];</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">return</font></b><font color="#990000">;</font>
<font color="#FF0000">}</font>
<i><font color="#9A1900">// ---------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// reverse_one</font></i>
<i><font color="#9A1900">// AD version of first order reverse mode calculation as in Theory above</font></i>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font>
<font color="#009900">void</font> atomic_lin_ode<font color="#990000">&lt;</font>Base<font color="#990000">&gt;::</font><b><font color="#000000">reverse_one</font></b><font color="#990000">(</font>
    <b><font color="#0000FF">const</font></b> size_t<font color="#990000">&amp;</font>                              call_id     <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                 select_x    <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>    ax          <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>    aw          <font color="#990000">,</font>
    CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>          apartial_x  <font color="#990000">)</font>
<font color="#FF0000">{</font>   <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font> ad_base<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// r, step, pattern, transpose</font></i>
    <font color="#008080">Base</font>       r<font color="#990000">;</font>
    <font color="#008080">Base</font>       step<font color="#990000">;</font>
    <font color="#008080">sparse_rc</font> pattern<font color="#990000">;</font>
    <font color="#009900">bool</font>      transpose<font color="#990000">;</font>
    <b><font color="#000000">get</font></b><font color="#990000">(</font>call_id<font color="#990000">,</font> step<font color="#990000">,</font> r<font color="#990000">,</font> pattern<font color="#990000">,</font> transpose<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// nnz</font></i>
    <font color="#008080">size_t</font> nnz <font color="#990000">=</font> pattern<font color="#990000">.</font><b><font color="#000000">nnz</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// m</font></i>
    <font color="#008080">size_t</font> m <font color="#990000">=</font> aw<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
    <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> aw<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> m <font color="#990000">);</font>
    <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> pattern<font color="#990000">.</font><b><font color="#000000">nr</font></b><font color="#990000">()</font> <font color="#990000">==</font> m <font color="#990000">);</font>
    <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> pattern<font color="#990000">.</font><b><font color="#000000">nc</font></b><font color="#990000">()</font> <font color="#990000">==</font> m <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// n</font></i>
<b><font color="#000080"># ifndef</font></b> NDEBUG
    <font color="#008080">size_t</font> n <font color="#990000">=</font> nnz <font color="#990000">+</font> m<font color="#990000">;</font>
<b><font color="#000080"># endif</font></b>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// ax, apartial_x</font></i>
    <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> ax<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font>  <font color="#990000">==</font> n <font color="#990000">);</font>
    <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> apartial_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// n_step</font></i>
    <font color="#008080">size_t</font> n_step <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> step <font color="#990000">&lt;</font> <b><font color="#000000">abs</font></b><font color="#990000">(</font>r<font color="#990000">)</font> <font color="#990000">/</font> <b><font color="#000000">Base</font></b><font color="#990000">(</font>n_step<font color="#990000">)</font> <font color="#990000">)</font>
        n_step <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> <b><font color="#000000">abs</font></b><font color="#990000">(</font>r<font color="#990000">)</font> <font color="#990000">/</font> step <font color="#990000">);</font>
    <b><font color="#0000FF">while</font></b><font color="#990000">(</font> step <font color="#990000">&lt;</font> <b><font color="#000000">abs</font></b><font color="#990000">(</font>r<font color="#990000">)</font> <font color="#990000">/</font> <b><font color="#000000">Base</font></b><font color="#990000">(</font>n_step<font color="#990000">)</font> <font color="#990000">)</font>
        <font color="#990000">++</font>n_step<font color="#990000">;</font>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> n_step <font color="#990000">%</font> <font color="#993399">2</font> <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">)</font>
        <font color="#990000">++</font>n_step<font color="#990000">;</font>
    <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> n_step <font color="#990000">%</font> <font color="#993399">2</font> <font color="#990000">==</font> <font color="#993399">0</font> <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// h</font></i>
    <font color="#008080">Base</font> h <font color="#990000">=</font> r <font color="#990000">/</font> <b><font color="#000000">Base</font></b><font color="#990000">(</font>n_step<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// ax_tmp = [A, b]</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;ad_base&gt;</font> ax_tmp <font color="#990000">=</font> ax<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// az_all</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt; CppAD::vector&lt;ad_base&gt; &gt;</font> <b><font color="#000000">az_all</font></b><font color="#990000">(</font>n_step <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// az_all[0] = z(0, x)</font></i>
    az_all<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">].</font><b><font color="#000000">resize</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
        az_all<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">][</font>i<font color="#990000">]</font> <font color="#990000">=</font> ax<font color="#990000">[</font>nnz <font color="#990000">+</font> i<font color="#990000">];</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// call_id_1</font></i>
    <font color="#008080">size_t</font> call_id_1 <font color="#990000">=</font> <font color="#990000">(*</font><b><font color="#0000FF">this</font></b><font color="#990000">).</font><b><font color="#000000">set</font></b><font color="#990000">(</font>h<font color="#990000">,</font> step<font color="#990000">,</font> pattern<font color="#990000">,</font> transpose<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// p</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> p <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> p <font color="#990000">&lt;</font> n_step<font color="#990000">;</font> <font color="#990000">++</font>p<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// ax_tmp = [A, z(h*p, x) ]</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nnz<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
            ax_tmp<font color="#990000">[</font>nnz <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">=</font> az_all<font color="#990000">[</font>p<font color="#990000">][</font>i<font color="#990000">];</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// az_all[p+1] = az( h*(p+1), x)</font></i>
        <i><font color="#9A1900">// This interface requires a separate atomic funciton call for each</font></i>
        <i><font color="#9A1900">// step in the Simpson's rule integration. Perhaps it would be more</font></i>
        <i><font color="#9A1900">// efficient (but more complicated) to have an option whereby one call</font></i>
        <i><font color="#9A1900">// that returns all the values in az_all expect for az_all[0].</font></i>
        az_all<font color="#990000">[</font>p<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">].</font><b><font color="#000000">resize</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
        <font color="#990000">(*</font><b><font color="#0000FF">this</font></b><font color="#990000">)(</font>call_id_1<font color="#990000">,</font> ax_tmp<font color="#990000">,</font> az_all<font color="#990000">[</font>p<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">]);</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// alambda_previous = lambda(r, x) = w</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;ad_base&gt;</font> alambda_previous <font color="#990000">=</font> aw<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// alambda_middle, alambda_next</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;ad_base&gt;</font> <b><font color="#000000">alambda_middle</font></b><font color="#990000">(</font>m<font color="#990000">),</font> <b><font color="#000000">alambda_next</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// apartial_x</font></i>
    <i><font color="#9A1900">// apartial_A L(x, lambda)</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> nnz<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font>
        apartial_x<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">ad_base</font></b><font color="#990000">(</font><font color="#993399">0.0</font><font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// call_id_2</font></i>
    <font color="#008080">size_t</font> call_id_2 <font color="#990000">=</font> <font color="#990000">(*</font><b><font color="#0000FF">this</font></b><font color="#990000">).</font><b><font color="#000000">set</font></b><font color="#990000">(</font>h<font color="#990000">,</font> step<font color="#990000">,</font> pattern<font color="#990000">,</font> <font color="#990000">!</font> transpose<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// p</font></i>
    <font color="#008080">size_t</font> p <font color="#990000">=</font> n_step <font color="#990000">-</font> <font color="#993399">1</font><font color="#990000">;</font>
    <b><font color="#0000FF">while</font></b><font color="#990000">(</font>p<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> p <font color="#990000">%</font> <font color="#993399">2</font> <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// ax_tmp = [ A, lambda( (p+1)*h, x ) ]</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
            ax_tmp<font color="#990000">[</font>nnz <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">=</font> alambda_previous<font color="#990000">[</font>i<font color="#990000">];</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// alambda_middle = lambda(p*h, x)</font></i>
        <i><font color="#9A1900">// We convert the final value ODE to an initial value ODE by changing</font></i>
        <i><font color="#9A1900">// the sign of A^T and changing limits from [(p+1)*h, p*h] -&gt; [0, h].</font></i>
        <font color="#990000">(*</font><b><font color="#0000FF">this</font></b><font color="#990000">)(</font>call_id_2<font color="#990000">,</font> ax_tmp<font color="#990000">,</font> alambda_middle<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// ax_tmp = [ A, lambda(p*h, x)]</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
            ax_tmp<font color="#990000">[</font>nnz <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">=</font> alambda_middle<font color="#990000">[</font>i<font color="#990000">];</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// alambda_next = lambda((p-1), x)</font></i>
        <font color="#990000">(*</font><b><font color="#0000FF">this</font></b><font color="#990000">)(</font>call_id_2<font color="#990000">,</font> ax_tmp<font color="#990000">,</font> alambda_next<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// apartial_x</font></i>
        <i><font color="#9A1900">// partail_A L(x, lambda)</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> nnz<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font> <b><font color="#0000FF">if</font></b><font color="#990000">(</font> select_x<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i <font color="#990000">=</font> pattern<font color="#990000">.</font><b><font color="#000000">row</font></b><font color="#990000">()[</font>k<font color="#990000">];</font>
            <font color="#008080">size_t</font> j <font color="#990000">=</font> pattern<font color="#990000">.</font><b><font color="#000000">col</font></b><font color="#990000">()[</font>k<font color="#990000">];</font>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> transpose <font color="#990000">)</font>
                std<font color="#990000">::</font><b><font color="#000000">swap</font></b><font color="#990000">(</font>i<font color="#990000">,</font> j<font color="#990000">);</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// asum  = lambda_i ((p+1)*h, x) * z_j ((p+1)*h, x)</font></i>
            <font color="#008080">ad_base</font> asum <font color="#990000">=</font> alambda_previous<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">*</font> az_all<font color="#990000">[</font>p<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">][</font>j<font color="#990000">];</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// asum += 4 * lambad_i(p*h, x) * z_j(p*h, x)</font></i>
            asum <font color="#990000">+=</font> <b><font color="#000000">ad_base</font></b><font color="#990000">(</font><font color="#993399">4.0</font><font color="#990000">)</font> <font color="#990000">*</font> alambda_middle<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">*</font> az_all<font color="#990000">[</font>p<font color="#990000">][</font>j<font color="#990000">];</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// asum += lambda_i ((p-1)*h, x) * z_j ((p-1)*h, x)</font></i>
            asum <font color="#990000">+=</font> alambda_next<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">*</font> az_all<font color="#990000">[</font>p<font color="#990000">-</font><font color="#993399">1</font><font color="#990000">][</font>j<font color="#990000">];</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// Simpson's rule for int_0^2*h lambda_i (t, x) z_j (t, x) dt</font></i>
            <font color="#008080">ad_base</font> aintegral <font color="#990000">=</font> h <font color="#990000">*</font> asum <font color="#990000">/</font> <b><font color="#000000">ad_base</font></b><font color="#990000">(</font><font color="#993399">3.0</font><font color="#990000">);</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// apartial_x</font></i>
            <i><font color="#9A1900">// partial_{A(i,j)}</font></i>
            apartial_x<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">+=</font> aintegral<font color="#990000">;</font>
        <font color="#FF0000">}</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// alambda_previous</font></i>
        alambda_previous <font color="#990000">=</font> alambda_next<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// p</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> p <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">)</font>
            p <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <b><font color="#0000FF">else</font></b>
            p <font color="#990000">-=</font> <font color="#993399">2</font><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// apartial_x</font></i>
    <i><font color="#9A1900">// partial_b L(x, lambda) = lambda(0, x)</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// partial_{b(i)}</font></i>
        apartial_x<font color="#990000">[</font>nnz <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">=</font> alambda_next<font color="#990000">[</font>i<font color="#990000">];</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">return</font></b><font color="#990000">;</font>
<font color="#FF0000">}</font>
<font color="#FF0000">}</font> <i><font color="#9A1900">// END_CPPAD_NAMESPACE</font></i></tt></pre>

<hr>Input File: include/cppad/example/atomic_four/lin_ode/reverse.hpp

</body>
</html>
