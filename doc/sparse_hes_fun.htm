<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Evaluate a Function That Has a Sparse Hessian</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Evaluate a Function That Has a Sparse Hessian">
<meta name="keywords" id="keywords" content=" evaluate function that has sparse hessian syntax purpose inclusion float floatvector n x row col p fp example source code ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_sparse_hes_fun_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="sparse_jac_fun.hpp.htm" target="_top">Prev</a>
</td><td><a href="sparse_hes_fun.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_utility</option>
<option>sparse_hes_fun</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_speed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_speed_utility_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_sparse_hes_fun_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Inclusion</option>
<option>Float</option>
<option>FloatVector</option>
<option>n</option>
<option>x</option>
<option>row</option>
<option>col</option>
<option>p</option>
<option>fp</option>
<option>---..Function</option>
<option>---..Hessian</option>
<option>Example</option>
<option>Source Code</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@



<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Evaluate a Function That Has a Sparse Hessian</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>#&nbsp;include&nbsp;&lt;cppad/speed/sparse_hes_fun.hpp&gt;<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>sparse_hes_fun(</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>p</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fp</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This routine evaluates
<small>@(@
f(x)
@)@</small>, <small>@(@
f^{(1)} (x)
@)@</small>, or <small>@(@
f^{(2)} (x)
@)@</small>
where the Hessian <small>@(@
f^{(2)} (x)
@)@</small> is sparse.
The function <small>@(@
f : \B{R}^n \rightarrow \B{R}
@)@</small> only depends on the
size and contents of the index vectors 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
.
The non-zero entries in the Hessian of this function have
one of the following forms:
<small>@[@

    \DD{f}{x[row[k]]}{x[row[k]]}
    \; , \;
    \DD{f}{x[row[k]]}{x[col[k]]}
    \; , \;
    \DD{f}{x[col[k]]}{x[row[k]]}
    \; , \;
    \DD{f}{x[col[k]]}{x[col[k]]}

@]@</small>
for some <small>@(@
k
@)@</small> between zero and <small>@(@
K-1
@)@</small>.
All the other terms of the Hessian are zero.

<br>
<br>
<b><big><a name="Inclusion" id="Inclusion">Inclusion</a></big></b>
<br>
The template function <code><font color="blue">sparse_hes_fun</font></code>
is defined in the <code><font color="blue">CppAD</font></code> namespace by including
the file <code><font color="blue">cppad/speed/sparse_hes_fun.hpp</font></code>
(relative to the CppAD distribution directory).

<br>
<br>
<b><big><a name="Float" id="Float">Float</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>Float</span></font></i></code>
 must be a <a href="numerictype.htm" target="_top"><span style='white-space: nowrap'>NumericType</span></a>
.
In addition, if 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>z</span></font></i></code>
 are 
<code><i><font color="black"><span style='white-space: nowrap'>Float</span></font></i></code>
 objects,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;exp(</span></font><i><font color="black"><span style='white-space: nowrap'>z</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
must set the 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 equal the exponential of 
<code><i><font color="black"><span style='white-space: nowrap'>z</span></font></i></code>
, i.e.,
the derivative of 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 with respect to 
<code><i><font color="black"><span style='white-space: nowrap'>z</span></font></i></code>
 is equal to 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
.

<br>
<br>
<b><big><a name="FloatVector" id="FloatVector">FloatVector</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>FloatVector</span></font></i></code>
 is any
<a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
, or it can be a raw pointer,
with elements of type 
<code><i><font color="black"><span style='white-space: nowrap'>Float</span></font></i></code>
.

<br>
<br>
<b><big><a name="n" id="n">n</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the dimension for the domain space for <small>@(@
f(x)
@)@</small>.

<br>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>FloatVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It contains the argument value for which the function,
or its derivative, is being evaluated.
We use <small>@(@
n
@)@</small> to denote the size of the vector 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
.

<br>
<br>
<b><big><a name="row" id="row">row</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;size_t&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies one of the first
index of <small>@(@
x
@)@</small> for each non-zero Hessian term
(see <a href="sparse_hes_fun.htm#Purpose" target="_top"><span style='white-space: nowrap'>purpose</span></a>
 above).
All the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
 must be between zero and 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>-1</span></font></code>
.
The value <small>@(@
K
@)@</small> is defined by 
<code><i><font color="black"><span style='white-space: nowrap'>K</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()</span></font></code>
.

<br>
<br>
<b><big><a name="col" id="col">col</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;CppAD::vector&lt;size_t&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and its size must be <small>@(@
K
@)@</small>; i.e., the same as for 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
.
It specifies the second
index of <small>@(@
x
@)@</small> for the non-zero Hessian terms.
All the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
 must be between zero and 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>-1</span></font></code>
.
There are no duplicated entries requested, to be specific,
if 
<code><i><font color="black"><span style='white-space: nowrap'>k1</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;!=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k2</span></font></i></code>
 then

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k1</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k1</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;)&nbsp;!=&nbsp;(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k2</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k2</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;)<br>
</span></font></code>
<br>
<b><big><a name="p" id="p">p</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>p</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is either zero or two and
specifies the order of the derivative of <small>@(@
f
@)@</small>
that is being evaluated, i.e., <small>@(@
f^{(p)} (x)
@)@</small> is evaluated.

<br>
<br>
<b><big><a name="fp" id="fp">fp</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>fp</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>FloatVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fp</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The input value of the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>fp</span></font></i></code>
 does not matter.

<br>
<br>
<big><a name="fp.Function" id="fp.Function">Function</a></big>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i></code>
 is zero, 
<code><i><font color="black"><span style='white-space: nowrap'>fp</span></font></i></code>
 has size one and

<code><i><font color="black"><span style='white-space: nowrap'>fp</span></font></i><font color="blue"><span style='white-space: nowrap'>[0]</span></font></code>
 is the value of <small>@(@
f(x)
@)@</small>.

<br>
<br>
<big><a name="fp.Hessian" id="fp.Hessian">Hessian</a></big>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i></code>
 is two, 
<code><i><font color="black"><span style='white-space: nowrap'>fp</span></font></i></code>
 has size 
<code><i><font color="black"><span style='white-space: nowrap'>K</span></font></i></code>
 and
for <small>@(@
k = 0 , \ldots , K-1
@)@</small>,
<small>@[@

    \DD{f}{ x[ \R{row}[k] ] }{ x[ \R{col}[k] ]} = fp [k]

@]@</small>



<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file
<a href="sparse_hes_fun.cpp.htm" target="_top"><span style='white-space: nowrap'>sparse_hes_fun.cpp</span></a>

contains an example and test  of <code><font color="blue">sparse_hes_fun.hpp</font></code>.

<br>
<br>
<b><big><a name="Source Code" id="Source Code">Source Code</a></big></b>
<br>
The file
<a href="sparse_hes_fun.hpp.htm" target="_top"><span style='white-space: nowrap'>sparse_hes_fun.hpp</span></a>

contains the source code for this template function.


<hr>Input File: include/cppad/speed/sparse_hes_fun.hpp

</body>
</html>
