<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Timing Test of Multi-Threaded Summation of 1/i</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Timing Test of Multi-Threaded Summation of 1/i">
<meta name="keywords" id="keywords" content=" timing test multi-threaded summation 1/i syntax purpose thread ok time_out test_time num_threads mega_sum source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_harmonic_time_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="harmonic_sum.htm" target="_top">Prev</a>
</td><td><a href="multi_atomic_three.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>harmonic.cpp</option>
<option>harmonic_time</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_multi_thread_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_thread_test.cpp_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_harmonic.cpp_htm.js'></script>
</td>
<td>harmonic_time</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Thread</option>
<option>ok</option>
<option>time_out</option>
<option>test_time</option>
<option>num_threads</option>
<option>mega_sum</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Timing Test of Multi-Threaded Summation of 1/i</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;harmonic_time(<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_out</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>test_time</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>mega_sum</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
)</span></font></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
Runs a correctness and timing test for a multi-threaded
computation of the summation that defines the harmonic series
<small>@[@

    1 + 1/2 + 1/3 + ... + 1/n

@]@</small>

<br>
<br>
<b><big><a name="Thread" id="Thread">Thread</a></big></b>
<br>
It is assumed that this function is called by thread zero in sequential
mode; i.e., not <a href="ta_in_parallel.htm" target="_top"><span style='white-space: nowrap'>in_parallel</span></a>
.

<br>
<br>
<b><big><a name="ok" id="ok">ok</a></big></b>
<br>
This return value has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
If it is true,
<code><font color="blue">harmonic_time</font></code> passed the correctness test.
Otherwise it is false.

<br>
<br>
<b><big><a name="time_out" id="time_out">time_out</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;double&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>time_out</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The input value of the argument does not matter.
Upon return it is the number of wall clock seconds required for
to compute the summation.

<br>
<br>
<b><big><a name="test_time" id="test_time">test_time</a></big></b>
<br>
Is the minimum amount of wall clock time that the test should take.
The number of repeats for the test will be increased until this time
is reached.
The reported 
<code><i><font color="black"><span style='white-space: nowrap'>time_out</span></font></i></code>
 is the total wall clock time divided by the
number of repeats.

<br>
<br>
<b><big><a name="num_threads" id="num_threads">num_threads</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the number of threads that are available for this test.
If it is zero, the test is run without the multi-threading environment and

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;==&nbsp;thread_alloc::num_threads()<br>
</span></font></code>
when <code><font color="blue">harmonic_time</font></code> is called.
If it is non-zero, the test is run with the multi-threading and

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;thread_alloc::num_threads()<br>
</span></font></code>
when <code><font color="blue">harmonic_time</font></code> is called.

<br>
<br>
<b><big><a name="mega_sum" id="mega_sum">mega_sum</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>mega_sum</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and is greater than zero.
The value <small>@(@
n
@)@</small> in the summation
is equal to <small>@(@
10^6
@)@</small> times 
<code><i><font color="black"><span style='white-space: nowrap'>mega_sum</span></font></i></code>
.

<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cstring&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;limits&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;iostream&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cstdlib&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;algorithm&gt;</font>

<i><font color="#9A1900">// Note there is no mention of parallel mode in the documentation for</font></i>
<i><font color="#9A1900">// speed_test (so it is safe to use without special consideration).</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/utility/time_test.hpp&gt;</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
    <i><font color="#9A1900">// value of sum resulting from most recent call to test_once</font></i>
    <font color="#009900">double</font> sum_ <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
    <i><font color="#9A1900">//</font></i>
    <font color="#009900">void</font> <b><font color="#000000">test_once</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">if</font></b><font color="#990000">(</font> mega_sum_ <font color="#990000">&lt;</font> <font color="#993399">1</font> <font color="#990000">)</font>
        <font color="#FF0000">{</font>   std<font color="#990000">::</font>cerr <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"harmonic_time: mega_sum &lt; 1"</font> <font color="#990000">&lt;&lt;</font> std<font color="#990000">::</font>endl<font color="#990000">;</font>
            <b><font color="#000000">exit</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
        <font color="#FF0000">}</font>
        <font color="#008080">size_t</font> num_sum <font color="#990000">=</font> mega_sum_ <font color="#990000">*</font> <font color="#993399">1000000</font><font color="#990000">;</font>
        <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#000000">harmonic_sum</font></b><font color="#990000">(</font>sum_<font color="#990000">,</font> num_sum<font color="#990000">);</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> ok <font color="#990000">)</font>
        <font color="#FF0000">{</font>   std<font color="#990000">::</font>cerr <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"harmonic: error"</font> <font color="#990000">&lt;&lt;</font> std<font color="#990000">::</font>endl<font color="#990000">;</font>
            <b><font color="#000000">exit</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">return</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    <font color="#009900">void</font> <b><font color="#000000">test_repeat</font></b><font color="#990000">(</font><font color="#008080">size_t</font> repeat<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i<font color="#990000">;</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> repeat<font color="#990000">;</font> i<font color="#990000">++)</font>
            <b><font color="#000000">test_once</font></b><font color="#990000">();</font>
        <b><font color="#0000FF">return</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>
<font color="#FF0000">}</font>

<i><font color="#9A1900">// This is the only routine that is accessible outside of this file</font></i>
<font color="#009900">bool</font> <b><font color="#000000">harmonic_time</font></b><font color="#990000">(</font>
    <font color="#009900">double</font><font color="#990000">&amp;</font> time_out<font color="#990000">,</font> <font color="#009900">double</font> test_time<font color="#990000">,</font> <font color="#008080">size_t</font> num_threads<font color="#990000">,</font> <font color="#008080">size_t</font> mega_sum<font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok  <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    ok      <font color="#990000">&amp;=</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">thread_num</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>

    <i><font color="#9A1900">// arguments passed to harmonic_sum</font></i>
    num_threads_ <font color="#990000">=</font> num_threads<font color="#990000">;</font>
    mega_sum_    <font color="#990000">=</font> mega_sum<font color="#990000">;</font>

    <i><font color="#9A1900">// create team of threads</font></i>
    ok <font color="#990000">&amp;=</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">in_parallel</font></b><font color="#990000">()</font> <font color="#990000">==</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> num_threads <font color="#990000">&gt;</font> <font color="#993399">0</font> <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#000000">team_create</font></b><font color="#990000">(</font>num_threads<font color="#990000">);</font>
        ok <font color="#990000">&amp;=</font> num_threads <font color="#990000">==</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">num_threads</font></b><font color="#990000">();</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">else</font></b>
    <font color="#FF0000">{</font>   ok <font color="#990000">&amp;=</font> <font color="#993399">1</font> <font color="#990000">==</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">num_threads</font></b><font color="#990000">();</font>
    <font color="#FF0000">}</font>

    <i><font color="#9A1900">// run the test case and set the time return value</font></i>
    time_out <font color="#990000">=</font> CppAD<font color="#990000">::</font><b><font color="#000000">time_test</font></b><font color="#990000">(</font>test_repeat<font color="#990000">,</font> test_time<font color="#990000">);</font>

    <i><font color="#9A1900">// destroy team of threads</font></i>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> num_threads <font color="#990000">&gt;</font> <font color="#993399">0</font> <font color="#990000">)</font>
        <b><font color="#000000">team_destroy</font></b><font color="#990000">();</font>
    ok <font color="#990000">&amp;=</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">in_parallel</font></b><font color="#990000">()</font> <font color="#990000">==</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>

    <i><font color="#9A1900">// Correctness check</font></i>
    <font color="#009900">double</font> eps1000 <font color="#990000">=</font>
        <font color="#009900">double</font><font color="#990000">(</font>mega_sum_<font color="#990000">)</font> <font color="#990000">*</font> <font color="#993399">1e3</font> <font color="#990000">*</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>
    <font color="#008080">size_t</font> i       <font color="#990000">=</font> mega_sum_ <font color="#990000">*</font> <font color="#993399">1000000</font><font color="#990000">;</font>
    <font color="#009900">double</font> check <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
    <b><font color="#0000FF">while</font></b><font color="#990000">(</font>i<font color="#990000">)</font>
        check <font color="#990000">+=</font> <font color="#993399">1</font><font color="#990000">.</font> <font color="#990000">/</font> <font color="#009900">double</font><font color="#990000">(</font>i<font color="#990000">--);</font>
    ok <font color="#990000">&amp;=</font> std<font color="#990000">::</font><b><font color="#000000">fabs</font></b><font color="#990000">(</font>sum_ <font color="#990000">-</font> check<font color="#990000">)</font> <font color="#990000">&lt;=</font> eps1000<font color="#990000">;</font>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
</tt></pre>

<hr>Input File: example/multi_thread/harmonic.cpp

</body>
</html>
