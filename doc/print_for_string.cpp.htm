<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Print During Zero Order Forward Mode: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Print During Zero Order Forward Mode: Example and Test">
<meta name="keywords" id="keywords" content=" print during zero order forward mode: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_print_for_string.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="print_for_cout.cpp.htm" target="_top">Prev</a>
</td><td><a href="var2par.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>Convert</option>
<option>PrintFor</option>
<option>print_for_string.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_ad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_convert_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_printfor_htm.js'></script>
</td>
<td>print_for_string.cpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Print During Zero Order Forward Mode: Example and Test</big></big></b></center>
<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
    <b><font color="#0000FF">using</font></b> std<font color="#990000">::</font>endl<font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>

    <i><font color="#9A1900">// use of PrintFor to check for invalid function arguments</font></i>
    <font color="#008080">AD&lt;double&gt;</font> <b><font color="#000000">check_log</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> u<font color="#990000">,</font> std<font color="#990000">::</font>ostream<font color="#990000">&amp;</font> s_out<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// check AD&lt;double&gt; value during recording</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> u <font color="#990000">&lt;=</font> <font color="#993399">0</font> <font color="#990000">)</font>
            s_out <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"check_log: u = "</font> <font color="#990000">&lt;&lt;</font> u <font color="#990000">&lt;&lt;</font> <font color="#FF0000">" which is &lt;= 0</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>

        <i><font color="#9A1900">// check double value during zero order forward calculation</font></i>
        <b><font color="#000000">PrintFor</font></b><font color="#990000">(</font>u<font color="#990000">,</font> <font color="#FF0000">"check_log: u = "</font><font color="#990000">,</font> u <font color="#990000">,</font> <font color="#FF0000">" which is &lt;= 0</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">);</font>

        <b><font color="#0000FF">return</font></b> <b><font color="#000000">log</font></b><font color="#990000">(</font>u<font color="#990000">);</font>
    <font color="#FF0000">}</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">print_for</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>PrintFor<font color="#990000">;</font>
    std<font color="#990000">::</font><font color="#008080">stringstream</font> stream_out<font color="#990000">;</font>
    <font color="#009900">double</font> eps99 <font color="#990000">=</font> <font color="#993399">99.0</font> <font color="#990000">*</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>

    <i><font color="#9A1900">// independent variable vector</font></i>
    <font color="#008080">size_t</font> np <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
    <font color="#008080">size_t</font> nx <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
    <font color="#008080">size_t</font> ny <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;)</font> <b><font color="#000000">ap</font></b><font color="#990000">(</font>np<font color="#990000">),</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font>nx<font color="#990000">),</font> <b><font color="#000000">ay</font></b><font color="#990000">(</font>ny<font color="#990000">);</font>
    ap<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
    ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">2.0</font><font color="#990000">;</font>
    <b><font color="#000000">Independent</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> ap<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// define f(x, p) = log(p) + log(x)</font></i>
    ay<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">check_log</font></b><font color="#990000">(</font>ap<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> stream_out<font color="#990000">)</font> <font color="#990000">+</font> <b><font color="#000000">check_log</font></b><font color="#990000">(</font>ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> stream_out<font color="#990000">);</font>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> <b><font color="#000000">f</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// zero order forward</font></i>
    <i><font color="#9A1900">// both x and p are positive so no output generated</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font> <b><font color="#000000">p</font></b><font color="#990000">(</font>np<font color="#990000">),</font> <b><font color="#000000">x</font></b><font color="#990000">(</font>nx<font color="#990000">),</font> <b><font color="#000000">y</font></b><font color="#990000">(</font>ny<font color="#990000">);</font>
    p<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
    x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">2.0</font><font color="#990000">;</font>
    f<font color="#990000">.</font><b><font color="#000000">new_dynamic</font></b><font color="#990000">(</font>p<font color="#990000">);</font>
    f<font color="#990000">.</font><b><font color="#000000">check_for_nan</font></b><font color="#990000">(</font><b><font color="#0000FF">false</font></b><font color="#990000">);</font>
    y <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">,</font> stream_out<font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> stream_out<font color="#990000">.</font><b><font color="#000000">str</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#FF0000">""</font><font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> std<font color="#990000">::</font><b><font color="#000000">log</font></b><font color="#990000">(</font>p<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">])</font> <font color="#990000">+</font> std<font color="#990000">::</font><b><font color="#000000">log</font></b><font color="#990000">(</font>x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]),</font> eps99<font color="#990000">,</font> eps99<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// zero order forward</font></i>
    <i><font color="#9A1900">// p is negative so output generated</font></i>
    p<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">-</font><font color="#993399">1.0</font><font color="#990000">;</font>
    x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">2.0</font><font color="#990000">;</font>
    f<font color="#990000">.</font><b><font color="#000000">new_dynamic</font></b><font color="#990000">(</font>p<font color="#990000">);</font>
    f<font color="#990000">.</font><b><font color="#000000">check_for_nan</font></b><font color="#990000">(</font><b><font color="#0000FF">false</font></b><font color="#990000">);</font>
    y <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">,</font> stream_out<font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> stream_out<font color="#990000">.</font><b><font color="#000000">str</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#FF0000">"check_log: u = -1 which is &lt;= 0</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> std<font color="#990000">::</font><b><font color="#000000">isnan</font></b><font color="#990000">(</font>y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]);</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/general/print_for.cpp

</body>
</html>
