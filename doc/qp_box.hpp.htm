<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>qp_box Source Code</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="qp_box Source Code">
<meta name="keywords" id="keywords" content=" qp_box source code ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_qp_box.hpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="qp_box.cpp.htm" target="_top">Prev</a>
</td><td><a href="abs_min_quad.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>other_adfun</option>
<option>abs_normal_fun</option>
<option>example_abs_normal</option>
<option>qp_box</option>
<option>qp_box.hpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_abs_normal_fun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_example_abs_normal_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_qp_box_htm.js'></script>
</td>
<td>qp_box.hpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>qp_box Source Code</big></big></b></center>
<pre><tt><b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font> <i><font color="#9A1900">// BEGIN_CPPAD_NAMESPACE</font></i>

<i><font color="#9A1900">// BEGIN PROTOTYPE</font></i>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Vector</font><font color="#990000">&gt;</font>
<font color="#009900">bool</font> <b><font color="#000000">qp_box</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font>        level   <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> a       <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> b       <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> c       <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> C       <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> g       <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> G       <font color="#990000">,</font>
    <font color="#009900">double</font>        epsilon <font color="#990000">,</font>
    <font color="#008080">size_t</font>        maxitr  <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> xin     <font color="#990000">,</font>
    Vector<font color="#990000">&amp;</font>       xout    <font color="#990000">)</font>
<i><font color="#9A1900">// END PROTOTYPE</font></i>
<font color="#FF0000">{</font>   <font color="#009900">double</font> inf <font color="#990000">=</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">infinity</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <font color="#008080">size_t</font> n <font color="#990000">=</font> a<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
    <font color="#008080">size_t</font> m <font color="#990000">=</font> c<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#000000">CPPAD_ASSERT_KNOWN</font></b><font color="#990000">(</font>level <font color="#990000">&lt;=</font> <font color="#993399">2</font><font color="#990000">,</font> <font color="#FF0000">"qp_interior: level is greater than 2"</font><font color="#990000">);</font>
    <b><font color="#000000">CPPAD_ASSERT_KNOWN</font></b><font color="#990000">(</font>
        <b><font color="#000000">size_t</font></b><font color="#990000">(</font>b<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">())</font> <font color="#990000">==</font> n<font color="#990000">,</font> <font color="#FF0000">"qp_box: size of b is not n"</font>
    <font color="#990000">);</font>
    <b><font color="#000000">CPPAD_ASSERT_KNOWN</font></b><font color="#990000">(</font>
        <b><font color="#000000">size_t</font></b><font color="#990000">(</font>C<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">())</font> <font color="#990000">==</font> m <font color="#990000">*</font> n<font color="#990000">,</font> <font color="#FF0000">"qp_box: size of C is not m * n"</font>
    <font color="#990000">);</font>
    <b><font color="#000000">CPPAD_ASSERT_KNOWN</font></b><font color="#990000">(</font>
        <b><font color="#000000">size_t</font></b><font color="#990000">(</font>g<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">())</font> <font color="#990000">==</font> n<font color="#990000">,</font> <font color="#FF0000">"qp_box: size of g is not n"</font>
    <font color="#990000">);</font>
    <b><font color="#000000">CPPAD_ASSERT_KNOWN</font></b><font color="#990000">(</font>
        <b><font color="#000000">size_t</font></b><font color="#990000">(</font>G<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">())</font> <font color="#990000">==</font> n <font color="#990000">*</font> n<font color="#990000">,</font> <font color="#FF0000">"qp_box: size of G is not n * n"</font>
    <font color="#990000">);</font>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> level <font color="#990000">&gt;</font> <font color="#993399">0</font> <font color="#990000">)</font>
    <font color="#FF0000">{</font>   std<font color="#990000">::</font>cout <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"start qp_box</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
        CppAD<font color="#990000">::</font><b><font color="#000000">abs_print_mat</font></b><font color="#990000">(</font><font color="#FF0000">"a"</font><font color="#990000">,</font> n<font color="#990000">,</font> <font color="#993399">1</font><font color="#990000">,</font> a<font color="#990000">);</font>
        CppAD<font color="#990000">::</font><b><font color="#000000">abs_print_mat</font></b><font color="#990000">(</font><font color="#FF0000">"b"</font><font color="#990000">,</font> n<font color="#990000">,</font> <font color="#993399">1</font><font color="#990000">,</font> b<font color="#990000">);</font>
        CppAD<font color="#990000">::</font><b><font color="#000000">abs_print_mat</font></b><font color="#990000">(</font><font color="#FF0000">"c"</font><font color="#990000">,</font> m<font color="#990000">,</font> <font color="#993399">1</font><font color="#990000">,</font> c<font color="#990000">);</font>
        CppAD<font color="#990000">::</font><b><font color="#000000">abs_print_mat</font></b><font color="#990000">(</font><font color="#FF0000">"C"</font><font color="#990000">,</font> m<font color="#990000">,</font> n<font color="#990000">,</font> C<font color="#990000">);</font>
        CppAD<font color="#990000">::</font><b><font color="#000000">abs_print_mat</font></b><font color="#990000">(</font><font color="#FF0000">"g"</font><font color="#990000">,</font> <font color="#993399">1</font><font color="#990000">,</font> n<font color="#990000">,</font> g<font color="#990000">);</font>
        CppAD<font color="#990000">::</font><b><font color="#000000">abs_print_mat</font></b><font color="#990000">(</font><font color="#FF0000">"G"</font><font color="#990000">,</font> n<font color="#990000">,</font> n<font color="#990000">,</font> G<font color="#990000">);</font>
        CppAD<font color="#990000">::</font><b><font color="#000000">abs_print_mat</font></b><font color="#990000">(</font><font color="#FF0000">"xin"</font><font color="#990000">,</font> n<font color="#990000">,</font> <font color="#993399">1</font><font color="#990000">,</font> xin<font color="#990000">);</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// count number of lower and upper limits</font></i>
    <font color="#008080">size_t</font> n_limit <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <b><font color="#000000">CPPAD_ASSERT_KNOWN</font></b><font color="#990000">(</font>G<font color="#990000">[</font>j <font color="#990000">*</font> n <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">&gt;=</font> <font color="#993399">0.0</font><font color="#990000">,</font> <font color="#FF0000">"qp_box: G_{j,j} &lt; 0.0"</font><font color="#990000">);</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">-</font>inf <font color="#990000">&lt;</font> a<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">)</font>
            <font color="#990000">++</font>n_limit<font color="#990000">;</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> b<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">&lt;</font> inf <font color="#990000">)</font>
            <font color="#990000">++</font>n_limit<font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// C_int and c_int define the extended constraints</font></i>
    <font color="#008080">Vector</font> <b><font color="#000000">C_int</font></b><font color="#990000">((</font>m <font color="#990000">+</font> n_limit<font color="#990000">)</font> <font color="#990000">*</font> n <font color="#990000">),</font> <b><font color="#000000">c_int</font></b><font color="#990000">(</font>m <font color="#990000">+</font> n_limit<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font>C_int<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">());</font> i<font color="#990000">++)</font>
        C_int<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// put C * x + c &lt;= 0 in C_int, c_int</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> i<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   c_int<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> c<font color="#990000">[</font>i<font color="#990000">];</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
            C_int<font color="#990000">[</font>i <font color="#990000">*</font> n <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">=</font> C<font color="#990000">[</font>i <font color="#990000">*</font> n <font color="#990000">+</font> j<font color="#990000">];</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// put I * x - b &lt;= 0 in C_int, c_int</font></i>
    <font color="#008080">size_t</font> i_limit <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font> <b><font color="#0000FF">if</font></b><font color="#990000">(</font> b<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">&lt;</font> inf <font color="#990000">)</font>
    <font color="#FF0000">{</font>   c_int<font color="#990000">[</font>m <font color="#990000">+</font> i_limit<font color="#990000">]</font>            <font color="#990000">=</font> <font color="#990000">-</font> b<font color="#990000">[</font>j<font color="#990000">];</font>
        C_int<font color="#990000">[(</font>m <font color="#990000">+</font> i_limit<font color="#990000">)</font> <font color="#990000">*</font> n <font color="#990000">+</font> j<font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
        <font color="#990000">++</font>i_limit<font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// put a - I * x &lt;= 0 in C_int, c_int</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font> <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">-</font>inf <font color="#990000">&lt;</font> a<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">)</font>
    <font color="#FF0000">{</font>   c_int<font color="#990000">[</font>m <font color="#990000">+</font> i_limit<font color="#990000">]</font>           <font color="#990000">=</font> a<font color="#990000">[</font>j<font color="#990000">];</font>
        C_int<font color="#990000">[(</font>m <font color="#990000">+</font> i_limit<font color="#990000">)</font> <font color="#990000">*</font> n <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">-</font><font color="#993399">1.0</font><font color="#990000">;</font>
        <font color="#990000">++</font>i_limit<font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <font color="#008080">Vector</font> <b><font color="#000000">yout</font></b><font color="#990000">(</font>m <font color="#990000">+</font> n_limit<font color="#990000">),</font> <b><font color="#000000">sout</font></b><font color="#990000">(</font>m <font color="#990000">+</font> n_limit<font color="#990000">);</font>
    <font color="#008080">size_t</font> level_int <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> level <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">)</font>
        level_int <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#000000">qp_interior</font></b><font color="#990000">(</font> level_int<font color="#990000">,</font>
        c_int<font color="#990000">,</font> C_int<font color="#990000">,</font> g<font color="#990000">,</font> G<font color="#990000">,</font> epsilon<font color="#990000">,</font> maxitr<font color="#990000">,</font> xin<font color="#990000">,</font> xout<font color="#990000">,</font> yout<font color="#990000">,</font> sout
    <font color="#990000">);</font>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> level <font color="#990000">&gt;</font> <font color="#993399">0</font> <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">if</font></b><font color="#990000">(</font> level <font color="#990000">&lt;</font> <font color="#993399">2</font> <font color="#990000">)</font>
            CppAD<font color="#990000">::</font><b><font color="#000000">abs_print_mat</font></b><font color="#990000">(</font><font color="#FF0000">"xout"</font><font color="#990000">,</font> n<font color="#990000">,</font> <font color="#993399">1</font><font color="#990000">,</font> xout<font color="#990000">);</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> ok <font color="#990000">)</font>
            std<font color="#990000">::</font>cout <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"end q_box: ok = true</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
        <b><font color="#0000FF">else</font></b>
            std<font color="#990000">::</font>cout <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"end q_box: ok = false</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>

<font color="#FF0000">}</font> <i><font color="#9A1900">// END_CPPAD_NAMESPACE</font></i></tt></pre>

<hr>Input File: example/abs_normal/qp_box.omh

</body>
</html>
