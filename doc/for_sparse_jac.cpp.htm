<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Forward Mode Jacobian Sparsity: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Forward Mode Jacobian Sparsity: Example and Test">
<meta name="keywords" id="keywords" content=" forward mode jacobian sparsity: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_for_sparse_jac.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="forsparsejac.htm" target="_top">Prev</a>
</td><td><a href="revsparsejac.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>sparsity_pattern</option>
<option>ForSparseJac</option>
<option>for_sparse_jac.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_sparsity_pattern_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_forsparsejac_htm.js'></script>
</td>
<td>for_sparse_jac.cpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@



<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Forward Mode Jacobian Sparsity: Example and Test</big></big></b></center>
<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;set&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font> <i><font color="#9A1900">// -------------------------------------------------------------</font></i>
<i><font color="#9A1900">// define the template function BoolCases&lt;Vector&gt;</font></i>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Vector</font><font color="#990000">&gt;</font>  <i><font color="#9A1900">// vector class, elements of type bool</font></i>
<font color="#009900">bool</font> <b><font color="#000000">BoolCases</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>

    <i><font color="#9A1900">// domain space vector</font></i>
    <font color="#008080">size_t</font> n <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;)</font> <b><font color="#000000">X</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    X<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
    X<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>

    <i><font color="#9A1900">// declare independent variables and start recording</font></i>
    CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>X<font color="#990000">);</font>

    <i><font color="#9A1900">// range space vector</font></i>
    <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;)</font> <b><font color="#000000">Y</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    Y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> X<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
    Y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> X<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> X<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
    Y<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> X<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>

    <i><font color="#9A1900">// create f: X -&gt; Y and stop tape recording</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> <b><font color="#000000">f</font></b><font color="#990000">(</font>X<font color="#990000">,</font> Y<font color="#990000">);</font>

    <i><font color="#9A1900">// sparsity pattern for the identity matrix</font></i>
    <font color="#008080">Vector</font> <b><font color="#000000">r</font></b><font color="#990000">(</font>n <font color="#990000">*</font> n<font color="#990000">);</font>
    <font color="#008080">size_t</font> i<font color="#990000">,</font> j<font color="#990000">;</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">;</font> i<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
            r<font color="#990000">[</font> i <font color="#990000">*</font> n <font color="#990000">+</font> j <font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">(</font>i <font color="#990000">==</font> j<font color="#990000">);</font>
    <font color="#FF0000">}</font>

    <i><font color="#9A1900">// sparsity pattern for F'(x)</font></i>
    <font color="#008080">Vector</font> <b><font color="#000000">s</font></b><font color="#990000">(</font>m <font color="#990000">*</font> n<font color="#990000">);</font>
    s <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">ForSparseJac</font></b><font color="#990000">(</font>n<font color="#990000">,</font> r<font color="#990000">);</font>

    <i><font color="#9A1900">// check values</font></i>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>s<font color="#990000">[</font> <font color="#993399">0</font> <font color="#990000">*</font> n <font color="#990000">+</font> <font color="#993399">0</font> <font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">true</font></b><font color="#990000">);</font>  <i><font color="#9A1900">// Y[0] does     depend on X[0]</font></i>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>s<font color="#990000">[</font> <font color="#993399">0</font> <font color="#990000">*</font> n <font color="#990000">+</font> <font color="#993399">1</font> <font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">false</font></b><font color="#990000">);</font> <i><font color="#9A1900">// Y[0] does not depend on X[1]</font></i>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>s<font color="#990000">[</font> <font color="#993399">1</font> <font color="#990000">*</font> n <font color="#990000">+</font> <font color="#993399">0</font> <font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">true</font></b><font color="#990000">);</font>  <i><font color="#9A1900">// Y[1] does     depend on X[0]</font></i>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>s<font color="#990000">[</font> <font color="#993399">1</font> <font color="#990000">*</font> n <font color="#990000">+</font> <font color="#993399">1</font> <font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">true</font></b><font color="#990000">);</font>  <i><font color="#9A1900">// Y[1] does     depend on X[1]</font></i>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>s<font color="#990000">[</font> <font color="#993399">2</font> <font color="#990000">*</font> n <font color="#990000">+</font> <font color="#993399">0</font> <font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">false</font></b><font color="#990000">);</font> <i><font color="#9A1900">// Y[2] does not depend on X[0]</font></i>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>s<font color="#990000">[</font> <font color="#993399">2</font> <font color="#990000">*</font> n <font color="#990000">+</font> <font color="#993399">1</font> <font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">true</font></b><font color="#990000">);</font>  <i><font color="#9A1900">// Y[2] does     depend on X[1]</font></i>

    <i><font color="#9A1900">// check that values are stored</font></i>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>f<font color="#990000">.</font><b><font color="#000000">size_forward_bool</font></b><font color="#990000">()</font> <font color="#990000">&gt;</font> <font color="#993399">0</font><font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>f<font color="#990000">.</font><b><font color="#000000">size_forward_set</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">);</font>

    <i><font color="#9A1900">// sparsity pattern for F'(x)^T, note R is the identity, so R^T = R</font></i>
    <font color="#009900">bool</font> transpose <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#008080">Vector</font> <b><font color="#000000">st</font></b><font color="#990000">(</font>n <font color="#990000">*</font> m<font color="#990000">);</font>
    st <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">ForSparseJac</font></b><font color="#990000">(</font>n<font color="#990000">,</font> r<font color="#990000">,</font> transpose<font color="#990000">);</font>

    <i><font color="#9A1900">// check values</font></i>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>st<font color="#990000">[</font> <font color="#993399">0</font> <font color="#990000">*</font> m <font color="#990000">+</font> <font color="#993399">0</font> <font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">true</font></b><font color="#990000">);</font>  <i><font color="#9A1900">// Y[0] does     depend on X[0]</font></i>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>st<font color="#990000">[</font> <font color="#993399">1</font> <font color="#990000">*</font> m <font color="#990000">+</font> <font color="#993399">0</font> <font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">false</font></b><font color="#990000">);</font> <i><font color="#9A1900">// Y[0] does not depend on X[1]</font></i>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>st<font color="#990000">[</font> <font color="#993399">0</font> <font color="#990000">*</font> m <font color="#990000">+</font> <font color="#993399">1</font> <font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">true</font></b><font color="#990000">);</font>  <i><font color="#9A1900">// Y[1] does     depend on X[0]</font></i>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>st<font color="#990000">[</font> <font color="#993399">1</font> <font color="#990000">*</font> m <font color="#990000">+</font> <font color="#993399">1</font> <font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">true</font></b><font color="#990000">);</font>  <i><font color="#9A1900">// Y[1] does     depend on X[1]</font></i>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>st<font color="#990000">[</font> <font color="#993399">0</font> <font color="#990000">*</font> m <font color="#990000">+</font> <font color="#993399">2</font> <font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">false</font></b><font color="#990000">);</font> <i><font color="#9A1900">// Y[2] does not depend on X[0]</font></i>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>st<font color="#990000">[</font> <font color="#993399">1</font> <font color="#990000">*</font> m <font color="#990000">+</font> <font color="#993399">2</font> <font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#0000FF">true</font></b><font color="#990000">);</font>  <i><font color="#9A1900">// Y[2] does     depend on X[1]</font></i>

    <i><font color="#9A1900">// check that values are stored</font></i>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>f<font color="#990000">.</font><b><font color="#000000">size_forward_bool</font></b><font color="#990000">()</font> <font color="#990000">&gt;</font> <font color="#993399">0</font><font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>f<font color="#990000">.</font><b><font color="#000000">size_forward_set</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">);</font>

    <i><font color="#9A1900">// free values from forward calculation</font></i>
    f<font color="#990000">.</font><b><font color="#000000">size_forward_bool</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>f<font color="#990000">.</font><b><font color="#000000">size_forward_bool</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">);</font>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
<i><font color="#9A1900">// define the template function SetCases&lt;Vector&gt;</font></i>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Vector</font><font color="#990000">&gt;</font>  <i><font color="#9A1900">// vector class, elements of type std::set&lt;size_t&gt;</font></i>
<font color="#009900">bool</font> <b><font color="#000000">SetCases</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>

    <i><font color="#9A1900">// domain space vector</font></i>
    <font color="#008080">size_t</font> n <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;)</font> <b><font color="#000000">X</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    X<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
    X<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>

    <i><font color="#9A1900">// declare independent variables and start recording</font></i>
    CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>X<font color="#990000">);</font>

    <i><font color="#9A1900">// range space vector</font></i>
    <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;)</font> <b><font color="#000000">Y</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    Y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> X<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
    Y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> X<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> X<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
    Y<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> X<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>

    <i><font color="#9A1900">// create f: X -&gt; Y and stop tape recording</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> <b><font color="#000000">f</font></b><font color="#990000">(</font>X<font color="#990000">,</font> Y<font color="#990000">);</font>

    <i><font color="#9A1900">// sparsity pattern for the identity matrix</font></i>
    <font color="#008080">Vector</font> <b><font color="#000000">r</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <font color="#008080">size_t</font> i<font color="#990000">;</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">;</font> i<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <b><font color="#000000">assert</font></b><font color="#990000">(</font> r<font color="#990000">[</font>i<font color="#990000">].</font><b><font color="#000000">empty</font></b><font color="#990000">()</font> <font color="#990000">);</font>
        r<font color="#990000">[</font>i<font color="#990000">].</font><b><font color="#000000">insert</font></b><font color="#990000">(</font>i<font color="#990000">);</font>
    <font color="#FF0000">}</font>

    <i><font color="#9A1900">// sparsity pattern for F'(x)</font></i>
    <font color="#008080">Vector</font> <b><font color="#000000">s</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    s <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">ForSparseJac</font></b><font color="#990000">(</font>n<font color="#990000">,</font> r<font color="#990000">);</font>

    <i><font color="#9A1900">// an interator to a standard set</font></i>
    std<font color="#990000">::</font>set<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;::</font><font color="#008080">iterator</font> itr<font color="#990000">;</font>
    <font color="#009900">bool</font> found<font color="#990000">;</font>

    <i><font color="#9A1900">// Y[0] does     depend on X[0]</font></i>
    found <font color="#990000">=</font> s<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">].</font><b><font color="#000000">find</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">)</font> <font color="#990000">!=</font> s<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">].</font><b><font color="#000000">end</font></b><font color="#990000">();</font>  ok <font color="#990000">&amp;=</font> <font color="#990000">(</font> found <font color="#990000">==</font> <b><font color="#0000FF">true</font></b> <font color="#990000">);</font>
    <i><font color="#9A1900">// Y[0] does not depend on X[1]</font></i>
    found <font color="#990000">=</font> s<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">].</font><b><font color="#000000">find</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">!=</font> s<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">].</font><b><font color="#000000">end</font></b><font color="#990000">();</font>  ok <font color="#990000">&amp;=</font> <font color="#990000">(</font> found <font color="#990000">==</font> <b><font color="#0000FF">false</font></b> <font color="#990000">);</font>
    <i><font color="#9A1900">// Y[1] does     depend on X[0]</font></i>
    found <font color="#990000">=</font> s<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">].</font><b><font color="#000000">find</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">)</font> <font color="#990000">!=</font> s<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">].</font><b><font color="#000000">end</font></b><font color="#990000">();</font>  ok <font color="#990000">&amp;=</font> <font color="#990000">(</font> found <font color="#990000">==</font> <b><font color="#0000FF">true</font></b> <font color="#990000">);</font>
    <i><font color="#9A1900">// Y[1] does     depend on X[1]</font></i>
    found <font color="#990000">=</font> s<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">].</font><b><font color="#000000">find</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">!=</font> s<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">].</font><b><font color="#000000">end</font></b><font color="#990000">();</font>  ok <font color="#990000">&amp;=</font> <font color="#990000">(</font> found <font color="#990000">==</font> <b><font color="#0000FF">true</font></b> <font color="#990000">);</font>
    <i><font color="#9A1900">// Y[2] does not depend on X[0]</font></i>
    found <font color="#990000">=</font> s<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">].</font><b><font color="#000000">find</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">)</font> <font color="#990000">!=</font> s<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">].</font><b><font color="#000000">end</font></b><font color="#990000">();</font>  ok <font color="#990000">&amp;=</font> <font color="#990000">(</font> found <font color="#990000">==</font> <b><font color="#0000FF">false</font></b> <font color="#990000">);</font>
    <i><font color="#9A1900">// Y[2] does     depend on X[1]</font></i>
    found <font color="#990000">=</font> s<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">].</font><b><font color="#000000">find</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">!=</font> s<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">].</font><b><font color="#000000">end</font></b><font color="#990000">();</font>  ok <font color="#990000">&amp;=</font> <font color="#990000">(</font> found <font color="#990000">==</font> <b><font color="#0000FF">true</font></b> <font color="#990000">);</font>

    <i><font color="#9A1900">// check that values are stored</font></i>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>f<font color="#990000">.</font><b><font color="#000000">size_forward_set</font></b><font color="#990000">()</font> <font color="#990000">&gt;</font> <font color="#993399">0</font><font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>f<font color="#990000">.</font><b><font color="#000000">size_forward_bool</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">);</font>


    <i><font color="#9A1900">// sparsity pattern for F'(x)^T</font></i>
    <font color="#009900">bool</font> transpose <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#008080">Vector</font> <b><font color="#000000">st</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    st <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">ForSparseJac</font></b><font color="#990000">(</font>n<font color="#990000">,</font> r<font color="#990000">,</font> transpose<font color="#990000">);</font>

    <i><font color="#9A1900">// Y[0] does     depend on X[0]</font></i>
    found <font color="#990000">=</font> st<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">].</font><b><font color="#000000">find</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">)</font> <font color="#990000">!=</font> st<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">].</font><b><font color="#000000">end</font></b><font color="#990000">();</font>  ok <font color="#990000">&amp;=</font> <font color="#990000">(</font> found <font color="#990000">==</font> <b><font color="#0000FF">true</font></b> <font color="#990000">);</font>
    <i><font color="#9A1900">// Y[0] does not depend on X[1]</font></i>
    found <font color="#990000">=</font> st<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">].</font><b><font color="#000000">find</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">)</font> <font color="#990000">!=</font> st<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">].</font><b><font color="#000000">end</font></b><font color="#990000">();</font>  ok <font color="#990000">&amp;=</font> <font color="#990000">(</font> found <font color="#990000">==</font> <b><font color="#0000FF">false</font></b> <font color="#990000">);</font>
    <i><font color="#9A1900">// Y[1] does     depend on X[0]</font></i>
    found <font color="#990000">=</font> st<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">].</font><b><font color="#000000">find</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">!=</font> st<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">].</font><b><font color="#000000">end</font></b><font color="#990000">();</font>  ok <font color="#990000">&amp;=</font> <font color="#990000">(</font> found <font color="#990000">==</font> <b><font color="#0000FF">true</font></b> <font color="#990000">);</font>
    <i><font color="#9A1900">// Y[1] does     depend on X[1]</font></i>
    found <font color="#990000">=</font> st<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">].</font><b><font color="#000000">find</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">!=</font> st<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">].</font><b><font color="#000000">end</font></b><font color="#990000">();</font>  ok <font color="#990000">&amp;=</font> <font color="#990000">(</font> found <font color="#990000">==</font> <b><font color="#0000FF">true</font></b> <font color="#990000">);</font>
    <i><font color="#9A1900">// Y[2] does not depend on X[0]</font></i>
    found <font color="#990000">=</font> st<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">].</font><b><font color="#000000">find</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">)</font> <font color="#990000">!=</font> st<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">].</font><b><font color="#000000">end</font></b><font color="#990000">();</font>  ok <font color="#990000">&amp;=</font> <font color="#990000">(</font> found <font color="#990000">==</font> <b><font color="#0000FF">false</font></b> <font color="#990000">);</font>
    <i><font color="#9A1900">// Y[2] does     depend on X[1]</font></i>
    found <font color="#990000">=</font> st<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">].</font><b><font color="#000000">find</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">)</font> <font color="#990000">!=</font> st<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">].</font><b><font color="#000000">end</font></b><font color="#990000">();</font>  ok <font color="#990000">&amp;=</font> <font color="#990000">(</font> found <font color="#990000">==</font> <b><font color="#0000FF">true</font></b> <font color="#990000">);</font>

    <i><font color="#9A1900">// check that values are stored</font></i>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>f<font color="#990000">.</font><b><font color="#000000">size_forward_set</font></b><font color="#990000">()</font> <font color="#990000">&gt;</font> <font color="#993399">0</font><font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>f<font color="#990000">.</font><b><font color="#000000">size_forward_bool</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">);</font>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
<font color="#FF0000">}</font> <i><font color="#9A1900">// End empty namespace</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;vector&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;valarray&gt;</font>
<font color="#009900">bool</font> <b><font color="#000000">ForSparseJac</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">// Run with Vector equal to four different cases</font></i>
    <i><font color="#9A1900">// all of which are Simple Vectors with elements of type bool.</font></i>
    ok <font color="#990000">&amp;=</font> BoolCases<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>vectorBool     <font color="#990000">&gt;();</font>
    ok <font color="#990000">&amp;=</font> BoolCases<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>vector  <font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;</font> <font color="#990000">&gt;();</font>
    ok <font color="#990000">&amp;=</font> BoolCases<font color="#990000">&lt;</font> std<font color="#990000">::</font>vector    <font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;</font> <font color="#990000">&gt;();</font>
    ok <font color="#990000">&amp;=</font> BoolCases<font color="#990000">&lt;</font> std<font color="#990000">::</font>valarray  <font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;</font> <font color="#990000">&gt;();</font>

    <i><font color="#9A1900">// Run with Vector equal to two different cases both of which are</font></i>
    <i><font color="#9A1900">// Simple Vectors with elements of type std::set&lt;size_t&gt;</font></i>
    <b><font color="#0000FF">typedef</font></b> std<font color="#990000">::</font><font color="#008080">set&lt;size_t&gt;</font> set<font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> SetCases<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>vector  <font color="#990000">&lt;</font>set<font color="#990000">&gt;</font> <font color="#990000">&gt;();</font>
    <i><font color="#9A1900">// ok &amp;= SetCases&lt; std::vector    &lt;set&gt; &gt;();</font></i>

    <i><font color="#9A1900">// Do not use valarray because its element access in the const case</font></i>
    <i><font color="#9A1900">// returns a copy instead of a reference</font></i>
    <i><font color="#9A1900">// ok &amp;= SetCases&lt; std::valarray  &lt;set&gt; &gt;();</font></i>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
</tt></pre>

<hr>Input File: example/sparse/for_sparse_jac.cpp

</body>
</html>
