<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>atomic_lin_ode Get Routine: Example Implementation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="atomic_lin_ode Get Routine: Example Implementation">
<meta name="keywords" id="keywords" content=" atomic_lin_ode get routine: example implementation syntax prototype purpose call_id r step pattern transpose source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_four_lin_ode_get.hpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_four_lin_ode_set.hpp.htm" target="_top">Prev</a>
</td><td><a href="atomic_four_lin_ode_base_solver.hpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_four</option>
<option>atomic_four_example</option>
<option>atomic_four_lin_ode</option>
<option>atomic_four_lin_ode_implement</option>
<option>atomic_four_lin_ode_get.hpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_example_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_lin_ode_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_lin_ode_implement_htm.js'></script>
</td>
<td>atomic_four_lin_ode_get.hpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Prototype</option>
<option>Purpose</option>
<option>call_id</option>
<option>r</option>
<option>step</option>
<option>pattern</option>
<option>transpose</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>atomic_lin_ode Get Routine: Example Implementation</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>lin_ode</span></font></i><font color="blue"><span style='white-space: nowrap'>.get(</span></font><i><font color="black"><span style='white-space: nowrap'>call_id</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>r</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>step</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>transpose</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Prototype" id="Prototype">Prototype</a></big></b>

<pre style='display:inline'><tt>
def
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">sparse_rc&lt; CppAD::vector&lt;size_t&gt; &gt;</font> sparse_rc<font color="#990000">;</font>
    </tt></pre>
<pre><tt><b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font>
<font color="#009900">void</font> atomic_lin_ode<font color="#990000">&lt;</font>Base<font color="#990000">&gt;::</font><b><font color="#000000">get</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font> call_id<font color="#990000">,</font> Base<font color="#990000">&amp;</font> r<font color="#990000">,</font> Base<font color="#990000">&amp;</font> step<font color="#990000">,</font> sparse_rc<font color="#990000">&amp;</font> pattern<font color="#990000">,</font> <font color="#009900">bool</font><font color="#990000">&amp;</font> transpose
<font color="#990000">)</font></tt></pre>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
Retrieves the auxillary information for a an atomic operation that computes
the solution of a linear ODE.

<br>
<br>
<b><big><a name="call_id" id="call_id">call_id</a></big></b>
<br>
This input argument identifies the auxillary information for this ODE.

<br>
<br>
<b><big><a name="r" id="r">r</a></big></b>
<br>
This output argument is the final value for the variable that the ODE is with
respect to.

<br>
<br>
<b><big><a name="step" id="step">step</a></big></b>
<br>
This is a positive maximum step size to use when solving the ODE.

<br>
<br>
<b><big><a name="pattern" id="pattern">pattern</a></big></b>
<br>
This output argument is a sparsity pattern.

<br>
<br>
<b><big><a name="transpose" id="transpose">transpose</a></big></b>
<br>
If this output argument is true (false) the sparsity pattern is for
<small>@(@
A(x)^\R{T}
@)@</small> (<small>@(@
A(x)
@)@</small>).

<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/example/atomic_four/lin_ode/lin_ode.hpp&gt;</font>

<b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font> <i><font color="#9A1900">// BEGIN_CPPAD_NAMESPACE</font></i>
<i><font color="#9A1900">// BEGIN PROTOTYPE</font></i>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font>
<font color="#009900">void</font> atomic_lin_ode<font color="#990000">&lt;</font>Base<font color="#990000">&gt;::</font><b><font color="#000000">get</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font> call_id<font color="#990000">,</font> Base<font color="#990000">&amp;</font> r<font color="#990000">,</font> Base<font color="#990000">&amp;</font> step<font color="#990000">,</font> sparse_rc<font color="#990000">&amp;</font> pattern<font color="#990000">,</font> <font color="#009900">bool</font><font color="#990000">&amp;</font> transpose
<font color="#990000">)</font>
<i><font color="#9A1900">// END PROTOTYPE</font></i>
<font color="#FF0000">{</font>
    <i><font color="#9A1900">// thread</font></i>
    <font color="#008080">size_t</font> thread <font color="#990000">=</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">thread_num</font></b><font color="#990000">();</font>
    <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> work_<font color="#990000">[</font>thread<font color="#990000">]</font> <font color="#990000">!=</font> nullptr <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// pattern_vec</font></i>
    CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>sparse_rc<font color="#990000">&gt;&amp;</font> <b><font color="#000000">pattern_vec</font></b><font color="#990000">(</font> work_<font color="#990000">[</font>thread<font color="#990000">]-&gt;</font>pattern_vec <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// call_vec</font></i>
    CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>call_struct<font color="#990000">&gt;&amp;</font> <b><font color="#000000">call_vec</font></b><font color="#990000">(</font> work_<font color="#990000">[</font>thread<font color="#990000">]-&gt;</font>call_vec <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> thread <font color="#990000">==</font> call_vec<font color="#990000">[</font>call_id<font color="#990000">].</font>thread <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// r</font></i>
    call_struct<font color="#990000">&amp;</font> call <font color="#990000">=</font> call_vec<font color="#990000">[</font>call_id<font color="#990000">];</font>
    r         <font color="#990000">=</font> call<font color="#990000">.</font>r<font color="#990000">;</font>
    step      <font color="#990000">=</font> call<font color="#990000">.</font>step<font color="#990000">;</font>
    pattern   <font color="#990000">=</font> pattern_vec<font color="#990000">[</font>call<font color="#990000">.</font>pattern_index<font color="#990000">];</font>
    transpose <font color="#990000">=</font> call<font color="#990000">.</font>transpose<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">return</font></b><font color="#990000">;</font>
<font color="#FF0000">}</font>
<font color="#FF0000">}</font> <i><font color="#9A1900">// END_CPPAD_NAMESPACE</font></i></tt></pre>

<hr>Input File: include/cppad/example/atomic_four/lin_ode/get.hpp

</body>
</html>
