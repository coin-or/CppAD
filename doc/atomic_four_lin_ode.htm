<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Atomic First Order Linear ODE Method: Example Implementation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Atomic First Order Linear ODE Method: Example Implementation">
<meta name="keywords" id="keywords" content=" atomic first order linear ode method: example implementation syntax z(t x) call_id r step pattern nnz row col transpose x n a(x) b(x) y(x) m y ax ay vk(x) approximations rosen34 simpson's rule ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_four_lin_ode_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_four_mat_mul_identical_zero.cpp.htm" target="_top">Prev</a>
</td><td><a href="atomic_four_lin_ode_implement.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_four</option>
<option>atomic_four_example</option>
<option>atomic_four_lin_ode</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_example_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_lin_ode_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>z(t, x)</option>
<option>call_id</option>
<option>r</option>
<option>step</option>
<option>pattern</option>
<option>---..nnz</option>
<option>---..row</option>
<option>---..col</option>
<option>transpose</option>
<option>x</option>
<option>---..n</option>
<option>---..A(x)</option>
<option>---..b(x)</option>
<option>y(x)</option>
<option>---..m</option>
<option>---..y</option>
<option>ax</option>
<option>ay</option>
<option>vk(x)</option>
<option>Approximations</option>
<option>---..Rosen34</option>
<option>---..Simpson's Rule</option>
<option>Contents</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Atomic First Order Linear ODE Method: Example Implementation</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>atomic_lin_ode&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ode</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>call_id</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>lin_ode</span></font></i><font color="blue"><span style='white-space: nowrap'>.set(</span></font><i><font color="black"><span style='white-space: nowrap'>r</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>step</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>transpose</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>lin_ode</span></font></i><font color="blue"><span style='white-space: nowrap'>.get(</span></font><i><font color="black"><span style='white-space: nowrap'>call_id</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>r</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>step</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>transpose</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>lin_ode</span></font></i><font color="blue"><span style='white-space: nowrap'>.base_solver(</span></font><i><font color="black"><span style='white-space: nowrap'>r</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>step</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>transpose</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>lin_ode</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>call_id</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
<br>
<b><big><a name="z(t, x)" id="z(t, x)">z(t, x)</a></big></b>
<br>
Construct an atomic operation that computes an
approximate solution of the first order linear initial value ODE
<small>@[@

    z_t (t, x) = A(x) z(t, x) \W{,} z(0, x) = b(x)

@]@</small>
where
<small>@(@
z : \B{R} \times \B{R}^n \rightarrow \B{R}^m
@)@</small>,
<small>@(@
A : \B{R}^n \rightarrow \B{R}^{m \times m}
@)@</small>,
<small>@(@
b : \B{R}^n \rightarrow  \B{R}^m
@)@</small>,
and the subscript <small>@(@
t
@)@</small> denotes partial differentiation w.r.t <small>@(@
t
@)@</small>.

<br>
<br>
<b><big><a name="call_id" id="call_id">call_id</a></big></b>
<br>
This is a return value (argument) for the <code><font color="blue">set</font></code> (<code><font color="blue">get</font></code>) routine.

<br>
<br>
<b><big><a name="r" id="r">r</a></big></b>
<br>
This is the value of 
<code><i><font color="black"><span style='white-space: nowrap'>t</span></font></i></code>
 at which we are approximating <small>@(@
z(t, x)
@)@</small>.
This is a argument (return value) for the <code><font color="blue">set</font></code> (<code><font color="blue">get</font></code>) routine.

<br>
<br>
<b><big><a name="step" id="step">step</a></big></b>
<br>
This is a positive maximum step size to use when solving the ODE.

<br>
<br>
<b><big><a name="pattern" id="pattern">pattern</a></big></b>
<br>
This is a sparsity pattern.
This is a argument (return value) for the <code><font color="blue">set</font></code> (<code><font color="blue">get</font></code>) routine.

<br>
<br>
<big><a name="pattern.nnz" id="pattern.nnz">nnz</a></big>
<br>
We use 
<code><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i></code>
 to denote 
<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.nnz()</span></font></code>
.

<br>
<br>
<big><a name="pattern.row" id="pattern.row">row</a></big>
<br>
We use 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
 to denote 
<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.row()</span></font></code>
.

<br>
<br>
<big><a name="pattern.col" id="pattern.col">col</a></big>
<br>
We use 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
 to denote 
<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.col()</span></font></code>
.

<br>
<br>
<b><big><a name="transpose" id="transpose">transpose</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>transpose</span></font></i></code>
 is true (false) the sparsity pattern is for
<small>@(@
A(x)^\R{T}
@)@</small> (<small>@(@
A(x)
@)@</small>).
This is a argument (return value) for the <code><font color="blue">set</font></code> (<code><font color="blue">get</font></code>) routine.

<br>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
We use 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 to denote the argument to the atomic function.
In the call to <code><font color="blue">base_solver</font></code> it is a CppAD vector with elements
of type 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
.

<br>
<br>
<big><a name="x.n" id="x.n">n</a></big>
<br>
The size of the vector 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 is
<small>@(@
n = nnz + m
@)@</small>.

<br>
<br>
<big><a name="x.A(x)" id="x.A(x)">A(x)</a></big>
<br>
This matrix stored in the same order as 
<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i></code>

at the beginning of the vector 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
.
To be specific,
if 
<code><i><font color="black"><span style='white-space: nowrap'>transpose</span></font></i></code>
 is true (false),
for 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;0,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i><font color="blue"><span style='white-space: nowrap'>-1</span></font></code>
,
<small>@(@
A_{j,i} (x)
@)@</small> ( <small>@(@
A_{i,j} (x)
@)@</small> ) is equal to
<small>@(@
x[k]
@)@</small> where 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 and  
<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
.

<br>
<br>
<big><a name="x.b(x)" id="x.b(x)">b(x)</a></big>
<br>
This vector is stored at the end of

<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
; i.e. its <code><i>j</i></code>-th element is
<small>@(@
b_j (x) = x[ nnz + j ]
@)@</small>

<br>
<br>
<b><big><a name="y(x)" id="y(x)">y(x)</a></big></b>
<br>
We use <small>@(@
y(x)
@)@</small> to denote the final value of the ODE; i.e.,
<small>@(@
y(x) = z(r, x)
@)@</small>.

<br>
<br>
<big><a name="y(x).m" id="y(x).m">m</a></big>
<br>
We use 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
 to denote the size of the vector 
<code><i><font color="black"><span style='white-space: nowrap'>y(x)</span></font></i></code>
.
This is the number of equations in the ODE.

<br>
<br>
<big><a name="y(x).y" id="y(x).y">y</a></big>
<br>
In the call to <code><font color="blue">base_solver</font></code>,

<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 is a CppAD vector with elements of type 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
.
The input value of its elements does not matter.
Upon return it contains the value <small>@(@
y(x)
@)@</small>.

<br>
<br>
<b><big><a name="ax" id="ax">ax</a></big></b>
<br>
In the call to 
<code><i><font color="black"><span style='white-space: nowrap'>lin_ode</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i></code>

is a simple vector with elements of type 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
.
The elements of 
<code><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i></code>
 have the same meaning as 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
.

<br>
<br>
<b><big><a name="ay" id="ay">ay</a></big></b>
<br>
In the call to 
<code><i><font color="black"><span style='white-space: nowrap'>lin_ode</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i></code>

is a simple vector with elements of type 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
.
The input value of its elements does not matter.
Upon return it represents the solution 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
.

<br>
<br>
<b><big><a name="vk(x)" id="vk(x)">vk(x)</a></big></b>
<br>
We sometimes use the following representation for <small>@(@
y(x)
@)@</small>:
<small>@[@

y(x) = \exp [ r A(x) ] b(x) = \sum_{k=0}^\infty \frac{r^k}{k!} A(x)^k b(x)

@]@</small>
Define <small>@(@
v^0 (x) = b(x)
@)@</small> and for <small>@(@
k = 1, 2, \ldots
@)@</small>,
<small>@(@
v^k (x) = (r / k) A(x) v^{k-1} (x)
@)@</small>.
Using this notation,
<small>@[@

y(x) = \sum_{k=0}^\infty v^k (x)

@]@</small>


<br>
<br>
<b><big><a name="Approximations" id="Approximations">Approximations</a></big></b>


<br>
<br>
<big><a name="Approximations.Rosen34" id="Approximations.Rosen34">Rosen34</a></big>
<br>
The <a href="atomic_four_lin_ode_base_solver.hpp.htm#Rosen34" target="_top"><span style='white-space: nowrap'>Rosen34</span></a>
 routine
is used to approximate the solution of the ODE.
Any initial value ODE solver can be used for this purpose.

<br>
<br>
<big><a name="Approximations.Simpson's Rule" id="Approximations.Simpson's Rule">Simpson's Rule</a></big>

<br>
<a href="atomic_four_lin_ode_reverse.hpp.htm#Simpson's Rule" target="_top"><span style='white-space: nowrap'>Simpson's&nbsp;rule</span></a>

is used to approximate the integral
<small>@[@

    \int_0^r \lambda_i (t, x) z_j (r, x) \R{d} t

@]@</small>
Any other approximation for this integral can be used.

<br>
<br>
<b><big><a name="Contents" id="Contents">Contents</a></big></b>
<br>
<table>
<tr><td><a href="atomic_four_lin_ode_implement.htm" target="_top">atomic_four_lin_ode_implement</a></td><td>Implementing&nbsp;Atomic&nbsp;Linear&nbsp;ODE</td></tr><tr><td><a href="atomic_four_lin_ode_forward.cpp.htm" target="_top">atomic_four_lin_ode_forward.cpp</a></td><td>Atomic&nbsp;Linear&nbsp;ODE&nbsp;Forward&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="atomic_four_lin_ode_reverse.cpp.htm" target="_top">atomic_four_lin_ode_reverse.cpp</a></td><td>Atomic&nbsp;Linear&nbsp;ODE&nbsp;Reverse&nbsp;Mode:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="atomic_four_lin_ode_sparsity.cpp.htm" target="_top">atomic_four_lin_ode_sparsity.cpp</a></td><td>Atomic&nbsp;Linear&nbsp;ODE&nbsp;Sparsity&nbsp;Calculations:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="atomic_four_lin_ode_rev_depend.cpp.htm" target="_top">atomic_four_lin_ode_rev_depend.cpp</a></td><td>Atomic&nbsp;Linear&nbsp;ODE&nbsp;Reverse&nbsp;Dependency&nbsp;Analysis:&nbsp;Example&nbsp;and&nbsp;Test</td></tr></table>
<hr>Input File: include/cppad/example/atomic_four/lin_ode/lin_ode.omh

</body>
</html>
