<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Atomic Functions and Reverse Mode: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Atomic Functions and Reverse Mode: Example and Test">
<meta name="keywords" id="keywords" content=" atomic functions reverse mode: example test purpose function jacobian hessian start class definition constructor for_type forward use ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_three_reverse.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_three_reverse.htm" target="_top">Prev</a>
</td><td><a href="atomic_three_jac_sparsity.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_three</option>
<option>atomic_three_define</option>
<option>atomic_three_reverse</option>
<option>atomic_three_reverse.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_three_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_three_define_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_three_reverse_htm.js'></script>
</td>
<td>atomic_three_reverse.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Function</option>
<option>Jacobian</option>
<option>Hessian</option>
<option>Start Class Definition</option>
<option>Constructor</option>
<option>for_type</option>
<option>forward</option>
<option>reverse</option>
<option>Use Atomic Function</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@



<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Atomic Functions and Reverse Mode: Example and Test</big></big></b></center>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This example demonstrates reverse mode derivative calculation
using an <a href="atomic_three.htm" target="_top"><span style='white-space: nowrap'>atomic_three</span></a>
 function.

<br>
<br>
<b><big><a name="Function" id="Function">Function</a></big></b>
<br>
For this example, the atomic function
<small>@(@
g : \B{R}^3 \rightarrow \B{R}^2
@)@</small> is defined by
<small>@[@

g(x) = \left( \begin{array}{c}
    x_2 * x_2 \\
    x_0 * x_1
\end{array} \right)

@]@</small>

<br>
<br>
<b><big><a name="Jacobian" id="Jacobian">Jacobian</a></big></b>
<br>
The corresponding Jacobian is
<small>@[@

g^{(1)} (x) = \left( \begin{array}{ccc}
  0  &   0 & 2 x_2 \\
x_1  & x_0 & 0
\end{array} \right)

@]@</small>

<br>
<br>
<b><big><a name="Hessian" id="Hessian">Hessian</a></big></b>
<br>
The Hessians of the component functions are
<small>@[@

g_0^{(2)} ( x ) = \left( \begin{array}{ccc}
    0 & 0 & 0  \\
    0 & 0 & 0  \\
    0 & 0 & 2
\end{array} \right)
\W{,}
g_1^{(2)} ( x ) = \left( \begin{array}{ccc}
    0 & 1 & 0 \\
    1 & 0 & 0 \\
    0 & 0 & 0
\end{array} \right)

@]@</small>



<br>
<br>
<b><big><a name="Start Class Definition" id="Start Class Definition">Start Class Definition</a></big></b>

<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>          <i><font color="#9A1900">// isolate items below to this file</font></i>
<b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">;</font> <i><font color="#9A1900">// abbreviate as vector</font></i>
<i><font color="#9A1900">//</font></i>
<b><font color="#0000FF">class</font></b> <font color="#008080">atomic_reverse</font> <font color="#990000">:</font> <b><font color="#0000FF">public</font></b> CppAD<font color="#990000">::</font>atomic_three<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#FF0000">{</font></tt></pre>
<br>
<b><big><a name="Constructor" id="Constructor">Constructor</a></big></b>

<pre><tt><b><font color="#0000FF">public</font></b><font color="#990000">:</font>
    <b><font color="#000000">atomic_reverse</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font> name<font color="#990000">)</font> <font color="#990000">:</font>
    CppAD<font color="#990000">::</font>atomic_three<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;(</font>name<font color="#990000">)</font>
    <font color="#FF0000">{</font> <font color="#FF0000">}</font>
<b><font color="#0000FF">private</font></b><font color="#990000">:</font></tt></pre>
<br>
<b><big><a name="for_type" id="for_type">for_type</a></big></b>

<pre><tt>    <i><font color="#9A1900">// calculate type_y</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">for_type</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>               parameter_x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font>  type_x      <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font>        type_y      <font color="#990000">)</font> <b><font color="#0000FF">override</font></b>
    <font color="#FF0000">{</font>   <b><font color="#000000">assert</font></b><font color="#990000">(</font> parameter_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> type_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
        <font color="#009900">bool</font> ok <font color="#990000">=</font> type_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">3</font><font color="#990000">;</font> <i><font color="#9A1900">// n</font></i>
        ok     <font color="#990000">&amp;=</font> type_y<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">;</font> <i><font color="#9A1900">// m</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> ok <font color="#990000">)</font>
            <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
        type_y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> type_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">];</font>
        type_y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> std<font color="#990000">::</font><b><font color="#000000">max</font></b><font color="#990000">(</font>type_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> type_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]);</font>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="forward" id="forward">forward</a></big></b>

<pre><tt>    <i><font color="#9A1900">// forward mode routine called by CppAD</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">forward</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>                   parameter_x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font>      type_x      <font color="#990000">,</font>
        <font color="#008080">size_t</font>                                  need_y      <font color="#990000">,</font>
        <font color="#008080">size_t</font>                                  order_low   <font color="#990000">,</font>
        <font color="#008080">size_t</font>                                  order_up    <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>                   taylor_x    <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>                         taylor_y    <font color="#990000">)</font> <b><font color="#0000FF">override</font></b>
    <font color="#FF0000">{</font>
        <font color="#008080">size_t</font> q1 <font color="#990000">=</font> order_up <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">;</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
        <font color="#008080">size_t</font> n <font color="#990000">=</font> taylor_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> q1<font color="#990000">;</font>
        <font color="#008080">size_t</font> m <font color="#990000">=</font> taylor_y<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> q1<font color="#990000">;</font>
<b><font color="#000080"># endif</font></b>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">3</font> <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> order_low <font color="#990000">&lt;=</font> order_up <font color="#990000">);</font>

        <i><font color="#9A1900">// this example only implements up to first order forward mode</font></i>
        <font color="#009900">bool</font> ok <font color="#990000">=</font> order_up <font color="#990000">&lt;=</font> <font color="#993399">1</font><font color="#990000">;</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> ok <font color="#990000">)</font>
            <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>

        <i><font color="#9A1900">// ------------------------------------------------------------------</font></i>
        <i><font color="#9A1900">// Zero forward mode.</font></i>
        <i><font color="#9A1900">// This case must always be implemented</font></i>
        <i><font color="#9A1900">// g(x) = [ x_2 * x_2 ]</font></i>
        <i><font color="#9A1900">//        [ x_0 * x_1 ]</font></i>
        <i><font color="#9A1900">// y^0  = f( x^0 )</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> order_low <font color="#990000">&lt;=</font> <font color="#993399">0</font> <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// y_0^0 = x_2^0 * x_2^0</font></i>
            taylor_y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> taylor_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> taylor_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">];</font>
            <i><font color="#9A1900">// y_1^0 = x_0^0 * x_1^0</font></i>
            taylor_y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> taylor_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> taylor_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">];</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> order_up <font color="#990000">&lt;=</font> <font color="#993399">0</font> <font color="#990000">)</font>
            <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
        <i><font color="#9A1900">// ------------------------------------------------------------------</font></i>
        <i><font color="#9A1900">// First order one forward mode.</font></i>
        <i><font color="#9A1900">// This case is needed if first order forward mode is used.</font></i>
        <i><font color="#9A1900">// g'(x) = [   0,   0, 2 * x_2 ]</font></i>
        <i><font color="#9A1900">//         [ x_1, x_0,       0 ]</font></i>
        <i><font color="#9A1900">// y^1 =  f'(x^0) * x^1</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> order_low <font color="#990000">&lt;=</font> <font color="#993399">1</font> <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// y_0^1 = 2 * x_2^0 * x_2^1</font></i>
            taylor_y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">2.0</font> <font color="#990000">*</font> taylor_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> taylor_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">];</font>

            <i><font color="#9A1900">// y_1^1 = x_1^0 * x_0^1 + x_0^0 * x_1^1</font></i>
            taylor_y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">]</font>  <font color="#990000">=</font> taylor_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> taylor_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">];</font>
            taylor_y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">+=</font> taylor_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> taylor_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">];</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="reverse" id="reverse">reverse</a></big></b>

<pre><tt>    <i><font color="#9A1900">// reverse mode routine called by CppAD</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">reverse</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>               parameter_x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font>  type_x      <font color="#990000">,</font>
        <font color="#008080">size_t</font>                              order_up    <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>               taylor_x    <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>               taylor_y    <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>                     partial_x   <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>               partial_y   <font color="#990000">)</font> <b><font color="#0000FF">override</font></b>
    <font color="#FF0000">{</font>
        <font color="#008080">size_t</font> q1 <font color="#990000">=</font> order_up <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">;</font>
        <font color="#008080">size_t</font> n <font color="#990000">=</font> taylor_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> q1<font color="#990000">;</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
        <font color="#008080">size_t</font> m <font color="#990000">=</font> taylor_y<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> q1<font color="#990000">;</font>
<b><font color="#000080"># endif</font></b>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">3</font> <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>

        <i><font color="#9A1900">// this example only implements up to second order reverse mode</font></i>
        <font color="#009900">bool</font> ok <font color="#990000">=</font> q1 <font color="#990000">&lt;=</font> <font color="#993399">2</font><font color="#990000">;</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> ok <font color="#990000">)</font>
            <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// initalize summation as zero</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> q1<font color="#990000">;</font> k<font color="#990000">++)</font>
                partial_x<font color="#990000">[</font>j <font color="#990000">*</font> q1 <font color="#990000">+</font> k<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> q1 <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// --------------------------------------------------------------</font></i>
            <i><font color="#9A1900">// Second order reverse first compute partials of first order</font></i>
            <i><font color="#9A1900">// We use the notation pg_ij^k for partial of F_i^1 w.r.t. x_j^k</font></i>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// y_0^1    = 2 * x_2^0 * x_2^1</font></i>
            <i><font color="#9A1900">// pg_02^0  = 2 * x_2^1</font></i>
            <i><font color="#9A1900">// pg_02^1  = 2 * x_2^0</font></i>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// y_1^1    = x_1^0 * x_0^1 + x_0^0 * x_1^1</font></i>
            <i><font color="#9A1900">// pg_10^0  = x_1^1</font></i>
            <i><font color="#9A1900">// pg_11^0  = x_0^1</font></i>
            <i><font color="#9A1900">// pg_10^1  = x_1^0</font></i>
            <i><font color="#9A1900">// pg_11^1  = x_0^0</font></i>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// px_0^0 += py_0^1 * pg_00^0 + py_1^1 * pg_10^0</font></i>
            <i><font color="#9A1900">//        += py_1^1 * x_1^1</font></i>
            partial_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> partial_y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> taylor_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">];</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// px_0^1 += py_0^1 * pg_00^1 + py_1^1 * pg_10^1</font></i>
            <i><font color="#9A1900">//        += py_1^1 * x_1^0</font></i>
            partial_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">+=</font> partial_y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> taylor_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">];</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// px_1^0 += py_0^1 * pg_01^0 + py_1^1 * pg_11^0</font></i>
            <i><font color="#9A1900">//        += py_1^1 * x_0^1</font></i>
            partial_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> partial_y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> taylor_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">];</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// px_1^1 += py_0^1 * pg_01^1 + py_1^1 * pg_11^1</font></i>
            <i><font color="#9A1900">//        += py_1^1 * x_0^0</font></i>
            partial_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">+=</font> partial_y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> taylor_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">];</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// px_2^0 += py_0^1 * pg_02^0 + py_1^1 * pg_12^0</font></i>
            <i><font color="#9A1900">//        += py_0^1 * 2 * x_2^1</font></i>
            partial_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> partial_y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> <font color="#993399">2.0</font> <font color="#990000">*</font> taylor_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">];</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// px_2^1 += py_0^1 * pg_02^1 + py_1^1 * pg_12^1</font></i>
            <i><font color="#9A1900">//        += py_0^1 * 2 * x_2^0</font></i>
            partial_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">+=</font> partial_y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> <font color="#993399">2.0</font> <font color="#990000">*</font> taylor_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">];</font>
        <font color="#FF0000">}</font>
        <i><font color="#9A1900">// --------------------------------------------------------------</font></i>
        <i><font color="#9A1900">// First order reverse computes partials of zero order coefficients</font></i>
        <i><font color="#9A1900">// We use the notation pg_ij for partial of F_i^0 w.r.t. x_j^0</font></i>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// y_0^0 = x_2^0 * x_2^0</font></i>
        <i><font color="#9A1900">// pg_00 = 0,     pg_01 = 0,  pg_02 = 2 * x_2^0</font></i>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// y_1^0 = x_0^0 * x_1^0</font></i>
        <i><font color="#9A1900">// pg_10 = x_1^0, pg_11 = x_0^0,  pg_12 = 0</font></i>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// px_0^0 += py_0^0 * pg_00 + py_1^0 * pg_10</font></i>
        <i><font color="#9A1900">//        += py_1^0 * x_1^0</font></i>
        partial_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> partial_y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> taylor_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">];</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// px_1^0 += py_1^0 * pg_01 + py_1^0 * pg_11</font></i>
        <i><font color="#9A1900">//        += py_1^0 * x_0^0</font></i>
        partial_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> partial_y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> taylor_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">];</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// px_2^0 += py_1^0 * pg_02 + py_1^0 * pg_12</font></i>
        <i><font color="#9A1900">//        += py_0^0 * 2.0 * x_2^0</font></i>
        partial_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> partial_y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> <font color="#993399">2.0</font> <font color="#990000">*</font> taylor_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">*</font>q1<font color="#990000">+</font><font color="#993399">0</font><font color="#990000">];</font>
        <i><font color="#9A1900">// --------------------------------------------------------------</font></i>
        <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
    <font color="#FF0000">}</font>
<font color="#FF0000">}</font><font color="#990000">;</font>
<font color="#FF0000">}</font>  <i><font color="#9A1900">// End empty namespace</font></i></tt></pre>
<br>
<b><big><a name="Use Atomic Function" id="Use Atomic Function">Use Atomic Function</a></big></b>

<pre><tt><font color="#009900">bool</font> <b><font color="#000000">reverse</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>NearEqual<font color="#990000">;</font>
    <font color="#009900">double</font> eps <font color="#990000">=</font> <font color="#993399">10</font><font color="#990000">.</font> <font color="#990000">*</font> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// Create the atomic_reverse object corresponding to g(x)</font></i>
    <font color="#008080">atomic_reverse</font> <b><font color="#000000">afun</font></b><font color="#990000">(</font><font color="#FF0000">"atomic_reverse"</font><font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// Create the function f(u) = g(u) for this example.</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// domain space vector</font></i>
    <font color="#008080">size_t</font> n  <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>
    <font color="#009900">double</font> u_0 <font color="#990000">=</font> <font color="#993399">1.00</font><font color="#990000">;</font>
    <font color="#009900">double</font> u_1 <font color="#990000">=</font> <font color="#993399">2.00</font><font color="#990000">;</font>
    <font color="#009900">double</font> u_2 <font color="#990000">=</font> <font color="#993399">3.00</font><font color="#990000">;</font>
    <font color="#008080">vector&lt; AD&lt;double&gt; &gt;</font> <b><font color="#000000">au</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    au<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> u_0<font color="#990000">;</font>
    au<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> u_1<font color="#990000">;</font>
    au<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> u_2<font color="#990000">;</font>

    <i><font color="#9A1900">// declare independent variables and start tape recording</font></i>
    CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>au<font color="#990000">);</font>

    <i><font color="#9A1900">// range space vector</font></i>
    <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
    <font color="#008080">vector&lt; AD&lt;double&gt; &gt;</font> <b><font color="#000000">ay</font></b><font color="#990000">(</font>m<font color="#990000">);</font>

    <i><font color="#9A1900">// call atomic function</font></i>
    <font color="#008080">vector&lt; AD&lt;double&gt; &gt;</font> ax <font color="#990000">=</font> au<font color="#990000">;</font>
    <b><font color="#000000">afun</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">);</font>

    <i><font color="#9A1900">// create f: u -&gt; y and stop tape recording</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> f<font color="#990000">;</font>
    f<font color="#990000">.</font><b><font color="#000000">Dependent</font></b> <font color="#990000">(</font>au<font color="#990000">,</font> ay<font color="#990000">);</font>  <i><font color="#9A1900">// y = f(u)</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// check function value</font></i>
    <font color="#009900">double</font> check <font color="#990000">=</font> u_2 <font color="#990000">*</font> u_2<font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font> <b><font color="#000000">Value</font></b><font color="#990000">(</font>ay<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">])</font> <font color="#990000">,</font> check<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>
    check <font color="#990000">=</font> u_0 <font color="#990000">*</font> u_1<font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font> <b><font color="#000000">Value</font></b><font color="#990000">(</font>ay<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">])</font> <font color="#990000">,</font> check<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>

    <i><font color="#9A1900">// --------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// zero order forward</font></i>
    <i><font color="#9A1900">//</font></i>
    <font color="#008080">vector&lt;double&gt;</font> <b><font color="#000000">u0</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">y0</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    u0<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> u_0<font color="#990000">;</font>
    u0<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> u_1<font color="#990000">;</font>
    u0<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> u_2<font color="#990000">;</font>
    y0   <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> u0<font color="#990000">);</font>
    check <font color="#990000">=</font> u_2 <font color="#990000">*</font> u_2<font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>y0<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">,</font> check<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>
    check <font color="#990000">=</font> u_0 <font color="#990000">*</font> u_1<font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>y0<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">,</font> check<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>
    <i><font color="#9A1900">// --------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// first order reverse</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// value of Jacobian of f</font></i>
    <font color="#009900">double</font> check_jac<font color="#990000">[]</font> <font color="#990000">=</font> <font color="#FF0000">{</font>
        <font color="#993399">0.0</font><font color="#990000">,</font> <font color="#993399">0.0</font><font color="#990000">,</font> <font color="#993399">2.0</font> <font color="#990000">*</font> u_2<font color="#990000">,</font>
        u_1<font color="#990000">,</font> u_0<font color="#990000">,</font>       <font color="#993399">0.0</font>
    <font color="#FF0000">}</font><font color="#990000">;</font>
    <font color="#008080">vector&lt;double&gt;</font> <b><font color="#000000">w</font></b><font color="#990000">(</font>m<font color="#990000">),</font> <b><font color="#000000">dw</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// check derivative of f_0 (x)</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> i<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   w<font color="#990000">[</font>i<font color="#990000">]</font>   <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
        w<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">-</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
        dw <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Reverse</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">,</font> w<font color="#990000">);</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// compute partial in j-th component direction</font></i>
            ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>dw<font color="#990000">[</font>j<font color="#990000">],</font> check_jac<font color="#990000">[</font>i <font color="#990000">*</font> n <font color="#990000">+</font> j<font color="#990000">],</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// --------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// second order reverse</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// value of Hessian of f_0</font></i>
    <font color="#009900">double</font> check_hes_0<font color="#990000">[]</font> <font color="#990000">=</font> <font color="#FF0000">{</font>
        <font color="#993399">0.0</font><font color="#990000">,</font> <font color="#993399">0.0</font><font color="#990000">,</font> <font color="#993399">0.0</font><font color="#990000">,</font>
        <font color="#993399">0.0</font><font color="#990000">,</font> <font color="#993399">0.0</font><font color="#990000">,</font> <font color="#993399">0.0</font><font color="#990000">,</font>
        <font color="#993399">0.0</font><font color="#990000">,</font> <font color="#993399">0.0</font><font color="#990000">,</font> <font color="#993399">2.0</font>
    <font color="#FF0000">}</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// value of Hessian of f_1</font></i>
    <font color="#009900">double</font> check_hes_1<font color="#990000">[]</font> <font color="#990000">=</font> <font color="#FF0000">{</font>
        <font color="#993399">0.0</font><font color="#990000">,</font> <font color="#993399">1.0</font><font color="#990000">,</font> <font color="#993399">0.0</font><font color="#990000">,</font>
        <font color="#993399">1.0</font><font color="#990000">,</font> <font color="#993399">0.0</font><font color="#990000">,</font> <font color="#993399">0.0</font><font color="#990000">,</font>
        <font color="#993399">0.0</font><font color="#990000">,</font> <font color="#993399">0.0</font><font color="#990000">,</font> <font color="#993399">0.0</font>
    <font color="#FF0000">}</font><font color="#990000">;</font>
    <font color="#008080">vector&lt;double&gt;</font> <b><font color="#000000">u1</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">dw2</font></b><font color="#990000">(</font> <font color="#993399">2</font> <font color="#990000">*</font> n <font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j1 <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j1 <font color="#990000">&lt;</font> n<font color="#990000">;</font> j1<font color="#990000">++)</font>
            u1<font color="#990000">[</font>j1<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
        u1<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
        <i><font color="#9A1900">// first order forward</font></i>
        f<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">,</font> u1<font color="#990000">);</font>
        w<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
        w<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
        dw2  <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Reverse</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">,</font> w<font color="#990000">);</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">;</font> i<font color="#990000">++)</font>
            ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>dw2<font color="#990000">[</font>i <font color="#990000">*</font> <font color="#993399">2</font> <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">],</font> check_hes_0<font color="#990000">[</font>i <font color="#990000">*</font> n <font color="#990000">+</font> j<font color="#990000">],</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
        w<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
        w<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
        dw2  <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Reverse</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">,</font> w<font color="#990000">);</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">;</font> i<font color="#990000">++)</font>
            ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>dw2<font color="#990000">[</font>i <font color="#990000">*</font> <font color="#993399">2</font> <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">],</font> check_hes_1<font color="#990000">[</font>i <font color="#990000">*</font> n <font color="#990000">+</font> j<font color="#990000">],</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// --------------------------------------------------------------------</font></i>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/atomic_three/reverse.cpp

</body>
</html>
