<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Atomic Matrix Multiply Reverse Dependency: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Atomic Matrix Multiply Reverse Dependency: Example and Test">
<meta name="keywords" id="keywords" content=" atomic matrix multiply reverse dependency: example test purpose f(u) forward analysis size_var source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_four_mat_mul_rev_depend.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_four_mat_mul_sparsity.cpp.htm" target="_top">Prev</a>
</td><td><a href="atomic_four_mat_mul_identical_zero.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_four</option>
<option>atomic_four_example</option>
<option>atomic_four_mat_mul</option>
<option>atomic_four_mat_mul_rev_depend.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_example_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_mat_mul_htm.js'></script>
</td>
<td>atomic_four_mat_mul_rev_depend.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>f(u)</option>
<option>Forward Analysis</option>
<option>Reverse Analysis</option>
<option>size_var</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Atomic Matrix Multiply Reverse Dependency: Example and Test</big></big></b></center>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This example uses the atomic matrix multiply
<code><font color="blue">rev_depend</font></code> function to reduce the number of variables in
the recording of <small>@(@
g(u)
@)@</small>.


<br>
<br>
<b><big><a name="f(u)" id="f(u)">f(u)</a></big></b>

<br>
<small>@[@

f(u) =
\left( \begin{array}{cc}
2 u_0 & 2 u_1  \\
2 u_2 & 2 u_3  \\
\end{array} \right)
\left( \begin{array}{cc}
2 u_4 & 2 u_5  \\
2 u_6 & 2 u_7
\end{array} \right)
=
\left( \begin{array}{cc}
4( u_0 u_4 + u_1 u_6 )  & 4( u_0 u_5 + u_1 u_7 )  \\
4( u_2 u_4 + u_3 u_6 )  & 4( u_2 u_5 + u_3 u_7 )  \\
\end{array} \right)

@]@</small><small>@[@

f_{0,0} (u)
=
4 ( u_0 u_4 + u_1 u_6 )

@]@</small><br>
<b><big><a name="Forward Analysis" id="Forward Analysis">Forward Analysis</a></big></b>
<br>
Forward dependency analysis determines that there
is a new variable for each of the 8 multiplications by 2.0.
It also determines, using <a href="atomic_four_mat_mul_for_type.hpp.htm" target="_top"><span style='white-space: nowrap'>for_type</span></a>

that each of the 4 elements in the matrix product result is a new variable.

<br>
<br>
<b><big><a name="Reverse Analysis" id="Reverse Analysis">Reverse Analysis</a></big></b>
<br>
Reverse analysis detect that only 1 of the 4 elements
in the matrix product is used.
In addition it determines,
using <a href="atomic_four_mat_mul_rev_depend.hpp.htm" target="_top"><span style='white-space: nowrap'>rev_depend</span></a>
,
that only 4 of the 8 multiplications by 2.0 are used.

<br>
<br>
<b><big><a name="size_var" id="size_var">size_var</a></big></b>
<br>
The difference in <a href="fun_property.htm#size_var" target="_top"><span style='white-space: nowrap'>size_var</span></a>

is the difference between only using forward dependency and using both; i.e.,
(8 - 4) + (4 - 1) = 7.


<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/example/atomic_four/mat_mul/mat_mul.hpp&gt;</font>

<font color="#009900">bool</font> <b><font color="#000000">rev_depend</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <i><font color="#9A1900">// ok, eps</font></i>
    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// AD</font></i>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>sparse_rc<font color="#990000">;</font>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// Record g</font></i>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// afun</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">atomic_mat_mul&lt;double&gt;</font> <b><font color="#000000">afun</font></b><font color="#990000">(</font><font color="#FF0000">"atomic_mat_mul"</font><font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// nleft, n_middle, n_right</font></i>
    <font color="#008080">size_t</font> n_left <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">,</font> n_middle <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">,</font> n_right <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// nu, au</font></i>
    <font color="#008080">size_t</font> nu <font color="#990000">=</font> n_middle <font color="#990000">*</font> <font color="#990000">(</font>n_left <font color="#990000">+</font> n_right<font color="#990000">);</font>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font> <b><font color="#000000">au</font></b><font color="#990000">(</font>nu<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nu<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
        au<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;(</font>j <font color="#990000">+</font> <font color="#993399">2</font><font color="#990000">);</font>
    CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>au<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// nx, ax</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font>nu<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nu<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
        ax<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">2.0</font> <font color="#990000">*</font> au<font color="#990000">[</font>j<font color="#990000">];</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// ny, ay</font></i>
    <font color="#008080">size_t</font> ny <font color="#990000">=</font> n_left <font color="#990000">*</font> n_right<font color="#990000">;</font>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font> <b><font color="#000000">ay</font></b><font color="#990000">(</font>ny<font color="#990000">);</font>
    <font color="#008080">size_t</font> call_id <font color="#990000">=</font> afun<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>n_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> n_right<font color="#990000">);</font>
    <b><font color="#000000">afun</font></b><font color="#990000">(</font>call_id<font color="#990000">,</font> ax<font color="#990000">,</font> ay<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// az = f_{0,0} (x)</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font> <b><font color="#000000">az</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
    az<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> ay<font color="#990000">[</font> <font color="#993399">0</font> <font color="#990000">*</font> n_right <font color="#990000">+</font> <font color="#993399">0</font> <font color="#990000">];</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// g</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> <b><font color="#000000">g</font></b><font color="#990000">(</font>au<font color="#990000">,</font> az<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// size_var_before</font></i>
    <font color="#008080">size_t</font> size_var_before <font color="#990000">=</font> g<font color="#990000">.</font><b><font color="#000000">size_var</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// optimize</font></i>
    g<font color="#990000">.</font><b><font color="#000000">optimize</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// size_var_after</font></i>
    <font color="#008080">size_t</font> size_var_after <font color="#990000">=</font> g<font color="#990000">.</font><b><font color="#000000">size_var</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// ok</font></i>
    ok <font color="#990000">&amp;=</font> size_var_before <font color="#990000">-</font> size_var_after <font color="#990000">==</font> <font color="#993399">7</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/atomic_four/mat_mul/rev_depend.cpp

</body>
</html>
