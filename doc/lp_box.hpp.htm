<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>lp_box Source Code</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="lp_box Source Code">
<meta name="keywords" id="keywords" content=" lp_box source code ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_lp_box.hpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="lp_box.cpp.htm" target="_top">Prev</a>
</td><td><a href="abs_min_linear.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>other_adfun</option>
<option>abs_normal_fun</option>
<option>example_abs_normal</option>
<option>lp_box</option>
<option>lp_box.hpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_abs_normal_fun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_example_abs_normal_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_lp_box_htm.js'></script>
</td>
<td>lp_box.hpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>lp_box Source Code</big></big></b></center>
<pre><tt><b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font> <i><font color="#9A1900">// BEGIN_CPPAD_NAMESPACE</font></i>

<i><font color="#9A1900">// BEGIN PROTOTYPE</font></i>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Vector</font><font color="#990000">&gt;</font>
<font color="#009900">bool</font> <b><font color="#000000">lp_box</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font>        level   <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> A       <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> b       <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> c       <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> d       <font color="#990000">,</font>
    <font color="#008080">size_t</font>        maxitr  <font color="#990000">,</font>
    Vector<font color="#990000">&amp;</font>       xout    <font color="#990000">)</font>
<i><font color="#9A1900">// END PROTOTYPE</font></i>
<font color="#FF0000">{</font>   <font color="#009900">double</font> inf <font color="#990000">=</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">infinity</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <font color="#008080">size_t</font> m <font color="#990000">=</font> b<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
    <font color="#008080">size_t</font> n <font color="#990000">=</font> c<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#000000">CPPAD_ASSERT_KNOWN</font></b><font color="#990000">(</font>
        level <font color="#990000">&lt;=</font> <font color="#993399">3</font><font color="#990000">,</font> <font color="#FF0000">"lp_box: level is greater than 3"</font><font color="#990000">);</font>
    <b><font color="#000000">CPPAD_ASSERT_KNOWN</font></b><font color="#990000">(</font>
        <b><font color="#000000">size_t</font></b><font color="#990000">(</font>A<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">())</font> <font color="#990000">==</font> m <font color="#990000">*</font> n<font color="#990000">,</font> <font color="#FF0000">"lp_box: size of A is not m * n"</font>
    <font color="#990000">);</font>
    <b><font color="#000000">CPPAD_ASSERT_KNOWN</font></b><font color="#990000">(</font>
        <b><font color="#000000">size_t</font></b><font color="#990000">(</font>d<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">())</font> <font color="#990000">==</font> n<font color="#990000">,</font> <font color="#FF0000">"lp_box: size of d is not n"</font>
    <font color="#990000">);</font>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> level <font color="#990000">&gt;</font> <font color="#993399">0</font> <font color="#990000">)</font>
    <font color="#FF0000">{</font>   std<font color="#990000">::</font>cout <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"start lp_box</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
        CppAD<font color="#990000">::</font><b><font color="#000000">abs_print_mat</font></b><font color="#990000">(</font><font color="#FF0000">"A"</font><font color="#990000">,</font> m<font color="#990000">,</font> n<font color="#990000">,</font> A<font color="#990000">);</font>
        CppAD<font color="#990000">::</font><b><font color="#000000">abs_print_mat</font></b><font color="#990000">(</font><font color="#FF0000">"b"</font><font color="#990000">,</font> m<font color="#990000">,</font> <font color="#993399">1</font><font color="#990000">,</font> b<font color="#990000">);</font>
        CppAD<font color="#990000">::</font><b><font color="#000000">abs_print_mat</font></b><font color="#990000">(</font><font color="#FF0000">"c"</font><font color="#990000">,</font> n<font color="#990000">,</font> <font color="#993399">1</font><font color="#990000">,</font> c<font color="#990000">);</font>
        CppAD<font color="#990000">::</font><b><font color="#000000">abs_print_mat</font></b><font color="#990000">(</font><font color="#FF0000">"d"</font><font color="#990000">,</font> n<font color="#990000">,</font> <font color="#993399">1</font><font color="#990000">,</font> d<font color="#990000">);</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// count number of limits</font></i>
    <font color="#008080">size_t</font> n_limit <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">if</font></b><font color="#990000">(</font> d<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">&lt;</font> inf <font color="#990000">)</font>
            n_limit <font color="#990000">+=</font> <font color="#993399">1</font><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// A_simplex and b_simplex define the extended constraints</font></i>
    <font color="#008080">Vector</font> <b><font color="#000000">A_simplex</font></b><font color="#990000">((</font>m <font color="#990000">+</font> <font color="#993399">2</font> <font color="#990000">*</font> n_limit<font color="#990000">)</font> <font color="#990000">*</font> <font color="#990000">(</font><font color="#993399">2</font> <font color="#990000">*</font> n<font color="#990000">)</font> <font color="#990000">),</font> <b><font color="#000000">b_simplex</font></b><font color="#990000">(</font>m <font color="#990000">+</font> <font color="#993399">2</font> <font color="#990000">*</font> n_limit<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font>A_simplex<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">());</font> i<font color="#990000">++)</font>
        A_simplex<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// put A * x + b &lt;= 0 in A_simplex, b_simplex</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> i<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   b_simplex<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> b<font color="#990000">[</font>i<font color="#990000">];</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// x_j^+ coefficient (positive component)</font></i>
            A_simplex<font color="#990000">[</font>i <font color="#990000">*</font> <font color="#990000">(</font><font color="#993399">2</font> <font color="#990000">*</font> n<font color="#990000">)</font> <font color="#990000">+</font> <font color="#993399">2</font> <font color="#990000">*</font> j<font color="#990000">]</font>     <font color="#990000">=</font>   A<font color="#990000">[</font>i <font color="#990000">*</font> n <font color="#990000">+</font> j<font color="#990000">];</font>
            <i><font color="#9A1900">// x_j^- coefficient (negative component)</font></i>
            A_simplex<font color="#990000">[</font>i <font color="#990000">*</font> <font color="#990000">(</font><font color="#993399">2</font> <font color="#990000">*</font> n<font color="#990000">)</font> <font color="#990000">+</font> <font color="#993399">2</font> <font color="#990000">*</font> j <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">-</font> A<font color="#990000">[</font>i <font color="#990000">*</font> n <font color="#990000">+</font> j<font color="#990000">];</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// put | x_j | &lt;= d_j in A_simplex, b_simplex</font></i>
    <font color="#008080">size_t</font> i_limit <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font> <b><font color="#0000FF">if</font></b><font color="#990000">(</font> d<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">&lt;</font> inf <font color="#990000">)</font>
    <font color="#FF0000">{</font>
        <i><font color="#9A1900">// x_j^+ &lt;= d_j constraint</font></i>
        b_simplex<font color="#990000">[</font> m <font color="#990000">+</font> <font color="#993399">2</font> <font color="#990000">*</font> i_limit<font color="#990000">]</font>                         <font color="#990000">=</font> <font color="#990000">-</font> d<font color="#990000">[</font>j<font color="#990000">];</font>
        A_simplex<font color="#990000">[(</font>m <font color="#990000">+</font> <font color="#993399">2</font> <font color="#990000">*</font> i_limit<font color="#990000">)</font> <font color="#990000">*</font> <font color="#990000">(</font><font color="#993399">2</font> <font color="#990000">*</font> n<font color="#990000">)</font> <font color="#990000">+</font> <font color="#993399">2</font> <font color="#990000">*</font> j<font color="#990000">]</font>      <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// x_j^- &lt;= d_j constraint</font></i>
        b_simplex<font color="#990000">[</font> m <font color="#990000">+</font> <font color="#993399">2</font> <font color="#990000">*</font> i_limit <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">]</font>                         <font color="#990000">=</font> <font color="#990000">-</font> d<font color="#990000">[</font>j<font color="#990000">];</font>
        A_simplex<font color="#990000">[(</font>m <font color="#990000">+</font> <font color="#993399">2</font> <font color="#990000">*</font> i_limit <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">*</font> <font color="#990000">(</font><font color="#993399">2</font> <font color="#990000">*</font> n<font color="#990000">)</font> <font color="#990000">+</font> <font color="#993399">2</font> <font color="#990000">*</font> j <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <font color="#990000">++</font>i_limit<font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// c_simples</font></i>
    <font color="#008080">Vector</font> <b><font color="#000000">c_simplex</font></b><font color="#990000">(</font><font color="#993399">2</font> <font color="#990000">*</font> n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// x_j+ component</font></i>
        c_simplex<font color="#990000">[</font><font color="#993399">2</font> <font color="#990000">*</font> j<font color="#990000">]</font>     <font color="#990000">=</font> c<font color="#990000">[</font>j<font color="#990000">];</font>
        <i><font color="#9A1900">// x_j^- component</font></i>
        c_simplex<font color="#990000">[</font><font color="#993399">2</font> <font color="#990000">*</font> j <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">-</font> c<font color="#990000">[</font>j<font color="#990000">];</font>
    <font color="#FF0000">}</font>
    <font color="#008080">size_t</font> level_simplex <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> level <font color="#990000">&gt;=</font> <font color="#993399">2</font> <font color="#990000">)</font>
        level_simplex <font color="#990000">=</font> level <font color="#990000">-</font> <font color="#993399">1</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <font color="#008080">Vector</font> <b><font color="#000000">x_simplex</font></b><font color="#990000">(</font><font color="#993399">2</font> <font color="#990000">*</font> n<font color="#990000">);</font>
    <font color="#009900">bool</font> ok <font color="#990000">=</font> CppAD<font color="#990000">::</font><b><font color="#000000">simplex_method</font></b><font color="#990000">(</font>
        level_simplex<font color="#990000">,</font> A_simplex<font color="#990000">,</font> b_simplex<font color="#990000">,</font> c_simplex<font color="#990000">,</font> maxitr<font color="#990000">,</font> x_simplex
    <font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        xout<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> x_simplex<font color="#990000">[</font><font color="#993399">2</font> <font color="#990000">*</font> j<font color="#990000">]</font> <font color="#990000">-</font> x_simplex<font color="#990000">[</font><font color="#993399">2</font> <font color="#990000">*</font> j <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">];</font>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> level <font color="#990000">&gt;</font> <font color="#993399">0</font> <font color="#990000">)</font>
    <font color="#FF0000">{</font>   CppAD<font color="#990000">::</font><b><font color="#000000">abs_print_mat</font></b><font color="#990000">(</font><font color="#FF0000">"xout"</font><font color="#990000">,</font> n<font color="#990000">,</font> <font color="#993399">1</font><font color="#990000">,</font> xout<font color="#990000">);</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> ok <font color="#990000">)</font>
            std<font color="#990000">::</font>cout <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"end lp_box: ok = true</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
        <b><font color="#0000FF">else</font></b>
            std<font color="#990000">::</font>cout <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"end lp_box: ok = false</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>

<font color="#FF0000">}</font> <i><font color="#9A1900">// END_CPPAD_NAMESPACE</font></i></tt></pre>

<hr>Input File: example/abs_normal/lp_box.omh

</body>
</html>
