<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Atomic Linear ODE Sparsity Calculations: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Atomic Linear ODE Sparsity Calculations: Example and Test">
<meta name="keywords" id="keywords" content=" atomic linear ode sparsity calculations: example test under construction purpose f(u) solution source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_four_lin_ode_sparsity.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_four_lin_ode_reverse.cpp.htm" target="_top">Prev</a>
</td><td><a href="atomic_three.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_four</option>
<option>atomic_four_example</option>
<option>atomic_four_lin_ode</option>
<option>atomic_four_lin_ode_sparsity.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_example_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_lin_ode_htm.js'></script>
</td>
<td>atomic_four_lin_ode_sparsity.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Under Construction</option>
<option>Purpose</option>
<option>f(u)</option>
<option>Solution</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<center><b><big><big>Atomic Linear ODE Sparsity Calculations: Example and Test</big></big></b></center>
<br>
<b><big><a name="Under Construction" id="Under Construction">Under Construction</a></big></b>
<br>
This test does not yet pass.

<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This example demonstrates calculating sparsity patterns with
the <a href="atomic_four_lin_ode.htm" target="_top"><span style='white-space: nowrap'>atomic_four_lin_ode</span></a>
 class.

<br>
<br>
<b><big><a name="f(u)" id="f(u)">f(u)</a></big></b>
<br>
For this example, the function <small>@(@
f(u) = z(r, u)
@)@</small> where
<small>@(@
z(t, u)
@)@</small> solves the following ODE
<small>@[@

z_t (t, u) =
\left( \begin{array}{cccc}
0   & 0  & 0    & 0   \\
u_4 & 0  & 0    & 0   \\
0   & u_5 & 0   & 0   \\
0   & 0   & u_6 & 0   \\
\end{array} \right)
z(t, u)
\W{,}
z(0, u) =
\left( \begin{array}{c}
u_0 \\
u_1 \\
u_2 \\
u_3 \\
\end{array} \right)

@]@</small>

<br>
<br>
<b><big><a name="Solution" id="Solution">Solution</a></big></b>
<br>
The actual solution to this ODE is
<small>@[@

z(t, u) =
\left( \begin{array}{l}
u_0  \\
u_1 + u_4 u_0 t \\
u_2 + u_5 u_1 t + u_5 u_4 u_0 t^2 / 2  \\
u_3 + u_6 u_2 t + u_6 u_5 u_1 t^2 / 2 + u_6 u_5 u_4 u_0 t^3 / 6
\end{array} \right)

@]@</small>

<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/example/atomic_four/lin_ode/lin_ode.hpp&gt;</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font> <i><font color="#9A1900">// BEGIN_EMPTY_NAMESPACE</font></i>

<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Scalar</font><font color="#990000">,</font> <b><font color="#0000FF">class</font></b> <font color="#008080">Vector</font><font color="#990000">&gt;</font>
<font color="#008080">Vector</font> <b><font color="#000000">Z</font></b><font color="#990000">(</font><font color="#008080">Scalar</font> t<font color="#990000">,</font> <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> u<font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#008080">size_t</font> nz <font color="#990000">=</font> <font color="#993399">4</font><font color="#990000">;</font>
    <font color="#008080">Vector</font> <b><font color="#000000">z</font></b><font color="#990000">(</font>nz<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    z<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>  <font color="#990000">=</font> u<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
    z<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font>  <font color="#990000">=</font> u<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">+</font> u<font color="#990000">[</font><font color="#993399">4</font><font color="#990000">]*</font>u<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]*</font>t<font color="#990000">;</font>
    z<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font>  <font color="#990000">=</font> u<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">+</font> u<font color="#990000">[</font><font color="#993399">5</font><font color="#990000">]*</font>u<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]*</font>t <font color="#990000">+</font> u<font color="#990000">[</font><font color="#993399">5</font><font color="#990000">]*</font>u<font color="#990000">[</font><font color="#993399">4</font><font color="#990000">]*</font>u<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]*</font>t<font color="#990000">*</font>t<font color="#990000">/</font><font color="#993399">2.0</font><font color="#990000">;</font>
    z<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">]</font>  <font color="#990000">=</font> u<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">]</font> <font color="#990000">+</font> u<font color="#990000">[</font><font color="#993399">6</font><font color="#990000">]*</font>u<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]*</font>t <font color="#990000">+</font> u<font color="#990000">[</font><font color="#993399">6</font><font color="#990000">]*</font>u<font color="#990000">[</font><font color="#993399">5</font><font color="#990000">]*</font>u<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]*</font>t<font color="#990000">*</font>t<font color="#990000">/</font><font color="#993399">2.0</font>
          <font color="#990000">+</font> u<font color="#990000">[</font><font color="#993399">6</font><font color="#990000">]*</font>u<font color="#990000">[</font><font color="#993399">5</font><font color="#990000">]*</font>u<font color="#990000">[</font><font color="#993399">4</font><font color="#990000">]*</font>u<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]*</font>t<font color="#990000">*</font>t<font color="#990000">*</font>t<font color="#990000">/</font><font color="#993399">6.0</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">return</font></b> z<font color="#990000">;</font>
<font color="#FF0000">}</font>

<font color="#FF0000">}</font> <i><font color="#9A1900">// END_EMPTY_NAMESPACE</font></i>

<font color="#009900">bool</font> <b><font color="#000000">sparsity</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <i><font color="#9A1900">// ok, eps</font></i>
    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// sparse_rc, AD, NearEqual</font></i>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">sparse_rc&lt; CppAD::vector&lt;size_t&gt; &gt;</font> sparse_rc<font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>NearEqual<font color="#990000">;</font>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// Record f</font></i>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// afun</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">atomic_lin_ode&lt;double&gt;</font> <b><font color="#000000">afun</font></b><font color="#990000">(</font><font color="#FF0000">"atomic_lin_ode"</font><font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// m, r</font></i>
    <font color="#008080">size_t</font> m      <font color="#990000">=</font> <font color="#993399">4</font><font color="#990000">;</font>
    <font color="#009900">double</font> r      <font color="#990000">=</font> <font color="#993399">2.0</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// pattern, transpose</font></i>
    <font color="#008080">size_t</font> nr  <font color="#990000">=</font> m<font color="#990000">;</font>
    <font color="#008080">size_t</font> nc  <font color="#990000">=</font> m<font color="#990000">;</font>
    <font color="#008080">size_t</font> nnz <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>
    CppAD<font color="#990000">::</font><font color="#008080">sparse_rc&lt; CppAD::vector&lt;size_t&gt; &gt;</font> <b><font color="#000000">pattern</font></b><font color="#990000">(</font>nr<font color="#990000">,</font> nc<font color="#990000">,</font> nnz<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> nnz<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i <font color="#990000">=</font> k <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">;</font>
        <font color="#008080">size_t</font> j <font color="#990000">=</font> k<font color="#990000">;</font>
        pattern<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>k<font color="#990000">,</font> i<font color="#990000">,</font> j<font color="#990000">);</font>
    <font color="#FF0000">}</font>
    <font color="#009900">bool</font> transpose <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// ny, ay</font></i>
    <font color="#008080">size_t</font> ny <font color="#990000">=</font> m<font color="#990000">;</font>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font> <b><font color="#000000">ay</font></b><font color="#990000">(</font>ny<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// nu, au</font></i>
    <font color="#008080">size_t</font> nu <font color="#990000">=</font> nnz <font color="#990000">+</font> m<font color="#990000">;</font>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font> <b><font color="#000000">au</font></b><font color="#990000">(</font>nu<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nu<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
        au<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;(</font>j <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>
    CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>au<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// ax</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font>nnz <font color="#990000">+</font> m<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> nnz<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font>
        ax<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> au<font color="#990000">[</font>m <font color="#990000">+</font> k<font color="#990000">];</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
        ax<font color="#990000">[</font>nnz <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">=</font> au<font color="#990000">[</font>i<font color="#990000">];</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// ay</font></i>
    <font color="#008080">size_t</font> call_id <font color="#990000">=</font> afun<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>r<font color="#990000">,</font> pattern<font color="#990000">,</font> transpose<font color="#990000">);</font>
    <b><font color="#000000">afun</font></b><font color="#990000">(</font>call_id<font color="#990000">,</font> ax<font color="#990000">,</font> ay<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// f</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> <b><font color="#000000">f</font></b><font color="#990000">(</font>au<font color="#990000">,</font> ay<font color="#990000">);</font>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// ar, check_f</font></i>
    CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>au<font color="#990000">);</font>
    <font color="#008080">AD&lt;double&gt;</font> ar <font color="#990000">=</font> r<font color="#990000">;</font>
    ay <font color="#990000">=</font> <b><font color="#000000">Z</font></b><font color="#990000">(</font>ar<font color="#990000">,</font> au<font color="#990000">);</font>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> <b><font color="#000000">check_f</font></b><font color="#990000">(</font>au<font color="#990000">,</font> ay<font color="#990000">);</font>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// Jacobian Sparsity</font></i>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// eye_sparsity</font></i>
    <i><font color="#9A1900">// nu by nu identitty matrix</font></i>
    <font color="#008080">sparse_rc</font> <b><font color="#000000">eye_sparsity</font></b><font color="#990000">(</font>nu<font color="#990000">,</font> nu<font color="#990000">,</font> nu<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nu<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
        eye_sparsity<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>i<font color="#990000">,</font> i<font color="#990000">,</font> i<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// internal_bool</font></i>
    <font color="#009900">bool</font> internal_bool <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// jac_sparsity</font></i>
    transpose          <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    <font color="#009900">bool</font> dependency    <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    <font color="#008080">sparse_rc</font> jac_sparsity<font color="#990000">;</font>
    f<font color="#990000">.</font><b><font color="#000000">for_jac_sparsity</font></b><font color="#990000">(</font>
        eye_sparsity<font color="#990000">,</font> transpose<font color="#990000">,</font> dependency<font color="#990000">,</font> internal_bool<font color="#990000">,</font> jac_sparsity
    <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// check_jac_sparsity</font></i>
    <font color="#008080">sparse_rc</font> check_jac_sparsity<font color="#990000">;</font>
    check_f<font color="#990000">.</font><b><font color="#000000">for_jac_sparsity</font></b><font color="#990000">(</font>
        eye_sparsity<font color="#990000">,</font> transpose<font color="#990000">,</font> dependency<font color="#990000">,</font> internal_bool<font color="#990000">,</font> check_jac_sparsity
    <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// ok</font></i>
    ok <font color="#990000">&amp;=</font> jac_sparsity <font color="#990000">==</font> check_jac_sparsity<font color="#990000">;</font>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// Hessian Sparsity</font></i>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// select_domain</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">bool</font><font color="#990000">)</font> <b><font color="#000000">select_domain</font></b><font color="#990000">(</font>nu<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nu<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
        select_domain<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// select_range</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">bool</font><font color="#990000">)</font> <b><font color="#000000">select_range</font></b><font color="#990000">(</font>ny<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> ny<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
        select_range<font color="#990000">[</font>i<font color="#990000">]</font>  <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    select_range<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// hes_sparsity</font></i>
    <font color="#008080">sparse_rc</font> hes_sparsity<font color="#990000">;</font>
    f<font color="#990000">.</font><b><font color="#000000">for_hes_sparsity</font></b><font color="#990000">(</font>
        select_domain<font color="#990000">,</font> select_range<font color="#990000">,</font> internal_bool<font color="#990000">,</font> hes_sparsity
    <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// check_hes_sparsity</font></i>
    <font color="#008080">sparse_rc</font> check_hes_sparsity<font color="#990000">;</font>
    check_f<font color="#990000">.</font><b><font color="#000000">for_hes_sparsity</font></b><font color="#990000">(</font>
        select_domain<font color="#990000">,</font> select_range<font color="#990000">,</font> internal_bool<font color="#990000">,</font> check_hes_sparsity
    <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// ok</font></i>
    ok <font color="#990000">&amp;=</font> hes_sparsity <font color="#990000">==</font> check_hes_sparsity<font color="#990000">;</font>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/atomic_four/lin_ode/sparsity.cpp

</body>
</html>
