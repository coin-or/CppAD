<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>code_gen_fun Class Include File</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="code_gen_fun Class Include File">
<meta name="keywords" id="keywords" content=" code_gen_fun class include file see also source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_code_gen_fun.hpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="code_gen_fun_sparse_jac_as_fun.cpp.htm" target="_top">Prev</a>
</td><td><a href="code_gen_fun.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>General</option>
<option>code_gen_fun.hpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_example_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_general_htm.js'></script>
</td>
<td>code_gen_fun.hpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>See Also</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@


<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>code_gen_fun Class Include File</big></big></b></center>
<br>
<b><big><a name="See Also" id="See Also">See Also</a></big></b>

<br>
<a href="code_gen_fun.htm" target="_top"><span style='white-space: nowrap'>code_gen_fun</span></a>
, <a href="code_gen_fun.cpp.htm" target="_top"><span style='white-space: nowrap'>code_gen_fun.cpp</span></a>


<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cg/cppadcg.hpp&gt;</font>

<i><font color="#9A1900">// See https://docs.microsoft.com/en-us/cpp/cpp/</font></i>
<i><font color="#9A1900">//      using-dllimport-and-dllexport-in-cpp-classes?view=msvc-160</font></i>
<i><font color="#9A1900">// Also see define.hpp where CPPAD_LIB_EXPORTS is also defined and</font></i>
<i><font color="#9A1900">// undef.hpp where it gets undefined.</font></i>
<b><font color="#000080"># ifdef</font></b>  _MSC_VER
<b><font color="#000080"># ifdef</font></b>  cppad_lib_EXPORTS
<b><font color="#000080"># define</font></b> <font color="#008080">CPPAD_LIB_EXPORT</font> <b><font color="#0000FF">__declspec</font></b><font color="#990000">(</font>dllexport<font color="#990000">)</font>
<b><font color="#000080"># else</font></b>
<b><font color="#000080"># define</font></b> <font color="#008080">CPPAD_LIB_EXPORT</font> <b><font color="#0000FF">__declspec</font></b><font color="#990000">(</font>dllimport<font color="#990000">)</font>
<b><font color="#000080"># endif</font></b>  <i><font color="#9A1900">// cppad_lib_EXPORTS</font></i>
<b><font color="#000080"># else</font></b>   <i><font color="#9A1900">// _MSC_VER</font></i>
<b><font color="#000080"># define</font></b> CPPAD_LIB_EXPORT
<b><font color="#000080"># endif</font></b>

<b><font color="#0000FF">class</font></b> <font color="#008080">CPPAD_LIB_EXPORT</font> code_gen_fun <font color="#FF0000">{</font>
<b><font color="#0000FF">public</font></b><font color="#990000">:</font>
    <i><font color="#9A1900">// type of evaluation for Jacobians (possibly Hessians in the future)</font></i>
    <b><font color="#0000FF">enum</font></b> <font color="#008080">evaluation_enum</font> <font color="#FF0000">{</font> none_enum<font color="#990000">,</font> dense_enum<font color="#990000">,</font> sparse_enum <font color="#FF0000">}</font><font color="#990000">;</font>
<b><font color="#0000FF">private</font></b><font color="#990000">:</font>
    <i><font color="#9A1900">// dynamic_lib_</font></i>
    std<font color="#990000">::</font><font color="#008080">unique_ptr&lt; CppAD::cg::DynamicLib&lt;double&gt; &gt;</font> dynamic_lib_<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// model_ (contains a reference to dynamic_lib_)</font></i>
    std<font color="#990000">::</font><font color="#008080">unique_ptr&lt; CppAD::cg::GenericModel&lt;double&gt; &gt;</font> model_<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
<b><font color="#0000FF">public</font></b><font color="#990000">:</font>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// constructors</font></i>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// fun_name()</font></i>
    <b><font color="#000000">code_gen_fun</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// fun_name( file_name )</font></i>
    <b><font color="#000000">code_gen_fun</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font> file_name<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// fun_name(file_name, cg_fun, eval_jac)</font></i>
    <b><font color="#000000">code_gen_fun</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font>                     file_name             <font color="#990000">,</font>
        CppAD<font color="#990000">::</font>ADFun<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>cg<font color="#990000">::</font>CG<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font> cg_fun                <font color="#990000">,</font>
        <font color="#008080">evaluation_enum</font>                        eval_jac <font color="#990000">=</font> none_enum
    <font color="#990000">);</font>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// operations</font></i>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// swap(other_fun)</font></i>
    <font color="#009900">void</font> <b><font color="#000000">swap</font></b><font color="#990000">(</font>code_gen_fun<font color="#990000">&amp;</font> other_fun<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// y = fun_name(x)</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;double&gt;</font>  <b><font color="#0000FF">operator</font></b><font color="#990000">()(</font><b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">&amp;</font> x<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// J = fun_name.jacobian(x)</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;double&gt;</font>  <b><font color="#000000">jacobian</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">&amp;</font> x<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// Jrcv = fun_name.sparse_jacobian(x)</font></i>
    CppAD<font color="#990000">::</font>sparse_rcv<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;,</font> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">&gt;</font>
    <b><font color="#000000">sparse_jacobian</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> x<font color="#990000">);</font>
<font color="#FF0000">}</font><font color="#990000">;</font></tt></pre>

<hr>Input File: cppad_lib/code_gen_fun.cpp

</body>
</html>
