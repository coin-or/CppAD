<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Declare Independent Variables and Start Recording</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Declare Independent Variables and Start Recording">
<meta name="keywords" id="keywords" content=" declare independent variables start recording syntax stop x abort_op_index record_compare dynamic efficiency advector parallel mode example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_independent_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="record_adfun.htm" target="_top">Prev</a>
</td><td><a href="independent.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>record_adfun</option>
<option>Independent</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_record_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_independent_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Start Recording</option>
<option>Stop Recording</option>
<option>x</option>
<option>abort_op_index</option>
<option>record_compare</option>
<option>dynamic</option>
<option>---..Efficiency</option>
<option>ADVector</option>
<option>Parallel Mode</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Declare Independent Variables and Start Recording</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>Independent(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>Independent(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dynamic</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>Independent(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>abort_op_index</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>Independent(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>abort_op_index</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>record_compare</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>Independent(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>abort_op_index</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>record_compare</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dynamic</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
<br>
<b><big><a name="Start Recording" id="Start Recording">Start Recording</a></big></b>
<br>
The syntax above starts recording
<a href="glossary.htm#AD of Base" target="_top"><span style='white-space: nowrap'>AD&nbsp;of&nbsp;Base</span></a>
 operations
with 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 as the independent variable vector.
Once the
<a href="glossary.htm#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&nbsp;sequence</span></a>
 is completed,
it must be transferred to a function object or aborted; see below.

<br>
<br>
<b><big><a name="Stop Recording" id="Stop Recording">Stop Recording</a></big></b>
<br>
The recording is stopped,
and the operation sequence is transferred to the AD function object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
,
using either the <a href="funconstruct.htm" target="_top"><span style='white-space: nowrap'>function&nbsp;constructor</span></a>


<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
or the <a href="dependent.htm" target="_top"><span style='white-space: nowrap'>dependent&nbsp;variable&nbsp;specifier</span></a>


<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Dependent(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
The only other way to stop a recording is using
<a href="abort_recording.htm" target="_top"><span style='white-space: nowrap'>abort_recording</span></a>
.
Between when the recording is started and when it stopped,
we refer to the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
,
and the values that depend on the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
,
as 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 variables.

<br>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
The vector 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ADVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
(see 
<code><i><font color="black"><span style='white-space: nowrap'>ADVector</span></font></i></code>
 below).
The size of the vector 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
, must be greater than zero,
and is the number of independent variables for this
AD operation sequence.

<br>
<br>
<b><big><a name="abort_op_index" id="abort_op_index">abort_op_index</a></big></b>
<br>
If this argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>abort_op_index</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
If it is present,
it specifies the operator index at which the execution will aborted
by calling the CppAD <a href="errorhandler.htm" target="_top"><span style='white-space: nowrap'>error&nbsp;handler</span></a>
.
When this error handler leads to an assert, the user
can inspect the call stack to see the source code corresponding to
this operator index; see
<a href="compare_change.htm#op_index.Purpose" target="_top"><span style='white-space: nowrap'>purpose</span></a>
 for 
<code><i><font color="black"><span style='white-space: nowrap'>op_index</span></font></i></code>

and <a href="faq.htm#Speed.NDEBUG" target="_top"><span style='white-space: nowrap'>NDEBUG</span></a>
.
No abort will occur if 
<code><i><font color="black"><span style='white-space: nowrap'>abort_op_index</span></font></i></code>
 is zero.
If this argument is not present, the default value zero is used
for 
<code><i><font color="black"><span style='white-space: nowrap'>abort_index</span></font></i></code>
.

<br>
<br>
<b><big><a name="record_compare" id="record_compare">record_compare</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>record_compare</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
If it is present,
it specifies if AD <a href="compare.htm" target="_top"><span style='white-space: nowrap'>compare</span></a>
  operations are recorded.
It takes extra time and memory to record these operations.
On the other hand, they can be useful for detecting when and why
a functions recording would change; see 
<code><i><font color="black"><span style='white-space: nowrap'>abort_op_index</span></font></i></code>
 above and
<a href="compare_change.htm" target="_top"><span style='white-space: nowrap'>compare_change</span></a>
.
If this argument is not present, the default value <code><font color="blue">true</font></code> is used
for 
<code><i><font color="black"><span style='white-space: nowrap'>record_compare</span></font></i></code>
.
If this argument is false, 
<code><i><font color="black"><span style='white-space: nowrap'>abort_op_index</span></font></i></code>
 must be zero.

<br>
<br>
<b><big><a name="dynamic" id="dynamic">dynamic</a></big></b>
<br>
If this argument is present, it has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ADVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dynamic</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
(see 
<code><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i></code>
 below).
It specifies the independent
<a href="glossary.htm#Parameter.Dynamic" target="_top"><span style='white-space: nowrap'>dynamic</span></a>
 parameters.
The value of these parameters,
in the <a href="adfun.htm" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
,
that can be changed using <a href="new_dynamic.htm" target="_top"><span style='white-space: nowrap'>new_dynamic</span></a>
.

<br>
<br>
<big><a name="dynamic.Efficiency" id="dynamic.Efficiency">Efficiency</a></big>
<br>
Any operations that use dynamic parameters will be recorded.
We use other dynamic parameters to denote parameters that depend on
the independent dynamic parameters 
<code><i><font color="black"><span style='white-space: nowrap'>dynamic</span></font></i></code>
,
and do not depend on 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
.
It is more efficient to compute other dynamic parameters before calling
<code><font color="blue">Independent</font></code> and include them in the
independent dynamic parameter vector 
<code><i><font color="black"><span style='white-space: nowrap'>dynamic</span></font></i></code>
.

<br>
<br>
<b><big><a name="ADVector" id="ADVector">ADVector</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>ADVector</span></font></i></code>
 must be a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with
<a href="simplevector.htm#Elements of Specified Type" target="_top"><span style='white-space: nowrap'>elements&nbsp;of&nbsp;type</span></a>


<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
.
The routine <a href="checksimplevector.htm" target="_top"><span style='white-space: nowrap'>CheckSimpleVector</span></a>
 will generate an error message
if this is not the case.

<br>
<br>
<b><big><a name="Parallel Mode" id="Parallel Mode">Parallel Mode</a></big></b>
<br>
Each thread can have one, and only one, active recording.
A call to <code><font color="blue">Independent</font></code> starts the recording for the current thread.
The recording must be stopped by a corresponding call to

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
or

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Dependent(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
or <a href="abort_recording.htm" target="_top"><span style='white-space: nowrap'>abort_recording</span></a>

preformed by the same thread; i.e.,
<a href="ta_thread_num.htm" target="_top"><span style='white-space: nowrap'>thread_alloc::thread_num</span></a>
 must be the same.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
The file
<a href="independent.cpp.htm" target="_top"><span style='white-space: nowrap'>independent.cpp</span></a>

contains an example and test of this operation.


<hr>Input File: include/cppad/core/independent/user.omh

</body>
</html>
