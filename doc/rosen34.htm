<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>A 3rd and 4th Order Rosenbrock ODE Solver</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="A 3rd and 4th Order Rosenbrock ODE Solver">
<meta name="keywords" id="keywords" content=" 3rd 4th order rosenbrock ode solver syntax description include xf fun t x f f_t f_x nan warning optimization m ti tf xi e scalar vector parallel mode example source code ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_rosen34_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="romberg_one.cpp.htm" target="_top">Prev</a>
</td><td><a href="rosen_34.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>utility</option>
<option>Rosen34</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_utility_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_rosen34_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Description</option>
<option>Include</option>
<option>xf</option>
<option>Fun</option>
<option>---..t</option>
<option>---..x</option>
<option>---..f</option>
<option>---..f_t</option>
<option>---..f_x</option>
<option>---..Nan</option>
<option>---..Warning</option>
<option>---..Optimization</option>
<option>M</option>
<option>ti</option>
<option>tf</option>
<option>xi</option>
<option>e</option>
<option>Scalar</option>
<option>Vector</option>
<option>Parallel Mode</option>
<option>Example</option>
<option>Source Code</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>A 3rd and 4th Order Rosenbrock ODE Solver</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>#&nbsp;include&nbsp;&lt;cppad/utility/rosen_34.hpp&gt;<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;Rosen34(</span></font><i><font color="black"><span style='white-space: nowrap'>F</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>M</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ti</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>tf</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xi</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;Rosen34(</span></font><i><font color="black"><span style='white-space: nowrap'>F</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>M</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ti</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>tf</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xi</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>e</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
<br>
<b><big><a name="Description" id="Description">Description</a></big></b>
<br>
This is an embedded 3rd and 4th order Rosenbrock ODE solver
(see Section 16.6 of <a href="bib.htm#Numerical Recipes" target="_top"><span style='white-space: nowrap'>Numerical&nbsp;Recipes</span></a>

for a description of Rosenbrock ODE solvers).
In particular, we use the formulas taken from page 100 of
<a href="bib.htm#Shampine, L.F." target="_top"><span style='white-space: nowrap'>Shampine,&nbsp;L.F.</span></a>

(except that the fraction 98/108 has been correction to be 97/108).
<code><span style='white-space: nowrap'><br>
<br>
</span></code>We use <small>@(@
n
@)@</small> for the size of the vector 
<code><i><font color="black"><span style='white-space: nowrap'>xi</span></font></i></code>
.
Let <small>@(@
\B{R}
@)@</small> denote the real numbers
and let <small>@(@
F : \B{R} \times \B{R}^n \rightarrow \B{R}^n
@)@</small> be a smooth function.
The return value 
<code><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i></code>
 contains a 5th order
approximation for the value <small>@(@
X(tf)
@)@</small> where
<small>@(@
X : [ti , tf] \rightarrow \B{R}^n
@)@</small> is defined by
the following initial value problem:
<small>@[@

\begin{array}{rcl}
    X(ti)  & = & xi    \\
    X'(t)  & = & F[t , X(t)]
\end{array}

@]@</small>
If your set of  ordinary differential equations are not stiff
an explicit method may be better (perhaps <a href="runge45.htm" target="_top"><span style='white-space: nowrap'>Runge45</span></a>
.)

<br>
<br>
<b><big><a name="Include" id="Include">Include</a></big></b>
<br>
The file <code><font color="blue">cppad/utility/rosen_34.hpp</font></code>
is included by <code><font color="blue">cppad/cppad.hpp</font></code>
but it can also be included separately with out the rest of
the <code><font color="blue">CppAD</font></code> routines.

<br>
<br>
<b><big><a name="xf" id="xf">xf</a></big></b>
<br>
The return value 
<code><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i></code>
 has the prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and the size of 
<code><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i></code>
 is equal to 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>

(see description of <a href="rosen34.htm#Vector" target="_top"><span style='white-space: nowrap'>Vector</span></a>
 below).
<small>@[@

    X(tf) = xf + O( h^5 )

@]@</small>
where <small>@(@
h = (tf - ti) / M
@)@</small> is the step size.
If 
<code><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i></code>
 contains not a number <a href="nan.htm" target="_top"><span style='white-space: nowrap'>nan</span></a>
,
see the discussion of <a href="rosen34.htm#Fun.Nan" target="_top"><span style='white-space: nowrap'>f</span></a>
.

<br>
<br>
<b><big><a name="Fun" id="Fun">Fun</a></big></b>
<br>
The class 
<code><i><font color="black"><span style='white-space: nowrap'>Fun</span></font></i></code>

and the object 
<code><i><font color="black"><span style='white-space: nowrap'>F</span></font></i></code>
 satisfy the prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Fun</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>F</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
This must support the following set of calls

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>F</span></font></i><font color="blue"><span style='white-space: nowrap'>.Ode(</span></font><i><font color="black"><span style='white-space: nowrap'>t</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>F</span></font></i><font color="blue"><span style='white-space: nowrap'>.Ode_ind(</span></font><i><font color="black"><span style='white-space: nowrap'>t</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f_t</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>F</span></font></i><font color="blue"><span style='white-space: nowrap'>.Ode_dep(</span></font><i><font color="black"><span style='white-space: nowrap'>t</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f_x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
<br>
<big><a name="Fun.t" id="Fun.t">t</a></big>
<br>
In all three cases,
the argument 
<code><i><font color="black"><span style='white-space: nowrap'>t</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>t</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
(see description of <a href="rosen34.htm#Scalar" target="_top"><span style='white-space: nowrap'>Scalar</span></a>
 below).

<br>
<br>
<big><a name="Fun.x" id="Fun.x">x</a></big>
<br>
In all three cases,
the argument 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and has size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>

(see description of <a href="rosen34.htm#Vector" target="_top"><span style='white-space: nowrap'>Vector</span></a>
 below).

<br>
<br>
<big><a name="Fun.f" id="Fun.f">f</a></big>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 to 
<code><i><font color="black"><span style='white-space: nowrap'>F</span></font></i><font color="blue"><span style='white-space: nowrap'>.Ode</span></font></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
On input and output, 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 is a vector of size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>

and the input values of the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 do not matter.
On output,

<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 is set equal to <small>@(@
F(t, x)
@)@</small>
(see 
<code><i><font color="black"><span style='white-space: nowrap'>F(t,&nbsp;x)</span></font></i></code>
 in <a href="rosen34.htm#Description" target="_top"><span style='white-space: nowrap'>Description</span></a>
).

<br>
<br>
<big><a name="Fun.f_t" id="Fun.f_t">f_t</a></big>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>f_t</span></font></i></code>
 to 
<code><i><font color="black"><span style='white-space: nowrap'>F</span></font></i><font color="blue"><span style='white-space: nowrap'>.Ode_ind</span></font></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>f_t</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
On input and output, 
<code><i><font color="black"><span style='white-space: nowrap'>f_t</span></font></i></code>
 is a vector of size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>

and the input values of the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>f_t</span></font></i></code>
 do not matter.
On output, the <code><i>i</i></code>-th element of

<code><i><font color="black"><span style='white-space: nowrap'>f_t</span></font></i></code>
 is set equal to <small>@(@
\partial_t F_i (t, x)
@)@</small>
(see 
<code><i><font color="black"><span style='white-space: nowrap'>F(t,&nbsp;x)</span></font></i></code>
 in <a href="rosen34.htm#Description" target="_top"><span style='white-space: nowrap'>Description</span></a>
).

<br>
<br>
<big><a name="Fun.f_x" id="Fun.f_x">f_x</a></big>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>f_x</span></font></i></code>
 to 
<code><i><font color="black"><span style='white-space: nowrap'>F</span></font></i><font color="blue"><span style='white-space: nowrap'>.Ode_dep</span></font></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>f_x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
On input and output, 
<code><i><font color="black"><span style='white-space: nowrap'>f_x</span></font></i></code>
 is a vector of size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>*</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>

and the input values of the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>f_x</span></font></i></code>
 do not matter.
On output, the [
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>*</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>+</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i></code>
] element of

<code><i><font color="black"><span style='white-space: nowrap'>f_x</span></font></i></code>
 is set equal to <small>@(@
\partial_{x(j)} F_i (t, x)
@)@</small>
(see 
<code><i><font color="black"><span style='white-space: nowrap'>F(t,&nbsp;x)</span></font></i></code>
 in <a href="rosen34.htm#Description" target="_top"><span style='white-space: nowrap'>Description</span></a>
).

<br>
<br>
<big><a name="Fun.Nan" id="Fun.Nan">Nan</a></big>
<br>
If any of the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>f_t</span></font></i></code>
, or 
<code><i><font color="black"><span style='white-space: nowrap'>f_x</span></font></i></code>

have the value not a number <code><font color="blue">nan</font></code>,
the routine <code><font color="blue">Rosen34</font></code> returns with all the
elements of 
<code><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>e</span></font></i></code>
 equal to <code><font color="blue">nan</font></code>.

<br>
<br>
<big><a name="Fun.Warning" id="Fun.Warning">Warning</a></big>
<br>
The arguments 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>f_t</span></font></i></code>
, and 
<code><i><font color="black"><span style='white-space: nowrap'>f_x</span></font></i></code>

must have a call by reference in their prototypes; i.e.,
do not forget the <code><font color="blue">&amp;</font></code> in the prototype for

<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>f_t</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>f_x</span></font></i></code>
.

<br>
<br>
<big><a name="Fun.Optimization" id="Fun.Optimization">Optimization</a></big>
<br>
Every call of the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>F</span></font></i><font color="blue"><span style='white-space: nowrap'>.Ode_ind(</span></font><i><font color="black"><span style='white-space: nowrap'>t</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f_t</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
is directly followed by a call of the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>F</span></font></i><font color="blue"><span style='white-space: nowrap'>.Ode_dep(</span></font><i><font color="black"><span style='white-space: nowrap'>t</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f_x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
where the arguments 
<code><i><font color="black"><span style='white-space: nowrap'>t</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 have not changed between calls.
In many cases it is faster to compute the values of 
<code><i><font color="black"><span style='white-space: nowrap'>f_t</span></font></i></code>

and 
<code><i><font color="black"><span style='white-space: nowrap'>f_x</span></font></i></code>
 together and then pass them back one at a time.

<br>
<br>
<b><big><a name="M" id="M">M</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>M</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>M</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the number of steps
to use when solving the differential equation.
This must be greater than or equal one.
The step size is given by <small>@(@
h = (tf - ti) / M
@)@</small>, thus
the larger 
<code><i><font color="black"><span style='white-space: nowrap'>M</span></font></i></code>
, the more accurate the
return value 
<code><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i></code>
 is as an approximation
for <small>@(@
X(tf)
@)@</small>.

<br>
<br>
<b><big><a name="ti" id="ti">ti</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>ti</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>ti</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
(see description of <a href="rosen34.htm#Scalar" target="_top"><span style='white-space: nowrap'>Scalar</span></a>
 below).
It specifies the initial time for 
<code><i><font color="black"><span style='white-space: nowrap'>t</span></font></i></code>
 in the
differential equation; i.e.,
the time corresponding to the value 
<code><i><font color="black"><span style='white-space: nowrap'>xi</span></font></i></code>
.

<br>
<br>
<b><big><a name="tf" id="tf">tf</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>tf</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>tf</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the final time for 
<code><i><font color="black"><span style='white-space: nowrap'>t</span></font></i></code>
 in the
differential equation; i.e.,
the time corresponding to the value 
<code><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i></code>
.

<br>
<br>
<b><big><a name="xi" id="xi">xi</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>xi</span></font></i></code>
 has the prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>xi</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and the size of 
<code><i><font color="black"><span style='white-space: nowrap'>xi</span></font></i></code>
 is equal to 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
It specifies the value of <small>@(@
X(ti)
@)@</small>

<br>
<br>
<b><big><a name="e" id="e">e</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>e</span></font></i></code>
 is optional and has the prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>e</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
If 
<code><i><font color="black"><span style='white-space: nowrap'>e</span></font></i></code>
 is present,
the size of 
<code><i><font color="black"><span style='white-space: nowrap'>e</span></font></i></code>
 must be equal to 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
The input value of the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>e</span></font></i></code>
 does not matter.
On output
it contains an element by element
estimated bound for the absolute value of the error in 
<code><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i></code>

<small>@[@

    e = O( h^4 )

@]@</small>
where <small>@(@
h = (tf - ti) / M
@)@</small> is the step size.

<br>
<br>
<b><big><a name="Scalar" id="Scalar">Scalar</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i></code>
 must satisfy the conditions
for a <a href="numerictype.htm" target="_top"><span style='white-space: nowrap'>NumericType</span></a>
 type.
The routine <a href="checknumerictype.htm" target="_top"><span style='white-space: nowrap'>CheckNumericType</span></a>
 will generate an error message
if this is not the case.
In addition, the following operations must be defined for

<code><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i></code>
 objects 
<code><i><font color="black"><span style='white-space: nowrap'>a</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>b</span></font></i></code>
:

<table><tr><td align='left'  valign='top'>

<b>Operation</b> </td><td align='left'  valign='top'>
 <b>Description</b>  </td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>a</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>b</span></font></i></code>
 </td><td align='left'  valign='top'>

    less than operator (returns a <code><font color="blue">bool</font></code> object)
</td></tr>
</table>
<br>
<b><big><a name="Vector" id="Vector">Vector</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i></code>
 must be a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with
<a href="simplevector.htm#Elements of Specified Type" target="_top"><span style='white-space: nowrap'>elements&nbsp;of&nbsp;type&nbsp;Scalar</span></a>
.
The routine <a href="checksimplevector.htm" target="_top"><span style='white-space: nowrap'>CheckSimpleVector</span></a>
 will generate an error message
if this is not the case.

<br>
<br>
<b><big><a name="Parallel Mode" id="Parallel Mode">Parallel Mode</a></big></b>
<br>
For each set of types
<a href="rosen34.htm#Scalar" target="_top"><span style='white-space: nowrap'>Scalar</span></a>
,
<a href="rosen34.htm#Vector" target="_top"><span style='white-space: nowrap'>Vector</span></a>
, and
<a href="rosen34.htm#Fun" target="_top"><span style='white-space: nowrap'>Fun</span></a>
,
the first call to <code><font color="blue">Rosen34</font></code>
must not be <a href="ta_in_parallel.htm" target="_top"><span style='white-space: nowrap'>parallel</span></a>
 execution mode.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
The file
<a href="rosen_34.cpp.htm" target="_top"><span style='white-space: nowrap'>rosen_34.cpp</span></a>

contains an example and test a test of using this routine.

<br>
<br>
<b><big><a name="Source Code" id="Source Code">Source Code</a></big></b>
<br>
The source code for this routine is in the file
<code><font color="blue">cppad/rosen_34.hpp</font></code>.


<hr>Input File: include/cppad/utility/rosen_34.hpp

</body>
</html>
