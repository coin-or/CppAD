<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Tan and Tanh as User Atomic Operations: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Tan and Tanh as User Atomic Operations: Example and Test">
<meta name="keywords" id="keywords" content=" tan tanh user atomic operations: example test discussion start class definition constructor for_type forward reverse jac_sparsity hes_sparsity end use function recording for_jac_sparsity rev_sparse_hes large x values ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_three_tangent.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_three_norm_sq.cpp.htm" target="_top">Prev</a>
</td><td><a href="atomic_three_base2ad.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_three</option>
<option>atomic_three_example</option>
<option>atomic_three_tangent.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_three_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_three_example_htm.js'></script>
</td>
<td>atomic_three_tangent.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Discussion</option>
<option>Start Class Definition</option>
<option>Constructor</option>
<option>for_type</option>
<option>forward</option>
<option>reverse</option>
<option>jac_sparsity</option>
<option>hes_sparsity</option>
<option>End Class Definition</option>
<option>Use Atomic Function</option>
<option>---..Constructor</option>
<option>---..Recording</option>
<option>---..forward</option>
<option>---..reverse</option>
<option>---..for_jac_sparsity</option>
<option>---..rev_sparse_hes</option>
<option>---..Large x Values</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Tan and Tanh as User Atomic Operations: Example and Test</big></big></b></center>
<br>
<b><big><a name="Discussion" id="Discussion">Discussion</a></big></b>
<br>
The code below uses the <a href="tan_forward.htm" target="_top"><span style='white-space: nowrap'>tan_forward</span></a>
 and <a href="tan_reverse.htm" target="_top"><span style='white-space: nowrap'>tan_reverse</span></a>

to implement the tangent and hyperbolic tangent
functions as atomic function operations.
It also uses <code><font color="blue">AD&lt;float&gt;</font></code>,
while most atomic examples use <code><font color="blue">AD&lt;double&gt;</font></code>.




<br>
<br>
<b><big><a name="Start Class Definition" id="Start Class Definition">Start Class Definition</a></big></b>

<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font> <i><font color="#9A1900">// Begin empty namespace</font></i>
<b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">;</font>
<i><font color="#9A1900">//</font></i>
<b><font color="#0000FF">class</font></b> <font color="#008080">atomic_tangent</font> <font color="#990000">:</font> <b><font color="#0000FF">public</font></b> CppAD<font color="#990000">::</font>atomic_three<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;</font> <font color="#FF0000">{</font></tt></pre>
<br>
<b><big><a name="Constructor" id="Constructor">Constructor</a></big></b>

<pre><tt><b><font color="#0000FF">private</font></b><font color="#990000">:</font>
    <b><font color="#0000FF">const</font></b> <font color="#009900">bool</font> hyperbolic_<font color="#990000">;</font> <i><font color="#9A1900">// is this hyperbolic tangent</font></i>
<b><font color="#0000FF">public</font></b><font color="#990000">:</font>
    <i><font color="#9A1900">// constructor</font></i>
    <b><font color="#000000">atomic_tangent</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> <font color="#009900">char</font><font color="#990000">*</font> name<font color="#990000">,</font> <font color="#009900">bool</font> hyperbolic<font color="#990000">)</font>
    <font color="#990000">:</font> CppAD<font color="#990000">::</font>atomic_three<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;(</font>name<font color="#990000">),</font>
    <b><font color="#000000">hyperbolic_</font></b><font color="#990000">(</font>hyperbolic<font color="#990000">)</font>
    <font color="#FF0000">{</font> <font color="#FF0000">}</font>
<b><font color="#0000FF">private</font></b><font color="#990000">:</font></tt></pre>
<br>
<b><big><a name="for_type" id="for_type">for_type</a></big></b>

<pre><tt>    <i><font color="#9A1900">// calculate type_y</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">for_type</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>                parameter_x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font>  type_x      <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font>        type_y      <font color="#990000">)</font> <b><font color="#0000FF">override</font></b>
    <font color="#FF0000">{</font>   <b><font color="#000000">assert</font></b><font color="#990000">(</font> parameter_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> type_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
        <font color="#009900">bool</font> ok <font color="#990000">=</font> type_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">;</font> <i><font color="#9A1900">// n</font></i>
        ok     <font color="#990000">&amp;=</font> type_y<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">;</font> <i><font color="#9A1900">// m</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> ok <font color="#990000">)</font>
            <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
        type_y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> type_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
        type_y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> type_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="forward" id="forward">forward</a></big></b>

<pre><tt>    <i><font color="#9A1900">// forward mode routine called by CppAD</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">forward</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>               parameter_x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font> type_x      <font color="#990000">,</font>
        <font color="#008080">size_t</font>                             need_y      <font color="#990000">,</font>
        <font color="#008080">size_t</font>                             p           <font color="#990000">,</font>
        <font color="#008080">size_t</font>                             q           <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>               tx          <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>                     tzy         <font color="#990000">)</font> <b><font color="#0000FF">override</font></b>
    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> q1 <font color="#990000">=</font> q <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">;</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
        <font color="#008080">size_t</font> n  <font color="#990000">=</font> tx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font>  <font color="#990000">/</font> q1<font color="#990000">;</font>
        <font color="#008080">size_t</font> m  <font color="#990000">=</font> tzy<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> q1<font color="#990000">;</font>
<b><font color="#000080"># endif</font></b>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> type_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> p <font color="#990000">&lt;=</font> q <font color="#990000">);</font>
        <font color="#008080">size_t</font> j<font color="#990000">,</font> k<font color="#990000">;</font>

        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> p <font color="#990000">==</font> <font color="#993399">0</font> <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// z^{(0)} = tan( x^{(0)} ) or tanh( x^{(0)} )</font></i>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> hyperbolic_ <font color="#990000">)</font>
                tzy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">float</font><font color="#990000">(</font> <b><font color="#000000">tanh</font></b><font color="#990000">(</font> tx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">)</font> <font color="#990000">);</font>
            <b><font color="#0000FF">else</font></b>
                tzy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">float</font><font color="#990000">(</font> <b><font color="#000000">tan</font></b><font color="#990000">(</font> tx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">)</font> <font color="#990000">);</font>

            <i><font color="#9A1900">// y^{(0)} = z^{(0)} * z^{(0)}</font></i>
            tzy<font color="#990000">[</font>q1 <font color="#990000">+</font> <font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> tzy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> tzy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>

            p<font color="#990000">++;</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> p<font color="#990000">;</font> j <font color="#990000">&lt;=</font> q<font color="#990000">;</font> j<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   <font color="#009900">float</font> j_inv <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.</font>f <font color="#990000">/</font> <font color="#009900">float</font><font color="#990000">(</font>j<font color="#990000">);</font>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> hyperbolic_ <font color="#990000">)</font>
                j_inv <font color="#990000">=</font> <font color="#990000">-</font> j_inv<font color="#990000">;</font>

            <i><font color="#9A1900">// z^{(j)} = x^{(j)} +- sum_{k=1}^j k x^{(k)} y^{(j-k)} / j</font></i>
            tzy<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> tx<font color="#990000">[</font>j<font color="#990000">];</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> k <font color="#990000">&lt;=</font> j<font color="#990000">;</font> k<font color="#990000">++)</font>
                tzy<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">+=</font> tx<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">*</font> tzy<font color="#990000">[</font>q1 <font color="#990000">+</font> j<font color="#990000">-</font>k<font color="#990000">]</font> <font color="#990000">*</font> <font color="#009900">float</font><font color="#990000">(</font>k<font color="#990000">)</font> <font color="#990000">*</font> j_inv<font color="#990000">;</font>

            <i><font color="#9A1900">// y^{(j)} = sum_{k=0}^j z^{(k)} z^{(j-k)}</font></i>
            tzy<font color="#990000">[</font>q1 <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;=</font> j<font color="#990000">;</font> k<font color="#990000">++)</font>
                tzy<font color="#990000">[</font>q1 <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">+=</font> tzy<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">*</font> tzy<font color="#990000">[</font>j<font color="#990000">-</font>k<font color="#990000">];</font>
        <font color="#FF0000">}</font>

        <i><font color="#9A1900">// All orders are implemented and there are no possible errors</font></i>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="reverse" id="reverse">reverse</a></big></b>

<pre><tt>    <i><font color="#9A1900">// reverse mode routine called by CppAD</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">reverse</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>               parameter_x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font> type_x      <font color="#990000">,</font>
        <font color="#008080">size_t</font>                             q           <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>               tx          <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>               tzy         <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>                     px          <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>               pzy         <font color="#990000">)</font> <b><font color="#0000FF">override</font></b>
    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> q1 <font color="#990000">=</font> q <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">;</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
        <font color="#008080">size_t</font> n  <font color="#990000">=</font> tx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font>  <font color="#990000">/</font> q1<font color="#990000">;</font>
        <font color="#008080">size_t</font> m  <font color="#990000">=</font> tzy<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> q1<font color="#990000">;</font>
<b><font color="#000080"># endif</font></b>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> px<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font>  <font color="#990000">==</font> n <font color="#990000">*</font> q1 <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> pzy<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> m <font color="#990000">*</font> q1 <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>

        <font color="#008080">size_t</font> j<font color="#990000">,</font> k<font color="#990000">;</font>

        <i><font color="#9A1900">// copy because partials w.r.t. y and z need to change</font></i>
        <font color="#008080">vector&lt;float&gt;</font> qzy <font color="#990000">=</font> pzy<font color="#990000">;</font>

        <i><font color="#9A1900">// initialize accumultion of reverse mode partials</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> q1<font color="#990000">;</font> k<font color="#990000">++)</font>
            px<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>

        <i><font color="#9A1900">// eliminate positive orders</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> q<font color="#990000">;</font> j <font color="#990000">&gt;</font> <font color="#993399">0</font><font color="#990000">;</font> j<font color="#990000">--)</font>
        <font color="#FF0000">{</font>   <font color="#009900">float</font> j_inv <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.</font>f <font color="#990000">/</font> <font color="#009900">float</font><font color="#990000">(</font>j<font color="#990000">);</font>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> hyperbolic_ <font color="#990000">)</font>
                j_inv <font color="#990000">=</font> <font color="#990000">-</font> j_inv<font color="#990000">;</font>

            <i><font color="#9A1900">// H_{x^{(k)}} += delta(j-k) +- H_{z^{(j)} y^{(j-k)} * k / j</font></i>
            px<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">+=</font> qzy<font color="#990000">[</font>j<font color="#990000">];</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> k <font color="#990000">&lt;=</font> j<font color="#990000">;</font> k<font color="#990000">++)</font>
                px<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">+=</font> qzy<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">*</font> tzy<font color="#990000">[</font>q1 <font color="#990000">+</font> j<font color="#990000">-</font>k<font color="#990000">]</font> <font color="#990000">*</font> <font color="#009900">float</font><font color="#990000">(</font>k<font color="#990000">)</font> <font color="#990000">*</font> j_inv<font color="#990000">;</font>

            <i><font color="#9A1900">// H_{y^{j-k)} += +- H_{z^{(j)} x^{(k)} * k / j</font></i>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> k <font color="#990000">&lt;=</font> j<font color="#990000">;</font> k<font color="#990000">++)</font>
                qzy<font color="#990000">[</font>q1 <font color="#990000">+</font> j<font color="#990000">-</font>k<font color="#990000">]</font> <font color="#990000">+=</font> qzy<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">*</font> tx<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">*</font> <font color="#009900">float</font><font color="#990000">(</font>k<font color="#990000">)</font> <font color="#990000">*</font> j_inv<font color="#990000">;</font>

            <i><font color="#9A1900">// H_{z^{(k)}} += H_{y^{(j-1)}} * z^{(j-k-1)} * 2.</font></i>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> j<font color="#990000">;</font> k<font color="#990000">++)</font>
                qzy<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">+=</font> qzy<font color="#990000">[</font>q1 <font color="#990000">+</font> j<font color="#990000">-</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> tzy<font color="#990000">[</font>j<font color="#990000">-</font>k<font color="#990000">-</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">*</font> <font color="#993399">2</font><font color="#990000">.</font>f<font color="#990000">;</font>
        <font color="#FF0000">}</font>

        <i><font color="#9A1900">// eliminate order zero</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> hyperbolic_ <font color="#990000">)</font>
            px<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> qzy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> <font color="#990000">(</font><font color="#993399">1</font><font color="#990000">.</font>f <font color="#990000">-</font> tzy<font color="#990000">[</font>q1 <font color="#990000">+</font> <font color="#993399">0</font><font color="#990000">]);</font>
        <b><font color="#0000FF">else</font></b>
            px<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> qzy<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> <font color="#990000">(</font><font color="#993399">1</font><font color="#990000">.</font>f <font color="#990000">+</font> tzy<font color="#990000">[</font>q1 <font color="#990000">+</font> <font color="#993399">0</font><font color="#990000">]);</font>

        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="jac_sparsity" id="jac_sparsity">jac_sparsity</a></big></b>

<pre><tt>    <i><font color="#9A1900">// Jacobian sparsity routine called by CppAD</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">jac_sparsity</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>                parameter_x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font>  type_x      <font color="#990000">,</font>
        <font color="#009900">bool</font>                                dependency  <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                 select_x    <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                 select_y    <font color="#990000">,</font>
        CppAD<font color="#990000">::</font>sparse_rc<font color="#990000">&lt;</font> vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font> pattern_out <font color="#990000">)</font> <b><font color="#0000FF">override</font></b>
    <font color="#FF0000">{</font>
        <font color="#008080">size_t</font> n <font color="#990000">=</font> select_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
        <font color="#008080">size_t</font> m <font color="#990000">=</font> select_y<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> parameter_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>

        <i><font color="#9A1900">// number of non-zeros in sparsity pattern</font></i>
        <font color="#008080">size_t</font> nnz <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> select_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">if</font></b><font color="#990000">(</font> select_y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">)</font>
                <font color="#990000">++</font>nnz<font color="#990000">;</font>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> select_y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">)</font>
                <font color="#990000">++</font>nnz<font color="#990000">;</font>
        <font color="#FF0000">}</font>

        <i><font color="#9A1900">// sparsity pattern</font></i>
        pattern_out<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font>m<font color="#990000">,</font> n<font color="#990000">,</font> nnz<font color="#990000">);</font>
        <font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> select_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">if</font></b><font color="#990000">(</font> select_y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">)</font>
                pattern_out<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>k<font color="#990000">++,</font> <font color="#993399">0</font><font color="#990000">,</font> <font color="#993399">0</font><font color="#990000">);</font>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> select_y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">)</font>
                pattern_out<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>k<font color="#990000">++,</font> <font color="#993399">1</font><font color="#990000">,</font> <font color="#993399">0</font><font color="#990000">);</font>
        <font color="#FF0000">}</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> k <font color="#990000">==</font> nnz <font color="#990000">);</font>

        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="hes_sparsity" id="hes_sparsity">hes_sparsity</a></big></b>

<pre><tt>    <i><font color="#9A1900">// Hessian sparsity routine called by CppAD</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">hes_sparsity</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;&amp;</font>                parameter_x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font>  type_x      <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                 select_x    <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                 select_y    <font color="#990000">,</font>
        CppAD<font color="#990000">::</font>sparse_rc<font color="#990000">&lt;</font> vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font> pattern_out <font color="#990000">)</font> <b><font color="#0000FF">override</font></b>
    <font color="#FF0000">{</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> parameter_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> select_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> select_y<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">2</font> <font color="#990000">);</font>
        <font color="#008080">size_t</font> n <font color="#990000">=</font> select_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>

        <i><font color="#9A1900">// number of non-zeros in sparsity pattern</font></i>
        <font color="#008080">size_t</font> nnz <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> select_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">&amp;</font> <font color="#990000">(</font>select_y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">|</font> select_y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">])</font> <font color="#990000">)</font>
            nnz <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
        <i><font color="#9A1900">// sparsity pattern</font></i>
        pattern_out<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font>n<font color="#990000">,</font> n<font color="#990000">,</font> nnz<font color="#990000">);</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> select_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">&amp;</font> <font color="#990000">(</font>select_y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">|</font> select_y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">])</font> <font color="#990000">)</font>
            pattern_out<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> <font color="#993399">0</font><font color="#990000">,</font> <font color="#993399">0</font><font color="#990000">);</font>

        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="End Class Definition" id="End Class Definition">End Class Definition</a></big></b>

<pre style='display:inline'><tt>
<font color="#FF0000">}</font><font color="#990000">;</font> <i><font color="#9A1900">// End of atomic_tangent class</font></i>
<font color="#FF0000">}</font>  <i><font color="#9A1900">// End empty namespace</font></i>

</tt></pre>
<b><big><a name="Use Atomic Function" id="Use Atomic Function">Use Atomic Function</a></big></b>

<pre><tt><font color="#009900">bool</font> <b><font color="#000000">tangent</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>NearEqual<font color="#990000">;</font>
    <font color="#009900">float</font> eps <font color="#990000">=</font> <font color="#993399">10</font><font color="#990000">.</font>f <font color="#990000">*</font> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font></tt></pre>
<br>
<big><a name="Use Atomic Function.Constructor" id="Use Atomic Function.Constructor">Constructor</a></big>

<pre style='display:inline'><tt>
    <i><font color="#9A1900">// --------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// Creater a tan and tanh object</font></i>
    <font color="#008080">atomic_tangent</font> <b><font color="#000000">my_tan</font></b><font color="#990000">(</font><font color="#FF0000">"my_tan"</font><font color="#990000">,</font> <b><font color="#0000FF">false</font></b><font color="#990000">),</font> <b><font color="#000000">my_tanh</font></b><font color="#990000">(</font><font color="#FF0000">"my_tanh"</font><font color="#990000">,</font> <b><font color="#0000FF">true</font></b><font color="#990000">);</font>
</tt></pre>
<br>
<big><a name="Use Atomic Function.Recording" id="Use Atomic Function.Recording">Recording</a></big>

<pre><tt>    <i><font color="#9A1900">// domain space vector</font></i>
    <font color="#008080">size_t</font> n  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
    <font color="#009900">float</font>  x0 <font color="#990000">=</font> <font color="#993399">0.5</font><font color="#990000">;</font>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt; AD&lt;float&gt; &gt;</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>     <font color="#990000">=</font> x0<font color="#990000">;</font>

    <i><font color="#9A1900">// declare independent variables and start tape recording</font></i>
    CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>ax<font color="#990000">);</font>

    <i><font color="#9A1900">// range space vector</font></i>
    <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt; AD&lt;float&gt; &gt;</font> <b><font color="#000000">av</font></b><font color="#990000">(</font>m<font color="#990000">);</font>

    <i><font color="#9A1900">// temporary vector for computations</font></i>
    <i><font color="#9A1900">// (my_tan and my_tanh computes tan or tanh and its square)</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt; AD&lt;float&gt; &gt;</font> <b><font color="#000000">au</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">);</font>

    <i><font color="#9A1900">// call atomic tan function and store tan(x) in f[0], ignore tan(x)^2</font></i>
    <b><font color="#000000">my_tan</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> au<font color="#990000">);</font>
    av<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> au<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>

    <i><font color="#9A1900">// call atomic tanh function and store tanh(x) in f[1], ignore tanh(x)^2</font></i>
    <b><font color="#000000">my_tanh</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> au<font color="#990000">);</font>
    av<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> au<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>

    <i><font color="#9A1900">// put a constant in f[2] = tanh(1.),  for sparsity pattern testing</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt; AD&lt;float&gt; &gt;</font> <b><font color="#000000">one</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
    one<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
    <b><font color="#000000">my_tanh</font></b><font color="#990000">(</font>one<font color="#990000">,</font> au<font color="#990000">);</font>
    av<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> au<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>

    <i><font color="#9A1900">// create f: x -&gt; v and stop tape recording</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;float&gt;</font> f<font color="#990000">;</font>
    f<font color="#990000">.</font><b><font color="#000000">Dependent</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> av<font color="#990000">);</font></tt></pre>
<br>
<big><a name="Use Atomic Function.forward" id="Use Atomic Function.forward">forward</a></big>

<pre><tt>    <i><font color="#9A1900">// check function value</font></i>
    <font color="#009900">float</font> tan <font color="#990000">=</font> std<font color="#990000">::</font><b><font color="#000000">tan</font></b><font color="#990000">(</font>x0<font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>av<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">,</font> tan<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>
    <font color="#009900">float</font> tanh <font color="#990000">=</font> std<font color="#990000">::</font><b><font color="#000000">tanh</font></b><font color="#990000">(</font>x0<font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>av<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">,</font> tanh<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>

    <i><font color="#9A1900">// check zero order forward</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;float&gt;</font> <b><font color="#000000">x</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">v</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> x0<font color="#990000">;</font>
    v    <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>v<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">,</font> tan<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>v<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">,</font> tanh<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>

    <i><font color="#9A1900">// tan'(x)   = 1 + tan(x)  * tan(x)</font></i>
    <i><font color="#9A1900">// tanh'(x)  = 1 - tanh(x) * tanh(x)</font></i>
    <font color="#009900">float</font> tanp  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.</font>f <font color="#990000">+</font> tan <font color="#990000">*</font> tan<font color="#990000">;</font>
    <font color="#009900">float</font> tanhp <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.</font>f <font color="#990000">-</font> tanh <font color="#990000">*</font> tanh<font color="#990000">;</font>

    <i><font color="#9A1900">// compute first partial of f w.r.t. x[0] using forward mode</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;float&gt;</font> <b><font color="#000000">dx</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">dv</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    dx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
    dv    <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">,</font> dx<font color="#990000">);</font>
    ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>dv<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">,</font> tanp<font color="#990000">,</font>   eps<font color="#990000">,</font> eps<font color="#990000">);</font>
    ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>dv<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">,</font> tanhp<font color="#990000">,</font>  eps<font color="#990000">,</font> eps<font color="#990000">);</font>
    ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>dv<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">,</font> <font color="#993399">0</font><font color="#990000">.</font>f<font color="#990000">,</font>    eps<font color="#990000">,</font> eps<font color="#990000">);</font>

    <i><font color="#9A1900">// tan''(x)   = 2 *  tan(x) * tan'(x)</font></i>
    <i><font color="#9A1900">// tanh''(x)  = - 2 * tanh(x) * tanh'(x)</font></i>
    <i><font color="#9A1900">// Note that second order Taylor coefficient for u half the</font></i>
    <i><font color="#9A1900">// corresponding second derivative.</font></i>
    <font color="#009900">float</font> two    <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
    <font color="#009900">float</font> tanpp  <font color="#990000">=</font>   two <font color="#990000">*</font> tan <font color="#990000">*</font> tanp<font color="#990000">;</font>
    <font color="#009900">float</font> tanhpp <font color="#990000">=</font> <font color="#990000">-</font> two <font color="#990000">*</font> tanh <font color="#990000">*</font> tanhp<font color="#990000">;</font>

    <i><font color="#9A1900">// compute second partial of f w.r.t. x[0] using forward mode</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;float&gt;</font> <b><font color="#000000">ddx</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">ddv</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    ddx<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
    ddv    <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">,</font> ddx<font color="#990000">);</font>
    ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>two <font color="#990000">*</font> ddv<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> tanpp<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
    ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>two <font color="#990000">*</font> ddv<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">],</font> tanhpp<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
    ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>two <font color="#990000">*</font> ddv<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">],</font> <font color="#993399">0</font><font color="#990000">.</font>f<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
</tt></pre>
<big><a name="Use Atomic Function.reverse" id="Use Atomic Function.reverse">reverse</a></big>

<pre><tt>    <i><font color="#9A1900">// compute derivative of tan - tanh using reverse mode</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;float&gt;</font> <b><font color="#000000">w</font></b><font color="#990000">(</font>m<font color="#990000">),</font> <b><font color="#000000">dw</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    w<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
    w<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
    w<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
    dw    <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Reverse</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">,</font> w<font color="#990000">);</font>
    ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>dw<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> w<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]*</font>tanp <font color="#990000">+</font> w<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]*</font>tanhp<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>

    <i><font color="#9A1900">// compute second derivative of tan - tanh using reverse mode</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;float&gt;</font> <b><font color="#000000">ddw</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">);</font>
    ddw   <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Reverse</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">,</font> w<font color="#990000">);</font>
    ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>ddw<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> w<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]*</font>tanp  <font color="#990000">+</font> w<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]*</font>tanhp <font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
    ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>ddw<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">],</font> w<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]*</font>tanpp <font color="#990000">+</font> w<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]*</font>tanhpp<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font></tt></pre>
<br>
<big><a name="Use Atomic Function.for_jac_sparsity" id="Use Atomic Function.for_jac_sparsity">for_jac_sparsity</a></big>

<pre><tt>    <i><font color="#9A1900">// forward mode Jacobian sparstiy pattern</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">sparse_rc&lt; CPPAD_TESTVECTOR(size_t) &gt;</font> pattern_in<font color="#990000">,</font> pattern_out<font color="#990000">;</font>
    pattern_in<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">,</font> <font color="#993399">1</font><font color="#990000">,</font> <font color="#993399">1</font><font color="#990000">);</font>
    pattern_in<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> <font color="#993399">0</font><font color="#990000">,</font> <font color="#993399">0</font><font color="#990000">);</font>
    <font color="#009900">bool</font> transpose     <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    <font color="#009900">bool</font> dependency    <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    <font color="#009900">bool</font> internal_bool <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    f<font color="#990000">.</font><b><font color="#000000">for_jac_sparsity</font></b><font color="#990000">(</font>
        pattern_in<font color="#990000">,</font> transpose<font color="#990000">,</font> dependency<font color="#990000">,</font> internal_bool<font color="#990000">,</font> pattern_out
    <font color="#990000">);</font>
    <i><font color="#9A1900">// (0, 0) and (1, 0) are in sparsity pattern</font></i>
    ok <font color="#990000">&amp;=</font> pattern_out<font color="#990000">.</font><b><font color="#000000">nnz</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> pattern_out<font color="#990000">.</font><b><font color="#000000">row</font></b><font color="#990000">()[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> pattern_out<font color="#990000">.</font><b><font color="#000000">col</font></b><font color="#990000">()[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> pattern_out<font color="#990000">.</font><b><font color="#000000">row</font></b><font color="#990000">()[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> pattern_out<font color="#990000">.</font><b><font color="#000000">col</font></b><font color="#990000">()[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font></tt></pre>
<br>
<big><a name="Use Atomic Function.rev_sparse_hes" id="Use Atomic Function.rev_sparse_hes">rev_sparse_hes</a></big>

<pre><tt>    <i><font color="#9A1900">// Hesian sparsity (using previous for_jac_sparsity call)</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">bool</font><font color="#990000">)</font> <b><font color="#000000">select_y</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    select_y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    select_y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    select_y<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    f<font color="#990000">.</font><b><font color="#000000">rev_hes_sparsity</font></b><font color="#990000">(</font>
        select_y<font color="#990000">,</font> transpose<font color="#990000">,</font> internal_bool<font color="#990000">,</font> pattern_out
    <font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> pattern_out<font color="#990000">.</font><b><font color="#000000">nnz</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> pattern_out<font color="#990000">.</font><b><font color="#000000">row</font></b><font color="#990000">()[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> pattern_out<font color="#990000">.</font><b><font color="#000000">col</font></b><font color="#990000">()[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font></tt></pre>
<br>
<big><a name="Use Atomic Function.Large x Values" id="Use Atomic Function.Large x Values">Large x Values</a></big>

<pre><tt>    <i><font color="#9A1900">// check tanh results for a large value of x</font></i>
    x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>  <font color="#990000">=</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;::</font><b><font color="#000000">max</font></b><font color="#990000">()</font> <font color="#990000">/</font> two<font color="#990000">;</font>
    v     <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">);</font>
    tanh  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
    ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>v<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">],</font> tanh<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
    dv    <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">,</font> dx<font color="#990000">);</font>
    tanhp <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
    ok   <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>dv<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">],</font> tanhp<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/atomic_three/tangent.cpp

</body>
</html>
