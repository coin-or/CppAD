<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Atomic Function Reverse Dependency Calculation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Atomic Function Reverse Dependency Calculation">
<meta name="keywords" id="keywords" content=" atomic function reverse dependency calculation syntax prototype analysis implementation base parameter_x type_x depend_x optimize depend_y ok example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_three_rev_depend_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_three_hes_sparsity.cpp.htm" target="_top">Prev</a>
</td><td><a href="atomic_three_rev_depend.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_three</option>
<option>atomic_three_define</option>
<option>atomic_three_rev_depend</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_three_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_three_define_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_three_rev_depend_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>---..Prototype</option>
<option>Dependency Analysis</option>
<option>Implementation</option>
<option>Base</option>
<option>parameter_x</option>
<option>type_x</option>
<option>depend_x</option>
<option>---..Optimize</option>
<option>depend_y</option>
<option>ok</option>
<option>Contents</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Atomic Function Reverse Dependency Calculation</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i><font color="blue"><span style='white-space: nowrap'>.rev_depend(<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>parameter_x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>type_x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>depend_x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>depend_y</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
)</span></font></code>


<br>
<br>
<big><a name="Syntax.Prototype" id="Syntax.Prototype">Prototype</a></big>

<pre><tt>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font>
<font color="#009900">bool</font> atomic_three<font color="#990000">&lt;</font>Base<font color="#990000">&gt;::</font><b><font color="#000000">rev_depend</font></b><font color="#990000">(</font>
    <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>         parameter_x <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>ad_type_enum<font color="#990000">&gt;&amp;</font> type_x      <font color="#990000">,</font>
    vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>               depend_x    <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>         depend_y    <font color="#990000">)</font></tt></pre>
<br>
<b><big><a name="Dependency Analysis" id="Dependency Analysis">Dependency Analysis</a></big></b>
<br>
This calculation is sometimes referred to as a reverse dependency analysis.

<br>
<br>
<b><big><a name="Implementation" id="Implementation">Implementation</a></big></b>
<br>
This function must be defined if
<a href="atomic_three_ctor.htm#atomic_user.afun" target="_top"><span style='white-space: nowrap'>afun</span></a>
 is
used to define an <a href="adfun.htm" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
,
and <a href="optimize.htm" target="_top"><span style='white-space: nowrap'>f.optimize()</span></a>
 is used.

<br>
<br>
<b><big><a name="Base" id="Base">Base</a></big></b>
<br>
See <a href="atomic_three_afun.htm#Base" target="_top"><span style='white-space: nowrap'>Base</span></a>
.

<br>
<br>
<b><big><a name="parameter_x" id="parameter_x">parameter_x</a></big></b>
<br>
See <a href="atomic_three_define.htm#parameter_x" target="_top"><span style='white-space: nowrap'>parameter_x</span></a>
.

<br>
<br>
<b><big><a name="type_x" id="type_x">type_x</a></big></b>
<br>
See <a href="atomic_three_define.htm#type_x" target="_top"><span style='white-space: nowrap'>type_x</span></a>
.

<br>
<br>
<b><big><a name="depend_x" id="depend_x">depend_x</a></big></b>
<br>
This vector has size equal to the number of arguments for this atomic function;
i.e. 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>=</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()</span></font></code>
.
The input values of the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>depend_x</span></font></i></code>

are not specified (must not matter).
Upon return, for <small>@(@
j = 0 , \ldots , n-1
@)@</small>,

<code><i><font color="black"><span style='white-space: nowrap'>depend_x</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 is true if the values of interest depend
on the value of <a href="atomic_three_afun.htm#ax" target="_top"><span style='white-space: nowrap'>ax[j]</span></a>
 in the corresponding

<code><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
 call.

<br>
<br>
<big><a name="depend_x.Optimize" id="depend_x.Optimize">Optimize</a></big>
<br>
Parameters and variables,
that the values of interest do not depend on,
may get removed by <a href="optimize.htm" target="_top"><span style='white-space: nowrap'>optimization</span></a>
.
The corresponding values in <a href="atomic_three_define.htm#parameter_x" target="_top"><span style='white-space: nowrap'>parameter_x</span></a>
,
and <a href="atomic_three_forward.htm#taylor_x" target="_top"><span style='white-space: nowrap'>taylor_x</span></a>

(after optimization has removed them) are not specified.

<br>
<br>
<b><big><a name="depend_y" id="depend_y">depend_y</a></big></b>
<br>
This vector has size equal to the number of results for this atomic function;
i.e. 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>=</span></font><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()</span></font></code>
.
For <small>@(@
i = 0 , \ldots , m-1
@)@</small>,

<code><i><font color="black"><span style='white-space: nowrap'>depend_y</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 is true if the values of interest depend
on the value of <a href="atomic_three_afun.htm#ay" target="_top"><span style='white-space: nowrap'>ay[i]</span></a>
 in the corresponding

<code><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
 call.

<br>
<br>
<b><big><a name="ok" id="ok">ok</a></big></b>
<br>
If this calculation succeeded, 
<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i></code>
 is true.
Otherwise, it is false.

<br>
<br>
<b><big><a name="Contents" id="Contents">Contents</a></big></b>
<br>
<table>
<tr><td><a href="atomic_three_rev_depend.cpp.htm" target="_top">atomic_three_rev_depend.cpp</a></td><td>Atomic&nbsp;Functions&nbsp;Reverse&nbsp;Dependency&nbsp;Analysis:&nbsp;Example&nbsp;and&nbsp;Test</td></tr></table><br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The following is an example of a atomic function <code><font color="blue">rev_depend</font></code> definition:
<a href="atomic_three_rev_depend.cpp.htm" target="_top"><span style='white-space: nowrap'>atomic_three_rev_depend.cpp</span></a>
.



<hr>Input File: include/cppad/core/atomic/three/rev_depend.hpp

</body>
</html>
