<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Alphabetic Listing of Cross Reference Tags</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Alphabetic Listing of Cross Reference Tags">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='__reference_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="license.htm" target="_top">Prev</a>
</td><td><a href="_index.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>_reference</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>_reference</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>A</option>
<option>B</option>
<option>C</option>
<option>D</option>
<option>E</option>
<option>F</option>
<option>G</option>
<option>H</option>
<option>I</option>
<option>J</option>
<option>L</option>
<option>M</option>
<option>N</option>
<option>O</option>
<option>P</option>
<option>Q</option>
<option>R</option>
<option>S</option>
<option>T</option>
<option>U</option>
<option>V</option>
<option>W</option>
<option>X</option>
<option>Z</option>
</select>
</td>
</tr></table><br>
<center><b><big><big>Alphabetic Listing of Cross Reference Tags</big></big></b></center>
<table>
<tr valign="top"><td>

<b><big><a name="A">A</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="a11c_bthread.cpp.htm" target="_top">a11c_bthread.cpp</a><br> </td><td> A Simple Boost Thread Example and Test </td></tr><tr valign="top"><td>
<a href="a11c_openmp.cpp.htm" target="_top">a11c_openmp.cpp</a><br> </td><td> A Simple OpenMP Example and Test </td></tr><tr valign="top"><td>
<a href="a11c_pthread.cpp.htm" target="_top">a11c_pthread.cpp</a><br> </td><td> A Simple Parallel Pthread Example and Test </td></tr><tr valign="top"><td>
<a href="abort_recording.htm" target="_top">abort_recording</a><br> </td><td> Abort Recording of an Operation Sequence </td></tr><tr valign="top"><td>
<a href="abort_recording.cpp.htm" target="_top">abort_recording.cpp</a><br> </td><td> Abort Current Recording: Example and Test </td></tr><tr valign="top"><td>
<a href="abs.htm" target="_top">abs</a><br> </td><td> AD Absolute Value Functions: abs, fabs </td></tr><tr valign="top"><td>
<a href="abs_eval.htm" target="_top">abs_eval</a><br> </td><td> abs_normal: Evaluate First Order Approximation </td></tr><tr valign="top"><td>
<a href="abs_eval.cpp.htm" target="_top">abs_eval.cpp</a><br> </td><td> abs_eval: Example and Test </td></tr><tr valign="top"><td>
<a href="abs_eval.hpp.htm" target="_top">abs_eval.hpp</a><br> </td><td> abs_eval Source Code </td></tr><tr valign="top"><td>
<a href="abs_get_started.cpp.htm" target="_top">abs_get_started.cpp</a><br> </td><td> abs_normal Getting Started: Example and Test </td></tr><tr valign="top"><td>
<a href="abs_min_linear.htm" target="_top">abs_min_linear</a><br> </td><td> abs_normal: Minimize a Linear Abs-normal Approximation </td></tr><tr valign="top"><td>
<a href="abs_min_linear.cpp.htm" target="_top">abs_min_linear.cpp</a><br> </td><td> abs_min_linear: Example and Test </td></tr><tr valign="top"><td>
<a href="abs_min_linear.hpp.htm" target="_top">abs_min_linear.hpp</a><br> </td><td> abs_min_linear Source Code </td></tr><tr valign="top"><td>
<a href="abs_min_quad.htm" target="_top">abs_min_quad</a><br> </td><td> abs_normal: Minimize a Linear Abs-normal Approximation </td></tr><tr valign="top"><td>
<a href="abs_min_quad.cpp.htm" target="_top">abs_min_quad.cpp</a><br> </td><td> abs_min_quad: Example and Test </td></tr><tr valign="top"><td>
<a href="abs_min_quad.hpp.htm" target="_top">abs_min_quad.hpp</a><br> </td><td> abs_min_quad Source Code </td></tr><tr valign="top"><td>
<a href="abs_normal_fun.htm" target="_top">abs_normal_fun</a><br> </td><td> Create An Abs-normal Representation of a Function </td></tr><tr valign="top"><td>
<a href="abs_print_mat.htm" target="_top">abs_print_mat</a><br> </td><td> abs_normal: Print a Vector or Matrix </td></tr><tr valign="top"><td>
<a href="acos.htm" target="_top">acos</a><br> </td><td> Inverse Cosine Function: acos </td></tr><tr valign="top"><td>
<a href="acos.cpp.htm" target="_top">acos.cpp</a><br> </td><td> The AD acos Function: Example and Test </td></tr><tr valign="top"><td>
<a href="acos_forward.htm" target="_top">acos_forward</a><br> </td><td> Inverse Cosine and Hyperbolic Cosine Forward Mode Theory </td></tr><tr valign="top"><td>
<a href="acos_reverse.htm" target="_top">acos_reverse</a><br> </td><td> Inverse Cosine and Hyperbolic Cosine Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="acosh.htm" target="_top">acosh</a><br> </td><td> The Inverse Hyperbolic Cosine Function: acosh </td></tr><tr valign="top"><td>
<a href="acosh.cpp.htm" target="_top">acosh.cpp</a><br> </td><td> The AD acosh Function: Example and Test </td></tr><tr valign="top"><td>
<a href="ad.htm" target="_top">AD</a><br> </td><td> AD Objects </td></tr><tr valign="top"><td>
<a href="ad_assign.htm" target="_top">ad_assign</a><br> </td><td> AD Assignment Operator </td></tr><tr valign="top"><td>
<a href="ad_assign.cpp.htm" target="_top">ad_assign.cpp</a><br> </td><td> AD Assignment: Example and Test </td></tr><tr valign="top"><td>
<a href="ad_binary.htm" target="_top">ad_binary</a><br> </td><td> AD Binary Arithmetic Operators </td></tr><tr valign="top"><td>
<a href="ad_ctor.htm" target="_top">ad_ctor</a><br> </td><td> AD Constructors </td></tr><tr valign="top"><td>
<a href="ad_ctor.cpp.htm" target="_top">ad_ctor.cpp</a><br> </td><td> AD Constructors: Example and Test </td></tr><tr valign="top"><td>
<a href="ad_fun.cpp.htm" target="_top">ad_fun.cpp</a><br> </td><td> Creating Your Own Interface to an ADFun Object </td></tr><tr valign="top"><td>
<a href="ad_in_c.cpp.htm" target="_top">ad_in_c.cpp</a><br> </td><td> Example and Test Linking CppAD to Languages Other than C++ </td></tr><tr valign="top"><td>
<a href="ad_input.htm" target="_top">ad_input</a><br> </td><td> AD Input Stream Operator </td></tr><tr valign="top"><td>
<a href="ad_input.cpp.htm" target="_top">ad_input.cpp</a><br> </td><td> AD Output Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="ad_output.htm" target="_top">ad_output</a><br> </td><td> AD Output Stream Operator </td></tr><tr valign="top"><td>
<a href="ad_output.cpp.htm" target="_top">ad_output.cpp</a><br> </td><td> AD Output Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="ad_to_string.htm" target="_top">ad_to_string</a><br> </td><td> Convert An AD or Base Type to String </td></tr><tr valign="top"><td>
<a href="add.cpp.htm" target="_top">add.cpp</a><br> </td><td> AD Binary Addition: Example and Test </td></tr><tr valign="top"><td>
<a href="addeq.cpp.htm" target="_top">AddEq.cpp</a><br> </td><td> AD Compound Assignment Addition: Example and Test </td></tr><tr valign="top"><td>
<a href="addon.htm" target="_top">addon</a><br> </td><td> CppAD Addons </td></tr><tr valign="top"><td>
<a href="adfun.htm" target="_top">ADFun</a><br> </td><td> ADFun Objects </td></tr><tr valign="top"><td>
<a href="adolc.htm" target="_top">adolc</a><br> </td><td> Including Adolc Examples and Tests </td></tr><tr valign="top"><td>
<a href="adolc_alloc_mat.htm" target="_top">adolc_alloc_mat</a><br> </td><td> Adolc Test Utility: Allocate and Free Memory For a Matrix </td></tr><tr valign="top"><td>
<a href="adolc_det_lu.cpp.htm" target="_top">adolc_det_lu.cpp</a><br> </td><td> Adolc Speed: Gradient of Determinant Using Lu Factorization </td></tr><tr valign="top"><td>
<a href="adolc_det_minor.cpp.htm" target="_top">adolc_det_minor.cpp</a><br> </td><td> Adolc Speed: Gradient of Determinant by Minor Expansion </td></tr><tr valign="top"><td>
<a href="adolc_mat_mul.cpp.htm" target="_top">adolc_mat_mul.cpp</a><br> </td><td> Adolc Speed: Matrix Multiplication </td></tr><tr valign="top"><td>
<a href="adolc_ode.cpp.htm" target="_top">adolc_ode.cpp</a><br> </td><td> Adolc Speed: Ode </td></tr><tr valign="top"><td>
<a href="adolc_poly.cpp.htm" target="_top">adolc_poly.cpp</a><br> </td><td> Adolc Speed: Second Derivative of a Polynomial </td></tr><tr valign="top"><td>
<a href="adolc_sparse_hessian.cpp.htm" target="_top">adolc_sparse_hessian.cpp</a><br> </td><td> Adolc Speed: Sparse Hessian </td></tr><tr valign="top"><td>
<a href="adolc_sparse_jacobian.cpp.htm" target="_top">adolc_sparse_jacobian.cpp</a><br> </td><td> Adolc Speed: Sparse Jacobian </td></tr><tr valign="top"><td>
<a href="advalued.htm" target="_top">ADValued</a><br> </td><td> AD Valued Operations and Functions </td></tr><tr valign="top"><td>
<a href="appendix.htm" target="_top">Appendix</a><br> </td><td> Appendix </td></tr><tr valign="top"><td>
<a href="arithmetic.htm" target="_top">Arithmetic</a><br> </td><td> AD Arithmetic Operators and Compound Assignments </td></tr><tr valign="top"><td>
<a href="asin.htm" target="_top">asin</a><br> </td><td> Inverse Sine Function: asin </td></tr><tr valign="top"><td>
<a href="asin.cpp.htm" target="_top">asin.cpp</a><br> </td><td> The AD asin Function: Example and Test </td></tr><tr valign="top"><td>
<a href="asin_forward.htm" target="_top">asin_forward</a><br> </td><td> Inverse Sine and Hyperbolic Sine Forward Mode Theory </td></tr><tr valign="top"><td>
<a href="asin_reverse.htm" target="_top">asin_reverse</a><br> </td><td> Inverse Sine and Hyperbolic Sine Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="asinh.htm" target="_top">asinh</a><br> </td><td> The Inverse Hyperbolic Sine Function: asinh </td></tr><tr valign="top"><td>
<a href="asinh.cpp.htm" target="_top">asinh.cpp</a><br> </td><td> The AD asinh Function: Example and Test </td></tr><tr valign="top"><td>
<a href="atan.htm" target="_top">atan</a><br> </td><td> Inverse Tangent Function: atan </td></tr><tr valign="top"><td>
<a href="atan.cpp.htm" target="_top">atan.cpp</a><br> </td><td> The AD atan Function: Example and Test </td></tr><tr valign="top"><td>
<a href="atan2.htm" target="_top">atan2</a><br> </td><td> AD Two Argument Inverse Tangent Function </td></tr><tr valign="top"><td>
<a href="atan2.cpp.htm" target="_top">atan2.cpp</a><br> </td><td> The AD atan2 Function: Example and Test </td></tr><tr valign="top"><td>
<a href="atan_forward.htm" target="_top">atan_forward</a><br> </td><td> Inverse Tangent and Hyperbolic Tangent Forward Mode Theory </td></tr><tr valign="top"><td>
<a href="atan_reverse.htm" target="_top">atan_reverse</a><br> </td><td> Inverse Tangent and Hyperbolic Tangent Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="atanh.htm" target="_top">atanh</a><br> </td><td> The Inverse Hyperbolic Tangent Function: atanh </td></tr><tr valign="top"><td>
<a href="atanh.cpp.htm" target="_top">atanh.cpp</a><br> </td><td> The AD atanh Function: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic.htm" target="_top">atomic</a><br> </td><td> Atomic AD Functions </td></tr><tr valign="top"><td>
<a href="atomic_four.htm" target="_top">atomic_four</a><br> </td><td> Atomic AD Functions: Fourth Generation </td></tr><tr valign="top"><td>
<a href="atomic_four_call.htm" target="_top">atomic_four_call</a><br> </td><td> Calling an Atomic Function </td></tr><tr valign="top"><td>
<a href="atomic_four_ctor.htm" target="_top">atomic_four_ctor</a><br> </td><td> Atomic Function Constructor </td></tr><tr valign="top"><td>
<a href="atomic_four_define.htm" target="_top">atomic_four_define</a><br> </td><td> Defining Atomic Functions: Fourth Generation </td></tr><tr valign="top"><td>
<a href="atomic_four_dynamic.cpp.htm" target="_top">atomic_four_dynamic.cpp</a><br> </td><td> Atomic Functions with Dynamic Parameters: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_four_example.htm" target="_top">atomic_four_example</a><br> </td><td> Example Defining Atomic Functions: Fourth Generation </td></tr><tr valign="top"><td>
<a href="atomic_four_for_type.htm" target="_top">atomic_four_for_type</a><br> </td><td> Atomic Function Forward Type Calculation </td></tr><tr valign="top"><td>
<a href="atomic_four_forward.htm" target="_top">atomic_four_forward</a><br> </td><td> Atomic Function Forward Mode </td></tr><tr valign="top"><td>
<a href="atomic_four_forward.cpp.htm" target="_top">atomic_four_forward.cpp</a><br> </td><td> Atomic Functions and Forward Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_four_get_started.cpp.htm" target="_top">atomic_four_get_started.cpp</a><br> </td><td> Getting Started with Atomic Functions: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_four_hes_sparsity.htm" target="_top">atomic_four_hes_sparsity</a><br> </td><td> Atomic Function Hessian Sparsity Patterns </td></tr><tr valign="top"><td>
<a href="atomic_four_jac_sparsity.htm" target="_top">atomic_four_jac_sparsity</a><br> </td><td> Atomic Function Jacobian Sparsity Patterns </td></tr><tr valign="top"><td>
<a href="atomic_four_lin_ode.htm" target="_top">atomic_four_lin_ode</a><br> </td><td> Atomic First Order Linear ODE Method: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_lin_ode.hpp.htm" target="_top">atomic_four_lin_ode.hpp</a><br> </td><td> Atomic Linear ODE Class: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_lin_ode_base_solver.hpp.htm" target="_top">atomic_four_lin_ode_base_solver.hpp</a><br> </td><td> Atomic Multiply Base Matrices: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_lin_ode_for_type.hpp.htm" target="_top">atomic_four_lin_ode_for_type.hpp</a><br> </td><td> Atomic Linear ODE Forward Type Calculation: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_lin_ode_forward.cpp.htm" target="_top">atomic_four_lin_ode_forward.cpp</a><br> </td><td> Atomic Linear ODE Forward Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_four_lin_ode_forward.hpp.htm" target="_top">atomic_four_lin_ode_forward.hpp</a><br> </td><td> Atomic Linear ODE Forward Mode: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_lin_ode_get.hpp.htm" target="_top">atomic_four_lin_ode_get.hpp</a><br> </td><td> atomic_lin_ode Get Routine: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_lin_ode_hes_sparsity.hpp.htm" target="_top">atomic_four_lin_ode_hes_sparsity.hpp</a><br> </td><td> Atomic Linear ODE Hessian Sparsity Pattern: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_lin_ode_implement.htm" target="_top">atomic_four_lin_ode_implement</a><br> </td><td> Implementing Atomic Linear ODE </td></tr><tr valign="top"><td>
<a href="atomic_four_lin_ode_jac_sparsity.hpp.htm" target="_top">atomic_four_lin_ode_jac_sparsity.hpp</a><br> </td><td> Atomic Linear ODE Jacobian Sparsity Pattern: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_lin_ode_rev_depend.cpp.htm" target="_top">atomic_four_lin_ode_rev_depend.cpp</a><br> </td><td> Atomic Linear ODE Reverse Dependency Analysis: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_four_lin_ode_rev_depend.hpp.htm" target="_top">atomic_four_lin_ode_rev_depend.hpp</a><br> </td><td> Atomic Linear ODE Forward Type Calculation: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_lin_ode_reverse.cpp.htm" target="_top">atomic_four_lin_ode_reverse.cpp</a><br> </td><td> Atomic Linear ODE Reverse Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_four_lin_ode_reverse.hpp.htm" target="_top">atomic_four_lin_ode_reverse.hpp</a><br> </td><td> Atomic Linear ODE Reverse Mode: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_lin_ode_reverse_2.htm" target="_top">atomic_four_lin_ode_reverse_2</a><br> </td><td> Atomic Linear ODE Second Order Reverse </td></tr><tr valign="top"><td>
<a href="atomic_four_lin_ode_set.hpp.htm" target="_top">atomic_four_lin_ode_set.hpp</a><br> </td><td> atomic_lin_ode Set Routine: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_lin_ode_sparsity.cpp.htm" target="_top">atomic_four_lin_ode_sparsity.cpp</a><br> </td><td> Atomic Linear ODE Sparsity Calculations: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_four_mat_mul.htm" target="_top">atomic_four_mat_mul</a><br> </td><td> Atomic Matrix Multiply Class: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_mat_mul.hpp.htm" target="_top">atomic_four_mat_mul.hpp</a><br> </td><td> Atomic Matrix Multiply Class: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_mat_mul_base_mat_mul.hpp.htm" target="_top">atomic_four_mat_mul_base_mat_mul.hpp</a><br> </td><td> Atomic Multiply Base Matrices: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_mat_mul_for_type.hpp.htm" target="_top">atomic_four_mat_mul_for_type.hpp</a><br> </td><td> Atomic Matrix Multiply Forward Type Calculation: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_mat_mul_forward.cpp.htm" target="_top">atomic_four_mat_mul_forward.cpp</a><br> </td><td> Atomic Matrix Multiply Forward Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_four_mat_mul_forward.hpp.htm" target="_top">atomic_four_mat_mul_forward.hpp</a><br> </td><td> Atomic Matrix Multiply Forward Mode: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_mat_mul_get.hpp.htm" target="_top">atomic_four_mat_mul_get.hpp</a><br> </td><td> atomic_mat_mul Get Routine: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_mat_mul_hes_sparsity.hpp.htm" target="_top">atomic_four_mat_mul_hes_sparsity.hpp</a><br> </td><td> Atomic Matrix Multiply Jacobian Sparsity Pattern: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_mat_mul_identical_zero.cpp.htm" target="_top">atomic_four_mat_mul_identical_zero.cpp</a><br> </td><td> Atomic Matrix Multiply Identical Zero: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_four_mat_mul_implement.htm" target="_top">atomic_four_mat_mul_implement</a><br> </td><td> Implementing Atomic Matrix Multiply </td></tr><tr valign="top"><td>
<a href="atomic_four_mat_mul_jac_sparsity.hpp.htm" target="_top">atomic_four_mat_mul_jac_sparsity.hpp</a><br> </td><td> Atomic Matrix Multiply Jacobian Sparsity Pattern: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_mat_mul_rev_depend.cpp.htm" target="_top">atomic_four_mat_mul_rev_depend.cpp</a><br> </td><td> Atomic Matrix Multiply Reverse Dependency: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_four_mat_mul_rev_depend.hpp.htm" target="_top">atomic_four_mat_mul_rev_depend.hpp</a><br> </td><td> Atomic Matrix Multiply Reverse Dependency Analysis: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_mat_mul_reverse.cpp.htm" target="_top">atomic_four_mat_mul_reverse.cpp</a><br> </td><td> Atomic Matrix Multiply Reverse Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_four_mat_mul_reverse.hpp.htm" target="_top">atomic_four_mat_mul_reverse.hpp</a><br> </td><td> Atomic Matrix Multiply Reverse Mode: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_mat_mul_set.hpp.htm" target="_top">atomic_four_mat_mul_set.hpp</a><br> </td><td> atomic_mat_mul Set Routine: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_mat_mul_sparsity.cpp.htm" target="_top">atomic_four_mat_mul_sparsity.cpp</a><br> </td><td> Atomic Matrix Multiply Sparsity Patterns: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_four_norm_sq.cpp.htm" target="_top">atomic_four_norm_sq.cpp</a><br> </td><td> Atomic Euclidean Norm Squared: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_four_rev_depend.htm" target="_top">atomic_four_rev_depend</a><br> </td><td> Atomic Function Reverse Dependency </td></tr><tr valign="top"><td>
<a href="atomic_four_reverse.htm" target="_top">atomic_four_reverse</a><br> </td><td> Atomic Function Reverse Mode </td></tr><tr valign="top"><td>
<a href="atomic_four_vector.htm" target="_top">atomic_four_vector</a><br> </td><td> Atomic Vector Element-wise Operators: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_four_vector.hpp.htm" target="_top">atomic_four_vector.hpp</a><br> </td><td> Atomic Vector Class: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_add.cpp.htm" target="_top">atomic_four_vector_add.cpp</a><br> </td><td> Atomic Vector Addition Example </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_add_op.hpp.htm" target="_top">atomic_four_vector_add_op.hpp</a><br> </td><td> Atomic Vector Add Operator: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_div.cpp.htm" target="_top">atomic_four_vector_div.cpp</a><br> </td><td> Atomic Vector Division Example </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_div_op.hpp.htm" target="_top">atomic_four_vector_div_op.hpp</a><br> </td><td> Atomic Vector Divide Operator: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_for_type.hpp.htm" target="_top">atomic_four_vector_for_type.hpp</a><br> </td><td> Atomic Vector Forward Type Calculation: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_forward_op.hpp.htm" target="_top">atomic_four_vector_forward_op.hpp</a><br> </td><td> Atomic Vector Forward Mode: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_hes_sparsity.cpp.htm" target="_top">atomic_four_vector_hes_sparsity.cpp</a><br> </td><td> Atomic Vector Sparsity Patterns Example </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_hes_sparsity.hpp.htm" target="_top">atomic_four_vector_hes_sparsity.hpp</a><br> </td><td> Atomic Vector Hessian Sparsity Pattern: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_implement.htm" target="_top">atomic_four_vector_implement</a><br> </td><td> Implementing Atomic Vector Operations </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_jac_sparsity.cpp.htm" target="_top">atomic_four_vector_jac_sparsity.cpp</a><br> </td><td> Atomic Vector Sparsity Patterns Example </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_jac_sparsity.hpp.htm" target="_top">atomic_four_vector_jac_sparsity.hpp</a><br> </td><td> Atomic Vector Jacobian Sparsity Pattern: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_mul.cpp.htm" target="_top">atomic_four_vector_mul.cpp</a><br> </td><td> Atomic Vector Multiplication Example </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_mul_op.hpp.htm" target="_top">atomic_four_vector_mul_op.hpp</a><br> </td><td> Atomic Vector Multiply Operator: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_neg.cpp.htm" target="_top">atomic_four_vector_neg.cpp</a><br> </td><td> Atomic Vector Negation Example </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_neg_op.hpp.htm" target="_top">atomic_four_vector_neg_op.hpp</a><br> </td><td> Atomic Vector Negative Operator: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_rev_depend.cpp.htm" target="_top">atomic_four_vector_rev_depend.cpp</a><br> </td><td> Example Optimizing Atomic Vector Usage </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_rev_depend.hpp.htm" target="_top">atomic_four_vector_rev_depend.hpp</a><br> </td><td> Atomic Vector Forward Type Calculation: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_reverse_op.hpp.htm" target="_top">atomic_four_vector_reverse_op.hpp</a><br> </td><td> Atomic Vector Forward Mode: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_sub.cpp.htm" target="_top">atomic_four_vector_sub.cpp</a><br> </td><td> Atomic Vector Subtraction Example </td></tr><tr valign="top"><td>
<a href="atomic_four_vector_sub_op.hpp.htm" target="_top">atomic_four_vector_sub_op.hpp</a><br> </td><td> Atomic Vector Subtract Operator: Example Implementation </td></tr><tr valign="top"><td>
<a href="atomic_one.htm" target="_top">atomic_one</a><br> </td><td> Defining Atomic Functions: First Generation </td></tr><tr valign="top"><td>
<a href="atomic_three.htm" target="_top">atomic_three</a><br> </td><td> Atomic AD Functions: Third Generation </td></tr><tr valign="top"><td>
<a href="atomic_three_afun.htm" target="_top">atomic_three_afun</a><br> </td><td> Using AD Version of an Atomic Function </td></tr><tr valign="top"><td>
<a href="atomic_three_base2ad.cpp.htm" target="_top">atomic_three_base2ad.cpp</a><br> </td><td> base2ad with Atomic Operations: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_three_ctor.htm" target="_top">atomic_three_ctor</a><br> </td><td> Atomic Function Constructor </td></tr><tr valign="top"><td>
<a href="atomic_three_define.htm" target="_top">atomic_three_define</a><br> </td><td> Defining Atomic Functions: Third Generation </td></tr><tr valign="top"><td>
<a href="atomic_three_dynamic.cpp.htm" target="_top">atomic_three_dynamic.cpp</a><br> </td><td> Atomic Functions with Dynamic Parameters: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_three_example.htm" target="_top">atomic_three_example</a><br> </td><td> Example Defining Atomic Functions: Third Generation </td></tr><tr valign="top"><td>
<a href="atomic_three_for_type.htm" target="_top">atomic_three_for_type</a><br> </td><td> Atomic Function Forward Type Calculation </td></tr><tr valign="top"><td>
<a href="atomic_three_forward.htm" target="_top">atomic_three_forward</a><br> </td><td> Atomic Function Forward Mode </td></tr><tr valign="top"><td>
<a href="atomic_three_forward.cpp.htm" target="_top">atomic_three_forward.cpp</a><br> </td><td> Atomic Functions and Forward Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_three_get_started.cpp.htm" target="_top">atomic_three_get_started.cpp</a><br> </td><td> Getting Started with Atomic Functions: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_three_hes_sparsity.htm" target="_top">atomic_three_hes_sparsity</a><br> </td><td> Atomic Function Hessian Sparsity Patterns </td></tr><tr valign="top"><td>
<a href="atomic_three_hes_sparsity.cpp.htm" target="_top">atomic_three_hes_sparsity.cpp</a><br> </td><td> Atomic Forward Hessian Sparsity: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_three_jac_sparsity.htm" target="_top">atomic_three_jac_sparsity</a><br> </td><td> Atomic Function Jacobian Sparsity Patterns </td></tr><tr valign="top"><td>
<a href="atomic_three_jac_sparsity.cpp.htm" target="_top">atomic_three_jac_sparsity.cpp</a><br> </td><td> Atomic Function Jacobian Sparsity: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_three_mat_mul.cpp.htm" target="_top">atomic_three_mat_mul.cpp</a><br> </td><td> User Atomic Matrix Multiply: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_three_mat_mul.hpp.htm" target="_top">atomic_three_mat_mul.hpp</a><br> </td><td> Matrix Multiply as an Atomic Operation </td></tr><tr valign="top"><td>
<a href="atomic_three_norm_sq.cpp.htm" target="_top">atomic_three_norm_sq.cpp</a><br> </td><td> Atomic Euclidean Norm Squared: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_three_reciprocal.cpp.htm" target="_top">atomic_three_reciprocal.cpp</a><br> </td><td> Reciprocal as an Atomic Operation: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_three_rev_depend.htm" target="_top">atomic_three_rev_depend</a><br> </td><td> Atomic Function Reverse Dependency Calculation </td></tr><tr valign="top"><td>
<a href="atomic_three_rev_depend.cpp.htm" target="_top">atomic_three_rev_depend.cpp</a><br> </td><td> Atomic Functions Reverse Dependency Analysis: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_three_reverse.htm" target="_top">atomic_three_reverse</a><br> </td><td> Atomic Function Reverse Mode </td></tr><tr valign="top"><td>
<a href="atomic_three_reverse.cpp.htm" target="_top">atomic_three_reverse.cpp</a><br> </td><td> Atomic Functions and Reverse Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_three_tangent.cpp.htm" target="_top">atomic_three_tangent.cpp</a><br> </td><td> Tan and Tanh as User Atomic Operations: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_two.htm" target="_top">atomic_two</a><br> </td><td> Defining Atomic Functions: Second Generation </td></tr><tr valign="top"><td>
<a href="atomic_two_afun.htm" target="_top">atomic_two_afun</a><br> </td><td> Using AD Version of Atomic Function </td></tr><tr valign="top"><td>
<a href="atomic_two_clear.htm" target="_top">atomic_two_clear</a><br> </td><td> Free Static Variables </td></tr><tr valign="top"><td>
<a href="atomic_two_ctor.htm" target="_top">atomic_two_ctor</a><br> </td><td> Atomic Function Constructor </td></tr><tr valign="top"><td>
<a href="atomic_two_eigen_cholesky.cpp.htm" target="_top">atomic_two_eigen_cholesky.cpp</a><br> </td><td> Atomic Eigen Cholesky Factorization: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_two_eigen_cholesky.hpp.htm" target="_top">atomic_two_eigen_cholesky.hpp</a><br> </td><td> atomic_two Eigen Cholesky Factorization Class </td></tr><tr valign="top"><td>
<a href="atomic_two_eigen_mat_inv.cpp.htm" target="_top">atomic_two_eigen_mat_inv.cpp</a><br> </td><td> Atomic Eigen Matrix Inverse: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_two_eigen_mat_inv.hpp.htm" target="_top">atomic_two_eigen_mat_inv.hpp</a><br> </td><td> atomic_two Eigen Matrix Inversion Class </td></tr><tr valign="top"><td>
<a href="atomic_two_eigen_mat_mul.cpp.htm" target="_top">atomic_two_eigen_mat_mul.cpp</a><br> </td><td> Atomic Eigen Matrix Multiply: Example and Test </td></tr><tr valign="top"><td>
<a href="atomic_two_eigen_mat_mul.hpp.htm" target="_top">atomic_two_eigen_mat_mul.hpp</a><br> </td><td> atomic_two Eigen Matrix Multiply Class </td></tr><tr valign="top"><td>
<a href="atomic_two_example.htm" target="_top">atomic_two_example</a><br> </td><td> Example Defining Atomic Functions: Second Generation </td></tr><tr valign="top"><td>
<a href="atomic_two_for_sparse_hes.htm" target="_top">atomic_two_for_sparse_hes</a><br> </td><td> Atomic Forward Hessian Sparsity Patterns </td></tr><tr valign="top"><td>
<a href="atomic_two_for_sparse_jac.htm" target="_top">atomic_two_for_sparse_jac</a><br> </td><td> Atomic Forward Jacobian Sparsity Patterns </td></tr><tr valign="top"><td>
<a href="atomic_two_forward.htm" target="_top">atomic_two_forward</a><br> </td><td> Atomic Forward Mode </td></tr><tr valign="top"><td>
<a href="atomic_two_option.htm" target="_top">atomic_two_option</a><br> </td><td> Set Atomic Function Options </td></tr><tr valign="top"><td>
<a href="atomic_two_rev_sparse_hes.htm" target="_top">atomic_two_rev_sparse_hes</a><br> </td><td> Atomic Reverse Hessian Sparsity Patterns </td></tr><tr valign="top"><td>
<a href="atomic_two_rev_sparse_jac.htm" target="_top">atomic_two_rev_sparse_jac</a><br> </td><td> Atomic Reverse Jacobian Sparsity Patterns </td></tr><tr valign="top"><td>
<a href="atomic_two_reverse.htm" target="_top">atomic_two_reverse</a><br> </td><td> Atomic Reverse Mode </td></tr><tr valign="top"><td>
<a href="autotools.htm" target="_top">autotools</a><br> </td><td> Autotools Unix Test and Installation </td></tr><tr valign="top"><td>
<a href="azmul.htm" target="_top">azmul</a><br> </td><td> Absolute Zero Multiplication </td></tr><tr valign="top"><td>
<a href="azmul.cpp.htm" target="_top">azmul.cpp</a><br> </td><td> AD Absolute Zero Multiplication: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="B">B</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="base2ad.htm" target="_top">base2ad</a><br> </td><td> Create an AD&lt;Base&gt; Function From a Base Function </td></tr><tr valign="top"><td>
<a href="base2ad.cpp.htm" target="_top">base2ad.cpp</a><br> </td><td> Taylor's Ode Solver: base2ad Example and Test </td></tr><tr valign="top"><td>
<a href="base2vec_ad.cpp.htm" target="_top">base2vec_ad.cpp</a><br> </td><td> Using base2ad and VecAD together: Example and Test </td></tr><tr valign="top"><td>
<a href="base_adolc.hpp.htm" target="_top">base_adolc.hpp</a><br> </td><td> Enable use of AD&lt;Base&gt; where Base is Adolc's adouble Type </td></tr><tr valign="top"><td>
<a href="base_alloc.hpp.htm" target="_top">base_alloc.hpp</a><br> </td><td> Example AD&lt;Base&gt; Where Base Constructor Allocates Memory </td></tr><tr valign="top"><td>
<a href="base_complex.hpp.htm" target="_top">base_complex.hpp</a><br> </td><td> Enable use of AD&lt;Base&gt; where Base is std::complex&lt;double&gt; </td></tr><tr valign="top"><td>
<a href="base_cond_exp.htm" target="_top">base_cond_exp</a><br> </td><td> Base Type Requirements for Conditional Expressions </td></tr><tr valign="top"><td>
<a href="base_double.hpp.htm" target="_top">base_double.hpp</a><br> </td><td> Enable use of AD&lt;Base&gt; where Base is double </td></tr><tr valign="top"><td>
<a href="base_example.htm" target="_top">base_example</a><br> </td><td> Example AD Base Types That are not AD&lt;OtherBase&gt; </td></tr><tr valign="top"><td>
<a href="base_float.hpp.htm" target="_top">base_float.hpp</a><br> </td><td> Enable use of AD&lt;Base&gt; where Base is float </td></tr><tr valign="top"><td>
<a href="base_hash.htm" target="_top">base_hash</a><br> </td><td> Base Type Requirements for Hash Coding Values </td></tr><tr valign="top"><td>
<a href="base_identical.htm" target="_top">base_identical</a><br> </td><td> Base Type Requirements for Identically Equal Comparisons </td></tr><tr valign="top"><td>
<a href="base_limits.htm" target="_top">base_limits</a><br> </td><td> Base Type Requirements for Numeric Limits </td></tr><tr valign="top"><td>
<a href="base_member.htm" target="_top">base_member</a><br> </td><td> Required Base Class Member Functions </td></tr><tr valign="top"><td>
<a href="base_ordered.htm" target="_top">base_ordered</a><br> </td><td> Base Type Requirements for Ordered Comparisons </td></tr><tr valign="top"><td>
<a href="base_require.htm" target="_top">base_require</a><br> </td><td> AD&lt;Base&gt; Requirements for a CppAD Base Type </td></tr><tr valign="top"><td>
<a href="base_require.cpp.htm" target="_top">base_require.cpp</a><br> </td><td> Using a User Defined AD Base Type: Example and Test </td></tr><tr valign="top"><td>
<a href="base_std_math.htm" target="_top">base_std_math</a><br> </td><td> Base Type Requirements for Standard Math Functions </td></tr><tr valign="top"><td>
<a href="base_to_string.htm" target="_top">base_to_string</a><br> </td><td> Extending to_string To Another Floating Point Type </td></tr><tr valign="top"><td>
<a href="bender_quad.cpp.htm" target="_top">bender_quad.cpp</a><br> </td><td> BenderQuad: Example and Test </td></tr><tr valign="top"><td>
<a href="benderquad.htm" target="_top">BenderQuad</a><br> </td><td> Computing Jacobian and Hessian of Bender's Reduced Objective </td></tr><tr valign="top"><td>
<a href="bib.htm" target="_top">Bib</a><br> </td><td> Bibliography </td></tr><tr valign="top"><td>
<a href="binary_math.htm" target="_top">binary_math</a><br> </td><td> The Binary Math Functions </td></tr><tr valign="top"><td>
<a href="bool_fun.cpp.htm" target="_top">bool_fun.cpp</a><br> </td><td> AD Boolean Functions: Example and Test </td></tr><tr valign="top"><td>
<a href="boolfun.htm" target="_top">BoolFun</a><br> </td><td> AD Boolean Functions </td></tr><tr valign="top"><td>
<a href="boolvalued.htm" target="_top">BoolValued</a><br> </td><td> Bool Valued Operations and Functions with AD Arguments </td></tr><tr valign="top"><td>

<b><big><a name="C">C</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="capacity_order.htm" target="_top">capacity_order</a><br> </td><td> Controlling Taylor Coefficients Memory Allocation </td></tr><tr valign="top"><td>
<a href="capacity_order.cpp.htm" target="_top">capacity_order.cpp</a><br> </td><td> Controlling Taylor Coefficient Memory Allocation: Example and Test </td></tr><tr valign="top"><td>
<a href="change_param.cpp.htm" target="_top">change_param.cpp</a><br> </td><td> Computing a Jacobian With Constants that Change </td></tr><tr valign="top"><td>
<a href="check_for_nan.htm" target="_top">check_for_nan</a><br> </td><td> Check an ADFun Object For Nan Results </td></tr><tr valign="top"><td>
<a href="check_for_nan.cpp.htm" target="_top">check_for_nan.cpp</a><br> </td><td> ADFun Checking For Nan: Example and Test </td></tr><tr valign="top"><td>
<a href="check_numeric_type.cpp.htm" target="_top">check_numeric_type.cpp</a><br> </td><td> The CheckNumericType Function: Example and Test </td></tr><tr valign="top"><td>
<a href="check_simple_vector.cpp.htm" target="_top">check_simple_vector.cpp</a><br> </td><td> The CheckSimpleVector Function: Example and Test </td></tr><tr valign="top"><td>
<a href="checknumerictype.htm" target="_top">CheckNumericType</a><br> </td><td> Check NumericType Class Concept </td></tr><tr valign="top"><td>
<a href="checksimplevector.htm" target="_top">CheckSimpleVector</a><br> </td><td> Check Simple Vector Concept </td></tr><tr valign="top"><td>
<a href="chkpoint_one.htm" target="_top">chkpoint_one</a><br> </td><td> Checkpoint Functions: First Generation </td></tr><tr valign="top"><td>
<a href="chkpoint_two.htm" target="_top">chkpoint_two</a><br> </td><td> Checkpoint Functions: Second Generation </td></tr><tr valign="top"><td>
<a href="chkpoint_two_base2ad.cpp.htm" target="_top">chkpoint_two_base2ad.cpp</a><br> </td><td> Checkpointing With base2ad: Example and Test </td></tr><tr valign="top"><td>
<a href="chkpoint_two_chk_fun.htm" target="_top">chkpoint_two_chk_fun</a><br> </td><td> Using Checkpoint Functions </td></tr><tr valign="top"><td>
<a href="chkpoint_two_compare.cpp.htm" target="_top">chkpoint_two_compare.cpp</a><br> </td><td> Compare With and Without Checkpointing: Example and Test </td></tr><tr valign="top"><td>
<a href="chkpoint_two_ctor.htm" target="_top">chkpoint_two_ctor</a><br> </td><td> Checkpoint Function Constructor </td></tr><tr valign="top"><td>
<a href="chkpoint_two_dynamic.htm" target="_top">chkpoint_two_dynamic</a><br> </td><td> Dynamic Parameters in Checkpoint Functions </td></tr><tr valign="top"><td>
<a href="chkpoint_two_dynamic.cpp.htm" target="_top">chkpoint_two_dynamic.cpp</a><br> </td><td> Checkpoint Functions with Dynamic Parameters: Example and Test </td></tr><tr valign="top"><td>
<a href="chkpoint_two_get_started.cpp.htm" target="_top">chkpoint_two_get_started.cpp</a><br> </td><td> Get Started Checkpointing: Example and Test </td></tr><tr valign="top"><td>
<a href="chkpoint_two_ode.cpp.htm" target="_top">chkpoint_two_ode.cpp</a><br> </td><td> Checkpointing an ODE Solver: Example and Test </td></tr><tr valign="top"><td>
<a href="cholesky_theory.htm" target="_top">cholesky_theory</a><br> </td><td> AD Theory for Cholesky Factorization </td></tr><tr valign="top"><td>
<a href="cmake.htm" target="_top">cmake</a><br> </td><td> Using CMake to Configure CppAD </td></tr><tr valign="top"><td>
<a href="cmake_check.htm" target="_top">cmake_check</a><br> </td><td> Checking the CppAD Examples and Tests </td></tr><tr valign="top"><td>
<a href="code_gen_fun.htm" target="_top">code_gen_fun</a><br> </td><td> Generate Source Code and Compile an AD Function </td></tr><tr valign="top"><td>
<a href="code_gen_fun.cpp.htm" target="_top">code_gen_fun.cpp</a><br> </td><td> code_gen_fun Class Member  Implementation </td></tr><tr valign="top"><td>
<a href="code_gen_fun.hpp.htm" target="_top">code_gen_fun.hpp</a><br> </td><td> code_gen_fun Class Include File </td></tr><tr valign="top"><td>
<a href="code_gen_fun_file.cpp.htm" target="_top">code_gen_fun_file.cpp</a><br> </td><td> File Store and Retrieve a Code Gen Function: Example and Test </td></tr><tr valign="top"><td>
<a href="code_gen_fun_function.cpp.htm" target="_top">code_gen_fun_function.cpp</a><br> </td><td> Evaluate a Code Gen Function: Example and Test </td></tr><tr valign="top"><td>
<a href="code_gen_fun_jac_as_fun.cpp.htm" target="_top">code_gen_fun_jac_as_fun.cpp</a><br> </td><td> Pass Jacobian as Code Gen Function: Example and Test </td></tr><tr valign="top"><td>
<a href="code_gen_fun_jacobian.cpp.htm" target="_top">code_gen_fun_jacobian.cpp</a><br> </td><td> Evaluate Jacobian of a Code Gen Function: Example and Test </td></tr><tr valign="top"><td>
<a href="code_gen_fun_sparse_jac_as_fun.cpp.htm" target="_top">code_gen_fun_sparse_jac_as_fun.cpp</a><br> </td><td> Pass Sparse Jacobian as Code Gen Function: Example and Test </td></tr><tr valign="top"><td>
<a href="code_gen_fun_sparse_jacobian.cpp.htm" target="_top">code_gen_fun_sparse_jacobian.cpp</a><br> </td><td> Evaluate Sparse Jacobian of a Code Gen Function: Example and Test </td></tr><tr valign="top"><td>
<a href="colpack_hes.cpp.htm" target="_top">colpack_hes.cpp</a><br> </td><td> ColPack: Sparse Hessian Example and Test </td></tr><tr valign="top"><td>
<a href="colpack_hessian.cpp.htm" target="_top">colpack_hessian.cpp</a><br> </td><td> ColPack: Sparse Hessian Example and Test </td></tr><tr valign="top"><td>
<a href="colpack_jac.cpp.htm" target="_top">colpack_jac.cpp</a><br> </td><td> ColPack: Sparse Jacobian Example and Test </td></tr><tr valign="top"><td>
<a href="colpack_jacobian.cpp.htm" target="_top">colpack_jacobian.cpp</a><br> </td><td> ColPack: Sparse Jacobian Example and Test </td></tr><tr valign="top"><td>
<a href="colpack_prefix.htm" target="_top">colpack_prefix</a><br> </td><td> Enabling Colpack Sparsity Calculations </td></tr><tr valign="top"><td>
<a href="compare.htm" target="_top">Compare</a><br> </td><td> AD Binary Comparison Operators </td></tr><tr valign="top"><td>
<a href="compare.cpp.htm" target="_top">compare.cpp</a><br> </td><td> AD Binary Comparison Operators: Example and Test </td></tr><tr valign="top"><td>
<a href="compare_c.htm" target="_top">compare_c</a><br> </td><td> Compare Speed of C and C++ </td></tr><tr valign="top"><td>
<a href="compare_change.htm" target="_top">compare_change</a><br> </td><td> Comparison Changes Between Taping and Zero Order Forward </td></tr><tr valign="top"><td>
<a href="compare_change.cpp.htm" target="_top">compare_change.cpp</a><br> </td><td> CompareChange and Re-Tape: Example and Test </td></tr><tr valign="top"><td>
<a href="comparechange.htm" target="_top">CompareChange</a><br> </td><td> Comparison Changes During Zero Order Forward Mode </td></tr><tr valign="top"><td>
<a href="complex_poly.cpp.htm" target="_top">complex_poly.cpp</a><br> </td><td> Complex Polynomial: Example and Test </td></tr><tr valign="top"><td>
<a href="compound_assign.htm" target="_top">compound_assign</a><br> </td><td> AD Compound Assignment Operators </td></tr><tr valign="top"><td>
<a href="con_dyn_var.htm" target="_top">con_dyn_var</a><br> </td><td> Constant, Dynamic, Parameter, and Variable </td></tr><tr valign="top"><td>
<a href="con_dyn_var.cpp.htm" target="_top">con_dyn_var.cpp</a><br> </td><td> AD Parameter and Variable Functions: Example and Test </td></tr><tr valign="top"><td>
<a href="cond_exp.cpp.htm" target="_top">cond_exp.cpp</a><br> </td><td> Conditional Expressions: Example and Test </td></tr><tr valign="top"><td>
<a href="condexp.htm" target="_top">CondExp</a><br> </td><td> AD Conditional Expressions </td></tr><tr valign="top"><td>
<a href="conj_grad.cpp.htm" target="_top">conj_grad.cpp</a><br> </td><td> Differentiate Conjugate Gradient Algorithm: Example and Test </td></tr><tr valign="top"><td>
<a href="convert.htm" target="_top">Convert</a><br> </td><td> Conversion and I/O of AD Objects </td></tr><tr valign="top"><td>
<a href="correct_det_by_minor_c.htm" target="_top">correct_det_by_minor_c</a><br> </td><td> Correctness Test of det_by_minor Routine </td></tr><tr valign="top"><td>
<a href="cos.htm" target="_top">cos</a><br> </td><td> The Cosine Function: cos </td></tr><tr valign="top"><td>
<a href="cos.cpp.htm" target="_top">cos.cpp</a><br> </td><td> The AD cos Function: Example and Test </td></tr><tr valign="top"><td>
<a href="cosh.htm" target="_top">cosh</a><br> </td><td> The Hyperbolic Cosine Function: cosh </td></tr><tr valign="top"><td>
<a href="cosh.cpp.htm" target="_top">cosh.cpp</a><br> </td><td> The AD cosh Function: Example and Test </td></tr><tr valign="top"><td>
<a href="cpp_ad_graph.htm" target="_top">cpp_ad_graph</a><br> </td><td> C++ Representation of an AD Graph </td></tr><tr valign="top"><td>
<a href="cpp_graph.htm" target="_top">cpp_graph</a><br> </td><td> A C++ AD Graph Class </td></tr><tr valign="top"><td>
<a href="cpp_graph_ctor.htm" target="_top">cpp_graph_ctor</a><br> </td><td> C++ AD Graph Constructor </td></tr><tr valign="top"><td>
<a href="cpp_graph_print.htm" target="_top">cpp_graph_print</a><br> </td><td> Print A C++ AD Graph </td></tr><tr valign="top"><td>
<a href="cpp_graph_scalar.htm" target="_top">cpp_graph_scalar</a><br> </td><td> C++ AD Graph Scalar Values </td></tr><tr valign="top"><td>
<a href="cpp_graph_vector.htm" target="_top">cpp_graph_vector</a><br> </td><td> C++ AD Graph Vector Values </td></tr><tr valign="top"><td>
<a href="cppad.htm" target="_top">CppAD</a><br> </td><td> cppad-20220604: A C++ Algorithmic Differentiation Package </td></tr><tr valign="top"><td>
<a href="cppad_assert.htm" target="_top">cppad_assert</a><br> </td><td> CppAD Assertions During Execution </td></tr><tr valign="top"><td>
<a href="cppad_det_lu.cpp.htm" target="_top">cppad_det_lu.cpp</a><br> </td><td> Cppad Speed: Gradient of Determinant Using Lu Factorization </td></tr><tr valign="top"><td>
<a href="cppad_det_minor.cpp.htm" target="_top">cppad_det_minor.cpp</a><br> </td><td> Cppad Speed: Gradient of Determinant by Minor Expansion </td></tr><tr valign="top"><td>
<a href="cppad_eigen.hpp.htm" target="_top">cppad_eigen.hpp</a><br> </td><td> Enable Use of Eigen Linear Algebra Package with CppAD </td></tr><tr valign="top"><td>
<a href="cppad_ipopt_nlp.htm" target="_top">cppad_ipopt_nlp</a><br> </td><td> Nonlinear Programming Using the CppAD Interface to Ipopt </td></tr><tr valign="top"><td>
<a href="cppad_mat_mul.cpp.htm" target="_top">cppad_mat_mul.cpp</a><br> </td><td> CppAD Speed, Matrix Multiplication </td></tr><tr valign="top"><td>
<a href="cppad_ode.cpp.htm" target="_top">cppad_ode.cpp</a><br> </td><td> Cppad Speed: Gradient of Ode Solution </td></tr><tr valign="top"><td>
<a href="cppad_poly.cpp.htm" target="_top">cppad_poly.cpp</a><br> </td><td> Cppad Speed: Second Derivative of a Polynomial </td></tr><tr valign="top"><td>
<a href="cppad_sparse_hessian.cpp.htm" target="_top">cppad_sparse_hessian.cpp</a><br> </td><td> Cppad Speed: Sparse Hessian </td></tr><tr valign="top"><td>
<a href="cppad_sparse_jacobian.cpp.htm" target="_top">cppad_sparse_jacobian.cpp</a><br> </td><td> Cppad Speed: Sparse Jacobian </td></tr><tr valign="top"><td>
<a href="cppad_testvector.htm" target="_top">cppad_testvector</a><br> </td><td> Choosing the CppAD Test Vector Template Class </td></tr><tr valign="top"><td>
<a href="cppad_vector.htm" target="_top">CppAD_vector</a><br> </td><td> The CppAD::vector Template Class </td></tr><tr valign="top"><td>
<a href="cppad_vector.cpp.htm" target="_top">cppad_vector.cpp</a><br> </td><td> CppAD::vector Template Class: Example and Test </td></tr><tr valign="top"><td>
<a href="cppadcg.htm" target="_top">cppadcg</a><br> </td><td> Including CppADCodeGen Examples and Tests </td></tr><tr valign="top"><td>
<a href="cppadcg_det_lu.cpp.htm" target="_top">cppadcg_det_lu.cpp</a><br> </td><td> Cppadcg Speed: Gradient of Determinant Using Lu Factorization </td></tr><tr valign="top"><td>
<a href="cppadcg_det_minor.cpp.htm" target="_top">cppadcg_det_minor.cpp</a><br> </td><td> cppadcg Speed: Gradient of Determinant by Minor Expansion </td></tr><tr valign="top"><td>
<a href="cppadcg_mat_mul.cpp.htm" target="_top">cppadcg_mat_mul.cpp</a><br> </td><td> Cppadcg Speed: Matrix Multiplication </td></tr><tr valign="top"><td>
<a href="cppadcg_ode.cpp.htm" target="_top">cppadcg_ode.cpp</a><br> </td><td> Cppadcg Speed: Ode </td></tr><tr valign="top"><td>
<a href="cppadcg_poly.cpp.htm" target="_top">cppadcg_poly.cpp</a><br> </td><td> Cppadcg Speed: Second Derivative of a Polynomial </td></tr><tr valign="top"><td>
<a href="cppadcg_sparse_hessian.cpp.htm" target="_top">cppadcg_sparse_hessian.cpp</a><br> </td><td> Cppadcg Speed: Sparse Hessian </td></tr><tr valign="top"><td>
<a href="cppadcg_sparse_jacobian.cpp.htm" target="_top">cppadcg_sparse_jacobian.cpp</a><br> </td><td> Cppadcg Speed: Sparse Jacobian </td></tr><tr valign="top"><td>

<b><big><a name="D">D</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="dependency.cpp.htm" target="_top">dependency.cpp</a><br> </td><td> Computing Dependency: Example and Test </td></tr><tr valign="top"><td>
<a href="dependent.htm" target="_top">Dependent</a><br> </td><td> Stop Recording and Store Operation Sequence </td></tr><tr valign="top"><td>
<a href="deprecated.htm" target="_top">deprecated</a><br> </td><td> CppAD Deprecated API Features </td></tr><tr valign="top"><td>
<a href="det_33.htm" target="_top">det_33</a><br> </td><td> Check Determinant of 3 by 3 matrix </td></tr><tr valign="top"><td>
<a href="det_33.hpp.htm" target="_top">det_33.hpp</a><br> </td><td> Source: det_33 </td></tr><tr valign="top"><td>
<a href="det_by_lu.htm" target="_top">det_by_lu</a><br> </td><td> Determinant Using Expansion by Lu Factorization </td></tr><tr valign="top"><td>
<a href="det_by_lu.cpp.htm" target="_top">det_by_lu.cpp</a><br> </td><td> Determinant Using Lu Factorization: Example and Test </td></tr><tr valign="top"><td>
<a href="det_by_lu.hpp.htm" target="_top">det_by_lu.hpp</a><br> </td><td> Source: det_by_lu </td></tr><tr valign="top"><td>
<a href="det_by_minor.htm" target="_top">det_by_minor</a><br> </td><td> Determinant Using Expansion by Minors </td></tr><tr valign="top"><td>
<a href="det_by_minor.cpp.htm" target="_top">det_by_minor.cpp</a><br> </td><td> Determinant Using Expansion by Minors: Example and Test </td></tr><tr valign="top"><td>
<a href="det_by_minor.hpp.htm" target="_top">det_by_minor.hpp</a><br> </td><td> Source: det_by_minor </td></tr><tr valign="top"><td>
<a href="det_by_minor_c.htm" target="_top">det_by_minor_c</a><br> </td><td> Compute Determinant using Expansion by Minors </td></tr><tr valign="top"><td>
<a href="det_grad_33.htm" target="_top">det_grad_33</a><br> </td><td> Check Gradient of Determinant of 3 by 3 matrix </td></tr><tr valign="top"><td>
<a href="det_grad_33.hpp.htm" target="_top">det_grad_33.hpp</a><br> </td><td> Source: det_grad_33 </td></tr><tr valign="top"><td>
<a href="det_of_minor.htm" target="_top">det_of_minor</a><br> </td><td> Determinant of a Minor </td></tr><tr valign="top"><td>
<a href="det_of_minor.cpp.htm" target="_top">det_of_minor.cpp</a><br> </td><td> Determinant of a Minor: Example and Test </td></tr><tr valign="top"><td>
<a href="det_of_minor.hpp.htm" target="_top">det_of_minor.hpp</a><br> </td><td> Source: det_of_minor </td></tr><tr valign="top"><td>
<a href="det_of_minor_c.htm" target="_top">det_of_minor_c</a><br> </td><td> Determinant of a Minor </td></tr><tr valign="top"><td>
<a href="directory.htm" target="_top">directory</a><br> </td><td> Directory Structure </td></tr><tr valign="top"><td>
<a href="discrete.htm" target="_top">Discrete</a><br> </td><td> Discrete AD Functions </td></tr><tr valign="top"><td>
<a href="div.cpp.htm" target="_top">div.cpp</a><br> </td><td> AD Binary Division: Example and Test </td></tr><tr valign="top"><td>
<a href="div_eq.cpp.htm" target="_top">div_eq.cpp</a><br> </td><td> AD Compound Assignment Division: Example and Test </td></tr><tr valign="top"><td>
<a href="double_det_lu.cpp.htm" target="_top">double_det_lu.cpp</a><br> </td><td> Double Speed: Determinant Using Lu Factorization </td></tr><tr valign="top"><td>
<a href="double_det_minor.cpp.htm" target="_top">double_det_minor.cpp</a><br> </td><td> Double Speed: Determinant by Minor Expansion </td></tr><tr valign="top"><td>
<a href="double_mat_mul.cpp.htm" target="_top">double_mat_mul.cpp</a><br> </td><td> Double Speed: Matrix Multiplication </td></tr><tr valign="top"><td>
<a href="double_ode.cpp.htm" target="_top">double_ode.cpp</a><br> </td><td> Double Speed: Ode Solution </td></tr><tr valign="top"><td>
<a href="double_poly.cpp.htm" target="_top">double_poly.cpp</a><br> </td><td> Double Speed: Evaluate a Polynomial </td></tr><tr valign="top"><td>
<a href="double_sparse_hessian.cpp.htm" target="_top">double_sparse_hessian.cpp</a><br> </td><td> Double Speed: Sparse Hessian </td></tr><tr valign="top"><td>
<a href="double_sparse_jacobian.cpp.htm" target="_top">double_sparse_jacobian.cpp</a><br> </td><td> Double Speed: Sparse Jacobian </td></tr><tr valign="top"><td>
<a href="download.htm" target="_top">download</a><br> </td><td> Download The CppAD Source Code </td></tr><tr valign="top"><td>
<a href="drivers.htm" target="_top">drivers</a><br> </td><td> First and Second Order Derivatives: Easy Drivers </td></tr><tr valign="top"><td>

<b><big><a name="E">E</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="eigen.htm" target="_top">eigen</a><br> </td><td> Including Eigen Examples, Tests, and sparse2eigen </td></tr><tr valign="top"><td>
<a href="eigen_array.cpp.htm" target="_top">eigen_array.cpp</a><br> </td><td> Using Eigen Arrays: Example and Test </td></tr><tr valign="top"><td>
<a href="eigen_det.cpp.htm" target="_top">eigen_det.cpp</a><br> </td><td> Using Eigen To Compute Determinant: Example and Test </td></tr><tr valign="top"><td>
<a href="eigen_plugin.hpp.htm" target="_top">eigen_plugin.hpp</a><br> </td><td> Source Code for eigen_plugin.hpp </td></tr><tr valign="top"><td>
<a href="elapsed_seconds.htm" target="_top">elapsed_seconds</a><br> </td><td> Returns Elapsed Number of Seconds </td></tr><tr valign="top"><td>
<a href="elapsed_seconds.cpp.htm" target="_top">elapsed_seconds.cpp</a><br> </td><td> Elapsed Seconds: Example and Test </td></tr><tr valign="top"><td>
<a href="elapsed_seconds_c.htm" target="_top">elapsed_seconds_c</a><br> </td><td> Returns Elapsed Number of Seconds </td></tr><tr valign="top"><td>
<a href="epsilon.htm" target="_top">epsilon</a><br> </td><td> Machine Epsilon For AD Types </td></tr><tr valign="top"><td>
<a href="equal_op_seq.cpp.htm" target="_top">equal_op_seq.cpp</a><br> </td><td> EqualOpSeq: Example and Test </td></tr><tr valign="top"><td>
<a href="equalopseq.htm" target="_top">EqualOpSeq</a><br> </td><td> Check if Two Value are Identically Equal </td></tr><tr valign="top"><td>
<a href="erf.htm" target="_top">erf</a><br> </td><td> The Error Function </td></tr><tr valign="top"><td>
<a href="erf.cpp.htm" target="_top">erf.cpp</a><br> </td><td> The AD erf Function: Example and Test </td></tr><tr valign="top"><td>
<a href="erf_forward.htm" target="_top">erf_forward</a><br> </td><td> Error Function Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="erf_reverse.htm" target="_top">erf_reverse</a><br> </td><td> Error Function Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="erfc.htm" target="_top">erfc</a><br> </td><td> The Complementary Error Function: erfc </td></tr><tr valign="top"><td>
<a href="erfc.cpp.htm" target="_top">erfc.cpp</a><br> </td><td> The AD erfc Function: Example and Test </td></tr><tr valign="top"><td>
<a href="error_handler.cpp.htm" target="_top">error_handler.cpp</a><br> </td><td> Replacing The CppAD Error Handler: Example and Test </td></tr><tr valign="top"><td>
<a href="errorhandler.htm" target="_top">ErrorHandler</a><br> </td><td> Replacing the CppAD Error Handler </td></tr><tr valign="top"><td>
<a href="example.htm" target="_top">Example</a><br> </td><td> Examples </td></tr><tr valign="top"><td>
<a href="example_abs_normal.htm" target="_top">example_abs_normal</a><br> </td><td> Examples and Tests: Abs-normal Representation of Non-Smooth Functions </td></tr><tr valign="top"><td>
<a href="exampleutility.htm" target="_top">ExampleUtility</a><br> </td><td> Utility Routines used by CppAD Examples </td></tr><tr valign="top"><td>
<a href="exp.htm" target="_top">exp</a><br> </td><td> The Exponential Function: exp </td></tr><tr valign="top"><td>
<a href="exp.cpp.htm" target="_top">exp.cpp</a><br> </td><td> The AD exp Function: Example and Test </td></tr><tr valign="top"><td>
<a href="exp_2.htm" target="_top">exp_2</a><br> </td><td> Second Order Exponential Approximation </td></tr><tr valign="top"><td>
<a href="exp_2.cpp.htm" target="_top">exp_2.cpp</a><br> </td><td> exp_2: Test </td></tr><tr valign="top"><td>
<a href="exp_2.hpp.htm" target="_top">exp_2.hpp</a><br> </td><td> exp_2: Implementation </td></tr><tr valign="top"><td>
<a href="exp_2_cppad.htm" target="_top">exp_2_cppad</a><br> </td><td> exp_2: CppAD Forward and Reverse Sweeps </td></tr><tr valign="top"><td>
<a href="exp_2_for0.htm" target="_top">exp_2_for0</a><br> </td><td> exp_2: Operation Sequence and Zero Order Forward Mode </td></tr><tr valign="top"><td>
<a href="exp_2_for0.cpp.htm" target="_top">exp_2_for0.cpp</a><br> </td><td> exp_2: Verify Zero Order Forward Sweep </td></tr><tr valign="top"><td>
<a href="exp_2_for1.htm" target="_top">exp_2_for1</a><br> </td><td> exp_2: First Order Forward Mode </td></tr><tr valign="top"><td>
<a href="exp_2_for1.cpp.htm" target="_top">exp_2_for1.cpp</a><br> </td><td> exp_2: Verify First Order Forward Sweep </td></tr><tr valign="top"><td>
<a href="exp_2_for2.htm" target="_top">exp_2_for2</a><br> </td><td> exp_2: Second Order Forward Mode </td></tr><tr valign="top"><td>
<a href="exp_2_for2.cpp.htm" target="_top">exp_2_for2.cpp</a><br> </td><td> exp_2: Verify Second Order Forward Sweep </td></tr><tr valign="top"><td>
<a href="exp_2_rev1.htm" target="_top">exp_2_rev1</a><br> </td><td> exp_2: First Order Reverse Mode </td></tr><tr valign="top"><td>
<a href="exp_2_rev1.cpp.htm" target="_top">exp_2_rev1.cpp</a><br> </td><td> exp_2: Verify First Order Reverse Sweep </td></tr><tr valign="top"><td>
<a href="exp_2_rev2.htm" target="_top">exp_2_rev2</a><br> </td><td> exp_2: Second Order Reverse Mode </td></tr><tr valign="top"><td>
<a href="exp_2_rev2.cpp.htm" target="_top">exp_2_rev2.cpp</a><br> </td><td> exp_2: Verify Second Order Reverse Sweep </td></tr><tr valign="top"><td>
<a href="exp_apx.cpp.htm" target="_top">exp_apx.cpp</a><br> </td><td> Correctness Tests For Exponential Approximation in Introduction </td></tr><tr valign="top"><td>
<a href="exp_eps.htm" target="_top">exp_eps</a><br> </td><td> An Epsilon Accurate Exponential Approximation </td></tr><tr valign="top"><td>
<a href="exp_eps.cpp.htm" target="_top">exp_eps.cpp</a><br> </td><td> exp_eps: Test of exp_eps </td></tr><tr valign="top"><td>
<a href="exp_eps.hpp.htm" target="_top">exp_eps.hpp</a><br> </td><td> exp_eps: Implementation </td></tr><tr valign="top"><td>
<a href="exp_eps_cppad.htm" target="_top">exp_eps_cppad</a><br> </td><td> exp_eps: CppAD Forward and Reverse Sweeps </td></tr><tr valign="top"><td>
<a href="exp_eps_for0.htm" target="_top">exp_eps_for0</a><br> </td><td> exp_eps: Operation Sequence and Zero Order Forward Sweep </td></tr><tr valign="top"><td>
<a href="exp_eps_for0.cpp.htm" target="_top">exp_eps_for0.cpp</a><br> </td><td> exp_eps: Verify Zero Order Forward Sweep </td></tr><tr valign="top"><td>
<a href="exp_eps_for1.htm" target="_top">exp_eps_for1</a><br> </td><td> exp_eps: First Order Forward Sweep </td></tr><tr valign="top"><td>
<a href="exp_eps_for1.cpp.htm" target="_top">exp_eps_for1.cpp</a><br> </td><td> exp_eps: Verify First Order Forward Sweep </td></tr><tr valign="top"><td>
<a href="exp_eps_for2.htm" target="_top">exp_eps_for2</a><br> </td><td> exp_eps: Second Order Forward Mode </td></tr><tr valign="top"><td>
<a href="exp_eps_for2.cpp.htm" target="_top">exp_eps_for2.cpp</a><br> </td><td> exp_eps: Verify Second Order Forward Sweep </td></tr><tr valign="top"><td>
<a href="exp_eps_rev1.htm" target="_top">exp_eps_rev1</a><br> </td><td> exp_eps: First Order Reverse Sweep </td></tr><tr valign="top"><td>
<a href="exp_eps_rev1.cpp.htm" target="_top">exp_eps_rev1.cpp</a><br> </td><td> exp_eps: Verify First Order Reverse Sweep </td></tr><tr valign="top"><td>
<a href="exp_eps_rev2.htm" target="_top">exp_eps_rev2</a><br> </td><td> exp_eps: Second Order Reverse Sweep </td></tr><tr valign="top"><td>
<a href="exp_eps_rev2.cpp.htm" target="_top">exp_eps_rev2.cpp</a><br> </td><td> exp_eps: Verify Second Order Reverse Sweep </td></tr><tr valign="top"><td>
<a href="exp_forward.htm" target="_top">exp_forward</a><br> </td><td> Exponential Function Forward Mode Theory </td></tr><tr valign="top"><td>
<a href="exp_reverse.htm" target="_top">exp_reverse</a><br> </td><td> Exponential Function Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="expm1.htm" target="_top">expm1</a><br> </td><td> The Exponential Function Minus One: expm1 </td></tr><tr valign="top"><td>
<a href="expm1.cpp.htm" target="_top">expm1.cpp</a><br> </td><td> The AD exp Function: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="F">F</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="fabs.cpp.htm" target="_top">fabs.cpp</a><br> </td><td> AD Absolute Value Function: Example and Test </td></tr><tr valign="top"><td>
<a href="fadbad_det_lu.cpp.htm" target="_top">fadbad_det_lu.cpp</a><br> </td><td> Fadbad Speed: Gradient of Determinant Using Lu Factorization </td></tr><tr valign="top"><td>
<a href="fadbad_det_minor.cpp.htm" target="_top">fadbad_det_minor.cpp</a><br> </td><td> Fadbad Speed: Gradient of Determinant by Minor Expansion </td></tr><tr valign="top"><td>
<a href="fadbad_mat_mul.cpp.htm" target="_top">fadbad_mat_mul.cpp</a><br> </td><td> Fadbad Speed: Matrix Multiplication </td></tr><tr valign="top"><td>
<a href="fadbad_ode.cpp.htm" target="_top">fadbad_ode.cpp</a><br> </td><td> Fadbad Speed: Ode </td></tr><tr valign="top"><td>
<a href="fadbad_poly.cpp.htm" target="_top">fadbad_poly.cpp</a><br> </td><td> Fadbad Speed: Second Derivative of a Polynomial </td></tr><tr valign="top"><td>
<a href="fadbad_prefix.htm" target="_top">fadbad_prefix</a><br> </td><td> Including Fadbad Speed Tests </td></tr><tr valign="top"><td>
<a href="fadbad_sparse_hessian.cpp.htm" target="_top">fadbad_sparse_hessian.cpp</a><br> </td><td> Fadbad Speed: Sparse Hessian </td></tr><tr valign="top"><td>
<a href="fadbad_sparse_jacobian.cpp.htm" target="_top">fadbad_sparse_jacobian.cpp</a><br> </td><td> Fadbad Speed: sparse_jacobian </td></tr><tr valign="top"><td>
<a href="faq.htm" target="_top">Faq</a><br> </td><td> Frequently Asked Questions and Answers </td></tr><tr valign="top"><td>
<a href="for_hes_sparsity.htm" target="_top">for_hes_sparsity</a><br> </td><td> Forward Mode Hessian Sparsity Patterns </td></tr><tr valign="top"><td>
<a href="for_hes_sparsity.cpp.htm" target="_top">for_hes_sparsity.cpp</a><br> </td><td> Forward Mode Hessian Sparsity: Example and Test </td></tr><tr valign="top"><td>
<a href="for_jac_sparsity.htm" target="_top">for_jac_sparsity</a><br> </td><td> Forward Mode Jacobian Sparsity Patterns </td></tr><tr valign="top"><td>
<a href="for_jac_sparsity.cpp.htm" target="_top">for_jac_sparsity.cpp</a><br> </td><td> Forward Mode Jacobian Sparsity: Example and Test </td></tr><tr valign="top"><td>
<a href="for_one.cpp.htm" target="_top">for_one.cpp</a><br> </td><td> First Order Partial Driver: Example and Test </td></tr><tr valign="top"><td>
<a href="for_sparse_hes.cpp.htm" target="_top">for_sparse_hes.cpp</a><br> </td><td> Forward Mode Hessian Sparsity: Example and Test </td></tr><tr valign="top"><td>
<a href="for_sparse_jac.cpp.htm" target="_top">for_sparse_jac.cpp</a><br> </td><td> Forward Mode Jacobian Sparsity: Example and Test </td></tr><tr valign="top"><td>
<a href="for_two.cpp.htm" target="_top">for_two.cpp</a><br> </td><td> Subset of Second Order Partials: Example and Test </td></tr><tr valign="top"><td>
<a href="forone.htm" target="_top">ForOne</a><br> </td><td> First Order Partial Derivative: Driver Routine </td></tr><tr valign="top"><td>
<a href="forsparsehes.htm" target="_top">ForSparseHes</a><br> </td><td> Hessian Sparsity Pattern: Forward Mode </td></tr><tr valign="top"><td>
<a href="forsparsejac.htm" target="_top">ForSparseJac</a><br> </td><td> Jacobian Sparsity Pattern: Forward Mode </td></tr><tr valign="top"><td>
<a href="fortwo.htm" target="_top">ForTwo</a><br> </td><td> Forward Mode Second Partial Derivative Driver </td></tr><tr valign="top"><td>
<a href="forward.htm" target="_top">Forward</a><br> </td><td> Forward Mode </td></tr><tr valign="top"><td>
<a href="forward.cpp.htm" target="_top">forward.cpp</a><br> </td><td> Forward Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="forward_dir.htm" target="_top">forward_dir</a><br> </td><td> Multiple Directions Forward Mode </td></tr><tr valign="top"><td>
<a href="forward_dir.cpp.htm" target="_top">forward_dir.cpp</a><br> </td><td> Forward Mode: Example and Test of Multiple Directions </td></tr><tr valign="top"><td>
<a href="forward_one.htm" target="_top">forward_one</a><br> </td><td> First Order Forward Mode: Derivative Values </td></tr><tr valign="top"><td>
<a href="forward_order.htm" target="_top">forward_order</a><br> </td><td> Multiple Order Forward Mode </td></tr><tr valign="top"><td>
<a href="forward_order.cpp.htm" target="_top">forward_order.cpp</a><br> </td><td> Forward Mode: Example and Test of Multiple Orders </td></tr><tr valign="top"><td>
<a href="forward_two.htm" target="_top">forward_two</a><br> </td><td> Second Order Forward Mode: Derivative Values </td></tr><tr valign="top"><td>
<a href="forward_zero.htm" target="_top">forward_zero</a><br> </td><td> Zero Order Forward Mode: Function Values </td></tr><tr valign="top"><td>
<a href="forwardtheory.htm" target="_top">ForwardTheory</a><br> </td><td> The Theory of Forward Mode </td></tr><tr valign="top"><td>
<a href="from_graph.htm" target="_top">from_graph</a><br> </td><td> ADFun Object Corresponding to a CppAD Graph </td></tr><tr valign="top"><td>
<a href="from_json.htm" target="_top">from_json</a><br> </td><td> ADFun Object Corresponding to a Json AD Graph </td></tr><tr valign="top"><td>
<a href="from_json.cpp.htm" target="_top">from_json.cpp</a><br> </td><td> Convert Jason Graph to an ADFun Object: Example and Test </td></tr><tr valign="top"><td>
<a href="fun_assign.cpp.htm" target="_top">fun_assign.cpp</a><br> </td><td> ADFun Assignment: Example and Test </td></tr><tr valign="top"><td>
<a href="fun_check.cpp.htm" target="_top">fun_check.cpp</a><br> </td><td> ADFun Check and Re-Tape: Example and Test </td></tr><tr valign="top"><td>
<a href="fun_property.htm" target="_top">fun_property</a><br> </td><td> ADFun Function Properties </td></tr><tr valign="top"><td>
<a href="fun_property.cpp.htm" target="_top">fun_property.cpp</a><br> </td><td> ADFun Function Properties: Example and Test </td></tr><tr valign="top"><td>
<a href="funcheck.htm" target="_top">FunCheck</a><br> </td><td> Check an ADFun Sequence of Operations </td></tr><tr valign="top"><td>
<a href="funconstruct.htm" target="_top">FunConstruct</a><br> </td><td> Construct an ADFun Object and Stop Recording </td></tr><tr valign="top"><td>
<a href="function_name.htm" target="_top">function_name</a><br> </td><td> Setting and Getting a Function's Name </td></tr><tr valign="top"><td>
<a href="function_name.cpp.htm" target="_top">function_name.cpp</a><br> </td><td> ADFun Function Name: Example and Test </td></tr><tr valign="top"><td>
<a href="fundeprecated.htm" target="_top">FunDeprecated</a><br> </td><td> ADFun Object Deprecated Member Functions </td></tr><tr valign="top"><td>

<b><big><a name="G">G</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="general.htm" target="_top">General</a><br> </td><td> General Examples </td></tr><tr valign="top"><td>
<a href="general.cpp.htm" target="_top">general.cpp</a><br> </td><td> CppAD Examples and Tests </td></tr><tr valign="top"><td>
<a href="get_adolc.sh.htm" target="_top">get_adolc.sh</a><br> </td><td> Download and Install Adolc in Build Directory </td></tr><tr valign="top"><td>
<a href="get_colpack.sh.htm" target="_top">get_colpack.sh</a><br> </td><td> Download and Install ColPack in Build Directory </td></tr><tr valign="top"><td>
<a href="get_cppadcg.sh.htm" target="_top">get_cppadcg.sh</a><br> </td><td> Download and Install CppADCodeGen in Build Directory </td></tr><tr valign="top"><td>
<a href="get_eigen.sh.htm" target="_top">get_eigen.sh</a><br> </td><td> Download and Install Eigen in Build Directory </td></tr><tr valign="top"><td>
<a href="get_fadbad.sh.htm" target="_top">get_fadbad.sh</a><br> </td><td> Download and Install Fadbad in Build Directory </td></tr><tr valign="top"><td>
<a href="get_ipopt.sh.htm" target="_top">get_ipopt.sh</a><br> </td><td> Download and Install Ipopt in Build Directory </td></tr><tr valign="top"><td>
<a href="get_optional.sh.htm" target="_top">get_optional.sh</a><br> </td><td> Download and Install The CppAD Optional Packages </td></tr><tr valign="top"><td>
<a href="get_sacado.sh.htm" target="_top">get_sacado.sh</a><br> </td><td> Download and Install Sacado in Build Directory </td></tr><tr valign="top"><td>
<a href="get_started.cpp.htm" target="_top">get_started.cpp</a><br> </td><td> Getting Started Using CppAD to Compute Derivatives </td></tr><tr valign="top"><td>
<a href="glossary.htm" target="_top">glossary</a><br> </td><td> Glossary </td></tr><tr valign="top"><td>
<a href="graph_add_op.cpp.htm" target="_top">graph_add_op.cpp</a><br> </td><td> C++ AD Graph add Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="graph_atom4_op.cpp.htm" target="_top">graph_atom4_op.cpp</a><br> </td><td> C++ AD Graph Atomic Four Functions: Example and Test </td></tr><tr valign="top"><td>
<a href="graph_atom_op.cpp.htm" target="_top">graph_atom_op.cpp</a><br> </td><td> C++ AD Graph Atomic Three Functions: Example and Test </td></tr><tr valign="top"><td>
<a href="graph_azmul_op.cpp.htm" target="_top">graph_azmul_op.cpp</a><br> </td><td> C++ AD Graph add Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="graph_cexp_op.cpp.htm" target="_top">graph_cexp_op.cpp</a><br> </td><td> C++ AD Graph Conditional Expressions: Example and Test </td></tr><tr valign="top"><td>
<a href="graph_comp_op.cpp.htm" target="_top">graph_comp_op.cpp</a><br> </td><td> C++ AD Graph Comparison Operators: Example and Test </td></tr><tr valign="top"><td>
<a href="graph_discrete_op.cpp.htm" target="_top">graph_discrete_op.cpp</a><br> </td><td> C++ AD Graph add Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="graph_div_op.cpp.htm" target="_top">graph_div_op.cpp</a><br> </td><td> C++ AD Graph div Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="graph_mul_op.cpp.htm" target="_top">graph_mul_op.cpp</a><br> </td><td> C++ AD Graph mul Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="graph_op_enum.htm" target="_top">graph_op_enum</a><br> </td><td> C++ AD Graph Operator Enum Type </td></tr><tr valign="top"><td>
<a href="graph_pow_op.cpp.htm" target="_top">graph_pow_op.cpp</a><br> </td><td> C++ AD Graph pow Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="graph_print_op.cpp.htm" target="_top">graph_print_op.cpp</a><br> </td><td> C++ AD Graph print Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="graph_sub_op.cpp.htm" target="_top">graph_sub_op.cpp</a><br> </td><td> C++ AD Graph sub Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="graph_sum_op.cpp.htm" target="_top">graph_sum_op.cpp</a><br> </td><td> C++ AD Graph sum Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="graph_unary_op.cpp.htm" target="_top">graph_unary_op.cpp</a><br> </td><td> Graph Unary Operator: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="H">H</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="harmonic.cpp.htm" target="_top">harmonic.cpp</a><br> </td><td> Multi-Threading Harmonic Summation Example / Test </td></tr><tr valign="top"><td>
<a href="harmonic_common.htm" target="_top">harmonic_common</a><br> </td><td> Common Variables Used by Multi-threading Sum of 1/i </td></tr><tr valign="top"><td>
<a href="harmonic_setup.htm" target="_top">harmonic_setup</a><br> </td><td> Set Up Multi-threading Sum of 1/i </td></tr><tr valign="top"><td>
<a href="harmonic_sum.htm" target="_top">harmonic_sum</a><br> </td><td> Multi-Threaded Implementation of Summation of 1/i </td></tr><tr valign="top"><td>
<a href="harmonic_takedown.htm" target="_top">harmonic_takedown</a><br> </td><td> Take Down Multi-threading Sum of 1/i </td></tr><tr valign="top"><td>
<a href="harmonic_time.htm" target="_top">harmonic_time</a><br> </td><td> Timing Test of Multi-Threaded Summation of 1/i </td></tr><tr valign="top"><td>
<a href="harmonic_worker.htm" target="_top">harmonic_worker</a><br> </td><td> Do One Thread's Work for Sum of 1/i </td></tr><tr valign="top"><td>
<a href="hes_lagrangian.cpp.htm" target="_top">hes_lagrangian.cpp</a><br> </td><td> Hessian of Lagrangian and ADFun Default Constructor: Example and Test </td></tr><tr valign="top"><td>
<a href="hes_lu_det.cpp.htm" target="_top">hes_lu_det.cpp</a><br> </td><td> Gradient of Determinant Using LU Factorization: Example and Test </td></tr><tr valign="top"><td>
<a href="hes_minor_det.cpp.htm" target="_top">hes_minor_det.cpp</a><br> </td><td> Gradient of Determinant Using Expansion by Minors: Example and Test </td></tr><tr valign="top"><td>
<a href="hes_times_dir.cpp.htm" target="_top">hes_times_dir.cpp</a><br> </td><td> Hessian Times Direction: Example and Test </td></tr><tr valign="top"><td>
<a href="hessian.htm" target="_top">Hessian</a><br> </td><td> Hessian: Easy Driver </td></tr><tr valign="top"><td>
<a href="hessian.cpp.htm" target="_top">hessian.cpp</a><br> </td><td> Hessian: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="I">I</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="include_deprecated.htm" target="_top">include_deprecated</a><br> </td><td> Deprecated Include Files </td></tr><tr valign="top"><td>
<a href="independent.htm" target="_top">Independent</a><br> </td><td> Declare Independent Variables and Start Recording </td></tr><tr valign="top"><td>
<a href="independent.cpp.htm" target="_top">independent.cpp</a><br> </td><td> Independent and ADFun Constructor: Example and Test </td></tr><tr valign="top"><td>
<a href="index_sort.htm" target="_top">index_sort</a><br> </td><td> Returns Indices that Sort a Vector </td></tr><tr valign="top"><td>
<a href="index_sort.cpp.htm" target="_top">index_sort.cpp</a><br> </td><td> Index Sort: Example and Test </td></tr><tr valign="top"><td>
<a href="install.htm" target="_top">Install</a><br> </td><td> CppAD Download, Test, and Install Instructions </td></tr><tr valign="top"><td>
<a href="integer.htm" target="_top">Integer</a><br> </td><td> Convert From AD to Integer </td></tr><tr valign="top"><td>
<a href="integer.cpp.htm" target="_top">integer.cpp</a><br> </td><td> Convert From AD to Integer: Example and Test </td></tr><tr valign="top"><td>
<a href="interface2c.cpp.htm" target="_top">interface2c.cpp</a><br> </td><td> Interfacing to C: Example and Test </td></tr><tr valign="top"><td>
<a href="interp_onetape.cpp.htm" target="_top">interp_onetape.cpp</a><br> </td><td> Interpolation With Out Retaping: Example and Test </td></tr><tr valign="top"><td>
<a href="interp_retape.cpp.htm" target="_top">interp_retape.cpp</a><br> </td><td> Interpolation With Retaping: Example and Test </td></tr><tr valign="top"><td>
<a href="introduction.htm" target="_top">Introduction</a><br> </td><td> An Introduction by Example to Algorithmic Differentiation </td></tr><tr valign="top"><td>
<a href="ipopt.htm" target="_top">ipopt</a><br> </td><td> Including Ipopt Library Examples, Tests, and pkg-config </td></tr><tr valign="top"><td>
<a href="ipopt_solve.htm" target="_top">ipopt_solve</a><br> </td><td> Use Ipopt to Solve a Nonlinear Programming Problem </td></tr><tr valign="top"><td>
<a href="ipopt_solve_get_started.cpp.htm" target="_top">ipopt_solve_get_started.cpp</a><br> </td><td> Nonlinear Programming Using CppAD and Ipopt: Example and Test </td></tr><tr valign="top"><td>
<a href="ipopt_solve_ode_inverse.cpp.htm" target="_top">ipopt_solve_ode_inverse.cpp</a><br> </td><td> ODE Inverse Problem Definitions: Source Code </td></tr><tr valign="top"><td>
<a href="ipopt_solve_retape.cpp.htm" target="_top">ipopt_solve_retape.cpp</a><br> </td><td> Nonlinear Programming Retaping: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="J">J</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="jac_lu_det.cpp.htm" target="_top">jac_lu_det.cpp</a><br> </td><td> Gradient of Determinant Using Lu Factorization: Example and Test </td></tr><tr valign="top"><td>
<a href="jac_minor_det.cpp.htm" target="_top">jac_minor_det.cpp</a><br> </td><td> Gradient of Determinant Using Expansion by Minors: Example and Test </td></tr><tr valign="top"><td>
<a href="jacobian.htm" target="_top">Jacobian</a><br> </td><td> Jacobian: Driver Routine </td></tr><tr valign="top"><td>
<a href="jacobian.cpp.htm" target="_top">jacobian.cpp</a><br> </td><td> Jacobian: Example and Test </td></tr><tr valign="top"><td>
<a href="json_ad_graph.htm" target="_top">json_ad_graph</a><br> </td><td> Json Representation of an AD Graph </td></tr><tr valign="top"><td>
<a href="json_add_op.cpp.htm" target="_top">json_add_op.cpp</a><br> </td><td> Json add Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="json_atom4_op.cpp.htm" target="_top">json_atom4_op.cpp</a><br> </td><td> Json Atomic Function Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="json_atom_op.cpp.htm" target="_top">json_atom_op.cpp</a><br> </td><td> Json Atomic Function Three Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="json_azmul_op.cpp.htm" target="_top">json_azmul_op.cpp</a><br> </td><td> Json azmul Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="json_cexp_op.cpp.htm" target="_top">json_cexp_op.cpp</a><br> </td><td> Json Conditional Expressions: Example and Test </td></tr><tr valign="top"><td>
<a href="json_comp_op.cpp.htm" target="_top">json_comp_op.cpp</a><br> </td><td> Json Comparison Operators: Example and Test </td></tr><tr valign="top"><td>
<a href="json_discrete_op.cpp.htm" target="_top">json_discrete_op.cpp</a><br> </td><td> Json add Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="json_div_op.cpp.htm" target="_top">json_div_op.cpp</a><br> </td><td> Json div Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="json_get_started.cpp.htm" target="_top">json_get_started.cpp</a><br> </td><td> Json Get Started: Example and Test </td></tr><tr valign="top"><td>
<a href="json_graph_op.htm" target="_top">json_graph_op</a><br> </td><td> Json AD Graph Operator Definitions </td></tr><tr valign="top"><td>
<a href="json_mul_op.cpp.htm" target="_top">json_mul_op.cpp</a><br> </td><td> Json mul Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="json_pow_op.cpp.htm" target="_top">json_pow_op.cpp</a><br> </td><td> Json pow Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="json_print_op.cpp.htm" target="_top">json_print_op.cpp</a><br> </td><td> Json AD Graph print Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="json_sparse.cpp.htm" target="_top">json_sparse.cpp</a><br> </td><td> Json Representation of a Sparse Matrix: Example and Test </td></tr><tr valign="top"><td>
<a href="json_sub_op.cpp.htm" target="_top">json_sub_op.cpp</a><br> </td><td> Json sub Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="json_sum_op.cpp.htm" target="_top">json_sum_op.cpp</a><br> </td><td> Json sum Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="json_unary_op.cpp.htm" target="_top">json_unary_op.cpp</a><br> </td><td> Json Unary Operators: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="L">L</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="license.htm" target="_top">License</a><br> </td><td> Your License for the CppAD Software </td></tr><tr valign="top"><td>
<a href="link_det_lu.htm" target="_top">link_det_lu</a><br> </td><td> Speed Testing Gradient of Determinant Using Lu Factorization </td></tr><tr valign="top"><td>
<a href="link_det_minor.htm" target="_top">link_det_minor</a><br> </td><td> Speed Testing Gradient of Determinant by Minor Expansion </td></tr><tr valign="top"><td>
<a href="link_mat_mul.htm" target="_top">link_mat_mul</a><br> </td><td> Speed Testing Derivative of Matrix Multiply </td></tr><tr valign="top"><td>
<a href="link_ode.htm" target="_top">link_ode</a><br> </td><td> Speed Testing the Jacobian of Ode Solution </td></tr><tr valign="top"><td>
<a href="link_poly.htm" target="_top">link_poly</a><br> </td><td> Speed Testing Second Derivative of a Polynomial </td></tr><tr valign="top"><td>
<a href="link_routines.htm" target="_top">link_routines</a><br> </td><td> Package Specific Speed Test Linking Routines </td></tr><tr valign="top"><td>
<a href="link_sparse_hessian.htm" target="_top">link_sparse_hessian</a><br> </td><td> Link to Speed Test Sparse Hessian </td></tr><tr valign="top"><td>
<a href="link_sparse_jacobian.htm" target="_top">link_sparse_jacobian</a><br> </td><td> Speed Testing Sparse Jacobians </td></tr><tr valign="top"><td>
<a href="listallexamples.htm" target="_top">ListAllExamples</a><br> </td><td> List All (Except Deprecated) CppAD Examples </td></tr><tr valign="top"><td>
<a href="log.htm" target="_top">log</a><br> </td><td> The Exponential Function: log </td></tr><tr valign="top"><td>
<a href="log.cpp.htm" target="_top">log.cpp</a><br> </td><td> The AD log Function: Example and Test </td></tr><tr valign="top"><td>
<a href="log10.htm" target="_top">log10</a><br> </td><td> The Base 10 Logarithm Function: log10 </td></tr><tr valign="top"><td>
<a href="log10.cpp.htm" target="_top">log10.cpp</a><br> </td><td> The AD log10 Function: Example and Test </td></tr><tr valign="top"><td>
<a href="log1p.htm" target="_top">log1p</a><br> </td><td> The Logarithm of One Plus Argument: log1p </td></tr><tr valign="top"><td>
<a href="log1p.cpp.htm" target="_top">log1p.cpp</a><br> </td><td> The AD log1p Function: Example and Test </td></tr><tr valign="top"><td>
<a href="log_forward.htm" target="_top">log_forward</a><br> </td><td> Logarithm Function Forward Mode Theory </td></tr><tr valign="top"><td>
<a href="log_reverse.htm" target="_top">log_reverse</a><br> </td><td> Logarithm Function Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="lp_box.htm" target="_top">lp_box</a><br> </td><td> abs_normal: Solve a Linear Program With Box Constraints </td></tr><tr valign="top"><td>
<a href="lp_box.cpp.htm" target="_top">lp_box.cpp</a><br> </td><td> abs_normal lp_box: Example and Test </td></tr><tr valign="top"><td>
<a href="lp_box.hpp.htm" target="_top">lp_box.hpp</a><br> </td><td> lp_box Source Code </td></tr><tr valign="top"><td>
<a href="lu_factor.cpp.htm" target="_top">lu_factor.cpp</a><br> </td><td> LuFactor: Example and Test </td></tr><tr valign="top"><td>
<a href="lu_factor.hpp.htm" target="_top">lu_factor.hpp</a><br> </td><td> Source: LuFactor </td></tr><tr valign="top"><td>
<a href="lu_invert.cpp.htm" target="_top">lu_invert.cpp</a><br> </td><td> LuInvert: Example and Test </td></tr><tr valign="top"><td>
<a href="lu_invert.hpp.htm" target="_top">lu_invert.hpp</a><br> </td><td> Source: LuInvert </td></tr><tr valign="top"><td>
<a href="lu_ratio.cpp.htm" target="_top">lu_ratio.cpp</a><br> </td><td> LuRatio: Example and Test </td></tr><tr valign="top"><td>
<a href="lu_solve.cpp.htm" target="_top">lu_solve.cpp</a><br> </td><td> LuSolve With Complex Arguments: Example and Test </td></tr><tr valign="top"><td>
<a href="lu_solve.hpp.htm" target="_top">lu_solve.hpp</a><br> </td><td> Source: LuSolve </td></tr><tr valign="top"><td>
<a href="lu_vec_ad.cpp.htm" target="_top">lu_vec_ad.cpp</a><br> </td><td> Lu Factor and Solve with Recorded Pivoting </td></tr><tr valign="top"><td>
<a href="lu_vec_ad_ok.cpp.htm" target="_top">lu_vec_ad_ok.cpp</a><br> </td><td> Lu Factor and Solve With Recorded Pivoting: Example and Test </td></tr><tr valign="top"><td>
<a href="ludetandsolve.htm" target="_top">LuDetAndSolve</a><br> </td><td> Compute Determinants and Solve Equations by LU Factorization </td></tr><tr valign="top"><td>
<a href="lufactor.htm" target="_top">LuFactor</a><br> </td><td> LU Factorization of A Square Matrix </td></tr><tr valign="top"><td>
<a href="luinvert.htm" target="_top">LuInvert</a><br> </td><td> Invert an LU Factored Equation </td></tr><tr valign="top"><td>
<a href="luratio.htm" target="_top">LuRatio</a><br> </td><td> LU Factorization of A Square Matrix and Stability Calculation </td></tr><tr valign="top"><td>
<a href="lusolve.htm" target="_top">LuSolve</a><br> </td><td> Compute Determinant and Solve Linear Equations </td></tr><tr valign="top"><td>

<b><big><a name="M">M</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="main_compare_c.htm" target="_top">main_compare_c</a><br> </td><td> Main Program For Comparing C and C++ Speed </td></tr><tr valign="top"><td>
<a href="mat_sum_sq.htm" target="_top">mat_sum_sq</a><br> </td><td> Sum Elements of a Matrix Times Itself </td></tr><tr valign="top"><td>
<a href="mat_sum_sq.cpp.htm" target="_top">mat_sum_sq.cpp</a><br> </td><td> Sum of the Elements of the Square of a Matrix: Example and Test </td></tr><tr valign="top"><td>
<a href="mat_sum_sq.hpp.htm" target="_top">mat_sum_sq.hpp</a><br> </td><td> Source: mat_sum_sq </td></tr><tr valign="top"><td>
<a href="memory_leak.htm" target="_top">memory_leak</a><br> </td><td> Memory Leak Detection </td></tr><tr valign="top"><td>
<a href="min_nso_linear.htm" target="_top">min_nso_linear</a><br> </td><td> Non-Smooth Optimization Using Abs-normal Linear Approximations </td></tr><tr valign="top"><td>
<a href="min_nso_linear.cpp.htm" target="_top">min_nso_linear.cpp</a><br> </td><td> abs_normal min_nso_linear: Example and Test </td></tr><tr valign="top"><td>
<a href="min_nso_linear.hpp.htm" target="_top">min_nso_linear.hpp</a><br> </td><td> min_nso_linear Source Code </td></tr><tr valign="top"><td>
<a href="min_nso_quad.htm" target="_top">min_nso_quad</a><br> </td><td> Non-Smooth Optimization Using Abs-normal Quadratic Approximations </td></tr><tr valign="top"><td>
<a href="min_nso_quad.cpp.htm" target="_top">min_nso_quad.cpp</a><br> </td><td> abs_normal min_nso_quad: Example and Test </td></tr><tr valign="top"><td>
<a href="min_nso_quad.hpp.htm" target="_top">min_nso_quad.hpp</a><br> </td><td> min_nso_quad Source Code </td></tr><tr valign="top"><td>
<a href="mul.cpp.htm" target="_top">mul.cpp</a><br> </td><td> AD Binary Multiplication: Example and Test </td></tr><tr valign="top"><td>
<a href="mul_eq.cpp.htm" target="_top">mul_eq.cpp</a><br> </td><td> AD Compound Assignment Multiplication: Example and Test </td></tr><tr valign="top"><td>
<a href="mul_level.htm" target="_top">mul_level</a><br> </td><td> Using Multiple Levels of AD </td></tr><tr valign="top"><td>
<a href="mul_level.cpp.htm" target="_top">mul_level.cpp</a><br> </td><td> Multiple Level of AD: Example and Test </td></tr><tr valign="top"><td>
<a href="mul_level_adolc.cpp.htm" target="_top">mul_level_adolc.cpp</a><br> </td><td> Using Adolc with Multiple Levels of Taping: Example and Test </td></tr><tr valign="top"><td>
<a href="mul_level_adolc_ode.cpp.htm" target="_top">mul_level_adolc_ode.cpp</a><br> </td><td> Taylor's Ode Solver: A Multi-Level Adolc Example and Test </td></tr><tr valign="top"><td>
<a href="mul_level_ode.cpp.htm" target="_top">mul_level_ode.cpp</a><br> </td><td> Taylor's Ode Solver: A Multi-Level AD Example and Test </td></tr><tr valign="top"><td>
<a href="multi_atomic_three.cpp.htm" target="_top">multi_atomic_three.cpp</a><br> </td><td> Multi-Threading atomic_three Example / Test </td></tr><tr valign="top"><td>
<a href="multi_atomic_three_common.htm" target="_top">multi_atomic_three_common</a><br> </td><td> Multi-Threaded atomic_three Common Information </td></tr><tr valign="top"><td>
<a href="multi_atomic_three_run.htm" target="_top">multi_atomic_three_run</a><br> </td><td> Run Multi-Threaded atomic_three Calculation </td></tr><tr valign="top"><td>
<a href="multi_atomic_three_setup.htm" target="_top">multi_atomic_three_setup</a><br> </td><td> Multi-Threaded atomic_three Set Up </td></tr><tr valign="top"><td>
<a href="multi_atomic_three_takedown.htm" target="_top">multi_atomic_three_takedown</a><br> </td><td> Multi-Threaded atomic_three Take Down </td></tr><tr valign="top"><td>
<a href="multi_atomic_three_time.htm" target="_top">multi_atomic_three_time</a><br> </td><td> Timing Test for Multi-Threaded atomic_three Calculation </td></tr><tr valign="top"><td>
<a href="multi_atomic_three_user.htm" target="_top">multi_atomic_three_user</a><br> </td><td> Defines a atomic_three Operation that Computes Square Root </td></tr><tr valign="top"><td>
<a href="multi_atomic_three_worker.htm" target="_top">multi_atomic_three_worker</a><br> </td><td> Multi-Threaded atomic_three Worker </td></tr><tr valign="top"><td>
<a href="multi_atomic_two.cpp.htm" target="_top">multi_atomic_two.cpp</a><br> </td><td> Multi-Threading atomic_two Example / Test </td></tr><tr valign="top"><td>
<a href="multi_atomic_two_common.htm" target="_top">multi_atomic_two_common</a><br> </td><td> Multi-Threaded atomic_two Common Information </td></tr><tr valign="top"><td>
<a href="multi_atomic_two_run.htm" target="_top">multi_atomic_two_run</a><br> </td><td> Run Multi-Threaded atomic_two Calculation </td></tr><tr valign="top"><td>
<a href="multi_atomic_two_setup.htm" target="_top">multi_atomic_two_setup</a><br> </td><td> Multi-Threaded atomic_two Set Up </td></tr><tr valign="top"><td>
<a href="multi_atomic_two_takedown.htm" target="_top">multi_atomic_two_takedown</a><br> </td><td> Multi-Threaded atomic_two Take Down </td></tr><tr valign="top"><td>
<a href="multi_atomic_two_time.htm" target="_top">multi_atomic_two_time</a><br> </td><td> Timing Test for Multi-Threaded atomic_two Calculation </td></tr><tr valign="top"><td>
<a href="multi_atomic_two_user.htm" target="_top">multi_atomic_two_user</a><br> </td><td> Defines a atomic_two Operation that Computes Square Root </td></tr><tr valign="top"><td>
<a href="multi_atomic_two_worker.htm" target="_top">multi_atomic_two_worker</a><br> </td><td> Multi-Threaded atomic_two Worker </td></tr><tr valign="top"><td>
<a href="multi_chkpoint_one.cpp.htm" target="_top">multi_chkpoint_one.cpp</a><br> </td><td> Multi-Threading chkpoint_one Example / Test </td></tr><tr valign="top"><td>
<a href="multi_chkpoint_one_algo.htm" target="_top">multi_chkpoint_one_algo</a><br> </td><td> chkpoint_one Algorithm that Computes Square Root </td></tr><tr valign="top"><td>
<a href="multi_chkpoint_one_common.htm" target="_top">multi_chkpoint_one_common</a><br> </td><td> Multi-Threaded chkpoint_one Common Information </td></tr><tr valign="top"><td>
<a href="multi_chkpoint_one_run.htm" target="_top">multi_chkpoint_one_run</a><br> </td><td> Run Multi-Threaded chkpoint_one Calculation </td></tr><tr valign="top"><td>
<a href="multi_chkpoint_one_setup.htm" target="_top">multi_chkpoint_one_setup</a><br> </td><td> Multi-Threaded chkpoint_one Set Up </td></tr><tr valign="top"><td>
<a href="multi_chkpoint_one_takedown.htm" target="_top">multi_chkpoint_one_takedown</a><br> </td><td> Multi-Threaded chkpoint_one Take Down </td></tr><tr valign="top"><td>
<a href="multi_chkpoint_one_time.htm" target="_top">multi_chkpoint_one_time</a><br> </td><td> Timing Test for Multi-Threaded chkpoint_one Calculation </td></tr><tr valign="top"><td>
<a href="multi_chkpoint_one_worker.htm" target="_top">multi_chkpoint_one_worker</a><br> </td><td> Multi-Threaded chkpoint_one Worker </td></tr><tr valign="top"><td>
<a href="multi_chkpoint_two.cpp.htm" target="_top">multi_chkpoint_two.cpp</a><br> </td><td> Multi-Threading chkpoint_two Example / Test </td></tr><tr valign="top"><td>
<a href="multi_chkpoint_two_algo.htm" target="_top">multi_chkpoint_two_algo</a><br> </td><td> chkpoint_two Algorithm that Computes Square Root </td></tr><tr valign="top"><td>
<a href="multi_chkpoint_two_common.htm" target="_top">multi_chkpoint_two_common</a><br> </td><td> Multi-Threaded chkpoint_two Common Information </td></tr><tr valign="top"><td>
<a href="multi_chkpoint_two_run.htm" target="_top">multi_chkpoint_two_run</a><br> </td><td> Run Multi-Threaded chkpoint_two Calculation </td></tr><tr valign="top"><td>
<a href="multi_chkpoint_two_setup.htm" target="_top">multi_chkpoint_two_setup</a><br> </td><td> Multi-Threaded chkpoint_two Set Up </td></tr><tr valign="top"><td>
<a href="multi_chkpoint_two_takedown.htm" target="_top">multi_chkpoint_two_takedown</a><br> </td><td> Multi-Threaded chkpoint_two Take Down </td></tr><tr valign="top"><td>
<a href="multi_chkpoint_two_time.htm" target="_top">multi_chkpoint_two_time</a><br> </td><td> Timing Test for Multi-Threaded chkpoint_two Calculation </td></tr><tr valign="top"><td>
<a href="multi_chkpoint_two_worker.htm" target="_top">multi_chkpoint_two_worker</a><br> </td><td> Multi-Threaded chkpoint_two Worker </td></tr><tr valign="top"><td>
<a href="multi_newton.cpp.htm" target="_top">multi_newton.cpp</a><br> </td><td> Multi-Threaded Newton Method Example / Test </td></tr><tr valign="top"><td>
<a href="multi_newton_common.htm" target="_top">multi_newton_common</a><br> </td><td> Common Variables use by Multi-Threaded Newton Method </td></tr><tr valign="top"><td>
<a href="multi_newton_run.htm" target="_top">multi_newton_run</a><br> </td><td> A Multi-Threaded Newton's Method </td></tr><tr valign="top"><td>
<a href="multi_newton_setup.htm" target="_top">multi_newton_setup</a><br> </td><td> Set Up Multi-Threaded Newton Method </td></tr><tr valign="top"><td>
<a href="multi_newton_takedown.htm" target="_top">multi_newton_takedown</a><br> </td><td> Take Down Multi-threaded Newton Method </td></tr><tr valign="top"><td>
<a href="multi_newton_time.htm" target="_top">multi_newton_time</a><br> </td><td> Timing Test of Multi-Threaded Newton Method </td></tr><tr valign="top"><td>
<a href="multi_newton_worker.htm" target="_top">multi_newton_worker</a><br> </td><td> Do One Thread's Work for Multi-Threaded Newton Method </td></tr><tr valign="top"><td>
<a href="multi_thread.htm" target="_top">multi_thread</a><br> </td><td> Using CppAD in a Multi-Threading Environment </td></tr><tr valign="top"><td>

<b><big><a name="N">N</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="nan.htm" target="_top">nan</a><br> </td><td> Obtain Nan or Determine if a Value is Nan </td></tr><tr valign="top"><td>
<a href="nan.cpp.htm" target="_top">nan.cpp</a><br> </td><td> nan: Example and Test </td></tr><tr valign="top"><td>
<a href="near_equal.cpp.htm" target="_top">near_equal.cpp</a><br> </td><td> NearEqual Function: Example and Test </td></tr><tr valign="top"><td>
<a href="near_equal_ext.cpp.htm" target="_top">near_equal_ext.cpp</a><br> </td><td> Compare AD with Base Objects: Example and Test </td></tr><tr valign="top"><td>
<a href="nearequal.htm" target="_top">NearEqual</a><br> </td><td> Determine if Two Values Are Nearly Equal </td></tr><tr valign="top"><td>
<a href="nearequalext.htm" target="_top">NearEqualExt</a><br> </td><td> Compare AD and Base Objects for Nearly Equal </td></tr><tr valign="top"><td>
<a href="new_dynamic.htm" target="_top">new_dynamic</a><br> </td><td> Change the Dynamic Parameters </td></tr><tr valign="top"><td>
<a href="new_dynamic.cpp.htm" target="_top">new_dynamic.cpp</a><br> </td><td> Dynamic Parameters: Example and Test </td></tr><tr valign="top"><td>
<a href="num_limits.cpp.htm" target="_top">num_limits.cpp</a><br> </td><td> Numeric Limits: Example and Test </td></tr><tr valign="top"><td>
<a href="number_skip.htm" target="_top">number_skip</a><br> </td><td> Number of Variables that Can be Skipped </td></tr><tr valign="top"><td>
<a href="number_skip.cpp.htm" target="_top">number_skip.cpp</a><br> </td><td> Number of Variables That Can be Skipped: Example and Test </td></tr><tr valign="top"><td>
<a href="numeric_ad.htm" target="_top">numeric_ad</a><br> </td><td> Some Numerical AD Utilities </td></tr><tr valign="top"><td>
<a href="numeric_limits.htm" target="_top">numeric_limits</a><br> </td><td> Numeric Limits For an AD and Base Types </td></tr><tr valign="top"><td>
<a href="numeric_type.cpp.htm" target="_top">numeric_type.cpp</a><br> </td><td> The NumericType: Example and Test </td></tr><tr valign="top"><td>
<a href="numerictype.htm" target="_top">NumericType</a><br> </td><td> Definition of a Numeric Type </td></tr><tr valign="top"><td>

<b><big><a name="O">O</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="ode_err_control.cpp.htm" target="_top">ode_err_control.cpp</a><br> </td><td> OdeErrControl: Example and Test </td></tr><tr valign="top"><td>
<a href="ode_err_maxabs.cpp.htm" target="_top">ode_err_maxabs.cpp</a><br> </td><td> OdeErrControl: Example and Test Using Maxabs Argument </td></tr><tr valign="top"><td>
<a href="ode_evaluate.htm" target="_top">ode_evaluate</a><br> </td><td> Evaluate a Function Defined in Terms of an ODE </td></tr><tr valign="top"><td>
<a href="ode_evaluate.cpp.htm" target="_top">ode_evaluate.cpp</a><br> </td><td> ode_evaluate: Example and test </td></tr><tr valign="top"><td>
<a href="ode_evaluate.hpp.htm" target="_top">ode_evaluate.hpp</a><br> </td><td> Source: ode_evaluate </td></tr><tr valign="top"><td>
<a href="ode_gear.cpp.htm" target="_top">ode_gear.cpp</a><br> </td><td> OdeGear: Example and Test </td></tr><tr valign="top"><td>
<a href="ode_gear_control.cpp.htm" target="_top">ode_gear_control.cpp</a><br> </td><td> OdeGearControl: Example and Test </td></tr><tr valign="top"><td>
<a href="ode_stiff.cpp.htm" target="_top">ode_stiff.cpp</a><br> </td><td> A Stiff Ode: Example and Test </td></tr><tr valign="top"><td>
<a href="odeerrcontrol.htm" target="_top">OdeErrControl</a><br> </td><td> An Error Controller for ODE Solvers </td></tr><tr valign="top"><td>
<a href="odegear.htm" target="_top">OdeGear</a><br> </td><td> An Arbitrary Order Gear Method </td></tr><tr valign="top"><td>
<a href="odegearcontrol.htm" target="_top">OdeGearControl</a><br> </td><td> An Error Controller for Gear's Ode Solvers </td></tr><tr valign="top"><td>
<a href="old_max_num_threads.htm" target="_top">old_max_num_threads</a><br> </td><td> Set Maximum Number of Threads for omp_alloc Allocator </td></tr><tr valign="top"><td>
<a href="omp_alloc.htm" target="_top">omp_alloc</a><br> </td><td> A Quick OpenMP Memory Allocator Used by CppAD </td></tr><tr valign="top"><td>
<a href="omp_available.htm" target="_top">omp_available</a><br> </td><td> Amount of Memory Available for Quick Use by a Thread </td></tr><tr valign="top"><td>
<a href="omp_create_array.htm" target="_top">omp_create_array</a><br> </td><td> Allocate Memory and Create A Raw Array </td></tr><tr valign="top"><td>
<a href="omp_delete_array.htm" target="_top">omp_delete_array</a><br> </td><td> Return A Raw Array to The Available Memory for a Thread </td></tr><tr valign="top"><td>
<a href="omp_efficient.htm" target="_top">omp_efficient</a><br> </td><td> Check If A Memory Allocation is Efficient for Another Use </td></tr><tr valign="top"><td>
<a href="omp_free_available.htm" target="_top">omp_free_available</a><br> </td><td> Free Memory Currently Available for Quick Use by a Thread </td></tr><tr valign="top"><td>
<a href="omp_get_memory.htm" target="_top">omp_get_memory</a><br> </td><td> Get At Least A Specified Amount of Memory </td></tr><tr valign="top"><td>
<a href="omp_get_thread_num.htm" target="_top">omp_get_thread_num</a><br> </td><td> Get the Current OpenMP Thread Number </td></tr><tr valign="top"><td>
<a href="omp_in_parallel.htm" target="_top">omp_in_parallel</a><br> </td><td> Is The Current Execution in OpenMP Parallel Mode </td></tr><tr valign="top"><td>
<a href="omp_inuse.htm" target="_top">omp_inuse</a><br> </td><td> Amount of Memory a Thread is Currently Using </td></tr><tr valign="top"><td>
<a href="omp_max_num_threads.htm" target="_top">omp_max_num_threads</a><br> </td><td> Set and Get Maximum Number of Threads for omp_alloc Allocator </td></tr><tr valign="top"><td>
<a href="omp_max_thread.htm" target="_top">omp_max_thread</a><br> </td><td> OpenMP Parallel Setup </td></tr><tr valign="top"><td>
<a href="omp_return_memory.htm" target="_top">omp_return_memory</a><br> </td><td> Return Memory to omp_alloc </td></tr><tr valign="top"><td>
<a href="opt_val_hes.htm" target="_top">opt_val_hes</a><br> </td><td> Jacobian and Hessian of Optimal Values </td></tr><tr valign="top"><td>
<a href="opt_val_hes.cpp.htm" target="_top">opt_val_hes.cpp</a><br> </td><td> opt_val_hes: Example and Test </td></tr><tr valign="top"><td>
<a href="optimize.htm" target="_top">optimize</a><br> </td><td> Optimize an ADFun Object Tape </td></tr><tr valign="top"><td>
<a href="optimize_compare_op.cpp.htm" target="_top">optimize_compare_op.cpp</a><br> </td><td> Optimize Comparison Operators: Example and Test </td></tr><tr valign="top"><td>
<a href="optimize_conditional_skip.cpp.htm" target="_top">optimize_conditional_skip.cpp</a><br> </td><td> Optimize Conditional Expressions: Example and Test </td></tr><tr valign="top"><td>
<a href="optimize_cumulative_sum.cpp.htm" target="_top">optimize_cumulative_sum.cpp</a><br> </td><td> Optimize Cumulative Sum Operations: Example and Test </td></tr><tr valign="top"><td>
<a href="optimize_forward_active.cpp.htm" target="_top">optimize_forward_active.cpp</a><br> </td><td> Optimize Forward Activity Analysis: Example and Test </td></tr><tr valign="top"><td>
<a href="optimize_nest_conditional.cpp.htm" target="_top">optimize_nest_conditional.cpp</a><br> </td><td> Optimize Nested Conditional Expressions: Example and Test </td></tr><tr valign="top"><td>
<a href="optimize_print_for.cpp.htm" target="_top">optimize_print_for.cpp</a><br> </td><td> Optimize Print Forward Operators: Example and Test </td></tr><tr valign="top"><td>
<a href="optimize_reverse_active.cpp.htm" target="_top">optimize_reverse_active.cpp</a><br> </td><td> Optimize Reverse Activity Analysis: Example and Test </td></tr><tr valign="top"><td>
<a href="optimize_twice.cpp.htm" target="_top">optimize_twice.cpp</a><br> </td><td> Optimizing Twice: Example and Test </td></tr><tr valign="top"><td>
<a href="other_adfun.htm" target="_top">other_adfun</a><br> </td><td> Other Ways to Create an ADFun Object </td></tr><tr valign="top"><td>

<b><big><a name="P">P</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="parallel_ad.htm" target="_top">parallel_ad</a><br> </td><td> Enable AD Calculations During Parallel Mode </td></tr><tr valign="top"><td>
<a href="pkgconfig.htm" target="_top">pkgconfig</a><br> </td><td> CppAD pkg-config Files </td></tr><tr valign="top"><td>
<a href="poly.htm" target="_top">Poly</a><br> </td><td> Evaluate a Polynomial or its Derivative </td></tr><tr valign="top"><td>
<a href="poly.cpp.htm" target="_top">poly.cpp</a><br> </td><td> Polynomial Evaluation: Example and Test </td></tr><tr valign="top"><td>
<a href="poly.hpp.htm" target="_top">poly.hpp</a><br> </td><td> Source: Poly </td></tr><tr valign="top"><td>
<a href="pow.htm" target="_top">pow</a><br> </td><td> The AD Power Function </td></tr><tr valign="top"><td>
<a href="pow.cpp.htm" target="_top">pow.cpp</a><br> </td><td> The AD Power Function: Example and Test </td></tr><tr valign="top"><td>
<a href="pow_forward.htm" target="_top">pow_forward</a><br> </td><td> Power Function Forward Mode Theory </td></tr><tr valign="top"><td>
<a href="pow_int.htm" target="_top">pow_int</a><br> </td><td> The Integer Power Function </td></tr><tr valign="top"><td>
<a href="pow_int.cpp.htm" target="_top">pow_int.cpp</a><br> </td><td> The Pow Integer Exponent: Example and Test </td></tr><tr valign="top"><td>
<a href="pow_nan.cpp.htm" target="_top">pow_nan.cpp</a><br> </td><td> pow: Nan in Result of Pow Function: Example and Test </td></tr><tr valign="top"><td>
<a href="pow_reverse.htm" target="_top">pow_reverse</a><br> </td><td> Power Function Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="preprocessor.htm" target="_top">preprocessor</a><br> </td><td> CppAD API Preprocessor Symbols </td></tr><tr valign="top"><td>
<a href="print_for_cout.cpp.htm" target="_top">print_for_cout.cpp</a><br> </td><td> Printing During Forward Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="print_for_string.cpp.htm" target="_top">print_for_string.cpp</a><br> </td><td> Print During Zero Order Forward Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="print_graph.cpp.htm" target="_top">print_graph.cpp</a><br> </td><td> Print a C++ AD Graph: Example and Test </td></tr><tr valign="top"><td>
<a href="printfor.htm" target="_top">PrintFor</a><br> </td><td> Printing AD Values During Forward Mode </td></tr><tr valign="top"><td>

<b><big><a name="Q">Q</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="qp_box.htm" target="_top">qp_box</a><br> </td><td> abs_normal: Solve a Quadratic Program With Box Constraints </td></tr><tr valign="top"><td>
<a href="qp_box.cpp.htm" target="_top">qp_box.cpp</a><br> </td><td> abs_normal qp_box: Example and Test </td></tr><tr valign="top"><td>
<a href="qp_box.hpp.htm" target="_top">qp_box.hpp</a><br> </td><td> qp_box Source Code </td></tr><tr valign="top"><td>
<a href="qp_interior.htm" target="_top">qp_interior</a><br> </td><td> Solve a Quadratic Program Using Interior Point Method </td></tr><tr valign="top"><td>
<a href="qp_interior.cpp.htm" target="_top">qp_interior.cpp</a><br> </td><td> abs_normal qp_interior: Example and Test </td></tr><tr valign="top"><td>
<a href="qp_interior.hpp.htm" target="_top">qp_interior.hpp</a><br> </td><td> qp_interior Source Code </td></tr><tr valign="top"><td>

<b><big><a name="R">R</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="rc_sparsity.cpp.htm" target="_top">rc_sparsity.cpp</a><br> </td><td> Preferred Sparsity Patterns: Row and Column Indices: Example and Test </td></tr><tr valign="top"><td>
<a href="record_adfun.htm" target="_top">record_adfun</a><br> </td><td> Create an ADFun Object by Recording an Operation Sequence </td></tr><tr valign="top"><td>
<a href="repeat_det_by_minor_c.htm" target="_top">repeat_det_by_minor_c</a><br> </td><td> Repeat det_by_minor Routine A Specified Number of Times </td></tr><tr valign="top"><td>
<a href="research.htm" target="_top">research</a><br> </td><td> Research and Software Engineering Projects Related to CppAD </td></tr><tr valign="top"><td>
<a href="rev_checkpoint.cpp.htm" target="_top">rev_checkpoint.cpp</a><br> </td><td> Reverse Mode General Case (Checkpointing): Example and Test </td></tr><tr valign="top"><td>
<a href="rev_hes_sparsity.htm" target="_top">rev_hes_sparsity</a><br> </td><td> Reverse Mode Hessian Sparsity Patterns </td></tr><tr valign="top"><td>
<a href="rev_hes_sparsity.cpp.htm" target="_top">rev_hes_sparsity.cpp</a><br> </td><td> Reverse Mode Hessian Sparsity: Example and Test </td></tr><tr valign="top"><td>
<a href="rev_jac_sparsity.htm" target="_top">rev_jac_sparsity</a><br> </td><td> Reverse Mode Jacobian Sparsity Patterns </td></tr><tr valign="top"><td>
<a href="rev_jac_sparsity.cpp.htm" target="_top">rev_jac_sparsity.cpp</a><br> </td><td> Reverse Mode Jacobian Sparsity: Example and Test </td></tr><tr valign="top"><td>
<a href="rev_one.cpp.htm" target="_top">rev_one.cpp</a><br> </td><td> First Order Derivative Driver: Example and Test </td></tr><tr valign="top"><td>
<a href="rev_sparse_hes.cpp.htm" target="_top">rev_sparse_hes.cpp</a><br> </td><td> Reverse Mode Hessian Sparsity: Example and Test </td></tr><tr valign="top"><td>
<a href="rev_sparse_jac.cpp.htm" target="_top">rev_sparse_jac.cpp</a><br> </td><td> Reverse Mode Jacobian Sparsity: Example and Test </td></tr><tr valign="top"><td>
<a href="rev_two.cpp.htm" target="_top">rev_two.cpp</a><br> </td><td> Second Partials Reverse Driver: Example and Test </td></tr><tr valign="top"><td>
<a href="reverse.htm" target="_top">Reverse</a><br> </td><td> Reverse Mode </td></tr><tr valign="top"><td>
<a href="reverse_any.htm" target="_top">reverse_any</a><br> </td><td> Any Order Reverse Mode </td></tr><tr valign="top"><td>
<a href="reverse_identity.htm" target="_top">reverse_identity</a><br> </td><td> An Important Reverse Mode Identity </td></tr><tr valign="top"><td>
<a href="reverse_one.htm" target="_top">reverse_one</a><br> </td><td> First Order Reverse Mode </td></tr><tr valign="top"><td>
<a href="reverse_one.cpp.htm" target="_top">reverse_one.cpp</a><br> </td><td> First Order Reverse Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="reverse_three.cpp.htm" target="_top">reverse_three.cpp</a><br> </td><td> Third Order Reverse Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="reverse_two.htm" target="_top">reverse_two</a><br> </td><td> Second Order Reverse Mode </td></tr><tr valign="top"><td>
<a href="reverse_two.cpp.htm" target="_top">reverse_two.cpp</a><br> </td><td> Second Order Reverse ModeExample and Test </td></tr><tr valign="top"><td>
<a href="reversetheory.htm" target="_top">ReverseTheory</a><br> </td><td> The Theory of Reverse Mode </td></tr><tr valign="top"><td>
<a href="revone.htm" target="_top">RevOne</a><br> </td><td> First Order Derivative: Driver Routine </td></tr><tr valign="top"><td>
<a href="revsparsehes.htm" target="_top">RevSparseHes</a><br> </td><td> Hessian Sparsity Pattern: Reverse Mode </td></tr><tr valign="top"><td>
<a href="revsparsejac.htm" target="_top">RevSparseJac</a><br> </td><td> Jacobian Sparsity Pattern: Reverse Mode </td></tr><tr valign="top"><td>
<a href="revtwo.htm" target="_top">RevTwo</a><br> </td><td> Reverse Mode Second Partial Derivative Driver </td></tr><tr valign="top"><td>
<a href="romberg_one.cpp.htm" target="_top">romberg_one.cpp</a><br> </td><td> One Dimensional Romberg Integration: Example and Test </td></tr><tr valign="top"><td>
<a href="rombergmul.htm" target="_top">RombergMul</a><br> </td><td> Multi-dimensional Romberg Integration </td></tr><tr valign="top"><td>
<a href="rombergmul.cpp.htm" target="_top">Rombergmul.cpp</a><br> </td><td> One Dimensional Romberg Integration: Example and Test </td></tr><tr valign="top"><td>
<a href="rombergone.htm" target="_top">RombergOne</a><br> </td><td> One DimensionalRomberg Integration </td></tr><tr valign="top"><td>
<a href="rosen34.htm" target="_top">Rosen34</a><br> </td><td> A 3rd and 4th Order Rosenbrock ODE Solver </td></tr><tr valign="top"><td>
<a href="rosen_34.cpp.htm" target="_top">rosen_34.cpp</a><br> </td><td> rosen_34: Example and Test </td></tr><tr valign="top"><td>
<a href="runge45.htm" target="_top">Runge45</a><br> </td><td> An Embedded 4th and 5th Order Runge-Kutta ODE Solver </td></tr><tr valign="top"><td>
<a href="runge45_1.cpp.htm" target="_top">runge45_1.cpp</a><br> </td><td> Runge45: Example and Test </td></tr><tr valign="top"><td>
<a href="runge_45.cpp.htm" target="_top">runge_45.cpp</a><br> </td><td> Runge45: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="S">S</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="sacado_det_lu.cpp.htm" target="_top">sacado_det_lu.cpp</a><br> </td><td> Sacado Speed: Gradient of Determinant Using Lu Factorization </td></tr><tr valign="top"><td>
<a href="sacado_det_minor.cpp.htm" target="_top">sacado_det_minor.cpp</a><br> </td><td> Sacado Speed: Gradient of Determinant by Minor Expansion </td></tr><tr valign="top"><td>
<a href="sacado_mat_mul.cpp.htm" target="_top">sacado_mat_mul.cpp</a><br> </td><td> Sacado Speed: Matrix Multiplication </td></tr><tr valign="top"><td>
<a href="sacado_ode.cpp.htm" target="_top">sacado_ode.cpp</a><br> </td><td> Sacado Speed: Gradient of Ode Solution </td></tr><tr valign="top"><td>
<a href="sacado_poly.cpp.htm" target="_top">sacado_poly.cpp</a><br> </td><td> Sacado Speed: Second Derivative of a Polynomial </td></tr><tr valign="top"><td>
<a href="sacado_prefix.htm" target="_top">sacado_prefix</a><br> </td><td> Including Sacado Speed Tests </td></tr><tr valign="top"><td>
<a href="sacado_sparse_hessian.cpp.htm" target="_top">sacado_sparse_hessian.cpp</a><br> </td><td> Sacado Speed: Sparse Hessian </td></tr><tr valign="top"><td>
<a href="sacado_sparse_jacobian.cpp.htm" target="_top">sacado_sparse_jacobian.cpp</a><br> </td><td> Sacado Speed: sparse_jacobian </td></tr><tr valign="top"><td>
<a href="set_union.htm" target="_top">set_union</a><br> </td><td> Union of Standard Sets </td></tr><tr valign="top"><td>
<a href="set_union.cpp.htm" target="_top">set_union.cpp</a><br> </td><td> Set Union: Example and Test </td></tr><tr valign="top"><td>
<a href="sign.htm" target="_top">sign</a><br> </td><td> The Sign: sign </td></tr><tr valign="top"><td>
<a href="sign.cpp.htm" target="_top">sign.cpp</a><br> </td><td> Sign Function: Example and Test </td></tr><tr valign="top"><td>
<a href="simple_ad_bthread.cpp.htm" target="_top">simple_ad_bthread.cpp</a><br> </td><td> A Simple Boost Threading AD: Example and Test </td></tr><tr valign="top"><td>
<a href="simple_ad_openmp.cpp.htm" target="_top">simple_ad_openmp.cpp</a><br> </td><td> A Simple OpenMP AD: Example and Test </td></tr><tr valign="top"><td>
<a href="simple_ad_pthread.cpp.htm" target="_top">simple_ad_pthread.cpp</a><br> </td><td> A Simple pthread AD: Example and Test </td></tr><tr valign="top"><td>
<a href="simple_vector.cpp.htm" target="_top">simple_vector.cpp</a><br> </td><td> Simple Vector Template Class: Example and Test </td></tr><tr valign="top"><td>
<a href="simplevector.htm" target="_top">SimpleVector</a><br> </td><td> C++ Concept: A Simple Vector </td></tr><tr valign="top"><td>
<a href="simplex_method.htm" target="_top">simplex_method</a><br> </td><td> abs_normal: Solve a Linear Program Using Simplex Method </td></tr><tr valign="top"><td>
<a href="simplex_method.cpp.htm" target="_top">simplex_method.cpp</a><br> </td><td> abs_normal simplex_method: Example and Test </td></tr><tr valign="top"><td>
<a href="simplex_method.hpp.htm" target="_top">simplex_method.hpp</a><br> </td><td> simplex_method Source Code </td></tr><tr valign="top"><td>
<a href="sin.htm" target="_top">sin</a><br> </td><td> The Sine Function: sin </td></tr><tr valign="top"><td>
<a href="sin.cpp.htm" target="_top">sin.cpp</a><br> </td><td> The AD sin Function: Example and Test </td></tr><tr valign="top"><td>
<a href="sin_cos_forward.htm" target="_top">sin_cos_forward</a><br> </td><td> Trigonometric and Hyperbolic Sine and Cosine Forward Theory </td></tr><tr valign="top"><td>
<a href="sin_cos_reverse.htm" target="_top">sin_cos_reverse</a><br> </td><td> Trigonometric and Hyperbolic Sine and Cosine Reverse Theory </td></tr><tr valign="top"><td>
<a href="sinh.htm" target="_top">sinh</a><br> </td><td> The Hyperbolic Sine Function: sinh </td></tr><tr valign="top"><td>
<a href="sinh.cpp.htm" target="_top">sinh.cpp</a><br> </td><td> The AD sinh Function: Example and Test </td></tr><tr valign="top"><td>
<a href="size_order.htm" target="_top">size_order</a><br> </td><td> Number Taylor Coefficient Orders Currently Stored </td></tr><tr valign="top"><td>
<a href="sparse2eigen.htm" target="_top">sparse2eigen</a><br> </td><td> Convert A CppAD Sparse Matrix to an Eigen Sparse Matrix </td></tr><tr valign="top"><td>
<a href="sparse2eigen.cpp.htm" target="_top">sparse2eigen.cpp</a><br> </td><td> Converting CppAD Sparse Matrix to Eigen Format: Example and Test </td></tr><tr valign="top"><td>
<a href="sparse_derivative.htm" target="_top">sparse_derivative</a><br> </td><td> Calculating Sparse Derivatives </td></tr><tr valign="top"><td>
<a href="sparse_hes.htm" target="_top">sparse_hes</a><br> </td><td> Computing Sparse Hessians </td></tr><tr valign="top"><td>
<a href="sparse_hes.cpp.htm" target="_top">sparse_hes.cpp</a><br> </td><td> Computing Sparse Hessian: Example and Test </td></tr><tr valign="top"><td>
<a href="sparse_hes_fun.htm" target="_top">sparse_hes_fun</a><br> </td><td> Evaluate a Function That Has a Sparse Hessian </td></tr><tr valign="top"><td>
<a href="sparse_hes_fun.cpp.htm" target="_top">sparse_hes_fun.cpp</a><br> </td><td> sparse_hes_fun: Example and test </td></tr><tr valign="top"><td>
<a href="sparse_hes_fun.hpp.htm" target="_top">sparse_hes_fun.hpp</a><br> </td><td> Source: sparse_hes_fun </td></tr><tr valign="top"><td>
<a href="sparse_hessian.htm" target="_top">sparse_hessian</a><br> </td><td> Sparse Hessian </td></tr><tr valign="top"><td>
<a href="sparse_hessian.cpp.htm" target="_top">sparse_hessian.cpp</a><br> </td><td> Sparse Hessian: Example and Test </td></tr><tr valign="top"><td>
<a href="sparse_jac.htm" target="_top">sparse_jac</a><br> </td><td> Computing Sparse Jacobians </td></tr><tr valign="top"><td>
<a href="sparse_jac_for.cpp.htm" target="_top">sparse_jac_for.cpp</a><br> </td><td> Computing Sparse Jacobian Using Forward Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="sparse_jac_fun.htm" target="_top">sparse_jac_fun</a><br> </td><td> Evaluate a Function That Has a Sparse Jacobian </td></tr><tr valign="top"><td>
<a href="sparse_jac_fun.cpp.htm" target="_top">sparse_jac_fun.cpp</a><br> </td><td> sparse_jac_fun: Example and test </td></tr><tr valign="top"><td>
<a href="sparse_jac_fun.hpp.htm" target="_top">sparse_jac_fun.hpp</a><br> </td><td> Source: sparse_jac_fun </td></tr><tr valign="top"><td>
<a href="sparse_jac_rev.cpp.htm" target="_top">sparse_jac_rev.cpp</a><br> </td><td> Computing Sparse Jacobian Using Reverse Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="sparse_jacobian.htm" target="_top">sparse_jacobian</a><br> </td><td> Sparse Jacobian </td></tr><tr valign="top"><td>
<a href="sparse_jacobian.cpp.htm" target="_top">sparse_jacobian.cpp</a><br> </td><td> Sparse Jacobian: Example and Test </td></tr><tr valign="top"><td>
<a href="sparse_rc.htm" target="_top">sparse_rc</a><br> </td><td> Row and Column Index Sparsity Patterns </td></tr><tr valign="top"><td>
<a href="sparse_rc.cpp.htm" target="_top">sparse_rc.cpp</a><br> </td><td> sparse_rc: Example and Test </td></tr><tr valign="top"><td>
<a href="sparse_rcv.htm" target="_top">sparse_rcv</a><br> </td><td> Sparse Matrix Row, Column, Value Representation </td></tr><tr valign="top"><td>
<a href="sparse_rcv.cpp.htm" target="_top">sparse_rcv.cpp</a><br> </td><td> sparse_rcv: Example and Test </td></tr><tr valign="top"><td>
<a href="sparse_sub_hes.cpp.htm" target="_top">sparse_sub_hes.cpp</a><br> </td><td> Subset of a Sparse Hessian: Example and Test </td></tr><tr valign="top"><td>
<a href="sparsity_pattern.htm" target="_top">sparsity_pattern</a><br> </td><td> Calculating Sparsity Patterns </td></tr><tr valign="top"><td>
<a href="sparsity_sub.cpp.htm" target="_top">sparsity_sub.cpp</a><br> </td><td> Sparsity Patterns For a Subset of Variables: Example and Test </td></tr><tr valign="top"><td>
<a href="speed.htm" target="_top">speed</a><br> </td><td> Speed Test an Operator Overloading AD Package </td></tr><tr valign="top"><td>
<a href="speed_adolc.htm" target="_top">speed_adolc</a><br> </td><td> Speed Test of Derivatives Using Adolc </td></tr><tr valign="top"><td>
<a href="speed_cppad.htm" target="_top">speed_cppad</a><br> </td><td> Speed Test Derivatives Using CppAD </td></tr><tr valign="top"><td>
<a href="speed_cppadcg.htm" target="_top">speed_cppadcg</a><br> </td><td> Speed Test Derivatives Using Cppadcg </td></tr><tr valign="top"><td>
<a href="speed_double.htm" target="_top">speed_double</a><br> </td><td> Speed Test of Functions in Double </td></tr><tr valign="top"><td>
<a href="speed_example.cpp.htm" target="_top">speed_example.cpp</a><br> </td><td> Run the Speed Examples </td></tr><tr valign="top"><td>
<a href="speed_fadbad.htm" target="_top">speed_fadbad</a><br> </td><td> Speed Test Derivatives Using Fadbad </td></tr><tr valign="top"><td>
<a href="speed_main.htm" target="_top">speed_main</a><br> </td><td> Running the Speed Test Program </td></tr><tr valign="top"><td>
<a href="speed_program.cpp.htm" target="_top">speed_program.cpp</a><br> </td><td> Example Use of SpeedTest </td></tr><tr valign="top"><td>
<a href="speed_sacado.htm" target="_top">speed_sacado</a><br> </td><td> Speed Test Derivatives Using Sacado </td></tr><tr valign="top"><td>
<a href="speed_test.htm" target="_top">speed_test</a><br> </td><td> Run One Speed Test and Return Results </td></tr><tr valign="top"><td>
<a href="speed_test.cpp.htm" target="_top">speed_test.cpp</a><br> </td><td> speed_test: Example and test </td></tr><tr valign="top"><td>
<a href="speed_utility.htm" target="_top">speed_utility</a><br> </td><td> Speed Testing Utilities </td></tr><tr valign="top"><td>
<a href="speed_xpackage.htm" target="_top">speed_xpackage</a><br> </td><td> Speed Test Example and Template for a New Package </td></tr><tr valign="top"><td>
<a href="speedtest.htm" target="_top">SpeedTest</a><br> </td><td> Run One Speed Test and Print Results </td></tr><tr valign="top"><td>
<a href="sqrt.htm" target="_top">sqrt</a><br> </td><td> The Square Root Function: sqrt </td></tr><tr valign="top"><td>
<a href="sqrt.cpp.htm" target="_top">sqrt.cpp</a><br> </td><td> The AD sqrt Function: Example and Test </td></tr><tr valign="top"><td>
<a href="sqrt_forward.htm" target="_top">sqrt_forward</a><br> </td><td> Square Root Function Forward Mode Theory </td></tr><tr valign="top"><td>
<a href="sqrt_reverse.htm" target="_top">sqrt_reverse</a><br> </td><td> Square Root Function Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="stack_machine.cpp.htm" target="_top">stack_machine.cpp</a><br> </td><td> Example Differentiating a Stack Machine Interpreter </td></tr><tr valign="top"><td>
<a href="sub.cpp.htm" target="_top">sub.cpp</a><br> </td><td> AD Binary Subtraction: Example and Test </td></tr><tr valign="top"><td>
<a href="sub_eq.cpp.htm" target="_top">sub_eq.cpp</a><br> </td><td> AD Compound Assignment Subtraction: Example and Test </td></tr><tr valign="top"><td>
<a href="sub_sparse_hes.cpp.htm" target="_top">sub_sparse_hes.cpp</a><br> </td><td> Computing Sparse Hessian for a Subset of Variables </td></tr><tr valign="top"><td>
<a href="subgraph_hes2jac.cpp.htm" target="_top">subgraph_hes2jac.cpp</a><br> </td><td> Sparse Hessian Using Subgraphs and Jacobian: Example and Test </td></tr><tr valign="top"><td>
<a href="subgraph_jac_rev.htm" target="_top">subgraph_jac_rev</a><br> </td><td> Compute Sparse Jacobians Using Subgraphs </td></tr><tr valign="top"><td>
<a href="subgraph_jac_rev.cpp.htm" target="_top">subgraph_jac_rev.cpp</a><br> </td><td> Computing Sparse Jacobian Using Reverse Mode: Example and Test </td></tr><tr valign="top"><td>
<a href="subgraph_reverse.htm" target="_top">subgraph_reverse</a><br> </td><td> Reverse Mode Using Subgraphs </td></tr><tr valign="top"><td>
<a href="subgraph_reverse.cpp.htm" target="_top">subgraph_reverse.cpp</a><br> </td><td> Computing Reverse Mode on Subgraphs: Example and Test </td></tr><tr valign="top"><td>
<a href="subgraph_sparsity.htm" target="_top">subgraph_sparsity</a><br> </td><td> Subgraph Dependency Sparsity Patterns </td></tr><tr valign="top"><td>
<a href="subgraph_sparsity.cpp.htm" target="_top">subgraph_sparsity.cpp</a><br> </td><td> Subgraph Dependency Sparsity Patterns: Example and Test </td></tr><tr valign="top"><td>
<a href="switch_var_dyn.cpp.htm" target="_top">switch_var_dyn.cpp</a><br> </td><td> Switching Between Variables and Dynamic Parameters: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="T">T</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="ta_available.htm" target="_top">ta_available</a><br> </td><td> Amount of Memory Available for Quick Use by a Thread </td></tr><tr valign="top"><td>
<a href="ta_create_array.htm" target="_top">ta_create_array</a><br> </td><td> Allocate An Array and Call Default Constructor for its Elements </td></tr><tr valign="top"><td>
<a href="ta_delete_array.htm" target="_top">ta_delete_array</a><br> </td><td> Deallocate An Array and Call Destructor for its Elements </td></tr><tr valign="top"><td>
<a href="ta_free_all.htm" target="_top">ta_free_all</a><br> </td><td> Free All Memory That Was Allocated for Use by thread_alloc </td></tr><tr valign="top"><td>
<a href="ta_free_available.htm" target="_top">ta_free_available</a><br> </td><td> Free Memory Currently Available for Quick Use by a Thread </td></tr><tr valign="top"><td>
<a href="ta_get_memory.htm" target="_top">ta_get_memory</a><br> </td><td> Get At Least A Specified Amount of Memory </td></tr><tr valign="top"><td>
<a href="ta_hold_memory.htm" target="_top">ta_hold_memory</a><br> </td><td> Control When Thread Alloc Retains Memory For Future Use </td></tr><tr valign="top"><td>
<a href="ta_in_parallel.htm" target="_top">ta_in_parallel</a><br> </td><td> Is The Current Execution in Parallel Mode </td></tr><tr valign="top"><td>
<a href="ta_inuse.htm" target="_top">ta_inuse</a><br> </td><td> Amount of Memory a Thread is Currently Using </td></tr><tr valign="top"><td>
<a href="ta_num_threads.htm" target="_top">ta_num_threads</a><br> </td><td> Get Number of Threads </td></tr><tr valign="top"><td>
<a href="ta_parallel_setup.htm" target="_top">ta_parallel_setup</a><br> </td><td> Setup thread_alloc For Use in Multi-Threading Environment </td></tr><tr valign="top"><td>
<a href="ta_return_memory.htm" target="_top">ta_return_memory</a><br> </td><td> Return Memory to thread_alloc </td></tr><tr valign="top"><td>
<a href="ta_thread_num.htm" target="_top">ta_thread_num</a><br> </td><td> Get the Current Thread Number </td></tr><tr valign="top"><td>
<a href="tan.htm" target="_top">tan</a><br> </td><td> The Tangent Function: tan </td></tr><tr valign="top"><td>
<a href="tan.cpp.htm" target="_top">tan.cpp</a><br> </td><td> The AD tan Function: Example and Test </td></tr><tr valign="top"><td>
<a href="tan_forward.htm" target="_top">tan_forward</a><br> </td><td> Tangent and Hyperbolic Tangent Forward Taylor Polynomial Theory </td></tr><tr valign="top"><td>
<a href="tan_reverse.htm" target="_top">tan_reverse</a><br> </td><td> Tangent and Hyperbolic Tangent Reverse Mode Theory </td></tr><tr valign="top"><td>
<a href="tanh.htm" target="_top">tanh</a><br> </td><td> The Hyperbolic Tangent Function: tanh </td></tr><tr valign="top"><td>
<a href="tanh.cpp.htm" target="_top">tanh.cpp</a><br> </td><td> The AD tanh Function: Example and Test </td></tr><tr valign="top"><td>
<a href="tape_index.cpp.htm" target="_top">tape_index.cpp</a><br> </td><td> Taping Array Index Operation: Example and Test </td></tr><tr valign="top"><td>
<a href="taylor_ode.htm" target="_top">taylor_ode</a><br> </td><td> AD Theory for Solving ODE's Using Taylor's Method </td></tr><tr valign="top"><td>
<a href="taylor_ode.cpp.htm" target="_top">taylor_ode.cpp</a><br> </td><td> Taylor's Ode Solver: An Example and Test </td></tr><tr valign="top"><td>
<a href="team_bthread.cpp.htm" target="_top">team_bthread.cpp</a><br> </td><td> Boost Thread Implementation of a Team of AD Threads </td></tr><tr valign="top"><td>
<a href="team_example.cpp.htm" target="_top">team_example.cpp</a><br> </td><td> Using a Team of AD Threads: Example and Test </td></tr><tr valign="top"><td>
<a href="team_openmp.cpp.htm" target="_top">team_openmp.cpp</a><br> </td><td> OpenMP Implementation of a Team of AD Threads </td></tr><tr valign="top"><td>
<a href="team_pthread.cpp.htm" target="_top">team_pthread.cpp</a><br> </td><td> Pthread Implementation of a Team of AD Threads </td></tr><tr valign="top"><td>
<a href="team_thread.hpp.htm" target="_top">team_thread.hpp</a><br> </td><td> Specifications for A Team of AD Threads </td></tr><tr valign="top"><td>
<a href="test_boolofvoid.htm" target="_top">test_boolofvoid</a><br> </td><td> Object that Runs a Group of Tests </td></tr><tr valign="top"><td>
<a href="test_vector.htm" target="_top">test_vector</a><br> </td><td> Choosing The Vector Testing Template Class </td></tr><tr valign="top"><td>
<a href="testvector.htm" target="_top">testvector</a><br> </td><td> Using The CppAD Test Vector Template Class </td></tr><tr valign="top"><td>
<a href="theory.htm" target="_top">Theory</a><br> </td><td> The Theory of Derivative Calculations </td></tr><tr valign="top"><td>
<a href="thread_alloc.htm" target="_top">thread_alloc</a><br> </td><td> A Fast Multi-Threading Memory Allocator </td></tr><tr valign="top"><td>
<a href="thread_alloc.cpp.htm" target="_top">thread_alloc.cpp</a><br> </td><td> Fast Multi-Threading Memory Allocator: Example and Test </td></tr><tr valign="top"><td>
<a href="thread_test.cpp.htm" target="_top">thread_test.cpp</a><br> </td><td> Run Multi-Threading Examples and Speed Tests </td></tr><tr valign="top"><td>
<a href="time_det_by_minor_c.htm" target="_top">time_det_by_minor_c</a><br> </td><td> Determine Amount of Time to Execute det_by_minor </td></tr><tr valign="top"><td>
<a href="time_test.htm" target="_top">time_test</a><br> </td><td> Determine Amount of Time to Execute a Test </td></tr><tr valign="top"><td>
<a href="time_test.cpp.htm" target="_top">time_test.cpp</a><br> </td><td> time_test: Example and test </td></tr><tr valign="top"><td>
<a href="to_graph.htm" target="_top">to_graph</a><br> </td><td> Create a C++ AD Graph Corresponding to an ADFun Object </td></tr><tr valign="top"><td>
<a href="to_json.htm" target="_top">to_json</a><br> </td><td> Json AD Graph Corresponding to an ADFun Object </td></tr><tr valign="top"><td>
<a href="to_json.cpp.htm" target="_top">to_json.cpp</a><br> </td><td> Convert an ADFun Object to a Json AD Graph: Example and Test </td></tr><tr valign="top"><td>
<a href="to_string.htm" target="_top">to_string</a><br> </td><td> Convert Certain Types to a String </td></tr><tr valign="top"><td>
<a href="to_string.cpp.htm" target="_top">to_string.cpp</a><br> </td><td> to_string: Example and Test </td></tr><tr valign="top"><td>
<a href="tracknewdel.htm" target="_top">TrackNewDel</a><br> </td><td> Routines That Track Use of New and Delete </td></tr><tr valign="top"><td>

<b><big><a name="U">U</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="unary_minus.cpp.htm" target="_top">unary_minus.cpp</a><br> </td><td> AD Unary Minus Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="unary_plus.cpp.htm" target="_top">unary_plus.cpp</a><br> </td><td> AD Unary Plus Operator: Example and Test </td></tr><tr valign="top"><td>
<a href="unary_standard_math.htm" target="_top">unary_standard_math</a><br> </td><td> The Unary Standard Math Functions </td></tr><tr valign="top"><td>
<a href="unaryminus.htm" target="_top">UnaryMinus</a><br> </td><td> AD Unary Minus Operator </td></tr><tr valign="top"><td>
<a href="unaryplus.htm" target="_top">UnaryPlus</a><br> </td><td> AD Unary Plus Operator </td></tr><tr valign="top"><td>
<a href="uniform_01.htm" target="_top">uniform_01</a><br> </td><td> Simulate a [0,1] Uniform Random Variate </td></tr><tr valign="top"><td>
<a href="uniform_01.hpp.htm" target="_top">uniform_01.hpp</a><br> </td><td> Source: uniform_01 </td></tr><tr valign="top"><td>
<a href="uniform_01_c.htm" target="_top">uniform_01_c</a><br> </td><td> Simulate a [0,1] Uniform Random Variate </td></tr><tr valign="top"><td>
<a href="utility.htm" target="_top">utility</a><br> </td><td> Some General Purpose Utilities </td></tr><tr valign="top"><td>

<b><big><a name="V">V</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="value.htm" target="_top">Value</a><br> </td><td> Convert From an AD Type to its Base Type </td></tr><tr valign="top"><td>
<a href="value.cpp.htm" target="_top">value.cpp</a><br> </td><td> Convert From AD to its Base Type: Example and Test </td></tr><tr valign="top"><td>
<a href="var2par.htm" target="_top">Var2Par</a><br> </td><td> Convert an AD Variable or Dynamic Parameter to a Constant </td></tr><tr valign="top"><td>
<a href="var2par.cpp.htm" target="_top">var2par.cpp</a><br> </td><td> Convert a Variable or Dynamic Parameter a Constant: Example and Test </td></tr><tr valign="top"><td>
<a href="vec_ad.cpp.htm" target="_top">vec_ad.cpp</a><br> </td><td> AD Vectors that Record Index Operations: Example and Test </td></tr><tr valign="top"><td>
<a href="vecad.htm" target="_top">VecAD</a><br> </td><td> AD Vectors that Record Index Operations </td></tr><tr valign="top"><td>
<a href="vector_bool.cpp.htm" target="_top">vector_bool.cpp</a><br> </td><td> CppAD::vectorBool Class: Example and Test </td></tr><tr valign="top"><td>

<b><big><a name="W">W</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="whats_new.htm" target="_top">whats_new</a><br> </td><td> Changes and Additions to CppAD </td></tr><tr valign="top"><td>
<a href="whats_new_03.htm" target="_top">whats_new_03</a><br> </td><td> Changes and Additions to CppAD During 2003 </td></tr><tr valign="top"><td>
<a href="whats_new_04.htm" target="_top">whats_new_04</a><br> </td><td> Changes and Additions to CppAD During 2004 </td></tr><tr valign="top"><td>
<a href="whats_new_05.htm" target="_top">whats_new_05</a><br> </td><td> Changes and Additions to CppAD During 2005 </td></tr><tr valign="top"><td>
<a href="whats_new_06.htm" target="_top">whats_new_06</a><br> </td><td> Changes and Additions to CppAD During 2006 </td></tr><tr valign="top"><td>
<a href="whats_new_07.htm" target="_top">whats_new_07</a><br> </td><td> Changes and Additions to CppAD During 2007 </td></tr><tr valign="top"><td>
<a href="whats_new_08.htm" target="_top">whats_new_08</a><br> </td><td> Changes and Additions to CppAD During 2008 </td></tr><tr valign="top"><td>
<a href="whats_new_09.htm" target="_top">whats_new_09</a><br> </td><td> Changes and Additions to CppAD During 2009 </td></tr><tr valign="top"><td>
<a href="whats_new_10.htm" target="_top">whats_new_10</a><br> </td><td> Changes and Additions to CppAD During 2010 </td></tr><tr valign="top"><td>
<a href="whats_new_11.htm" target="_top">whats_new_11</a><br> </td><td> Changes and Additions to CppAD During 2011 </td></tr><tr valign="top"><td>
<a href="whats_new_12.htm" target="_top">whats_new_12</a><br> </td><td> CppAD Changes and Additions During 2012 </td></tr><tr valign="top"><td>
<a href="whats_new_13.htm" target="_top">whats_new_13</a><br> </td><td> CppAD Changes and Additions During 2013 </td></tr><tr valign="top"><td>
<a href="whats_new_14.htm" target="_top">whats_new_14</a><br> </td><td> CppAD Changes and Additions During 2014 </td></tr><tr valign="top"><td>
<a href="whats_new_15.htm" target="_top">whats_new_15</a><br> </td><td> CppAD Changes and Additions During 2015 </td></tr><tr valign="top"><td>
<a href="whats_new_16.htm" target="_top">whats_new_16</a><br> </td><td> Changes and Additions to CppAD During 2016 </td></tr><tr valign="top"><td>
<a href="whats_new_17.htm" target="_top">whats_new_17</a><br> </td><td> Changes and Additions to CppAD During 2017 </td></tr><tr valign="top"><td>
<a href="whats_new_18.htm" target="_top">whats_new_18</a><br> </td><td> Changes and Additions to CppAD During 2018 </td></tr><tr valign="top"><td>
<a href="whats_new_19.htm" target="_top">whats_new_19</a><br> </td><td> Changes and Additions to CppAD During 2019 </td></tr><tr valign="top"><td>
<a href="whats_new_20.htm" target="_top">whats_new_20</a><br> </td><td> Changes and Additions to CppAD During 2020 </td></tr><tr valign="top"><td>
<a href="whats_new_21.htm" target="_top">whats_new_21</a><br> </td><td> Changes and Additions to CppAD During 2021 </td></tr><tr valign="top"><td>
<a href="whats_new_22.htm" target="_top">whats_new_22</a><br> </td><td> Changes and Additions to CppAD During 2022 </td></tr><tr valign="top"><td>
<a href="wish_list.htm" target="_top">wish_list</a><br> </td><td> The CppAD Wish List </td></tr><tr valign="top"><td>
<a href="wno_conversion.htm" target="_top">wno_conversion</a><br> </td><td> Suppress Suspect Implicit Conversion Warnings </td></tr><tr valign="top"><td>

<b><big><a name="X">X</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="xpackage_det_lu.cpp.htm" target="_top">xpackage_det_lu.cpp</a><br> </td><td> Xpackage Speed: Gradient of Determinant Using Lu Factorization </td></tr><tr valign="top"><td>
<a href="xpackage_det_minor.cpp.htm" target="_top">xpackage_det_minor.cpp</a><br> </td><td> Xpackage Speed: Gradient of Determinant by Minor Expansion </td></tr><tr valign="top"><td>
<a href="xpackage_mat_mul.cpp.htm" target="_top">xpackage_mat_mul.cpp</a><br> </td><td> Xpackage Speed: Matrix Multiplication </td></tr><tr valign="top"><td>
<a href="xpackage_ode.cpp.htm" target="_top">xpackage_ode.cpp</a><br> </td><td> Xpackage Speed: Ode </td></tr><tr valign="top"><td>
<a href="xpackage_poly.cpp.htm" target="_top">xpackage_poly.cpp</a><br> </td><td> Xpackage Speed: Second Derivative of a Polynomial </td></tr><tr valign="top"><td>
<a href="xpackage_sparse_hessian.cpp.htm" target="_top">xpackage_sparse_hessian.cpp</a><br> </td><td> Xpackage Speed: Sparse Hessian </td></tr><tr valign="top"><td>
<a href="xpackage_sparse_jacobian.cpp.htm" target="_top">xpackage_sparse_jacobian.cpp</a><br> </td><td> Xpackage Speed: sparse_jacobian </td></tr><tr valign="top"><td>

<b><big><a name="Z">Z</a></big></b> </td><td>  </td></tr><tr valign="top"><td>
<a href="zdouble.htm" target="_top">zdouble</a><br> </td><td> zdouble: An AD Base Type With Absolute Zero </td></tr><tr valign="top"><td>
</td></tr></table>

</body>
</html>
