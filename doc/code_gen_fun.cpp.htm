<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>code_gen_fun Class Member  Implementation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="code_gen_fun Class Member  Implementation">
<meta name="keywords" id="keywords" content=" code_gen_fun class member implementation see also source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_code_gen_fun.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="code_gen_fun.hpp.htm" target="_top">Prev</a>
</td><td><a href="exampleutility.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>General</option>
<option>code_gen_fun.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_example_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_general_htm.js'></script>
</td>
<td>code_gen_fun.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>See Also</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>code_gen_fun Class Member  Implementation</big></big></b></center>
<br>
<b><big><a name="See Also" id="See Also">See Also</a></big></b>

<br>
<a href="code_gen_fun.htm" target="_top"><span style='white-space: nowrap'>code_gen_fun</span></a>
, <a href="code_gen_fun.hpp.htm" target="_top"><span style='white-space: nowrap'>code_gen_fun.hpp</span></a>


<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/example/code_gen_fun.hpp&gt;</font>

<i><font color="#9A1900">// ---------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// code_gen_fun fun_name(file_name, cg_name, eval_jac)</font></i>
<i><font color="#9A1900">// ---------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// BEGIN_CTOR_CG_FUN</font></i>
code_gen_fun<font color="#990000">::</font><b><font color="#000000">code_gen_fun</font></b><font color="#990000">(</font>
    <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font>                     file_name  <font color="#990000">,</font>
    CppAD<font color="#990000">::</font>ADFun<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>cg<font color="#990000">::</font>CG<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font> cg_fun     <font color="#990000">,</font>
    <font color="#008080">evaluation_enum</font>                        eval_jac   <font color="#990000">)</font>
<i><font color="#9A1900">// END_CTOR_CG_FUN</font></i>
<font color="#FF0000">{</font>   <i><font color="#9A1900">// Generate source code</font></i>
    CppAD<font color="#990000">::</font>cg<font color="#990000">::</font><font color="#008080">ModelCSourceGen&lt;double&gt;</font> <b><font color="#000000">cgen</font></b><font color="#990000">(</font>cg_fun<font color="#990000">,</font> <font color="#FF0000">"model"</font><font color="#990000">);</font>
    <b><font color="#0000FF">switch</font></b><font color="#990000">(</font>eval_jac<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">case</font></b> none_enum<font color="#990000">:</font>
        <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

        <b><font color="#0000FF">case</font></b> dense_enum<font color="#990000">:</font>
        cgen<font color="#990000">.</font><b><font color="#000000">setCreateJacobian</font></b><font color="#990000">(</font><b><font color="#0000FF">true</font></b><font color="#990000">);</font>
        <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

        <b><font color="#0000FF">case</font></b> sparse_enum<font color="#990000">:</font>
        cgen<font color="#990000">.</font><b><font color="#000000">setCreateSparseJacobian</font></b><font color="#990000">(</font><b><font color="#0000FF">true</font></b><font color="#990000">);</font>
        <b><font color="#0000FF">break</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    CppAD<font color="#990000">::</font>cg<font color="#990000">::</font><font color="#008080">ModelLibraryCSourceGen&lt;double&gt;</font> <b><font color="#000000">libcgen</font></b><font color="#990000">(</font>cgen<font color="#990000">);</font>

    <i><font color="#9A1900">// Compile source, create the library file, and load the library</font></i>
    CppAD<font color="#990000">::</font>cg<font color="#990000">::</font><font color="#008080">DynamicModelLibraryProcessor&lt;double&gt;</font> <b><font color="#000000">proc</font></b><font color="#990000">(</font>libcgen<font color="#990000">,</font> file_name<font color="#990000">);</font>
    CppAD<font color="#990000">::</font>cg<font color="#990000">::</font><font color="#008080">ClangCompiler&lt;double&gt;</font> compiler<font color="#990000">;</font>
    <font color="#009900">bool</font> loadLib <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    dynamic_lib_ <font color="#990000">=</font> proc<font color="#990000">.</font><b><font color="#000000">createDynamicLibrary</font></b><font color="#990000">(</font>compiler<font color="#990000">,</font> loadLib<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// create the model object</font></i>
    model_        <font color="#990000">=</font> dynamic_lib_<font color="#990000">-&gt;</font><b><font color="#000000">model</font></b><font color="#990000">(</font><font color="#FF0000">"model"</font><font color="#990000">);</font>
<font color="#FF0000">}</font>
<i><font color="#9A1900">// ---------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// code_gen_fun fun_name(file_name)</font></i>
<i><font color="#9A1900">// ---------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// BEGIN_CTOR_FILE_NAME</font></i>
code_gen_fun<font color="#990000">::</font><b><font color="#000000">code_gen_fun</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font>  file_name <font color="#990000">)</font>
<i><font color="#9A1900">// END_CTOR_FILE_NAME</font></i>
<font color="#FF0000">{</font>   <i><font color="#9A1900">// file name plus extension used for dynamic libraries on this system</font></i>
    std<font color="#990000">::</font><font color="#008080">string</font> file_name_ext <font color="#990000">=</font> file_name <font color="#990000">+</font>
        CppAD<font color="#990000">::</font>cg<font color="#990000">::</font>system<font color="#990000">::</font>SystemInfo<font color="#990000">&lt;&gt;::</font>DYNAMIC_LIB_EXTENSION<font color="#990000">;</font>

    <i><font color="#9A1900">// load the library</font></i>
    CppAD<font color="#990000">::</font>cg<font color="#990000">::</font>DynamicLib<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;*</font> ptr <font color="#990000">=</font>
        <b><font color="#0000FF">new</font></b> CppAD<font color="#990000">::</font>cg<font color="#990000">::</font>LinuxDynamicLib<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;(</font>file_name_ext<font color="#990000">);</font>
    dynamic_lib_  <font color="#990000">=</font> std<font color="#990000">::</font>unique_ptr<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>cg<font color="#990000">::</font>DynamicLib<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">&gt;(</font>ptr<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// create the model object</font></i>
    model_        <font color="#990000">=</font> dynamic_lib_<font color="#990000">-&gt;</font><b><font color="#000000">model</font></b><font color="#990000">(</font><font color="#FF0000">"model"</font><font color="#990000">);</font>
<font color="#FF0000">}</font>
<i><font color="#9A1900">// ---------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// code_gen_fun fun_name</font></i>
<i><font color="#9A1900">// ---------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// BEGIN_CTOR_VOID</font></i>
code_gen_fun<font color="#990000">::</font><b><font color="#000000">code_gen_fun</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<i><font color="#9A1900">// END_CTOR_VOID</font></i>
<font color="#FF0000">{</font> <font color="#FF0000">}</font>
<i><font color="#9A1900">// --------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// fun_name.swap(other_fun)</font></i>
<i><font color="#9A1900">// --------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// BEGIN_SWAP_OTHER_FUN</font></i>
<font color="#009900">void</font> code_gen_fun<font color="#990000">::</font><b><font color="#000000">swap</font></b><font color="#990000">(</font>code_gen_fun<font color="#990000">&amp;</font> other_fun<font color="#990000">)</font>
<i><font color="#9A1900">// END_SWAP_OTHER_FUN</font></i>
<font color="#FF0000">{</font>   std<font color="#990000">::</font><b><font color="#000000">swap</font></b><font color="#990000">(</font>dynamic_lib_<font color="#990000">,</font> other_fun<font color="#990000">.</font>dynamic_lib_<font color="#990000">);</font>
    std<font color="#990000">::</font><b><font color="#000000">swap</font></b><font color="#990000">(</font>model_<font color="#990000">,</font> other_fun<font color="#990000">.</font>model_ <font color="#990000">);</font>
<font color="#FF0000">}</font>
<i><font color="#9A1900">// --------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// y = fun_name(x)</font></i>
<i><font color="#9A1900">// --------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// BEGIN_FUN_NAME_X</font></i>
CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font>
code_gen_fun<font color="#990000">::</font><b><font color="#0000FF">operator</font></b><font color="#990000">()(</font><b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> x<font color="#990000">)</font>
<i><font color="#9A1900">// END_FUN_NAME_X</font></i>
<font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> model_<font color="#990000">-&gt;</font><b><font color="#000000">ForwardZero</font></b><font color="#990000">(</font>x<font color="#990000">);</font>
<font color="#FF0000">}</font>
<i><font color="#9A1900">// --------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// J = fun_name.jacobian(x)</font></i>
<i><font color="#9A1900">// --------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// BEGIN_JACOBIAN</font></i>
CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font>
code_gen_fun<font color="#990000">::</font><b><font color="#000000">jacobian</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> x<font color="#990000">)</font>
<i><font color="#9A1900">// END_JACOBIAN</font></i>
<font color="#FF0000">{</font>   <b><font color="#000000">CPPAD_ASSERT_KNOWN</font></b><font color="#990000">(</font> model_<font color="#990000">-&gt;</font><b><font color="#000000">isJacobianAvailable</font></b><font color="#990000">()</font> <font color="#990000">,</font>
        <font color="#FF0000">"code_gen_fun: dense jacobian not enables during constructor"</font>
    <font color="#990000">);</font>
    <b><font color="#0000FF">return</font></b> model_<font color="#990000">-&gt;</font> <b><font color="#000000">Jacobian</font></b><font color="#990000">(</font>x<font color="#990000">);</font>
<font color="#FF0000">}</font>
<i><font color="#9A1900">// --------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// Jrcv = fun_name.sparse_jacobian(x)</font></i>
<i><font color="#9A1900">// --------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// BEGIN_SPARSE_JACOBIAN</font></i>
CppAD<font color="#990000">::</font>sparse_rcv<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;,</font> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">&gt;</font>
code_gen_fun<font color="#990000">::</font><b><font color="#000000">sparse_jacobian</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> x<font color="#990000">)</font>
<i><font color="#9A1900">// END_SPARSE_JACOBIAN</font></i>
<font color="#FF0000">{</font>   <b><font color="#000000">CPPAD_ASSERT_KNOWN</font></b><font color="#990000">(</font> model_<font color="#990000">-&gt;</font><b><font color="#000000">isSparseJacobianAvailable</font></b><font color="#990000">()</font> <font color="#990000">,</font>
        <font color="#FF0000">"code_gen_fun: sparse jacobian not enabled during constructor"</font>
    <font color="#990000">);</font>
    <i><font color="#9A1900">// x_std</font></i>
    <font color="#008080">size_t</font> n <font color="#990000">=</font> model_<font color="#990000">-&gt;</font><b><font color="#000000">Domain</font></b><font color="#990000">();</font>
    std<font color="#990000">::</font><font color="#008080">vector&lt;double&gt;</font> <b><font color="#000000">x_std</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
        x_std<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font>j<font color="#990000">];</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// 2DO: Prepahs CppAD should have a sparse_rcv constructor (jac, row, col)</font></i>
    <i><font color="#9A1900">// that uses swap to swap the vectors</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// jac, row, col</font></i>
    std<font color="#990000">::</font><font color="#008080">vector&lt;double&gt;</font> jac<font color="#990000">;</font>
    std<font color="#990000">::</font><font color="#008080">vector&lt;size_t&gt;</font> row<font color="#990000">,</font> col<font color="#990000">;</font>
    model_<font color="#990000">-&gt;</font> <b><font color="#000000">SparseJacobian</font></b><font color="#990000">(</font>x_std<font color="#990000">,</font> jac<font color="#990000">,</font> row<font color="#990000">,</font> col<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// sparse_rc</font></i>
    <font color="#008080">size_t</font> nr  <font color="#990000">=</font> model_<font color="#990000">-&gt;</font><b><font color="#000000">Range</font></b><font color="#990000">();</font>
    <font color="#008080">size_t</font> nc  <font color="#990000">=</font> model_<font color="#990000">-&gt;</font><b><font color="#000000">Domain</font></b><font color="#990000">();</font>
    <font color="#008080">size_t</font> nnz <font color="#990000">=</font> row<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
    CppAD<font color="#990000">::</font><font color="#008080">sparse_rc&lt; CppAD::vector&lt;size_t&gt; &gt;</font> <b><font color="#000000">pattern</font></b><font color="#990000">(</font>nr<font color="#990000">,</font> nc<font color="#990000">,</font> nnz<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> nnz<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font>
        pattern<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>k<font color="#990000">,</font> row<font color="#990000">[</font>k<font color="#990000">],</font> col<font color="#990000">[</font>k<font color="#990000">]);</font>
    <i><font color="#9A1900">// sparse_rcv</font></i>
    CppAD<font color="#990000">::</font>sparse_rcv<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;,</font> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">&gt;</font>
    <b><font color="#000000">Jrcv</font></b><font color="#990000">(</font>pattern<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> nnz<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font>
        Jrcv<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>k<font color="#990000">,</font> jac<font color="#990000">[</font>k<font color="#990000">]);</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">return</font></b> Jrcv<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: cppad_lib/code_gen_fun.cpp

</body>
</html>
