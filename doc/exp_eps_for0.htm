<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>exp_eps: Operation Sequence and Zero Order Forward Sweep</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="exp_eps: Operation Sequence and Zero Order Forward Sweep">
<meta name="keywords" id="keywords" content=" exp_eps: operation sequence zero order forward sweep mathematical form variable parameter index code return value comparisons verification exercises ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_exp_eps_for0_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="exp_eps.cpp.htm" target="_top">Prev</a>
</td><td><a href="exp_eps_for0.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Theory</option>
<option>Introduction</option>
<option>exp_eps</option>
<option>exp_eps_for0</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_theory_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_introduction_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_exp_eps_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_exp_eps_for0_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Mathematical Form</option>
<option>Operation Sequence</option>
<option>---..Variable</option>
<option>---..Parameter</option>
<option>---..Index</option>
<option>---..Code</option>
<option>---..Operation</option>
<option>---..Zero Order</option>
<option>---..Sweep</option>
<option>Return Value</option>
<option>Comparisons</option>
<option>Verification</option>
<option>Exercises</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>exp_eps: Operation Sequence and Zero Order Forward Sweep</big></big></b></center>
<br>
<b><big><a name="Mathematical Form" id="Mathematical Form">Mathematical Form</a></big></b>
<br>
Suppose that we use the algorithm <a href="exp_eps.hpp.htm" target="_top"><span style='white-space: nowrap'>exp_eps.hpp</span></a>

to compute 
<code><font color="blue"><span style='white-space: nowrap'>exp_eps(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>

with 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 is equal to .5
and 
<code><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i></code>
 is equal to .2.
For this case,
the mathematical form for the operation sequence
corresponding to the <code><font color="blue">exp_eps</font></code> is
<small>@[@

    f( x , \varepsilon ) = 1 + x + x^2 / 2

@]@</small>
Note that, for these particular values of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i></code>
,
this is the same as the mathematical form for
<a href="exp_2_for0.htm#Mathematical Form" target="_top"><span style='white-space: nowrap'>exp_2</span></a>
.


<br>
<br>
<b><big><a name="Operation Sequence" id="Operation Sequence">Operation Sequence</a></big></b>
<br>
We consider the
<a href="glossary.htm#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&nbsp;sequence</span></a>

corresponding to the algorithm <a href="exp_eps.hpp.htm" target="_top"><span style='white-space: nowrap'>exp_eps.hpp</span></a>

with the argument 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 is equal to .5
and 
<code><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i></code>
 is equal to .2.

<br>
<br>
<big><a name="Operation Sequence.Variable" id="Operation Sequence.Variable">Variable</a></big>
<br>
We refer to values that depend on the input variables

<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i></code>
 as variables.

<br>
<br>
<big><a name="Operation Sequence.Parameter" id="Operation Sequence.Parameter">Parameter</a></big>
<br>
We refer to values that do not depend on the input variables

<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 or 
<code><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i></code>
 as parameters.
Operations where the result is a parameter are not included
in the zero order sweep below.


<br>
<br>
<big><a name="Operation Sequence.Index" id="Operation Sequence.Index">Index</a></big>
<br>
The Index column contains the index in the operation sequence
of the corresponding atomic operation and variable.
A Forward sweep starts with the first operation
and ends with the last.

<br>
<br>
<big><a name="Operation Sequence.Code" id="Operation Sequence.Code">Code</a></big>
<br>
The Code column contains the C++ source code corresponding
to the corresponding atomic operation in the sequence.

<br>
<br>
<big><a name="Operation Sequence.Operation" id="Operation Sequence.Operation">Operation</a></big>
<br>
The Operation column contains the
mathematical function corresponding to each atomic operation in the sequence.

<br>
<br>
<big><a name="Operation Sequence.Zero Order" id="Operation Sequence.Zero Order">Zero Order</a></big>
<br>
The Zero Order column contains the
<a href="exp_2_for0.htm#Zero Order Expansion" target="_top"><span style='white-space: nowrap'>zero&nbsp;order&nbsp;derivative</span></a>

for the corresponding variable in the operation sequence.
Forward mode refers to the fact that
these coefficients are computed in the same order as the original algorithm;
i.e., in order of increasing index.


<br>
<br>
<big><a name="Operation Sequence.Sweep" id="Operation Sequence.Sweep">Sweep</a></big>

<center>
<table><tr><td align='left'  valign='top'>

<b>Index</b>
    </td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 <b>Code</b>
    </td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 <b>Operation</b>
    </td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 <b>Zero Order</b>
</td></tr><tr><td align='left'  valign='top'>

1
    </td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 <code><font color="blue">abs_x = x;</font></code>
    </td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 <small>@(@
v_1 = x
@)@</small>
    </td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 <small>@(@
v_1^{(0)} = 0.5
@)@</small>
</td></tr><tr><td align='left'  valign='top'>

2
    </td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 <code><font color="blue">temp  = term * abs_x;</font></code>
    </td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 <small>@(@
v_2 = 1 * v_1
@)@</small>
    </td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 <small>@(@
v_2^{(0)} = 0.5
@)@</small>
</td></tr><tr><td align='left'  valign='top'>

3
    </td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 <code><font color="blue">term = temp / Type(k);</font></code>
    </td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 <small>@(@
v_3 = v_2 / 1
@)@</small>
    </td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 <small>@(@
v_3^{(0)} = 0.5
@)@</small>
</td></tr><tr><td align='left'  valign='top'>

4
    </td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 <code><font color="blue">sum  = sum + term;</font></code>
    </td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 <small>@(@
v_4 = 1 + v_3
@)@</small>
    </td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 <small>@(@
v_4^{(0)} = 1.5
@)@</small>
</td></tr><tr><td align='left'  valign='top'>

5
    </td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
  <code><font color="blue">temp  = term * abs_x;</font></code>
    </td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 <small>@(@
v_5 = v_3 * v_1
@)@</small>
    </td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 <small>@(@
v_5^{(0)} = 0.25
@)@</small>
</td></tr><tr><td align='left'  valign='top'>

6
    </td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 <code><font color="blue">term = temp / Type(k);</font></code>
    </td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 <small>@(@
v_6 = v_5 / 2
@)@</small>
    </td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 <small>@(@
v_6^{(0)} = 0.125
@)@</small>
</td></tr><tr><td align='left'  valign='top'>

7
    </td><td align='left'  valign='top'>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>
 <code><font color="blue">sum  = sum + term;</font></code>
    </td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 <small>@(@
v_7 = v_4 + v_6
@)@</small>
    </td><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>
 <small>@(@
v_7^{(0)} = 1.625
@)@</small>
</td></tr>
</table>
</center><b><big><a name="Return Value" id="Return Value">Return Value</a></big></b>
<br>
The return value for this case is
<small>@[@

    1.625 =
    v_7^{(0)} =
    f ( x^{(0)} , \varepsilon^{(0)} )

@]@</small>

<br>
<br>
<b><big><a name="Comparisons" id="Comparisons">Comparisons</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 were negative,
or if 
<code><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i></code>
 were a much smaller or much larger value,
the results of the following comparisons could be different:
<code><font color='blue'><pre style='display:inline'> 
    if( Type(0) &gt; x )
    while(term &gt; epsilon)
</pre></font></code>
This in turn would result in a different operation sequence.
Thus the operation sequence above only corresponds to
<a href="exp_eps.hpp.htm" target="_top"><span style='white-space: nowrap'>exp_eps.hpp</span></a>

for values of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i></code>
 within a certain range.
Note that there is a neighborhood
of <small>@(@
x = 0.5
@)@</small> for which the comparisons would have the
same result and hence the operation sequence would be the same.



<br>
<br>
<b><big><a name="Verification" id="Verification">Verification</a></big></b>
<br>
The file <a href="exp_eps_for0.cpp.htm" target="_top"><span style='white-space: nowrap'>exp_eps_for0.cpp</span></a>
 contains a routine
that verifies the values computed above.

<br>
<br>
<b><big><a name="Exercises" id="Exercises">Exercises</a></big></b>

<ol type="1"><li>
Suppose that <small>@(@
x^{(0)} = .1
@)@</small>,
what is the result of a zero order forward sweep for
the operation sequence above;
i.e., what are the corresponding values for
<small>@(@
v_1^{(0)} , v_2^{(0)} , \ldots , v_7^{(0)}
@)@</small>.
</li><li>

Create a modified version of
<a href="exp_eps_for0.cpp.htm" target="_top"><span style='white-space: nowrap'>exp_eps_for0.cpp</span></a>
 that verifies the values you obtained
for the previous exercise.
</li><li>

Create and run a main program that reports the result of calling
the modified version
of <a href="exp_eps_for0.cpp.htm" target="_top"><span style='white-space: nowrap'>exp_eps_for0.cpp</span></a>
 in the previous exercise.
</li></ol>



<hr>Input File: introduction/exp_eps.omh

</body>
</html>
