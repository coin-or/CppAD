<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>ADFun Checking For Nan: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="ADFun Checking For Nan: Example and Test">
<meta name="keywords" id="keywords" content=" adfun checking nan: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_check_for_nan.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="check_for_nan.htm" target="_top">Prev</a>
</td><td><a href="to_csrc.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>check_for_nan</option>
<option>check_for_nan.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_check_for_nan_htm.js'></script>
</td>
<td>check_for_nan.cpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@


<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>ADFun Checking For Nan: Example and Test</big></big></b></center>
<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cctype&gt;</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
    <font color="#009900">void</font> <b><font color="#000000">myhandler</font></b><font color="#990000">(</font>
        <font color="#009900">bool</font> known       <font color="#990000">,</font>
        <font color="#009900">int</font>  line        <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> <font color="#009900">char</font> <font color="#990000">*</font>file <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> <font color="#009900">char</font> <font color="#990000">*</font>exp  <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> <font color="#009900">char</font> <font color="#990000">*</font>msg  <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// error handler must not return, so throw an exception</font></i>
        std<font color="#990000">::</font><font color="#008080">string</font> message <font color="#990000">=</font> msg<font color="#990000">;</font>
        <b><font color="#0000FF">throw</font></b> message<font color="#990000">;</font>
    <font color="#FF0000">}</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">check_for_nan</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> std<font color="#990000">::</font>string<font color="#990000">;</font>
    <font color="#009900">double</font> eps <font color="#990000">=</font> <font color="#993399">10</font><font color="#990000">.</font> <font color="#990000">*</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>

    <i><font color="#9A1900">// replace the default CppAD error handler</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ErrorHandler</font> <b><font color="#000000">info</font></b><font color="#990000">(</font>myhandler<font color="#990000">);</font>

    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;)</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">),</font> <b><font color="#000000">ay</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">);</font>
    ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">2.0</font><font color="#990000">;</font>
    ax<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
    CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>ax<font color="#990000">);</font>
    ay<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">sqrt</font></b><font color="#990000">(</font> ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">);</font>
    ay<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">sqrt</font></b><font color="#990000">(</font> ax<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">);</font>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> <b><font color="#000000">f</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">);</font>

    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font> <b><font color="#000000">x</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">),</font> <b><font color="#000000">y</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">);</font>
    x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">2.0</font><font color="#990000">;</font>
    x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">-</font><font color="#993399">1.0</font><font color="#990000">;</font>

    <i><font color="#9A1900">// use try / catch because this causes an exception</font></i>
    <i><font color="#9A1900">// (assuming that NDEBUG is not defined)</font></i>
    f<font color="#990000">.</font><b><font color="#000000">check_for_nan</font></b><font color="#990000">(</font><b><font color="#0000FF">true</font></b><font color="#990000">);</font>
    <b><font color="#0000FF">try</font></b> <font color="#FF0000">{</font>
        y <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">);</font>

<b><font color="#000080"># ifndef</font></b> NDEBUG
        <i><font color="#9A1900">// When compiled with NDEBUG defined,</font></i>
        <i><font color="#9A1900">// CppAD does not spend time checking for nan.</font></i>
        ok <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
<b><font color="#000080"># endif</font></b>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">catch</font></b><font color="#990000">(</font>std<font color="#990000">::</font><font color="#008080">string</font> msg<font color="#990000">)</font>
    <font color="#FF0000">{</font>
        <i><font color="#9A1900">// get and check size of the independent variable vector</font></i>
        <font color="#008080">string</font> pattern <font color="#990000">=</font> <font color="#FF0000">"vector_size = "</font><font color="#990000">;</font>
        <font color="#008080">size_t</font> start   <font color="#990000">=</font> msg<font color="#990000">.</font><b><font color="#000000">find</font></b><font color="#990000">(</font>pattern<font color="#990000">)</font> <font color="#990000">+</font> pattern<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
        <font color="#008080">string</font> number<font color="#990000">;</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> start<font color="#990000">;</font> msg<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">!=</font> <font color="#FF0000">'</font><font color="#CC33CC">\n</font><font color="#FF0000">'</font><font color="#990000">;</font> i<font color="#990000">++)</font>
            number <font color="#990000">+=</font> msg<font color="#990000">[</font>i<font color="#990000">];</font>
        <font color="#008080">size_t</font> vector_size <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> std<font color="#990000">::</font><b><font color="#000000">atoi</font></b><font color="#990000">(</font>number<font color="#990000">.</font><b><font color="#000000">c_str</font></b><font color="#990000">())</font> <font color="#990000">);</font>
        ok <font color="#990000">&amp;=</font> vector_size <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">;</font>

        <i><font color="#9A1900">// get and check first dependent variable index that is nan</font></i>
        pattern <font color="#990000">=</font> <font color="#FF0000">"index = "</font><font color="#990000">;</font>
        start   <font color="#990000">=</font> msg<font color="#990000">.</font><b><font color="#000000">find</font></b><font color="#990000">(</font>pattern<font color="#990000">)</font> <font color="#990000">+</font> pattern<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
        number  <font color="#990000">=</font> <font color="#FF0000">""</font><font color="#990000">;</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> start<font color="#990000">;</font> msg<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">!=</font> <font color="#FF0000">'</font><font color="#CC33CC">\n</font><font color="#FF0000">'</font><font color="#990000">;</font> i<font color="#990000">++)</font>
            number <font color="#990000">+=</font> msg<font color="#990000">[</font>i<font color="#990000">];</font>
        <font color="#008080">size_t</font> index <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> std<font color="#990000">::</font><b><font color="#000000">atoi</font></b><font color="#990000">(</font>number<font color="#990000">.</font><b><font color="#000000">c_str</font></b><font color="#990000">())</font> <font color="#990000">);</font>
        ok <font color="#990000">&amp;=</font> index <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">;</font>

        <i><font color="#9A1900">// get the name of the file</font></i>
        pattern <font color="#990000">=</font> <font color="#FF0000">"file_name = "</font><font color="#990000">;</font>
        start   <font color="#990000">=</font> msg<font color="#990000">.</font><b><font color="#000000">find</font></b><font color="#990000">(</font>pattern<font color="#990000">)</font> <font color="#990000">+</font> pattern<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
        <font color="#008080">string</font> file_name<font color="#990000">;</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> start<font color="#990000">;</font> msg<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">!=</font> <font color="#FF0000">'</font><font color="#CC33CC">\n</font><font color="#FF0000">'</font><font color="#990000">;</font> i<font color="#990000">++)</font>
            file_name <font color="#990000">+=</font> msg<font color="#990000">[</font>i<font color="#990000">];</font>

        <i><font color="#9A1900">// get and check independent variable vector that resulted in the nan</font></i>
        CppAD<font color="#990000">::</font><font color="#008080">vector&lt;double&gt;</font> <b><font color="#000000">vec</font></b><font color="#990000">(</font>vector_size<font color="#990000">);</font>
        CppAD<font color="#990000">::</font><b><font color="#000000">get_check_for_nan</font></b><font color="#990000">(</font>vec<font color="#990000">,</font> file_name<font color="#990000">);</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> vector_size<font color="#990000">;</font> i<font color="#990000">++)</font>
            ok <font color="#990000">&amp;=</font> vec<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">==</font> x<font color="#990000">[</font>i<font color="#990000">];</font>
    <font color="#FF0000">}</font>

    <i><font color="#9A1900">// now do calculation without an exception</font></i>
    f<font color="#990000">.</font><b><font color="#000000">check_for_nan</font></b><font color="#990000">(</font><b><font color="#0000FF">false</font></b><font color="#990000">);</font>
    y <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> std<font color="#990000">::</font><b><font color="#000000">sqrt</font></b><font color="#990000">(</font>x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]),</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">isnan</font></b><font color="#990000">(</font> y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">);</font>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
</tt></pre>

<hr>Input File: example/general/check_for_nan.cpp

</body>
</html>
