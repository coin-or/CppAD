<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>cppad-20220526: A C++ Algorithmic Differentiation Package</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="cppad-20220526: A C++ Algorithmic Differentiation Package">
<meta name="keywords" id="keywords" content=" cppad-20220526: c++ algorithmic differentiation package features operator overloading base type recording operations multi-threading optimizing sequences dynamic parameters derivative calculations sparsity atomic functions logical comparisons vectors software engineering testing correctness speed utilities release notes example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_cppad_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>Prev</td><td><a href="_contents.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Algorithmic Differentiation</option>
<option>Features</option>
<option>---..Operator Overloading</option>
<option>---..Base Type</option>
<option>---..Recording Operations</option>
<option>---..Multi-Threading</option>
<option>---..Optimizing Operations Sequences</option>
<option>---..Dynamic Parameters</option>
<option>---..Derivative Calculations</option>
<option>---..Sparsity</option>
<option>---..Recording Derivative Operations</option>
<option>---..Atomic Functions</option>
<option>---..Logical Comparisons</option>
<option>---..Vectors</option>
<option>Software Engineering</option>
<option>Testing</option>
<option>---..Correctness</option>
<option>---..Speed</option>
<option>Utilities</option>
<option>Release Notes</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
<small>@(@
\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }
@)@</small><center><b><big><big>cppad-20220526: A C++ Algorithmic Differentiation Package</big></big></b></center>
<table><tr><td align='left'  valign='middle'>
<img src="coin.png" valign="top">
</td><td align='left'  valign='middle'>
<table><tr><td align='left'  valign='middle'>
<a href="https://github.com/coin-or/CppAD/tags" target="_top"><span style='white-space: nowrap'>release</span></a>
, </td><td align='left'  valign='middle'>

<a href="https://github.com/coin-or/CppAD/archive/20220000.4.tar.gz" target="_top"><span style='white-space: nowrap'>20220000.4</span></a>
, </td><td align='left'  valign='middle'>

<a href="https://github.com/coin-or/CppAD" target="_top"><span style='white-space: nowrap'>github</span></a>
, </td><td align='left'  valign='middle'>

<a href="https://travis-ci.org/coin-or/CppAD" target="_top"><span style='white-space: nowrap'>travis</span></a>
, </td><td align='left'  valign='middle'>

<a href="https://ci.appveyor.com/project/bradbell/cppad" target="_top"><span style='white-space: nowrap'>appveyor</span></a>
, </td><td align='left'  valign='middle'>

<a href="https://src.fedoraproject.org/rpms/cppad/blob/master/f/cppad.spec" target="_top"><span style='white-space: nowrap'>cppad.spec</span></a>
 </td><td align='left'  valign='middle'>

</td></tr>
</table>

<code><span style='white-space: nowrap'><br>
<br>
</span></code><table><tr><td align='left'  valign='middle'>
<a href="install.htm" target="_top"><span style='white-space: nowrap'>install</span></a>
,                                      </td><td align='left'  valign='middle'>

<a href="get_started.cpp.htm" target="_top"><span style='white-space: nowrap'>get_started</span></a>
,                 </td><td align='left'  valign='middle'>

<a href="whats_new.htm" target="_top"><span style='white-space: nowrap'>whats_new</span></a>
,                                    </td><td align='left'  valign='middle'>

<a href="addon.htm" target="_top"><span style='white-space: nowrap'>addon</span></a>
,                                        </td><td align='left'  valign='middle'>

<a href="research.htm" target="_top"><span style='white-space: nowrap'>research</span></a>
,                                     </td><td align='left'  valign='middle'>

<a href="http://www.seanet.com/~bradbell" target="_top"><span style='white-space: nowrap'>project&nbsp;manager</span></a>

</td></tr>
</table>

<code><span style='white-space: nowrap'><br>
<br>
</span></code>CppAD is distributed by
<a href="http://www.coin-or.org" target="_top"><span style='white-space: nowrap'>COIN-OR</span></a>

with the Eclipse Public License
<a href="http://www.opensource.org/licenses/EPL-2.0" target="_top"><span style='white-space: nowrap'>EPL-2.0</span></a>

or the GNU General Public License
<a href="http://www.opensource.org/licenses/GPL-2.0" target="_top"><span style='white-space: nowrap'>GPL-2.0</span></a>
 or later.

</td></tr>
</table>
<br>
<b><big><a name="Algorithmic Differentiation" id="Algorithmic Differentiation">Algorithmic Differentiation</a></big></b>
<br>
We refer to the automatic creation of an algorithm that
computes derivative values from an algorithm that computes function values
as <i>Algorithmic Differentiation</i>,
also referred to as <i>Automatic Differentiation</i> or just AD.
A brief introduction to AD can be found in
<a href="http://en.wikipedia.org/wiki/Automatic_differentiation" target="_top"><span style='white-space: nowrap'>wikipedia</span></a>
.
The web site
<a href="http://www.autodiff.org" target="_top"><span style='white-space: nowrap'>autodiff.org</span></a>

is dedicated to research about, and promoting the use of, AD.

<br>
<br>
<b><big><a name="Features" id="Features">Features</a></big></b>


<br>
<br>
<big><a name="Features.Operator Overloading" id="Features.Operator Overloading">Operator Overloading</a></big>
<br>
CppAD uses operator overloading of the C++ template class <a href="ad.htm" target="_top"><span style='white-space: nowrap'>AD</span></a>

to compute derivatives of algorithms defined using AD objects; see
the <a href="introduction.htm" target="_top"><span style='white-space: nowrap'>introduction</span></a>
 for a description of how this is accomplished.

<br>
<br>
<big><a name="Features.Base Type" id="Features.Base Type">Base Type</a></big>
<br>
The operator overloading uses a templated base type that
can be user defined; see <a href="base_require.htm" target="_top"><span style='white-space: nowrap'>base_require</span></a>
.
The required definitions for <code><font color="blue">AD&lt;float&gt;</font></code> and
<code><font color="blue">AD&lt;double&gt;</font></code> are included as part of CppAD.

<br>
<br>
<big><a name="Features.Recording Operations" id="Features.Recording Operations">Recording Operations</a></big>
<br>
A sequence of 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>

<a href="glossary.htm#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operations</span></a>

can be recorded and stored in an
<a href="adfun.htm" target="_top"><span style='white-space: nowrap'>AD&nbsp;function&nbsp;object</span></a>
 object.
This object can then be used to evaluate
function values and arbitrary order derivatives,
and sparsity patterns of derivative values using the 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 type.

<br>
<br>
<big><a name="Features.Multi-Threading" id="Features.Multi-Threading">Multi-Threading</a></big>
<br>
CppAD supports an arbitrary <a href="multi_thread.htm" target="_top"><span style='white-space: nowrap'>multi&nbsp;threading</span></a>
 environment.
Examples are provided using Boost threads, Posix threads, and Openmp threads.

<br>
<br>
<big><a name="Features.Optimizing Operations Sequences" id="Features.Optimizing Operations Sequences">Optimizing Operations Sequences</a></big>
<br>
During the recording of a function,
the <a href="independent.htm" target="_top"><span style='white-space: nowrap'>Independent</span></a>
 variables are know and a forward dependency
analysis is used to determine which operations should be recorded.
Once the <a href="dependent.htm" target="_top"><span style='white-space: nowrap'>Dependent</span></a>
 variables are determined,
a reverse dependency analysis can be preformed.
This <a href="optimize.htm" target="_top"><span style='white-space: nowrap'>optimize</span></a>
 routine uses a reverse dependency analysis,
and other techniques,
to remove unnecessary operations.

<br>
<br>
<big><a name="Features.Dynamic Parameters" id="Features.Dynamic Parameters">Dynamic Parameters</a></big>
<br>
CppAD enables one to specify a vector of
<a href="glossary.htm#Parameter.Dynamic" target="_top"><span style='white-space: nowrap'>dynamic</span></a>
 parameters.
The value of the function and derivatives can depend on these parameters,
but no derivatives are taken with respect to these parameters.
This enables CppAD to reduce the derivative calculations; e.g.,
the derivative of variable times a variable has two terms
while a variable times a parameter only has one.

<br>
<br>
<big><a name="Features.Derivative Calculations" id="Features.Derivative Calculations">Derivative Calculations</a></big>
<br>
Arbitrary order
<a href="forward.htm" target="_top"><span style='white-space: nowrap'>forward</span></a>
 and <a href="reverse.htm" target="_top"><span style='white-space: nowrap'>reverse</span></a>

mode derivative calculations
can be preformed using an <code><font color="blue">ADFun</font></code> object.
Easy to user drivers that compute the
entire <a href="jacobian.htm" target="_top"><span style='white-space: nowrap'>Jacobian</span></a>
 and a specific <a href="hessian.htm" target="_top"><span style='white-space: nowrap'>Hessian</span></a>
 are included.

<br>
<br>
<big><a name="Features.Sparsity" id="Features.Sparsity">Sparsity</a></big>
<br>
Both forward and reverse mode can be used to calculation the sparsity
pattern for Jacobians and Hessians; see <a href="sparsity_pattern.htm" target="_top"><span style='white-space: nowrap'>sparsity_pattern</span></a>
.
Where a Jacobian or Hessian is sparse,
both forward and reverse mode can be combined with the sparsity pattern
to speed up the calculation of
<a href="sparse_derivative.htm" target="_top"><span style='white-space: nowrap'>sparse&nbsp;derivatives</span></a>
.
In addition, a <a href="subgraph_jac_rev.htm" target="_top"><span style='white-space: nowrap'>subgraph</span></a>
 method,
that does not require a sparsity pattern, can be used
to speed up these derivative calculations.

<br>
<br>
<big><a name="Features.Recording Derivative Operations" id="Features.Recording Derivative Operations">Recording Derivative Operations</a></big>
<br>
A <code><font color="blue">ADFun</font></code> object can be converted into an object that
evaluates derivatives using the type 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
; see <a href="base2ad.htm" target="_top"><span style='white-space: nowrap'>base2ad</span></a>
.
This enables one to record new functions that
are expressed using derivatives of other functions.

<br>
<br>
<big><a name="Features.Atomic Functions" id="Features.Atomic Functions">Atomic Functions</a></big>
<br>
User defined derivative calculations for arbitrary functions
can also be included in
a recording using <a href="atomic_two.htm" target="_top"><span style='white-space: nowrap'>atomic&nbsp;functions</span></a>
 functions.
A special <a href="chkpoint_one.htm" target="_top"><span style='white-space: nowrap'>checkpoint</span></a>
 class is included
which allows one to record a function and reuse it as
an atomic operation in other functions.
There also is a special interface for user defined unary
<a href="discrete.htm" target="_top"><span style='white-space: nowrap'>discrete&nbsp;functions</span></a>
 functions; i.e.,
functions that depend on the
<a href="glossary.htm#Tape.Independent Variable" target="_top"><span style='white-space: nowrap'>independent&nbsp;variables</span></a>

but which have identically zero derivatives (e.g., a step function).

<br>
<br>
<big><a name="Features.Logical Comparisons" id="Features.Logical Comparisons">Logical Comparisons</a></big>
<br>
Logical comparisons can be included in an operation sequence
using AD <a href="condexp.htm" target="_top"><span style='white-space: nowrap'>conditional&nbsp;expressions</span></a>
.

<br>
<br>
<big><a name="Features.Vectors" id="Features.Vectors">Vectors</a></big>
<br>
The CppAD API allows one to use any
<a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class.
The preprocessor symbol <a href="testvector.htm" target="_top"><span style='white-space: nowrap'>CPPAD_TESTVECTOR</span></a>

is template vector class which is used for correctness testing.
Many of the correctness tests use this template vector class
which you can choose during the <a href="cmake.htm" target="_top"><span style='white-space: nowrap'>cmake</span></a>
 configuration command.

<br>
<br>
<b><big><a name="Software Engineering" id="Software Engineering">Software Engineering</a></big></b>
<br>
CppAD is developed using the software engineering procedures described
on the project manager's
<a href="https://www.seanet.com/~bradbell/software.htm" target="_top"><span style='white-space: nowrap'>software</span></a>

web page.

<br>
<br>
<b><big><a name="Testing" id="Testing">Testing</a></big></b>


<br>
<br>
<big><a name="Testing.Correctness" id="Testing.Correctness">Correctness</a></big>
<br>
There is an extensive set of correctness tests; see <a href="cmake_check.htm" target="_top"><span style='white-space: nowrap'>cmake_check</span></a>
.

<br>
<br>
<big><a name="Testing.Speed" id="Testing.Speed">Speed</a></big>
<br>
A set of programs for doing <a href="speed.htm" target="_top"><span style='white-space: nowrap'>speed</span></a>
 comparisons between
<a href="https://projects.coin-or.org/ADOL-C" target="_top"><span style='white-space: nowrap'>Adolc</span></a>
,
CppAD,
<a href="http://www.fadbad.com/" target="_top"><span style='white-space: nowrap'>Fadbad</span></a>
,
and
<a href="http://trilinos.sandia.gov/packages/sacado/" target="_top"><span style='white-space: nowrap'>Sacado</span></a>

are included.

<br>
<br>
<b><big><a name="Utilities" id="Utilities">Utilities</a></big></b>
<br>
CppAD includes a set of C++ <a href="utility.htm" target="_top"><span style='white-space: nowrap'>utilities</span></a>
 that are useful
for general operator overloaded numerical methods.

<br>
<br>
<b><big><a name="Release Notes" id="Release Notes">Release Notes</a></big></b>
<br>
This <a href="whats_new.htm" target="_top"><span style='white-space: nowrap'>whats_new</span></a>
 for a list of recent extensions and bug fixes.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="get_started.cpp.htm" target="_top"><span style='white-space: nowrap'>get_started.cpp</span></a>

contains an example and test of using CppAD to compute
the derivative of a polynomial.
There are many other
<a href="example.htm" target="_top"><span style='white-space: nowrap'>examples</span></a>
.
All of the examples are also correctness tests,
which ensures that they work properly.





<hr>Input File: doc.omh

</body>
</html>
