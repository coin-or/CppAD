<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Sparse Matrix Row, Column, Value Representation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Sparse Matrix Row, Column, Value Representation">
<meta name="keywords" id="keywords" content=" sparse matrix row column value representation syntax sizevector valuevector empty pattern other assignment constructor move semantics swap nr nc nnz set k v col val pat row_major col_major eigen example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_sparse_rcv_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="sparse_rc.cpp.htm" target="_top">Prev</a>
</td><td><a href="sparse_rcv.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>utility</option>
<option>sparse_rcv</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_utility_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_sparse_rcv_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>SizeVector</option>
<option>ValueVector</option>
<option>empty</option>
<option>pattern</option>
<option>matrix</option>
<option>other</option>
<option>---..Assignment and Constructor</option>
<option>---..Move Semantics Assignment and Constructor</option>
<option>---..swap</option>
<option>nr</option>
<option>nc</option>
<option>nnz</option>
<option>set</option>
<option>---..k</option>
<option>---..v</option>
<option>row</option>
<option>col</option>
<option>val</option>
<option>pat</option>
<option>row_major</option>
<option>col_major</option>
<option>Eigen Matrix</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Sparse Matrix Row, Column, Value Representation</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>#&nbsp;include&nbsp;&lt;cppad/utility/sparse_rcv.hpp&gt;<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>sparse_rcv&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ValueVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>empty</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>sparse_rcv&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ValueVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i><font color="blue"><span style='white-space: nowrap'>.swap(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i><font color="blue"><span style='white-space: nowrap'>.set(</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>v</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>nr</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i><font color="blue"><span style='white-space: nowrap'>.nr()<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>nc</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i><font color="blue"><span style='white-space: nowrap'>.nc()<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i><font color="blue"><span style='white-space: nowrap'>.nnz()<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i><font color="blue"><span style='white-space: nowrap'>.row()&nbsp;)<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i><font color="blue"><span style='white-space: nowrap'>.col()&nbsp;)<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ValueVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>val</span></font></i><font color="blue"><span style='white-space: nowrap'>(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i><font color="blue"><span style='white-space: nowrap'>.val()&nbsp;)<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>const&nbsp;sparse_rc&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pat</span></font></i><font color="blue"><span style='white-space: nowrap'>(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i><font color="blue"><span style='white-space: nowrap'>.pat()&nbsp;)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i><font color="blue"><span style='white-space: nowrap'>.row_major()<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i><font color="blue"><span style='white-space: nowrap'>.col_major()<br>
</span></font></code>
<br>
<b><big><a name="SizeVector" id="SizeVector">SizeVector</a></big></b>
<br>
We use <a href="sparse_rc.htm#SizeVector" target="_top"><span style='white-space: nowrap'>SizeVector</span></a>
 to denote the
<a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class corresponding to 
<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i></code>
.

<br>
<br>
<b><big><a name="ValueVector" id="ValueVector">ValueVector</a></big></b>
<br>
We use 
<code><i><font color="black"><span style='white-space: nowrap'>ValueVector</span></font></i></code>
 to denote the
<a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class corresponding to 
<code><i><font color="black"><span style='white-space: nowrap'>val</span></font></i></code>
.

<br>
<br>
<b><big><a name="empty" id="empty">empty</a></big></b>
<br>
This is an empty sparse matrix object. To be specific,
the corresponding number of rows 
<code><i><font color="black"><span style='white-space: nowrap'>nr</span></font></i></code>
,
number of columns 
<code><i><font color="black"><span style='white-space: nowrap'>nc</span></font></i></code>
,
and number of possibly non-zero values 
<code><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i></code>
,
are all zero.

<br>
<br>
<b><big><a name="pattern" id="pattern">pattern</a></big></b>
<br>
This constructor argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;sparse_rc&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the number of rows, number of columns and
the possibly non-zero entries in the 
<code><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i></code>
.

<br>
<br>
<b><big><a name="matrix" id="matrix">matrix</a></big></b>
<br>
This is a sparse matrix object with the sparsity specified by 
<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i></code>
.
Only the 
<code><i><font color="black"><span style='white-space: nowrap'>val</span></font></i></code>
 vector can be changed. All other values returned by

<code><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i></code>
 are fixed during the constructor and constant there after.
The 
<code><i><font color="black"><span style='white-space: nowrap'>val</span></font></i></code>
 vector is only changed by the constructor
and the <code><font color="blue">set</font></code> function.
There are two exceptions to this rule, where 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
 appears in the
assignment and swap syntax.

<br>
<br>
<b><big><a name="other" id="other">other</a></big></b>


<br>
<br>
<big><a name="other.Assignment and Constructor" id="other.Assignment and Constructor">Assignment and Constructor</a></big>
<br>
In the assignment and constructor, 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;sparse_rcv&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ValueVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
After this assignment and constructor, 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
 is an independent copy
of 
<code><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i></code>
; i.e. it has all the same values as 
<code><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i></code>

and changes to 
<code><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i></code>
 do not affect 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
.

<br>
<br>
<big><a name="other.Move Semantics Assignment and Constructor" id="other.Move Semantics Assignment and Constructor">Move Semantics Assignment and Constructor</a></big>
<br>
In the assignment and constructor, if 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;sparse_rcv&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ValueVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&amp;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
A move semantics version of the assignment operator is used; e.g.,
when 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
 is a function return value;

<br>
<br>
<big><a name="other.swap" id="other.swap">swap</a></big>
<br>
After the swap operation 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
 (
<code><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i></code>
) is equivalent
to 
<code><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i></code>
 (
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
) before the operation.

<br>
<br>
<b><big><a name="nr" id="nr">nr</a></big></b>
<br>
This return value has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nr</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and is the number of rows in 
<code><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i></code>
.

<br>
<br>
<b><big><a name="nc" id="nc">nc</a></big></b>
<br>
This argument and return value has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nc</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and is the number of columns in 
<code><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i></code>
.

<br>
<br>
<b><big><a name="nnz" id="nnz">nnz</a></big></b>
<br>
We use the notation 
<code><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i></code>
 to denote the number of
possibly non-zero entries in 
<code><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i></code>
.

<br>
<br>
<b><big><a name="set" id="set">set</a></big></b>
<br>
This function sets the value

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>val</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>v</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<big><a name="set.k" id="set.k">k</a></big>
<br>
This argument has type

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and must be less than 
<code><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i></code>
.

<br>
<br>
<big><a name="set.v" id="set.v">v</a></big>
<br>
This argument has type

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ValueVector</span></font></i><font color="blue"><span style='white-space: nowrap'>::value_type&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>v</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the value assigned to 
<code><i><font color="black"><span style='white-space: nowrap'>val</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
.


<br>
<br>
<b><big><a name="row" id="row">row</a></big></b>
<br>
This vector has size 
<code><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i></code>
 and

<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>

is the row index of the <code><i>k</i></code>-th possibly non-zero
element in 
<code><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i></code>
.

<br>
<br>
<b><big><a name="col" id="col">col</a></big></b>
<br>
This vector has size 
<code><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i></code>
 and

<code><i><font color="black"><span style='white-space: nowrap'>col[</span></font></i><font color="blue"><span style='white-space: nowrap'>k</span></font><i><font color="black"><span style='white-space: nowrap'>]</span></font></i></code>
 is the column index of the <code><i>k</i></code>-th possibly non-zero
element in 
<code><i><font color="black"><span style='white-space: nowrap'>matrix</span></font></i></code>


<br>
<br>
<b><big><a name="val" id="val">val</a></big></b>
<br>
This vector has size 
<code><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i></code>
 and

<code><i><font color="black"><span style='white-space: nowrap'>val[</span></font></i><font color="blue"><span style='white-space: nowrap'>k</span></font><i><font color="black"><span style='white-space: nowrap'>]</span></font></i></code>
 is value of the <code><i>k</i></code>-th possibly non-zero entry
in the sparse matrix (the value may be zero).

<br>
<br>
<b><big><a name="pat" id="pat">pat</a></big></b>
<br>
This is equal to the sparsity pattern; i.e.,

<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i></code>
 in the constructor.

<br>
<br>
<b><big><a name="row_major" id="row_major">row_major</a></big></b>
<br>
This vector has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and its size 
<code><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i></code>
.
It sorts the sparsity pattern in row-major order.
To be specific,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;]&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]&nbsp;]<br>
</span></font></code>
and if 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;]&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]&nbsp;]</span></font></code>
,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;]&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]&nbsp;]<br>
</span></font></code>
This routine generates an assert if there are two entries with the same
row and column values (if <code><font color="blue">NDEBUG</font></code> is not defined).

<br>
<br>
<b><big><a name="col_major" id="col_major">col_major</a></big></b>
<br>
This vector has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and its size 
<code><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i></code>
.
It sorts the sparsity pattern in column-major order.
To be specific,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;]&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]&nbsp;]<br>
</span></font></code>
and if 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;]&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]&nbsp;]</span></font></code>
,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;]&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]&nbsp;]<br>
</span></font></code>
This routine generates an assert if there are two entries with the same
row and column values (if <code><font color="blue">NDEBUG</font></code> is not defined).

<br>
<br>
<b><big><a name="Eigen Matrix" id="Eigen Matrix">Eigen Matrix</a></big></b>
<br>
If you have the <a href="eigen.htm" target="_top"><span style='white-space: nowrap'>eigen&nbsp;package</span></a>
 in your include path,
you can use <a href="sparse2eigen.htm" target="_top"><span style='white-space: nowrap'>sparse2eigen</span></a>
 to convert a sparse matrix to eigen format.


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="sparse_rcv.cpp.htm" target="_top"><span style='white-space: nowrap'>sparse_rcv.cpp</span></a>

contains an example and test of this class.


<hr>Input File: include/cppad/utility/sparse_rcv.hpp

</body>
</html>
