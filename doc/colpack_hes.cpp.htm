<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>ColPack: Sparse Hessian Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="ColPack: Sparse Hessian Example and Test">
<meta name="keywords" id="keywords" content=" colpack: sparse hessian example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_colpack_hes.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="colpack_jacobian.cpp.htm" target="_top">Prev</a>
</td><td><a href="colpack_hessian.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Install</option>
<option>cmake</option>
<option>colpack_prefix</option>
<option>colpack_hes.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_install_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cmake_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_colpack_prefix_htm.js'></script>
</td>
<td>colpack_hes.cpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>ColPack: Sparse Hessian Example and Test</big></big></b></center>
<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<font color="#009900">bool</font> <b><font color="#000000">colpack_hes</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>NearEqual<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;)</font>            a_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font>                d_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">vector&lt;size_t&gt;</font>                   i_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">sparse_rc&lt;i_vector&gt;</font>              sparsity<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">sparse_rcv&lt;i_vector, d_vector&gt;</font>   sparse_matrix<font color="#990000">;</font>
    <font color="#009900">double</font> eps <font color="#990000">=</font> <font color="#993399">10</font><font color="#990000">.</font> <font color="#990000">*</font> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// domain space vector</font></i>
    <font color="#008080">size_t</font> n <font color="#990000">=</font> <font color="#993399">5</font><font color="#990000">;</font>
    <font color="#008080">a_vector</font>  <b><font color="#000000">a_x</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        a_x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// declare independent variables and starting recording</font></i>
    CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>a_x<font color="#990000">);</font>

    <i><font color="#9A1900">// colpack example case where hessian is a spear head</font></i>
    <i><font color="#9A1900">// i.e, H(i, j) non zero implies i = 0, j = 0, or i = j</font></i>
    <font color="#008080">AD&lt;double&gt;</font> sum <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
    <i><font color="#9A1900">// partial_0 partial_j = x[j]</font></i>
    <i><font color="#9A1900">// partial_j partial_j = x[0]</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        sum <font color="#990000">+=</font> a_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> a_x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">*</font> a_x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">/</font> <font color="#993399">2.0</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// partial_i partial_i = 2 * x[i]</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">;</font> i<font color="#990000">++)</font>
        sum <font color="#990000">+=</font> a_x<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">*</font> a_x<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">*</font> a_x<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">/</font> <font color="#993399">3.0</font><font color="#990000">;</font>

    <i><font color="#9A1900">// declare dependent variables</font></i>
    <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
    <font color="#008080">a_vector</font>  <b><font color="#000000">a_y</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    a_y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> sum<font color="#990000">;</font>

    <i><font color="#9A1900">// create f: x -&gt; y and stop tape recording</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> <b><font color="#000000">f</font></b><font color="#990000">(</font>a_x<font color="#990000">,</font> a_y<font color="#990000">);</font>

    <i><font color="#9A1900">// new value for the independent variable vector</font></i>
    <font color="#008080">d_vector</font> <b><font color="#000000">x</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>j <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>

    <i><font color="#9A1900">/*</font></i>
<i><font color="#9A1900">          [ 2  2  3  4  5 ]</font></i>
<i><font color="#9A1900">    hes = [ 2  5  0  0  0 ]</font></i>
<i><font color="#9A1900">          [ 3  0  7  0  0 ]</font></i>
<i><font color="#9A1900">          [ 4  0  0  9  0 ]</font></i>
<i><font color="#9A1900">          [ 5  0  0  0 11 ]</font></i>
<i><font color="#9A1900">    */</font></i>
    <i><font color="#9A1900">// Normally one would use CppAD to compute sparsity pattern, but for this</font></i>
    <i><font color="#9A1900">// example we set it directly</font></i>
    <font color="#008080">size_t</font> nr  <font color="#990000">=</font> n<font color="#990000">;</font>
    <font color="#008080">size_t</font> nc  <font color="#990000">=</font> n<font color="#990000">;</font>
    <font color="#008080">size_t</font> nnz <font color="#990000">=</font> n <font color="#990000">+</font> <font color="#993399">2</font> <font color="#990000">*</font> <font color="#990000">(</font>n <font color="#990000">-</font> <font color="#993399">1</font><font color="#990000">);</font>
    <font color="#008080">sparsity</font> <b><font color="#000000">pattern</font></b><font color="#990000">(</font>nr<font color="#990000">,</font> nc<font color="#990000">,</font> nnz<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> n<font color="#990000">;</font> k<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> r <font color="#990000">=</font> k<font color="#990000">;</font>
        <font color="#008080">size_t</font> c <font color="#990000">=</font> k<font color="#990000">;</font>
        pattern<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>k<font color="#990000">,</font> r<font color="#990000">,</font> c<font color="#990000">);</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">;</font> i<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> k <font color="#990000">=</font> n <font color="#990000">+</font> <font color="#993399">2</font> <font color="#990000">*</font> <font color="#990000">(</font>i <font color="#990000">-</font> <font color="#993399">1</font><font color="#990000">);</font>
        <font color="#008080">size_t</font> r <font color="#990000">=</font> i<font color="#990000">;</font>
        <font color="#008080">size_t</font> c <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        pattern<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>k<font color="#990000">,</font>   r<font color="#990000">,</font> c<font color="#990000">);</font>
        pattern<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>k<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">,</font> c<font color="#990000">,</font> r<font color="#990000">);</font>
    <font color="#FF0000">}</font>

    <i><font color="#9A1900">// subset of elements to compute</font></i>
    <i><font color="#9A1900">// (only compute lower traingle)</font></i>
    nnz <font color="#990000">=</font> n <font color="#990000">+</font> <font color="#990000">(</font>n <font color="#990000">-</font> <font color="#993399">1</font><font color="#990000">);</font>
    <font color="#008080">sparsity</font> <b><font color="#000000">lower_triangle</font></b><font color="#990000">(</font>nr<font color="#990000">,</font> nc<font color="#990000">,</font> nnz<font color="#990000">);</font>
    <font color="#008080">d_vector</font> <b><font color="#000000">check</font></b><font color="#990000">(</font>nnz<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> n<font color="#990000">;</font> k<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> r <font color="#990000">=</font> k<font color="#990000">;</font>
        <font color="#008080">size_t</font> c <font color="#990000">=</font> k<font color="#990000">;</font>
        lower_triangle<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>k<font color="#990000">,</font> r<font color="#990000">,</font> c<font color="#990000">);</font>
        check<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">2.0</font> <font color="#990000">*</font> x<font color="#990000">[</font>k<font color="#990000">];</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> k <font color="#990000">&gt;</font> <font color="#993399">0</font> <font color="#990000">)</font>
            check<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">+=</font> x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> k <font color="#990000">=</font> n <font color="#990000">+</font> <font color="#990000">(</font>j <font color="#990000">-</font> <font color="#993399">1</font><font color="#990000">);</font>
        <font color="#008080">size_t</font> r <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <font color="#008080">size_t</font> c <font color="#990000">=</font> j<font color="#990000">;</font>
        lower_triangle<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>k<font color="#990000">,</font> r<font color="#990000">,</font> c<font color="#990000">);</font>
        check<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font>c<font color="#990000">];</font>
    <font color="#FF0000">}</font>
    <font color="#008080">sparse_matrix</font> <b><font color="#000000">subset</font></b><font color="#990000">(</font> lower_triangle <font color="#990000">);</font>

    <i><font color="#9A1900">// check results for both CppAD and Colpack</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i_method <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i_method <font color="#990000">&lt;</font> <font color="#993399">4</font><font color="#990000">;</font> i_method<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// coloring method</font></i>
        std<font color="#990000">::</font><font color="#008080">string</font> coloring<font color="#990000">;</font>
        <b><font color="#0000FF">switch</font></b><font color="#990000">(</font>i_method<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">case</font></b> <font color="#993399">0</font><font color="#990000">:</font>
            coloring <font color="#990000">=</font> <font color="#FF0000">"cppad.symmetric"</font><font color="#990000">;</font>
            <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

            <b><font color="#0000FF">case</font></b> <font color="#993399">1</font><font color="#990000">:</font>
            coloring <font color="#990000">=</font> <font color="#FF0000">"cppad.general"</font><font color="#990000">;</font>
            <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

            <b><font color="#0000FF">case</font></b> <font color="#993399">2</font><font color="#990000">:</font>
            coloring <font color="#990000">=</font> <font color="#FF0000">"colpack.symmetric"</font><font color="#990000">;</font>
            <b><font color="#0000FF">break</font></b><font color="#990000">;</font>

            <b><font color="#0000FF">case</font></b> <font color="#993399">3</font><font color="#990000">:</font>
            coloring <font color="#990000">=</font> <font color="#FF0000">"colpack.general"</font><font color="#990000">;</font>
            <b><font color="#0000FF">break</font></b><font color="#990000">;</font>
        <font color="#FF0000">}</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// compute Hessian</font></i>
        CppAD<font color="#990000">::</font><font color="#008080">sparse_hes_work</font> work<font color="#990000">;</font>
        <font color="#008080">d_vector</font> <b><font color="#000000">w</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
        w<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
        <font color="#008080">size_t</font> n_sweep <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">sparse_hes</font></b><font color="#990000">(</font>
            x<font color="#990000">,</font> w<font color="#990000">,</font> subset<font color="#990000">,</font> pattern<font color="#990000">,</font> coloring<font color="#990000">,</font> work
        <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// check result</font></i>
        <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> <b><font color="#000000">hes</font></b><font color="#990000">(</font> subset<font color="#990000">.</font><b><font color="#000000">val</font></b><font color="#990000">()</font> <font color="#990000">);</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> nnz<font color="#990000">;</font> k<font color="#990000">++)</font>
            ok <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>check<font color="#990000">[</font>k<font color="#990000">],</font> hes<font color="#990000">[</font>k<font color="#990000">],</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font>
            coloring <font color="#990000">==</font> <font color="#FF0000">"cppad.symmetric"</font>
        <font color="#990000">||</font>  coloring <font color="#990000">==</font> <font color="#FF0000">"colpack.symmetric"</font>
        <font color="#990000">)</font>
            ok <font color="#990000">&amp;=</font> n_sweep <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">;</font>
        <b><font color="#0000FF">else</font></b>
            ok <font color="#990000">&amp;=</font> n_sweep <font color="#990000">==</font> <font color="#993399">5</font><font color="#990000">;</font>
    <font color="#FF0000">}</font>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/sparse/colpack_hes.cpp

</body>
</html>
