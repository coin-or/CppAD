<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Convert A CppAD Sparse Matrix to an Eigen Sparse Matrix</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Convert A CppAD Sparse Matrix to an Eigen Sparse Matrix">
<meta name="keywords" id="keywords" content=" convert cppad sparse matrix to eigen syntax prototype include sizevector valuevector options value_type source destination compressed example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_sparse2eigen_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="set_union.cpp.htm" target="_top">Prev</a>
</td><td><a href="sparse2eigen.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>utility</option>
<option>sparse2eigen</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_utility_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_sparse2eigen_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Prototype</option>
<option>Include</option>
<option>SizeVector</option>
<option>ValueVector</option>
<option>Options</option>
<option>value_type</option>
<option>source</option>
<option>destination</option>
<option>Compressed</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<center><b><big><big>Convert A CppAD Sparse Matrix to an Eigen Sparse Matrix</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>#&nbsp;include&nbsp;&lt;cppad/utility/sparse2eigen.hpp&gt;<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>sparse2eigen(</span></font><i><font color="black"><span style='white-space: nowrap'>source</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>destination</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Prototype" id="Prototype">Prototype</a></big></b>

<pre><tt>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">SizeVector</font><font color="#990000">,</font> <b><font color="#0000FF">class</font></b> <font color="#008080">ValueVector</font><font color="#990000">,</font> <font color="#009900">int</font> Options<font color="#990000">&gt;</font>
<font color="#009900">void</font> <b><font color="#000000">sparse2eigen</font></b><font color="#990000">(</font>
<b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>sparse_rcv<font color="#990000">&lt;</font>SizeVector<font color="#990000">,</font> ValueVector<font color="#990000">&gt;&amp;</font>               source       <font color="#990000">,</font>
Eigen<font color="#990000">::</font>SparseMatrix<font color="#990000">&lt;</font><b><font color="#0000FF">typename</font></b> <font color="#008080">ValueVector</font><font color="#990000">::</font>value_type<font color="#990000">,</font> Options<font color="#990000">&gt;&amp;</font> destination  <font color="#990000">)</font></tt></pre>
<br>
<b><big><a name="Include" id="Include">Include</a></big></b>
<br>
If <a href="cmake.htm#include_eigen" target="_top"><span style='white-space: nowrap'>include_eigen</span></a>
 is specified on the cmake command line,
the file <code><font color="blue">cppad/utility/sparse2eigen.hpp</font></code>
is included by <code><font color="blue">cppad/cppad.hpp</font></code>.
In any case,
it can also be included separately with out the rest of
the <code><font color="blue">CppAD</font></code> routines.
Including this file defines
this version of the <code><font color="blue">sparse2eigen</font></code> within the <code><font color="blue">CppAD</font></code> namespace.

<br>
<br>
<b><big><a name="SizeVector" id="SizeVector">SizeVector</a></big></b>
<br>
We use <a href="sparse_rc.htm#SizeVector" target="_top"><span style='white-space: nowrap'>SizeVector</span></a>
 to denote a
<a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with elements of <code><font color="blue">size_t</font></code>.

<br>
<br>
<b><big><a name="ValueVector" id="ValueVector">ValueVector</a></big></b>
<br>
We use 
<code><i><font color="black"><span style='white-space: nowrap'>ValueVector</span></font></i></code>
 to denote a
<a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with elements of type 
<code><i><font color="black"><span style='white-space: nowrap'>value_type</span></font></i></code>
.

<br>
<br>
<b><big><a name="Options" id="Options">Options</a></big></b>
<br>
We use 
<code><i><font color="black"><span style='white-space: nowrap'>Options</span></font></i></code>
 to denote either
<code><font color="blue">Eigen::RowMajor</font></code> of <code><font color="blue">Eigen::ColMajor</font></code>.

<br>
<br>
<b><big><a name="value_type" id="value_type">value_type</a></big></b>
<br>
The type of elements of elements in 
<code><i><font color="black"><span style='white-space: nowrap'>source</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>destination</span></font></i></code>

must be the same. We use 
<code><i><font color="black"><span style='white-space: nowrap'>value_type</span></font></i></code>
 to denote this type.

<br>
<br>
<b><big><a name="source" id="source">source</a></big></b>
<br>
This is the CppAD sparse matrix that is being converted to eigen format.

<br>
<br>
<b><big><a name="destination" id="destination">destination</a></big></b>
<br>
This is the Eigen sparse matrix that is the result of the conversion.

<br>
<br>
<b><big><a name="Compressed" id="Compressed">Compressed</a></big></b>
<br>
The result matrix 
<code><i><font color="black"><span style='white-space: nowrap'>destination</span></font></i></code>

is in compressed format. For example, let

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>source</span></font></i><font color="blue"><span style='white-space: nowrap'>.nnz();<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s_vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s_value</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>source</span></font></i><font color="blue"><span style='white-space: nowrap'>.val();<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>value_type</span></font></i><font color="blue"><span style='white-space: nowrap'>*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>d_value</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>destination</span></font></i><font color="blue"><span style='white-space: nowrap'>.valuePtr();<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s_vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>source</span></font></i><font color="blue"><span style='white-space: nowrap'>.row_major();<br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s_vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>source</span></font></i><font color="blue"><span style='white-space: nowrap'>.col_major();<br>
</span></font></code>
It follows that, for 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;0&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i></code>
:
If 
<code><i><font color="black"><span style='white-space: nowrap'>Options</span></font></i></code>
 is <code><font color="blue">Eigen::RowMajor</font></code>,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>d_value</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s_value</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;]<br>
</span></font></code>
If 
<code><i><font color="black"><span style='white-space: nowrap'>Options</span></font></i></code>
 is <code><font color="blue">Eigen::ColMajor</font></code>,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>d_value</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s_value</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;]<br>
</span></font></code>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="sparse2eigen.cpp.htm" target="_top"><span style='white-space: nowrap'>sparse2eigen.cpp</span></a>
 contains an example and test
of <code><font color="blue">sparse2eigen.cpp</font></code> It return true if the test passes
and false otherwise.


<hr>Input File: include/cppad/utility/sparse2eigen.hpp

</body>
</html>
