<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Example Use of SpeedTest</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Example Use of SpeedTest">
<meta name="keywords" id="keywords" content=" example use speedtest program output ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_speed_program.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="speedtest.htm" target="_top">Prev</a>
</td><td><a href="test_boolofvoid.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>utility</option>
<option>SpeedTest</option>
<option>speed_program.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_utility_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_speedtest_htm.js'></script>
</td>
<td>speed_program.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Program</option>
<option>Output</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Example Use of SpeedTest</big></big></b></center>
<br>
<b><big><a name="Program" id="Program">Program</a></big></b>

<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/utility/speed_test.hpp&gt;</font>

<i><font color="#9A1900">// Some compilers have gotten smarter and do not calucate somthing that is not used</font></i>
<i><font color="#9A1900">// so make the result a global.</font></i>
<font color="#009900">double</font> global_result <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>

std<font color="#990000">::</font><font color="#008080">string</font> <b><font color="#000000">Test</font></b><font color="#990000">(</font><font color="#008080">size_t</font> size<font color="#990000">,</font> <font color="#008080">size_t</font> repeat<font color="#990000">)</font>
<font color="#FF0000">{</font>   <i><font color="#9A1900">// setup</font></i>
    <font color="#009900">double</font> <font color="#990000">*</font>a <font color="#990000">=</font> <b><font color="#0000FF">new</font></b> <font color="#009900">double</font><font color="#990000">[</font>size<font color="#990000">];</font>
    <font color="#009900">double</font> <font color="#990000">*</font>b <font color="#990000">=</font> <b><font color="#0000FF">new</font></b> <font color="#009900">double</font><font color="#990000">[</font>size<font color="#990000">];</font>
    <font color="#008080">size_t</font> i  <font color="#990000">=</font> size<font color="#990000">;;</font>
    <b><font color="#0000FF">while</font></b><font color="#990000">(</font>i<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#990000">--</font>i<font color="#990000">;</font>
        a<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>i<font color="#990000">);</font>
        b<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font><font color="#993399">2</font> <font color="#990000">*</font> i<font color="#990000">);</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// operations we are timing</font></i>
    <b><font color="#0000FF">while</font></b><font color="#990000">(</font>repeat<font color="#990000">--)</font>
    <font color="#FF0000">{</font>   i <font color="#990000">=</font> size<font color="#990000">;;</font>
        <b><font color="#0000FF">while</font></b><font color="#990000">(</font>i<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <font color="#990000">--</font>i<font color="#990000">;</font>
            global_result <font color="#990000">+=</font> a<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">*</font> b<font color="#990000">[</font>i<font color="#990000">];</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// teardown</font></i>
    <b><font color="#0000FF">delete</font></b> <font color="#990000">[]</font> a<font color="#990000">;</font>
    <b><font color="#0000FF">delete</font></b> <font color="#990000">[]</font> b<font color="#990000">;</font>

    <i><font color="#9A1900">// return a test name that is valid for all sizes and repeats</font></i>
    <b><font color="#0000FF">return</font></b> <font color="#FF0000">"double: result = sum_i a[i] * b[i]"</font><font color="#990000">;</font>
<font color="#FF0000">}</font>
<font color="#009900">int</font> <b><font color="#000000">main</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>
    CppAD<font color="#990000">::</font><b><font color="#000000">SpeedTest</font></b><font color="#990000">(</font>Test<font color="#990000">,</font> <font color="#993399">20</font><font color="#990000">,</font> <font color="#993399">20</font><font color="#990000">,</font> <font color="#993399">100</font><font color="#990000">);</font>
    <b><font color="#0000FF">return</font></b> <font color="#993399">0</font><font color="#990000">;</font>
<font color="#FF0000">}</font>
</tt></pre>
<b><big><a name="Output" id="Output">Output</a></big></b>
<br>
Executing of the program above generated the following output
(the rates will be different for each particular system):
<code><font color='blue'><pre style='display:inline'> 
    double: c[*] = a[*] + b[*]
    size = 20  rate = 7,157,515
    size = 40  rate = 3,887,214
    size = 60  rate = 2,685,214
    size = 80  rate = 2,032,124
    size = 100 rate = 1,657,828
</pre></font></code>

<hr>Input File: speed/example/speed_program.cpp

</body>
</html>
