<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Adolc Speed: Ode</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Adolc Speed: Ode">
<meta name="keywords" id="keywords" content=" adolc speed: ode specifications implementation ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_adolc_ode.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="adolc_mat_mul.cpp.htm" target="_top">Prev</a>
</td><td><a href="adolc_poly.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_adolc</option>
<option>adolc_ode.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_speed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_speed_adolc_htm.js'></script>
</td>
<td>adolc_ode.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Specifications</option>
<option>Implementation</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Adolc Speed: Ode</big></big></b></center>
<br>
<b><big><a name="Specifications" id="Specifications">Specifications</a></big></b>
<br>
See <a href="link_ode.htm" target="_top"><span style='white-space: nowrap'>link_ode</span></a>
.

<br>
<br>
<b><big><a name="Implementation" id="Implementation">Implementation</a></big></b>


<pre><tt><i><font color="#9A1900">// suppress conversion warnings before other includes</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/wno_conversion.hpp&gt;</font>
<i><font color="#9A1900">//</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;adolc/adolc.h&gt;</font>

<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/utility/vector.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/speed/ode_evaluate.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/speed/uniform_01.hpp&gt;</font>

<i><font color="#9A1900">// list of possible options</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;map&gt;</font>
<b><font color="#0000FF">extern</font></b> std<font color="#990000">::</font><font color="#008080">map&lt;std::string, bool&gt;</font> global_option<font color="#990000">;</font>

<font color="#009900">bool</font> <b><font color="#000000">link_ode</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font>                     size       <font color="#990000">,</font>
    <font color="#008080">size_t</font>                     repeat     <font color="#990000">,</font>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;double&gt;</font>      <font color="#990000">&amp;</font>x         <font color="#990000">,</font>
    CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font>      <font color="#990000">&amp;</font>jac
<font color="#990000">)</font>
<font color="#FF0000">{</font>
    <i><font color="#9A1900">// speed test global option values</font></i>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> global_option<font color="#990000">[</font><font color="#FF0000">"atomic"</font><font color="#990000">]</font> <font color="#990000">)</font>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> global_option<font color="#990000">[</font><font color="#FF0000">"memory"</font><font color="#990000">]</font> <font color="#990000">||</font> global_option<font color="#990000">[</font><font color="#FF0000">"optimize"</font><font color="#990000">]</font> <font color="#990000">)</font>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">// -------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// setup</font></i>
    <b><font color="#000000">assert</font></b><font color="#990000">(</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> size <font color="#990000">);</font>
    <b><font color="#000000">assert</font></b><font color="#990000">(</font> jac<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> size <font color="#990000">*</font> size <font color="#990000">);</font>

    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">vector&lt;adouble&gt;</font> ADVector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">vector&lt;double&gt;</font>  DblVector<font color="#990000">;</font>

    <font color="#008080">size_t</font> i<font color="#990000">,</font> j<font color="#990000">;</font>
    <font color="#009900">int</font> tag    <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>       <i><font color="#9A1900">// tape identifier</font></i>
    <font color="#009900">int</font> keep   <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>       <i><font color="#9A1900">// do not keep forward mode results</font></i>
    <font color="#008080">size_t</font> p   <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>       <i><font color="#9A1900">// use ode to calculate function values</font></i>
    <font color="#008080">size_t</font> n   <font color="#990000">=</font> size<font color="#990000">;</font>    <i><font color="#9A1900">// number of independent variables</font></i>
    <font color="#008080">size_t</font> m   <font color="#990000">=</font> n<font color="#990000">;</font>       <i><font color="#9A1900">// number of dependent variables</font></i>
    <font color="#008080">ADVector</font>  <b><font color="#000000">X</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">Y</font></b><font color="#990000">(</font>m<font color="#990000">);</font> <i><font color="#9A1900">// independent and dependent variables</font></i>
    <font color="#008080">DblVector</font> <b><font color="#000000">f</font></b><font color="#990000">(</font>m<font color="#990000">);</font>       <i><font color="#9A1900">// function value</font></i>

    <i><font color="#9A1900">// set up for thread_alloc memory allocator (fast and checks for leaks)</font></i>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>thread_alloc<font color="#990000">;</font> <i><font color="#9A1900">// the allocator</font></i>
    <font color="#008080">size_t</font> size_min<font color="#990000">;</font>           <i><font color="#9A1900">// requested number of elements</font></i>
    <font color="#008080">size_t</font> size_out<font color="#990000">;</font>           <i><font color="#9A1900">// capacity of an allocation</font></i>

    <i><font color="#9A1900">// raw memory for use with adolc</font></i>
    size_min <font color="#990000">=</font> n<font color="#990000">;</font>
    <font color="#009900">double</font> <font color="#990000">*</font>x_raw   <font color="#990000">=</font> thread_alloc<font color="#990000">::</font>create_array<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;(</font>size_min<font color="#990000">,</font> size_out<font color="#990000">);</font>
    size_min <font color="#990000">=</font> m <font color="#990000">*</font> n<font color="#990000">;</font>
    <font color="#009900">double</font> <font color="#990000">*</font>jac_raw <font color="#990000">=</font> thread_alloc<font color="#990000">::</font>create_array<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;(</font>size_min<font color="#990000">,</font> size_out<font color="#990000">);</font>
    size_min <font color="#990000">=</font> m<font color="#990000">;</font>
    <font color="#009900">double</font> <font color="#990000">**</font>jac_ptr <font color="#990000">=</font> thread_alloc<font color="#990000">::</font>create_array<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">*&gt;(</font>size_min<font color="#990000">,</font> size_out<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> i<font color="#990000">++)</font>
        jac_ptr<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> jac_raw <font color="#990000">+</font> i <font color="#990000">*</font> n<font color="#990000">;</font>

    <i><font color="#9A1900">// -------------------------------------------------------------</font></i>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> global_option<font color="#990000">[</font><font color="#FF0000">"onetape"</font><font color="#990000">]</font> <font color="#990000">)</font> <b><font color="#0000FF">while</font></b><font color="#990000">(</font>repeat<font color="#990000">--)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// choose next x value</font></i>
        <b><font color="#000000">uniform_01</font></b><font color="#990000">(</font>n<font color="#990000">,</font> x<font color="#990000">);</font>

        <i><font color="#9A1900">// declare independent variables</font></i>
        <b><font color="#000000">trace_on</font></b><font color="#990000">(</font>tag<font color="#990000">,</font> keep<font color="#990000">);</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
            X<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">&lt;&lt;=</font> x<font color="#990000">[</font>j<font color="#990000">];</font>

        <i><font color="#9A1900">// evaluate function</font></i>
        CppAD<font color="#990000">::</font><b><font color="#000000">ode_evaluate</font></b><font color="#990000">(</font>X<font color="#990000">,</font> p<font color="#990000">,</font> Y<font color="#990000">);</font>

        <i><font color="#9A1900">// create function object f : X -&gt; Y</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> i<font color="#990000">++)</font>
            Y<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">&gt;&gt;=</font> f<font color="#990000">[</font>i<font color="#990000">];</font>
        <b><font color="#000000">trace_off</font></b><font color="#990000">();</font>

        <i><font color="#9A1900">// evaluate the Jacobian</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
            x_raw<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font>j<font color="#990000">];</font>
        <b><font color="#000000">jacobian</font></b><font color="#990000">(</font>tag<font color="#990000">,</font> m<font color="#990000">,</font> n<font color="#990000">,</font> x_raw<font color="#990000">,</font> jac_ptr<font color="#990000">);</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">else</font></b>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// choose next x value</font></i>
        <b><font color="#000000">uniform_01</font></b><font color="#990000">(</font>n<font color="#990000">,</font> x<font color="#990000">);</font>

        <i><font color="#9A1900">// declare independent variables</font></i>
        <b><font color="#000000">trace_on</font></b><font color="#990000">(</font>tag<font color="#990000">,</font> keep<font color="#990000">);</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
            X<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">&lt;&lt;=</font> x<font color="#990000">[</font>j<font color="#990000">];</font>

        <i><font color="#9A1900">// evaluate function</font></i>
        CppAD<font color="#990000">::</font><b><font color="#000000">ode_evaluate</font></b><font color="#990000">(</font>X<font color="#990000">,</font> p<font color="#990000">,</font> Y<font color="#990000">);</font>

        <i><font color="#9A1900">// create function object f : X -&gt; Y</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> i<font color="#990000">++)</font>
            Y<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">&gt;&gt;=</font> f<font color="#990000">[</font>i<font color="#990000">];</font>
        <b><font color="#000000">trace_off</font></b><font color="#990000">();</font>

        <b><font color="#0000FF">while</font></b><font color="#990000">(</font>repeat<font color="#990000">--)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// get next argument value</font></i>
            <b><font color="#000000">uniform_01</font></b><font color="#990000">(</font>n<font color="#990000">,</font> x<font color="#990000">);</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
                x_raw<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font>j<font color="#990000">];</font>

            <i><font color="#9A1900">// evaluate jacobian</font></i>
            <b><font color="#000000">jacobian</font></b><font color="#990000">(</font>tag<font color="#990000">,</font> m<font color="#990000">,</font> n<font color="#990000">,</font> x_raw<font color="#990000">,</font> jac_ptr<font color="#990000">);</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// convert return value to a simple vector</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> i<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
            jac<font color="#990000">[</font>i <font color="#990000">*</font> n <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">=</font> jac_ptr<font color="#990000">[</font>i<font color="#990000">][</font>j<font color="#990000">];</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// ----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// tear down</font></i>
    thread_alloc<font color="#990000">::</font><b><font color="#000000">delete_array</font></b><font color="#990000">(</font>x_raw<font color="#990000">);</font>
    thread_alloc<font color="#990000">::</font><b><font color="#000000">delete_array</font></b><font color="#990000">(</font>jac_raw<font color="#990000">);</font>
    thread_alloc<font color="#990000">::</font><b><font color="#000000">delete_array</font></b><font color="#990000">(</font>jac_ptr<font color="#990000">);</font>

    <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: speed/adolc/ode.cpp

</body>
</html>
