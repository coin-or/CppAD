<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>An Error Controller for ODE Solvers</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="An Error Controller for ODE Solvers">
<meta name="keywords" id="keywords" content=" error controller ode solvers syntax description include notation xf method step nan order ti tf xi smin smax scur eabs erel ef maxabs nstep criteria discussion scalar vector example theory source code ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_odeerrcontrol_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="near_equal.cpp.htm" target="_top">Prev</a>
</td><td><a href="ode_err_control.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>utility</option>
<option>OdeErrControl</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_utility_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_odeerrcontrol_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Description</option>
<option>Include</option>
<option>Notation</option>
<option>xf</option>
<option>Method</option>
<option>---..step</option>
<option>---..Nan</option>
<option>---..order</option>
<option>ti</option>
<option>tf</option>
<option>xi</option>
<option>smin</option>
<option>smax</option>
<option>scur</option>
<option>eabs</option>
<option>erel</option>
<option>ef</option>
<option>maxabs</option>
<option>nstep</option>
<option>Error Criteria Discussion</option>
<option>Scalar</option>
<option>Vector</option>
<option>Example</option>
<option>Theory</option>
<option>Source Code</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>An Error Controller for ODE Solvers</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>#&nbsp;include&nbsp;&lt;cppad/utility/ode_err_control.hpp&gt;<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;OdeErrControl(</span></font><i><font color="black"><span style='white-space: nowrap'>method</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ti</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>tf</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xi</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>smin</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>smax</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>scur</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>eabs</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>erel</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ef</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>maxabs</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nstep</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;)</span></font></code>



<br>
<br>
<b><big><a name="Description" id="Description">Description</a></big></b>
<br>
Let <small>@(@
\B{R}
@)@</small> denote the real numbers
and let <small>@(@
F : \B{R} \times \B{R}^n \rightarrow \B{R}^n
@)@</small> be a smooth function.
We define <small>@(@
X : [ti , tf] \rightarrow \B{R}^n
@)@</small> by
the following initial value problem:
<small>@[@

\begin{array}{rcl}
    X(ti)  & = & xi    \\
    X'(t)  & = & F[t , X(t)]
\end{array}

@]@</small>
The routine <code><font color="blue">OdeErrControl</font></code> can be used to adjust the step size
used an arbitrary integration methods in order to be as fast as possible
and still with in a requested error bound.

<br>
<br>
<b><big><a name="Include" id="Include">Include</a></big></b>
<br>
The file <code><font color="blue">cppad/utility/ode_err_control.hpp</font></code> is included by
<code><font color="blue">cppad/cppad.hpp</font></code>
but it can also be included separately with out the rest of
the <code><font color="blue">CppAD</font></code> routines.

<br>
<br>
<b><big><a name="Notation" id="Notation">Notation</a></big></b>
<br>
The template parameter types <a href="odeerrcontrol.htm#Scalar" target="_top"><span style='white-space: nowrap'>Scalar</span></a>
 and
<a href="odeerrcontrol.htm#Vector" target="_top"><span style='white-space: nowrap'>Vector</span></a>
 are documented below.

<br>
<br>
<b><big><a name="xf" id="xf">xf</a></big></b>
<br>
The return value 
<code><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i></code>
 has the prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
(see description of <a href="odeerrcontrol.htm#Vector" target="_top"><span style='white-space: nowrap'>Vector</span></a>
 below).
and the size of 
<code><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i></code>
 is equal to 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
If 
<code><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i></code>
 contains not a number <a href="nan.htm" target="_top"><span style='white-space: nowrap'>nan</span></a>
,
see the discussion of <a href="odeerrcontrol.htm#Method.Nan" target="_top"><span style='white-space: nowrap'>step</span></a>
.

<br>
<br>
<b><big><a name="Method" id="Method">Method</a></big></b>
<br>
The class 
<code><i><font color="black"><span style='white-space: nowrap'>Method</span></font></i></code>

and the object 
<code><i><font color="black"><span style='white-space: nowrap'>method</span></font></i></code>
 satisfy the following syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Method</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>method</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The object 
<code><i><font color="black"><span style='white-space: nowrap'>method</span></font></i></code>
 must support <code><font color="blue">step</font></code> and
<code><font color="blue">order</font></code> member functions defined below:

<br>
<br>
<big><a name="Method.step" id="Method.step">step</a></big>
<br>
The syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>method</span></font></i><font color="blue"><span style='white-space: nowrap'>.step(</span></font><i><font color="black"><span style='white-space: nowrap'>ta</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>tb</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xa</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xb</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>eb</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
executes one step of the integration method.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
</span></font><i><font color="black"><span style='white-space: nowrap'>ta</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>ta</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>ta</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the initial time for this step in the
ODE integration.
(see description of <a href="odeerrcontrol.htm#Scalar" target="_top"><span style='white-space: nowrap'>Scalar</span></a>
 below).

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
</span></font><i><font color="black"><span style='white-space: nowrap'>tb</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>tb</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>tb</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the final time for this step in the
ODE integration.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
</span></font><i><font color="black"><span style='white-space: nowrap'>xa</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>xa</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>xa</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
It specifies the value of <small>@(@
X(ta)
@)@</small>.
(see description of <a href="odeerrcontrol.htm#Vector" target="_top"><span style='white-space: nowrap'>Vector</span></a>
 below).

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
</span></font><i><font color="black"><span style='white-space: nowrap'>xb</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The argument value 
<code><i><font color="black"><span style='white-space: nowrap'>xb</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>xb</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
The input value of its elements does not matter.
On output,
it contains the approximation for <small>@(@
X(tb)
@)@</small> that the method obtains.

<code><font color="blue"><span style='white-space: nowrap'><br>
<br>
</span></font><i><font color="black"><span style='white-space: nowrap'>eb</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The argument value 
<code><i><font color="black"><span style='white-space: nowrap'>eb</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>eb</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
The input value of its elements does not matter.
On output,
it contains an estimate for the error in the approximation 
<code><i><font color="black"><span style='white-space: nowrap'>xb</span></font></i></code>
.
It is assumed (locally) that the error bound in this approximation
nearly equal to <small>@(@
K (tb - ta)^m
@)@</small>
where 
<code><i><font color="black"><span style='white-space: nowrap'>K</span></font></i></code>
 is a fixed constant and 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>

is the corresponding argument to <code><font color="blue">CodeControl</font></code>.

<br>
<br>
<big><a name="Method.Nan" id="Method.Nan">Nan</a></big>
<br>
If any element of the vector 
<code><i><font color="black"><span style='white-space: nowrap'>eb</span></font></i></code>
 or 
<code><i><font color="black"><span style='white-space: nowrap'>xb</span></font></i></code>
 are
not a number <code><font color="blue">nan</font></code>,
the current step is considered to large.
If this happens with the current step size equal to 
<code><i><font color="black"><span style='white-space: nowrap'>smin</span></font></i></code>
,
<code><font color="blue">OdeErrControl</font></code> returns with 
<code><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>ef</span></font></i></code>
 as vectors
of <code><font color="blue">nan</font></code>.

<br>
<br>
<big><a name="Method.order" id="Method.order">order</a></big>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
 is <code><font color="blue">size_t</font></code>,
the object 
<code><i><font color="black"><span style='white-space: nowrap'>method</span></font></i></code>
 must also support the following syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>method</span></font></i><font color="blue"><span style='white-space: nowrap'>.order()<br>
</span></font></code>
The return value 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
 is the order of the error estimate;
i.e., there is a constant K such that if <small>@(@
ti \leq ta \leq tb \leq tf
@)@</small>,
<small>@[@

    | eb(tb) | \leq K | tb - ta |^m

@]@</small>
where 
<code><i><font color="black"><span style='white-space: nowrap'>ta</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>tb</span></font></i></code>
, and 
<code><i><font color="black"><span style='white-space: nowrap'>eb</span></font></i></code>
 are as in

<code><i><font color="black"><span style='white-space: nowrap'>method</span></font></i><font color="blue"><span style='white-space: nowrap'>.step(</span></font><i><font color="black"><span style='white-space: nowrap'>ta</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>tb</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xa</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xb</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>eb</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>



<br>
<br>
<b><big><a name="ti" id="ti">ti</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>ti</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>ti</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the initial time for the integration of
the differential equation.


<br>
<br>
<b><big><a name="tf" id="tf">tf</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>tf</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>tf</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the final time for the integration of
the differential equation.

<br>
<br>
<b><big><a name="xi" id="xi">xi</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>xi</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>xi</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
It specifies value of <small>@(@
X(ti)
@)@</small>.

<br>
<br>
<b><big><a name="smin" id="smin">smin</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>smin</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>smin</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The step size during a call to 
<code><i><font color="black"><span style='white-space: nowrap'>method</span></font></i></code>
 is defined as
the corresponding value of <small>@(@
tb - ta
@)@</small>.
If <small>@(@
tf - ti \leq smin
@)@</small>,
the integration will be done in one step of size 
<code><i><font color="black"><span style='white-space: nowrap'>tf&nbsp;-&nbsp;ti</span></font></i></code>
.
Otherwise,
the minimum value of 
<code><i><font color="black"><span style='white-space: nowrap'>tb&nbsp;-&nbsp;ta</span></font></i></code>
 will be <small>@(@
smin
@)@</small>
except for the last two calls to 
<code><i><font color="black"><span style='white-space: nowrap'>method</span></font></i></code>
 where it may be
as small as <small>@(@
smin / 2
@)@</small>.

<br>
<br>
<b><big><a name="smax" id="smax">smax</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>smax</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>smax</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the maximum step size to use during the integration;
i.e., the maximum value for <small>@(@
tb - ta
@)@</small> in a call to 
<code><i><font color="black"><span style='white-space: nowrap'>method</span></font></i></code>
.
The value of 
<code><i><font color="black"><span style='white-space: nowrap'>smax</span></font></i></code>
 must be greater than or equal 
<code><i><font color="black"><span style='white-space: nowrap'>smin</span></font></i></code>
.

<br>
<br>
<b><big><a name="scur" id="scur">scur</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>scur</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>scur</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The value of 
<code><i><font color="black"><span style='white-space: nowrap'>scur</span></font></i></code>
 is the suggested next step size,
based on error criteria, to try in the next call to 
<code><i><font color="black"><span style='white-space: nowrap'>method</span></font></i></code>
.
On input it corresponds to the first call to 
<code><i><font color="black"><span style='white-space: nowrap'>method</span></font></i></code>
,
in this call to <code><font color="blue">OdeErrControl</font></code> (where <small>@(@
ta = ti
@)@</small>).
On output it corresponds to the next call to 
<code><i><font color="black"><span style='white-space: nowrap'>method</span></font></i></code>
,
in a subsequent call to <code><font color="blue">OdeErrControl</font></code> (where 
<code><i><font color="black"><span style='white-space: nowrap'>ta&nbsp;=&nbsp;tf</span></font></i></code>
).

<br>
<br>
<b><big><a name="eabs" id="eabs">eabs</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>eabs</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>eabs</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
Each of the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>eabs</span></font></i></code>
 must be
greater than or equal zero.
It specifies a bound for the absolute
error in the return value 
<code><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i></code>
 as an approximation for <small>@(@
X(tf)
@)@</small>.
(see the
<a href="odeerrcontrol.htm#Error Criteria Discussion" target="_top"><span style='white-space: nowrap'>error&nbsp;criteria&nbsp;discussion</span></a>

below).

<br>
<br>
<b><big><a name="erel" id="erel">erel</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>erel</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>erel</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and is greater than or equal zero.
It specifies a bound for the relative
error in the return value 
<code><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i></code>
 as an approximation for <small>@(@
X(tf)
@)@</small>
(see the
<a href="odeerrcontrol.htm#Error Criteria Discussion" target="_top"><span style='white-space: nowrap'>error&nbsp;criteria&nbsp;discussion</span></a>

below).

<br>
<br>
<b><big><a name="ef" id="ef">ef</a></big></b>
<br>
The argument value 
<code><i><font color="black"><span style='white-space: nowrap'>ef</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>ef</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
The input value of its elements does not matter.
On output,
it contains an estimated bound for the
absolute error in the approximation 
<code><i><font color="black"><span style='white-space: nowrap'>xf</span></font></i></code>
; i.e.,
<small>@[@

    ef_i > | X( tf )_i - xf_i |

@]@</small>
If on output 
<code><i><font color="black"><span style='white-space: nowrap'>ef</span></font></i></code>
 contains not a number <code><font color="blue">nan</font></code>,
see the discussion of <a href="odeerrcontrol.htm#Method.Nan" target="_top"><span style='white-space: nowrap'>step</span></a>
.

<br>
<br>
<b><big><a name="maxabs" id="maxabs">maxabs</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>maxabs</span></font></i></code>
 is optional in the call to <code><font color="blue">OdeErrControl</font></code>.
If it is present, it has the prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>maxabs</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
The input value of its elements does not matter.
On output,
it contains an estimate for the
maximum absolute value of <small>@(@
X(t)
@)@</small>; i.e.,
<small>@[@

    maxabs[i] \approx \max \left\{
        | X( t )_i | \; : \;  t \in [ti, tf]
    \right\}

@]@</small>

<br>
<br>
<b><big><a name="nstep" id="nstep">nstep</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>nstep</span></font></i></code>
 is optional in the call to <code><font color="blue">OdeErrControl</font></code>.
If it is present, it has the prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>size_t</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>nstep</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
Its input value does not matter and its output value
is the number of calls to 
<code><i><font color="black"><span style='white-space: nowrap'>method</span></font></i><font color="blue"><span style='white-space: nowrap'>.step</span></font></code>

used by <code><font color="blue">OdeErrControl</font></code>.

<br>
<br>
<b><big><a name="Error Criteria Discussion" id="Error Criteria Discussion">Error Criteria Discussion</a></big></b>
<br>
The relative error criteria 
<code><i><font color="black"><span style='white-space: nowrap'>erel</span></font></i></code>
 and
absolute error criteria 
<code><i><font color="black"><span style='white-space: nowrap'>eabs</span></font></i></code>
 are enforced during each step of the
integration of the ordinary differential equations.
In addition, they are inversely scaled by the step size so that
the total error bound is less than the sum of the error bounds.
To be specific, if <small>@(@
\tilde{X} (t)
@)@</small> is the approximate solution
at time <small>@(@
t
@)@</small>,

<code><i><font color="black"><span style='white-space: nowrap'>ta</span></font></i></code>
 is the initial step time,
and 
<code><i><font color="black"><span style='white-space: nowrap'>tb</span></font></i></code>
 is the final step time,
<small>@[@

\left| \tilde{X} (tb)_j  - X (tb)_j \right|
\leq
\frac{tf - ti}{tb - ta}
\left[ eabs[j] + erel \;  | \tilde{X} (tb)_j | \right]

@]@</small>
If <small>@(@
X(tb)_j
@)@</small> is near zero for some <small>@(@
tb \in [ti , tf]
@)@</small>,
and one uses an absolute error criteria <small>@(@
eabs[j]
@)@</small> of zero,
the error criteria above will force <code><font color="blue">OdeErrControl</font></code>
to use step sizes equal to
<a href="odeerrcontrol.htm#smin" target="_top"><span style='white-space: nowrap'>smin</span></a>

for steps ending near <small>@(@
tb
@)@</small>.
In this case, the error relative to 
<code><i><font color="black"><span style='white-space: nowrap'>maxabs</span></font></i></code>
 can be judged after
<code><font color="blue">OdeErrControl</font></code> returns.
If 
<code><i><font color="black"><span style='white-space: nowrap'>ef</span></font></i></code>
 is to large relative to 
<code><i><font color="black"><span style='white-space: nowrap'>maxabs</span></font></i></code>
,
<code><font color="blue">OdeErrControl</font></code> can be called again
with a smaller value of 
<code><i><font color="black"><span style='white-space: nowrap'>smin</span></font></i></code>
.

<br>
<br>
<b><big><a name="Scalar" id="Scalar">Scalar</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i></code>
 must satisfy the conditions
for a <a href="numerictype.htm" target="_top"><span style='white-space: nowrap'>NumericType</span></a>
 type.
The routine <a href="checknumerictype.htm" target="_top"><span style='white-space: nowrap'>CheckNumericType</span></a>
 will generate an error message
if this is not the case.
In addition, the following operations must be defined for

<code><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i></code>
 objects 
<code><i><font color="black"><span style='white-space: nowrap'>a</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>b</span></font></i></code>
:

<table><tr><td align='left'  valign='top'>

<b>Operation</b> </td><td align='left'  valign='top'>
 <b>Description</b>  </td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>a</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>b</span></font></i></code>
 </td><td align='left'  valign='top'>

    returns true (false) if 
<code><i><font color="black"><span style='white-space: nowrap'>a</span></font></i></code>
 is less than or equal
    (greater than) 
<code><i><font color="black"><span style='white-space: nowrap'>b</span></font></i></code>
.
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>a</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>b</span></font></i></code>
 </td><td align='left'  valign='top'>

    returns true (false) if 
<code><i><font color="black"><span style='white-space: nowrap'>a</span></font></i></code>
 is equal to 
<code><i><font color="black"><span style='white-space: nowrap'>b</span></font></i></code>
.
</td></tr><tr><td align='left'  valign='top'>


<code><font color="blue"><span style='white-space: nowrap'>log(</span></font><i><font color="black"><span style='white-space: nowrap'>a</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
 </td><td align='left'  valign='top'>

    returns a 
<code><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i></code>
 equal to the logarithm of 
<code><i><font color="black"><span style='white-space: nowrap'>a</span></font></i></code>

</td></tr><tr><td align='left'  valign='top'>


<code><font color="blue"><span style='white-space: nowrap'>exp(</span></font><i><font color="black"><span style='white-space: nowrap'>a</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
 </td><td align='left'  valign='top'>

    returns a 
<code><i><font color="black"><span style='white-space: nowrap'>Scalar</span></font></i></code>
 equal to the exponential of 
<code><i><font color="black"><span style='white-space: nowrap'>a</span></font></i></code>

</td></tr>
</table>
<br>
<b><big><a name="Vector" id="Vector">Vector</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i></code>
 must be a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with
<a href="simplevector.htm#Elements of Specified Type" target="_top"><span style='white-space: nowrap'>elements&nbsp;of&nbsp;type&nbsp;Scalar</span></a>
.
The routine <a href="checksimplevector.htm" target="_top"><span style='white-space: nowrap'>CheckSimpleVector</span></a>
 will generate an error message
if this is not the case.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
The files
<a href="ode_err_control.cpp.htm" target="_top"><span style='white-space: nowrap'>ode_err_control.cpp</span></a>

and
<a href="ode_err_maxabs.cpp.htm" target="_top"><span style='white-space: nowrap'>ode_err_maxabs.cpp</span></a>

contain examples and tests of using this routine.
They return true if they succeed and false otherwise.

<br>
<br>
<b><big><a name="Theory" id="Theory">Theory</a></big></b>
<br>
Let <small>@(@
e(s)
@)@</small> be the error as a function of the
step size <small>@(@
s
@)@</small> and suppose that there is a constant
<small>@(@
K
@)@</small> such that <small>@(@
e(s) = K s^m
@)@</small>.
Let <small>@(@
a
@)@</small> be our error bound.
Given the value of <small>@(@
e(s)
@)@</small>, a step of size <small>@(@
\lambda s
@)@</small>
would be ok provided that
<small>@[@

\begin{array}{rcl}
    a  & \geq & e( \lambda s ) (tf - ti) / ( \lambda s ) \\
    a  & \geq & K \lambda^m s^m (tf - ti) / ( \lambda s ) \\
    a  & \geq & \lambda^{m-1} s^{m-1} (tf - ti) e(s) / s^m \\
    a  & \geq & \lambda^{m-1} (tf - ti) e(s) / s           \\
    \lambda^{m-1} & \leq & \frac{a}{e(s)} \frac{s}{tf - ti}
\end{array}

@]@</small>
Thus if the right hand side of the last inequality is greater
than or equal to one, the step of size <small>@(@
s
@)@</small> is ok.

<br>
<br>
<b><big><a name="Source Code" id="Source Code">Source Code</a></big></b>
<br>
The source code for this routine is in the file
<code><font color="blue">cppad/ode_err_control.hpp</font></code>.


<hr>Input File: include/cppad/utility/ode_err_control.hpp

</body>
</html>
