<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>rosen_34: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="rosen_34: Example and Test">
<meta name="keywords" id="keywords" content=" rosen_34: example test operation sequence ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_rosen_34.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="rosen34.htm" target="_top">Prev</a>
</td><td><a href="runge45.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>utility</option>
<option>Rosen34</option>
<option>rosen_34.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_utility_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_rosen34_htm.js'></script>
</td>
<td>rosen_34.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Operation Sequence</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@


<center><b><big><big>rosen_34: Example and Test</big></big></b></center>
Define
<small>@(@
X : \B{R} \rightarrow \B{R}^n
@)@</small> by
<small>@[@

    X_i (t) =  t^{i+1}

@]@</small>
for <small>@(@
i = 1 , \ldots , n-1
@)@</small>.
It follows that
<small>@[@

\begin{array}{rclr}
X_i(0)     & = & 0                             & {\rm for \; all \;} i \\
X_i ' (t)  & = & 1                             & {\rm if \;} i = 0      \\
X_i '(t)   & = & (i+1) t^i = (i+1) X_{i-1} (t) & {\rm if \;} i > 0
\end{array}

@]@</small>
The example tests Rosen34 using the relations above:

<br>
<br>
<b><big><a name="Operation Sequence" id="Operation Sequence">Operation Sequence</a></big></b>
<br>
The <a href="rosen34.htm" target="_top"><span style='white-space: nowrap'>rosen34</span></a>
 method for solving ODE's requires the inversion
of a system of linear equations.
This indices used for pivoting may change with different values
for <small>@(@
t
@)@</small> and <small>@(@
x
@)@</small>.
This example checks the comparison operators.
If some of the comparisons change,
it makes a new recording of the function with the pivots for the current
<small>@(@
t
@)@</small> and <small>@(@
x
@)@</small>.
Note that one could skip this step and always use the same pivot.
This would not be as numerically stable,
but it would still solve the equations
(so long as none of the pivot elements are zero).

<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>        <i><font color="#9A1900">// For automatic differentiation</font></i>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
    <b><font color="#0000FF">class</font></b> <font color="#008080">Fun</font> <font color="#FF0000">{</font>
    <b><font color="#0000FF">private</font></b><font color="#990000">:</font>
        <b><font color="#0000FF">const</font></b> <font color="#009900">bool</font>           use_x_<font color="#990000">;</font>
        CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> ode_ind_<font color="#990000">;</font>
        CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> ode_dep_<font color="#990000">;</font>
    <b><font color="#0000FF">public</font></b><font color="#990000">:</font>
        <i><font color="#9A1900">// constructor</font></i>
        <b><font color="#000000">Fun</font></b><font color="#990000">(</font><font color="#009900">bool</font> use_x<font color="#990000">)</font> <font color="#990000">:</font> <b><font color="#000000">use_x_</font></b><font color="#990000">(</font>use_x<font color="#990000">)</font>
        <font color="#FF0000">{</font> <font color="#FF0000">}</font>

        <i><font color="#9A1900">// compute f(t, x) both for double and AD&lt;double&gt;</font></i>
        <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Scalar</font><font color="#990000">&gt;</font>
        <font color="#009900">void</font> <b><font color="#000000">Ode</font></b><font color="#990000">(</font>
            <b><font color="#0000FF">const</font></b> <font color="#008080">Scalar</font>                   <font color="#990000">&amp;</font>t<font color="#990000">,</font>
            <b><font color="#0000FF">const</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>Scalar<font color="#990000">)</font> <font color="#990000">&amp;</font>x<font color="#990000">,</font>
            <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>Scalar<font color="#990000">)</font>       <font color="#990000">&amp;</font>f<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <font color="#008080">size_t</font> n  <font color="#990000">=</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
            <font color="#008080">Scalar</font> <b><font color="#000000">ti</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
            f<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>   <font color="#990000">=</font> <b><font color="#000000">Scalar</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">;</font> i<font color="#990000">++)</font>
            <font color="#FF0000">{</font>   ti <font color="#990000">*=</font> t<font color="#990000">;</font>
                <b><font color="#0000FF">if</font></b><font color="#990000">(</font> use_x_ <font color="#990000">)</font>
                    f<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">Scalar</font></b><font color="#990000">(</font>i<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">*</font> x<font color="#990000">[</font>i<font color="#990000">-</font><font color="#993399">1</font><font color="#990000">];</font>
                <b><font color="#0000FF">else</font></b>
                    f<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">Scalar</font></b><font color="#990000">(</font>i<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">*</font> ti<font color="#990000">;</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>

        <i><font color="#9A1900">// compute partial of f(t, x) w.r.t. t using AD</font></i>
        <font color="#009900">void</font> <b><font color="#000000">Ode_ind</font></b><font color="#990000">(</font>
            <b><font color="#0000FF">const</font></b> <font color="#009900">double</font>                   <font color="#990000">&amp;</font>t<font color="#990000">,</font>
            <b><font color="#0000FF">const</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font> <font color="#990000">&amp;</font>x<font color="#990000">,</font>
            <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font>       <font color="#990000">&amp;</font>f_t<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">using</font></b> <b><font color="#0000FF">namespace</font></b> CppAD<font color="#990000">;</font>

            <font color="#008080">size_t</font> n                <font color="#990000">=</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
            <font color="#009900">bool</font>   ode_ind_defined  <font color="#990000">=</font> ode_ind_<font color="#990000">.</font><b><font color="#000000">size_var</font></b><font color="#990000">()</font> <font color="#990000">!=</font> <font color="#993399">0</font><font color="#990000">;</font>
            <i><font color="#9A1900">//</font></i>
            <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font> <b><font color="#000000">t_vec</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
            t_vec<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> t<font color="#990000">;</font>
            <i><font color="#9A1900">//</font></i>
            <font color="#009900">bool</font> retape <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> ode_ind_defined <font color="#990000">)</font>
            <font color="#FF0000">{</font>   <i><font color="#9A1900">// check if any comparison operators have a different result</font></i>
                ode_ind_<font color="#990000">.</font><b><font color="#000000">new_dynamic</font></b><font color="#990000">(</font>x<font color="#990000">);</font>
                ode_ind_<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> t_vec<font color="#990000">);</font>
                retape <font color="#990000">=</font> ode_ind_<font color="#990000">.</font><b><font color="#000000">compare_change_number</font></b><font color="#990000">()</font> <font color="#990000">&gt;</font> <font color="#993399">0</font><font color="#990000">;</font>
            <font color="#FF0000">}</font>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> retape <font color="#990000">)</font>
            <font color="#FF0000">{</font>   <i><font color="#9A1900">// record function that evaluates f(t, x)</font></i>
                <i><font color="#9A1900">// with t as independent variable and x as dynamcic parameter</font></i>
                <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;)</font> <b><font color="#000000">at</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
                <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;)</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
                <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;)</font> <b><font color="#000000">af</font></b><font color="#990000">(</font>n<font color="#990000">);</font>

                <i><font color="#9A1900">// set argument values</font></i>
                at<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> t<font color="#990000">;</font>
                <font color="#008080">size_t</font> i<font color="#990000">;</font>
                <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">;</font> i<font color="#990000">++)</font>
                    ax<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font>i<font color="#990000">];</font>

                <i><font color="#9A1900">// declare independent variables and dynamic parameters</font></i>
                <font color="#008080">size_t</font> abort_op_index <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
                <font color="#009900">bool</font>   record_compare <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
                <b><font color="#000000">Independent</font></b><font color="#990000">(</font>at<font color="#990000">,</font> abort_op_index<font color="#990000">,</font> record_compare<font color="#990000">,</font> ax<font color="#990000">);</font>

                <i><font color="#9A1900">// compute f(t, x)</font></i>
                <b><font color="#0000FF">this</font></b><font color="#990000">-&gt;</font><b><font color="#000000">Ode</font></b><font color="#990000">(</font>at<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> ax<font color="#990000">,</font> af<font color="#990000">);</font>

                <i><font color="#9A1900">// define AD function object</font></i>
                ode_ind_<font color="#990000">.</font><b><font color="#000000">Dependent</font></b><font color="#990000">(</font>at<font color="#990000">,</font> af<font color="#990000">);</font>

                <i><font color="#9A1900">// store result in ode_ind_ so can be re-used</font></i>
                <b><font color="#000000">assert</font></b><font color="#990000">(</font> ode_ind_<font color="#990000">.</font><b><font color="#000000">size_var</font></b><font color="#990000">()</font> <font color="#990000">!=</font> <font color="#993399">0</font> <font color="#990000">);</font>
            <font color="#FF0000">}</font>
            <i><font color="#9A1900">// special case where new_dynamic not yet set</font></i>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> ode_ind_defined <font color="#990000">)</font>
                ode_ind_<font color="#990000">.</font><b><font color="#000000">new_dynamic</font></b><font color="#990000">(</font>x<font color="#990000">);</font>
            <i><font color="#9A1900">// compute partial of f w.r.t t</font></i>
            f_t <font color="#990000">=</font> ode_ind_<font color="#990000">.</font><b><font color="#000000">Jacobian</font></b><font color="#990000">(</font>t_vec<font color="#990000">);</font> <i><font color="#9A1900">// partial f(t, x) w.r.t. t</font></i>
        <font color="#FF0000">}</font>

        <i><font color="#9A1900">// compute partial of f(t, x) w.r.t. x using AD</font></i>
        <font color="#009900">void</font> <b><font color="#000000">Ode_dep</font></b><font color="#990000">(</font>
            <b><font color="#0000FF">const</font></b> <font color="#009900">double</font>                   <font color="#990000">&amp;</font>t<font color="#990000">,</font>
            <b><font color="#0000FF">const</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font> <font color="#990000">&amp;</font>x<font color="#990000">,</font>
            <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font>       <font color="#990000">&amp;</font>f_x<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">using</font></b> <b><font color="#0000FF">namespace</font></b> CppAD<font color="#990000">;</font>

            <font color="#008080">size_t</font> n                <font color="#990000">=</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
            <font color="#009900">bool</font>   ode_dep_defined  <font color="#990000">=</font> ode_dep_<font color="#990000">.</font><b><font color="#000000">size_var</font></b><font color="#990000">()</font> <font color="#990000">!=</font> <font color="#993399">0</font><font color="#990000">;</font>
            <i><font color="#9A1900">//</font></i>
            <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font> <b><font color="#000000">t_vec</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">),</font> <b><font color="#000000">dx</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">df</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
            t_vec<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> t<font color="#990000">;</font>
            <i><font color="#9A1900">//</font></i>
            <font color="#009900">bool</font> retape <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> ode_dep_defined <font color="#990000">)</font>
            <font color="#FF0000">{</font>   <i><font color="#9A1900">// check if any comparison operators have a differrent result</font></i>
                ode_dep_<font color="#990000">.</font><b><font color="#000000">new_dynamic</font></b><font color="#990000">(</font>t_vec<font color="#990000">);</font>
                ode_dep_<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">);</font>
                retape <font color="#990000">=</font> ode_dep_<font color="#990000">.</font><b><font color="#000000">compare_change_number</font></b><font color="#990000">()</font> <font color="#990000">&gt;</font> <font color="#993399">0</font><font color="#990000">;</font>
            <font color="#FF0000">}</font>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> retape <font color="#990000">)</font>
            <font color="#FF0000">{</font>   <i><font color="#9A1900">// record function that evaluates f(t, x)</font></i>
                <i><font color="#9A1900">// with x as independent variable and t as dynamcic parameter</font></i>
                <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;)</font> <b><font color="#000000">at</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
                <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;)</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
                <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;)</font> <b><font color="#000000">af</font></b><font color="#990000">(</font>n<font color="#990000">);</font>

                <i><font color="#9A1900">// set argument values</font></i>
                at<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> t<font color="#990000">;</font>
                <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">;</font> i<font color="#990000">++)</font>
                    ax<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font>i<font color="#990000">];</font>

                <i><font color="#9A1900">// declare independent variables</font></i>
                <font color="#008080">size_t</font> abort_op_index <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
                <font color="#009900">bool</font>   record_compare <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
                <b><font color="#000000">Independent</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> abort_op_index<font color="#990000">,</font> record_compare<font color="#990000">,</font> at<font color="#990000">);</font>

                <i><font color="#9A1900">// compute f(t, x)</font></i>
                <b><font color="#0000FF">this</font></b><font color="#990000">-&gt;</font><b><font color="#000000">Ode</font></b><font color="#990000">(</font>at<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> ax<font color="#990000">,</font> af<font color="#990000">);</font>

                <i><font color="#9A1900">// define AD function object</font></i>
                ode_dep_<font color="#990000">.</font><b><font color="#000000">Dependent</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> af<font color="#990000">);</font>

                <i><font color="#9A1900">// store result in ode_dep_ so can be re-used</font></i>
                <b><font color="#000000">assert</font></b><font color="#990000">(</font> ode_ind_<font color="#990000">.</font><b><font color="#000000">size_var</font></b><font color="#990000">()</font> <font color="#990000">!=</font> <font color="#993399">0</font> <font color="#990000">);</font>
            <font color="#FF0000">}</font>
            <i><font color="#9A1900">// special case where new_dynamic not yet set</font></i>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> ode_dep_defined <font color="#990000">)</font>
                ode_dep_<font color="#990000">.</font><b><font color="#000000">new_dynamic</font></b><font color="#990000">(</font>t_vec<font color="#990000">);</font>
            <i><font color="#9A1900">// compute partial of f w.r.t x</font></i>
            f_x <font color="#990000">=</font> ode_dep_<font color="#990000">.</font><b><font color="#000000">Jacobian</font></b><font color="#990000">(</font>x<font color="#990000">);</font> <i><font color="#9A1900">// partial f(t, x) w.r.t. x</font></i>
        <font color="#FF0000">}</font>


    <font color="#FF0000">}</font><font color="#990000">;</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">rosen_34</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>     <i><font color="#9A1900">// initial return value</font></i>

    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>NearEqual<font color="#990000">;</font>
    <font color="#009900">double</font> eps99 <font color="#990000">=</font> <font color="#993399">99.0</font> <font color="#990000">*</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>

    <font color="#008080">size_t</font>  n <font color="#990000">=</font> <font color="#993399">4</font><font color="#990000">;</font>      <i><font color="#9A1900">// number components in X(t) and order of method</font></i>
    <font color="#008080">size_t</font>  M <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>      <i><font color="#9A1900">// number of Rosen34 steps in [ti, tf]</font></i>
    <font color="#009900">double</font> ti <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>     <i><font color="#9A1900">// initial time</font></i>
    <font color="#009900">double</font> tf <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">.;</font>     <i><font color="#9A1900">// final time</font></i>

    <i><font color="#9A1900">// xi = X(0)</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font> <b><font color="#000000">xi</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font>n<font color="#990000">;</font> i<font color="#990000">++)</font>
        xi<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>

    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> use_x <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> use_x <font color="#990000">&lt;</font> <font color="#993399">2</font><font color="#990000">;</font> use_x<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// function object depends on value of use_x</font></i>
        <font color="#008080">Fun</font> <b><font color="#000000">F</font></b><font color="#990000">(</font>use_x <font color="#990000">&gt;</font> <font color="#993399">0</font><font color="#990000">);</font>

        <i><font color="#9A1900">// compute Rosen34 approximation for X(tf)</font></i>
        <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font> <b><font color="#000000">xf</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">e</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
        xf <font color="#990000">=</font> CppAD<font color="#990000">::</font><b><font color="#000000">Rosen34</font></b><font color="#990000">(</font>F<font color="#990000">,</font> M<font color="#990000">,</font> ti<font color="#990000">,</font> tf<font color="#990000">,</font> xi<font color="#990000">,</font> e<font color="#990000">);</font>

        <font color="#009900">double</font> check <font color="#990000">=</font> tf<font color="#990000">;</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">;</font> i<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// check that error is always positive</font></i>
            ok    <font color="#990000">&amp;=</font> <font color="#990000">(</font>e<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">&gt;=</font> <font color="#993399">0</font><font color="#990000">.);</font>
            <i><font color="#9A1900">// 4th order method is exact for i &lt; 4</font></i>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> i <font color="#990000">&lt;</font> <font color="#993399">4</font> <font color="#990000">)</font> ok <font color="#990000">&amp;=</font>
                <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>xf<font color="#990000">[</font>i<font color="#990000">],</font> check<font color="#990000">,</font> eps99<font color="#990000">,</font> eps99<font color="#990000">);</font>
            <i><font color="#9A1900">// 3rd order method is exact for i &lt; 3</font></i>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> i <font color="#990000">&lt;</font> <font color="#993399">3</font> <font color="#990000">)</font>
                ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>e<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">&lt;=</font> eps99<font color="#990000">);</font>

            <i><font color="#9A1900">// check value for next i</font></i>
            check <font color="#990000">*=</font> tf<font color="#990000">;</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
</tt></pre>

<hr>Input File: example/utility/rosen_34.cpp

</body>
</html>
