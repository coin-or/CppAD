<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Enable Use of Eigen Linear Algebra Package with CppAD</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Enable Use of Eigen Linear Algebra Package with CppAD">
<meta name="keywords" id="keywords" content=" enable use eigen linear algebra package with cppad syntax purpose example declarations std include eigen/core numtraits scalarbinaryoptraits namespace eigen_vector cppad.hpp definitions ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_cppad_eigen.hpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="conj_grad.cpp.htm" target="_top">Prev</a>
</td><td><a href="eigen_plugin.hpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>General</option>
<option>cppad_eigen.hpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_example_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_general_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_eigen.hpp_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Example</option>
<option>CppAD Declarations</option>
<option>std Declarations</option>
<option>Include Eigen/Core</option>
<option>Eigen NumTraits</option>
<option>Eigen ScalarBinaryOpTraits</option>
<option>CppAD Namespace</option>
<option>eigen_vector</option>
<option>Include cppad.hpp</option>
<option>std Definitions</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Enable Use of Eigen Linear Algebra Package with CppAD</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>#&nbsp;include&nbsp;&lt;cppad/example/cppad_eigen.hpp&gt;<br>
</span></font></code>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
Enables the use of the <a href="eigen.htm" target="_top"><span style='white-space: nowrap'>eigen</span></a>

linear algebra package with the type 
<code><i><font color="black"><span style='white-space: nowrap'>AD&lt;</span></font></i><font color="blue"><span style='white-space: nowrap'>Base</span></font><i><font color="black"><span style='white-space: nowrap'>&gt;</span></font></i></code>
; see
<a href="https://eigen.tuxfamily.org/dox/TopicCustomizing_CustomScalar.html" target="_top"><span style='white-space: nowrap'>custom&nbsp;scalar&nbsp;types</span></a>
.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The files <a href="eigen_array.cpp.htm" target="_top"><span style='white-space: nowrap'>eigen_array.cpp</span></a>
 and <a href="eigen_det.cpp.htm" target="_top"><span style='white-space: nowrap'>eigen_det.cpp</span></a>

contain an example and test of this include file.
They return true if they succeed and false otherwise.

<br>
<br>
<b><big><a name="CppAD Declarations" id="CppAD Declarations">CppAD Declarations</a></big></b>
<br>
First declare some items that are defined by cppad.hpp:
<pre><tt><b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font>
    <i><font color="#9A1900">// AD&lt;Base&gt;</font></i>
    <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font> <b><font color="#0000FF">class</font></b> <font color="#008080">AD</font><font color="#990000">;</font>
    <i><font color="#9A1900">// numeric_limits&lt;Float&gt;</font></i>
    <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Float</font><font color="#990000">&gt;</font>  <b><font color="#0000FF">class</font></b> <font color="#008080">numeric_limits</font><font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="std Declarations" id="std Declarations">std Declarations</a></big></b>
<br>
Next declare some template specializations in std namespace:
<pre><tt><b><font color="#0000FF">namespace</font></b> std <font color="#FF0000">{</font>
    <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font> <font color="#009900">bool</font> <b><font color="#000000">isinf</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font> <font color="#990000">&amp;</font>x<font color="#990000">);</font>
    <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font> <font color="#009900">bool</font> <b><font color="#000000">isfinite</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font> <font color="#990000">&amp;</font>x<font color="#990000">);</font>
    <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font> <font color="#009900">bool</font> <b><font color="#000000">isnan</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font> <font color="#990000">&amp;</font>x<font color="#990000">);</font>
<font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="Include Eigen/Core" id="Include Eigen/Core">Include Eigen/Core</a></big></b>
<br>
Next define the eigen plugin and then include Eigen/Core:
<pre style='display:inline'><tt>

<b><font color="#000080"># define</font></b> EIGEN_MATRIXBASE_PLUGIN <font color="#990000">&lt;</font>cppad<font color="#990000">/</font>example<font color="#990000">/</font>eigen_plugin<font color="#990000">.</font>hpp<font color="#990000">&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;Eigen/Core&gt;</font>
</tt></pre>
<br>
<b><big><a name="Eigen NumTraits" id="Eigen NumTraits">Eigen NumTraits</a></big></b>
<br>
Eigen needs the following definitions, in the Eigen namespace,
to work properly with 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 scalars:
<pre><tt><b><font color="#0000FF">namespace</font></b> Eigen <font color="#FF0000">{</font>
    <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font> <b><font color="#0000FF">struct</font></b> <font color="#008080">NumTraits</font><font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// type that corresponds to the real part of an AD&lt;Base&gt; value</font></i>
        <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font>   Real<font color="#990000">;</font>
        <i><font color="#9A1900">// type for AD&lt;Base&gt; operations that result in non-integer values</font></i>
        <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font>   NonInteger<font color="#990000">;</font>
        <i><font color="#9A1900">//  type to use for numeric literals such as "2" or "0.5".</font></i>
        <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font>   Literal<font color="#990000">;</font>
        <i><font color="#9A1900">// type for nested value inside an AD&lt;Base&gt; expression tree</font></i>
        <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font>   Nested<font color="#990000">;</font>

        <b><font color="#0000FF">enum</font></b> <font color="#FF0000">{</font>
            <i><font color="#9A1900">// does not support complex Base types</font></i>
            IsComplex             <font color="#990000">=</font> <font color="#993399">0</font> <font color="#990000">,</font>
            <i><font color="#9A1900">// does not support integer Base types</font></i>
            IsInteger             <font color="#990000">=</font> <font color="#993399">0</font> <font color="#990000">,</font>
            <i><font color="#9A1900">// only support signed Base types</font></i>
            IsSigned              <font color="#990000">=</font> <font color="#993399">1</font> <font color="#990000">,</font>
            <i><font color="#9A1900">// must initialize an AD&lt;Base&gt; object</font></i>
            RequireInitialization <font color="#990000">=</font> <font color="#993399">1</font> <font color="#990000">,</font>
            <i><font color="#9A1900">// computational cost of the corresponding operations</font></i>
            ReadCost              <font color="#990000">=</font> <font color="#993399">1</font> <font color="#990000">,</font>
            AddCost               <font color="#990000">=</font> <font color="#993399">2</font> <font color="#990000">,</font>
            MulCost               <font color="#990000">=</font> <font color="#993399">2</font>
        <font color="#FF0000">}</font><font color="#990000">;</font>

        <i><font color="#9A1900">// machine epsilon with type of real part of x</font></i>
        <i><font color="#9A1900">// (use assumption that Base is not complex)</font></i>
        <b><font color="#0000FF">static</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font> <b><font color="#000000">epsilon</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font> <font color="#FF0000">}</font>

        <i><font color="#9A1900">// relaxed version of machine epsilon for comparison of different</font></i>
        <i><font color="#9A1900">// operations that should result in the same value</font></i>
        <b><font color="#0000FF">static</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font> <b><font color="#000000">dummy_precision</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> <font color="#993399">100</font><font color="#990000">.</font> <font color="#990000">*</font>
                CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>
        <font color="#FF0000">}</font>

        <i><font color="#9A1900">// minimum normalized positive value</font></i>
        <b><font color="#0000FF">static</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font> <b><font color="#000000">lowest</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;::</font><b><font color="#000000">min</font></b><font color="#990000">();</font> <font color="#FF0000">}</font>

        <i><font color="#9A1900">// maximum finite value</font></i>
        <b><font color="#0000FF">static</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font> <b><font color="#000000">highest</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;::</font><b><font color="#000000">max</font></b><font color="#990000">();</font> <font color="#FF0000">}</font>

        <i><font color="#9A1900">// number of decimal digits that can be represented without change.</font></i>
        <b><font color="#0000FF">static</font></b> <font color="#009900">int</font> <b><font color="#000000">digits10</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;::</font>digits10<font color="#990000">;</font> <font color="#FF0000">}</font>

        <i><font color="#9A1900">// not a number</font></i>
        <b><font color="#0000FF">static</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font> <b><font color="#000000">quiet_NaN</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;::</font><b><font color="#000000">quiet_NaN</font></b><font color="#990000">();</font> <font color="#FF0000">}</font>

        <i><font color="#9A1900">// positive infinite value</font></i>
        <b><font color="#0000FF">static</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font> <b><font color="#000000">infinity</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;::</font><b><font color="#000000">infinity</font></b><font color="#990000">();</font> <font color="#FF0000">}</font>
    <font color="#FF0000">}</font><font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="Eigen ScalarBinaryOpTraits" id="Eigen ScalarBinaryOpTraits">Eigen ScalarBinaryOpTraits</a></big></b>

<pre><tt><b><font color="#0000FF">namespace</font></b> Eigen <font color="#FF0000">{</font>
    <i><font color="#9A1900">// Inform Eigen that a binary operations between Base and AD&lt;Base&gt;</font></i>
    <i><font color="#9A1900">// are allowed and thate the return type is AD&lt;Base&gt;</font></i>
    <b><font color="#0000FF">template</font></b><font color="#990000">&lt;</font><b><font color="#0000FF">typename</font></b> <font color="#008080">Base</font><font color="#990000">,</font> <b><font color="#0000FF">typename</font></b> <font color="#008080">BinOp</font><font color="#990000">&gt;</font>
    <b><font color="#0000FF">struct</font></b> <font color="#008080">ScalarBinaryOpTraits</font><font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;,</font> Base<font color="#990000">,</font> BinOp<font color="#990000">&gt;</font><font color="#FF0000">{</font>
        <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font> ReturnType<font color="#990000">;</font>
    <font color="#FF0000">}</font><font color="#990000">;</font>
    <b><font color="#0000FF">template</font></b><font color="#990000">&lt;</font><b><font color="#0000FF">typename</font></b> <font color="#008080">Base</font><font color="#990000">,</font> <b><font color="#0000FF">typename</font></b> <font color="#008080">BinOp</font><font color="#990000">&gt;</font>
    <b><font color="#0000FF">struct</font></b> <font color="#008080">ScalarBinaryOpTraits</font><font color="#990000">&lt;</font>Base<font color="#990000">,</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;,</font> BinOp<font color="#990000">&gt;</font>
    <font color="#FF0000">{</font>
        <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font> ReturnType<font color="#990000">;</font>
    <font color="#FF0000">}</font><font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="CppAD Namespace" id="CppAD Namespace">CppAD Namespace</a></big></b>
<br>
Eigen needs the following definitions, in the CppAD namespace,
to work properly with 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 scalars:
<pre><tt><b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font>
        <i><font color="#9A1900">// functions that return references</font></i>
        <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font> <b><font color="#0000FF">const</font></b> AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font> <b><font color="#000000">conj</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font> x<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> x<font color="#990000">;</font> <font color="#FF0000">}</font>
        <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font> <b><font color="#0000FF">const</font></b> AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font> <b><font color="#000000">real</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font> x<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> x<font color="#990000">;</font> <font color="#FF0000">}</font>

        <i><font color="#9A1900">// functions that return values (note abs is defined by cppad.hpp)</font></i>
        <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font> <font color="#008080">AD&lt;Base&gt;</font> <b><font color="#000000">imag</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font> x<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;(</font><font color="#993399">0</font><font color="#990000">.);</font> <font color="#FF0000">}</font>
        <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font> <font color="#008080">AD&lt;Base&gt;</font> <b><font color="#000000">abs2</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font> x<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> x <font color="#990000">*</font> x<font color="#990000">;</font> <font color="#FF0000">}</font>
<font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="eigen_vector" id="eigen_vector">eigen_vector</a></big></b>
<br>
The class <code><font color="blue">CppAD::eigen_vector</font></code> is a wrapper for Eigen column vectors
so that they are <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>simple&nbsp;vectors</span></a>
.
To be specific, it converts <code><font color="blue">Eigen::Index</font></code> arguments and
return values to <code><font color="blue">size_t</font></code>.
<pre><tt><b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font>
    <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Scalar</font><font color="#990000">&gt;</font>
    <b><font color="#0000FF">class</font></b> <font color="#008080">eigen_vector</font> <font color="#990000">:</font> <b><font color="#0000FF">public</font></b> Eigen<font color="#990000">::</font>Matrix<font color="#990000">&lt;</font>Scalar<font color="#990000">,</font> Eigen<font color="#990000">::</font>Dynamic<font color="#990000">,</font> <font color="#993399">1</font><font color="#990000">&gt;</font> <font color="#FF0000">{</font>
    <b><font color="#0000FF">private</font></b><font color="#990000">:</font>
        <i><font color="#9A1900">// base_class</font></i>
        <b><font color="#0000FF">typedef</font></b> Eigen<font color="#990000">::</font><font color="#008080">Matrix&lt;Scalar, Eigen::Dynamic, 1&gt;</font> base_class<font color="#990000">;</font>
    <b><font color="#0000FF">public</font></b><font color="#990000">:</font>
        <i><font color="#9A1900">// constructor</font></i>
        <b><font color="#000000">eigen_vector</font></b><font color="#990000">(</font><font color="#008080">size_t</font> n<font color="#990000">)</font> <font color="#990000">:</font> <b><font color="#000000">base_class</font></b><font color="#990000">(</font> Eigen<font color="#990000">::</font><b><font color="#000000">Index</font></b><font color="#990000">(</font>n<font color="#990000">)</font> <font color="#990000">)</font>
        <font color="#FF0000">{</font> <font color="#FF0000">}</font>
        <b><font color="#000000">eigen_vector</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font> <font color="#990000">:</font> <b><font color="#000000">base_class</font></b><font color="#990000">()</font>
        <font color="#FF0000">{</font> <font color="#FF0000">}</font>
        <i><font color="#9A1900">// operator[]</font></i>
        Scalar<font color="#990000">&amp;</font> <b><font color="#0000FF">operator</font></b><font color="#990000">[](</font><font color="#008080">size_t</font> i<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> base_class<font color="#990000">::</font><b><font color="#0000FF">operator</font></b><font color="#990000">[](</font> Eigen<font color="#990000">::</font><b><font color="#000000">Index</font></b><font color="#990000">(</font>i<font color="#990000">)</font> <font color="#990000">);</font> <font color="#FF0000">}</font>
        <b><font color="#0000FF">const</font></b> Scalar<font color="#990000">&amp;</font> <b><font color="#0000FF">operator</font></b><font color="#990000">[](</font><font color="#008080">size_t</font> i<font color="#990000">)</font> <b><font color="#0000FF">const</font></b>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> base_class<font color="#990000">::</font><b><font color="#0000FF">operator</font></b><font color="#990000">[](</font> Eigen<font color="#990000">::</font><b><font color="#000000">Index</font></b><font color="#990000">(</font>i<font color="#990000">)</font> <font color="#990000">);</font> <font color="#FF0000">}</font>
        <i><font color="#9A1900">// size</font></i>
        <font color="#008080">size_t</font> <b><font color="#000000">size</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font> <b><font color="#0000FF">const</font></b>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> base_class<font color="#990000">::</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font> <font color="#FF0000">}</font>
        <i><font color="#9A1900">// resize</font></i>
        <font color="#009900">void</font> <b><font color="#000000">resize</font></b><font color="#990000">(</font><font color="#008080">size_t</font> n<font color="#990000">)</font>
        <font color="#FF0000">{</font>   base_class<font color="#990000">::</font><b><font color="#000000">resize</font></b><font color="#990000">(</font> Eigen<font color="#990000">::</font><b><font color="#000000">Index</font></b><font color="#990000">(</font>n<font color="#990000">)</font> <font color="#990000">);</font> <font color="#FF0000">}</font>
    <font color="#FF0000">}</font><font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="Include cppad.hpp" id="Include cppad.hpp">Include cppad.hpp</a></big></b>

<pre style='display:inline'><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
</tt></pre>
<br>
<b><big><a name="std Definitions" id="std Definitions">std Definitions</a></big></b>
<br>
The definitions below use cppad.hpp.
Note that <a href="value.htm" target="_top"><span style='white-space: nowrap'>Value</span></a>
 function can only be used with a
<a href="glossary.htm#Parameter.Constant" target="_top"><span style='white-space: nowrap'>constant&nbsp;parameter</span></a>
 argument.
<pre><tt><b><font color="#0000FF">namespace</font></b> std <font color="#FF0000">{</font>
    <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font> <font color="#009900">bool</font> <b><font color="#000000">isinf</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font> <font color="#990000">&amp;</font>x<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> <b><font color="#000000">isinf</font></b><font color="#990000">(</font>CppAD<font color="#990000">::</font><b><font color="#000000">Value</font></b><font color="#990000">(</font> CppAD<font color="#990000">::</font><b><font color="#000000">Var2Par</font></b><font color="#990000">(</font>x<font color="#990000">)</font> <font color="#990000">)</font> <font color="#990000">);</font> <font color="#FF0000">}</font>

    <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font> <font color="#009900">bool</font> <b><font color="#000000">isfinite</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font> <font color="#990000">&amp;</font>x<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> <b><font color="#000000">isfinite</font></b><font color="#990000">(</font>CppAD<font color="#990000">::</font><b><font color="#000000">Value</font></b><font color="#990000">(</font> CppAD<font color="#990000">::</font><b><font color="#000000">Var2Par</font></b><font color="#990000">(</font>x<font color="#990000">)</font> <font color="#990000">)</font> <font color="#990000">);</font> <font color="#FF0000">}</font>

    <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font> <font color="#009900">bool</font> <b><font color="#000000">isnan</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;Base&gt;</font> <font color="#990000">&amp;</font>x<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> <b><font color="#000000">isnan</font></b><font color="#990000">(</font>CppAD<font color="#990000">::</font><b><font color="#000000">Value</font></b><font color="#990000">(</font> CppAD<font color="#990000">::</font><b><font color="#000000">Var2Par</font></b><font color="#990000">(</font>x<font color="#990000">)</font> <font color="#990000">)</font> <font color="#990000">);</font> <font color="#FF0000">}</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: include/cppad/example/cppad_eigen.hpp

</body>
</html>
