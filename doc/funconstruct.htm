<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Construct an ADFun Object and Stop Recording</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Construct an ADFun Object and Stop Recording">
<meta name="keywords" id="keywords" content=" construct adfun object stop recording syntax purpose x y advector default constructor sequence copy swap assignment operator move semantics taylor coefficients sparsity patterns parallel mode example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_funconstruct_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="independent.cpp.htm" target="_top">Prev</a>
</td><td><a href="fun_assign.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>record_adfun</option>
<option>FunConstruct</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_record_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_funconstruct_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>x</option>
<option>y</option>
<option>ADVector</option>
<option>Default Constructor</option>
<option>Sequence Constructor</option>
<option>Copy Constructor</option>
<option>swap</option>
<option>Assignment Operator</option>
<option>---..Move Semantics</option>
<option>---..Taylor Coefficients</option>
<option>---..Sparsity Patterns</option>
<option>Parallel Mode</option>
<option>Example</option>
<option>---..Sequence Constructor</option>
<option>---..Default Constructor</option>
<option>---..Assignment Operator</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Construct an ADFun Object and Stop Recording</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>);<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.swap(</span></font><i><font color="black"><span style='white-space: nowrap'>g</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>g<br>
</span></font></i></code>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
The 
<code><font color="blue"><span style='white-space: nowrap'>ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>

stores an AD of 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>

<a href="glossary.htm#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&nbsp;sequence</span></a>
.
It can then be used to calculate derivatives of the corresponding
<a href="glossary.htm#AD Function" target="_top"><span style='white-space: nowrap'>AD&nbsp;function</span></a>

<small>@[@

    F : \B{R}^n \rightarrow \B{R}^m

@]@</small>
where <small>@(@
B
@)@</small> is the space corresponding to objects of type 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
.

<br>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
If the argument 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 is present, it has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ADVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It must be the vector argument in the previous call to
<a href="independent.htm" target="_top"><span style='white-space: nowrap'>Independent</span></a>
.
Neither its size, or any of its values, are allowed to change
between calling

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;Independent(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
and

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
<br>
<b><big><a name="y" id="y">y</a></big></b>
<br>
If the argument 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 is present, it has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ADVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The sequence of operations that map 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>

to 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 are stored in the ADFun object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.

<br>
<br>
<b><big><a name="ADVector" id="ADVector">ADVector</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>ADVector</span></font></i></code>
 must be a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with
<a href="simplevector.htm#Elements of Specified Type" target="_top"><span style='white-space: nowrap'>elements&nbsp;of&nbsp;type</span></a>


<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
.
The routine <a href="checksimplevector.htm" target="_top"><span style='white-space: nowrap'>CheckSimpleVector</span></a>
 will generate an error message
if this is not the case.

<br>
<br>
<b><big><a name="Default Constructor" id="Default Constructor">Default Constructor</a></big></b>
<br>
The default constructor

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>g</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
creates an

<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 object with no corresponding operation sequence; i.e.,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>g</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_var()<br>
</span></font></code>
returns the value zero (see <a href="fun_property.htm#size_var" target="_top"><span style='white-space: nowrap'>size_var</span></a>
).

<br>
<br>
<b><big><a name="Sequence Constructor" id="Sequence Constructor">Sequence Constructor</a></big></b>
<br>
The sequence constructor

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
creates the 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
,
stops the recording of AD of 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 operations
corresponding to the call

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;Independent(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
and stores the corresponding operation sequence in the object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.
It then stores the zero order Taylor coefficients
(corresponding to the value of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
) in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.
This is equivalent to the following steps using the default constructor:

<ol type="1"><li>
Create 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 with the default constructor

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>;<br>
</span></font></code>
</li><li>
Stop the tape and storing the operation sequence using

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Dependent(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>);<br>
</span></font></code>
(see <a href="dependent.htm" target="_top"><span style='white-space: nowrap'>Dependent</span></a>
).
</li><li>

Calculate the zero order Taylor coefficients for all
the variables in the operation sequence using

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Forward(</span></font><i><font color="black"><span style='white-space: nowrap'>p</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x_p</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
with 
<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i></code>
 equal to zero and the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>x_p</span></font></i></code>

equal to the corresponding elements of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>

(see <a href="forward.htm" target="_top"><span style='white-space: nowrap'>Forward</span></a>
).
</li></ol>


<br>
<br>
<b><big><a name="Copy Constructor" id="Copy Constructor">Copy Constructor</a></big></b>
<br>
It is an error to attempt to use the 
<code><font color="blue"><span style='white-space: nowrap'>ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 copy constructor;
i.e., the following syntax is not allowed:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>g</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 is an 
<code><font color="blue"><span style='white-space: nowrap'>ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 object.
Use its <a href="funconstruct.htm#Default Constructor" target="_top"><span style='white-space: nowrap'>default&nbsp;constructor</span></a>
 instead
and its assignment operator.

<br>
<br>
<b><big><a name="swap" id="swap">swap</a></big></b>
<br>
The swap operation <code><font color="blue">%f%.swap(%g%)%</font></code> exchanges the contents of
the two 
<code><font color="blue"><span style='white-space: nowrap'>ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 functions; i.e.,

<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 (
<code><i><font color="black"><span style='white-space: nowrap'>g</span></font></i></code>
) before the swap is identical to

<code><i><font color="black"><span style='white-space: nowrap'>g</span></font></i></code>
 (
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
) after the swap.

<br>
<br>
<b><big><a name="Assignment Operator" id="Assignment Operator">Assignment Operator</a></big></b>
<br>
The 
<code><font color="blue"><span style='white-space: nowrap'>ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 assignment operation

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>g</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
makes a copy of the operation sequence currently stored in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>

in the object 
<code><i><font color="black"><span style='white-space: nowrap'>g</span></font></i></code>
.
The object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 is not affected by this operation and
can be <code><font color="blue">const</font></code>.
All of information (state) stored in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 is copied to 
<code><i><font color="black"><span style='white-space: nowrap'>g</span></font></i></code>

and any information originally in 
<code><i><font color="black"><span style='white-space: nowrap'>g</span></font></i></code>
 is lost.

<br>
<br>
<big><a name="Assignment Operator.Move Semantics" id="Assignment Operator.Move Semantics">Move Semantics</a></big>
<br>
In the special case where 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 is a temporary object
(and enough C++11 features are supported by the compiler)
this assignment will use move semantics.
This avoids the overhead of the copying all the information from

<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 to 
<code><i><font color="black"><span style='white-space: nowrap'>g</span></font></i></code>
.

<br>
<br>
<big><a name="Assignment Operator.Taylor Coefficients" id="Assignment Operator.Taylor Coefficients">Taylor Coefficients</a></big>
<br>
The Taylor coefficient information currently stored in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>

(computed by <a href="forward.htm" target="_top"><span style='white-space: nowrap'>f.Forward</span></a>
) is
copied to 
<code><i><font color="black"><span style='white-space: nowrap'>g</span></font></i></code>
.
Hence, directly after this operation

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>g</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_order()&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_order()<br>
</span></font></code>
<br>
<big><a name="Assignment Operator.Sparsity Patterns" id="Assignment Operator.Sparsity Patterns">Sparsity Patterns</a></big>
<br>
The forward Jacobian sparsity pattern currently stored in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>

(computed by <a href="forsparsejac.htm" target="_top"><span style='white-space: nowrap'>f.ForSparseJac</span></a>
) is
copied to 
<code><i><font color="black"><span style='white-space: nowrap'>g</span></font></i></code>
.
Hence, directly after this operation

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>g</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_forward_bool()&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_forward_bool()<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>g</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_forward_set()&nbsp;&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_forward_set()<br>
</span></font></code>
<br>
<b><big><a name="Parallel Mode" id="Parallel Mode">Parallel Mode</a></big></b>
<br>
The call to <code><font color="blue">Independent</font></code>,
and the corresponding call to

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
or

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Dependent(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
or <a href="abort_recording.htm" target="_top"><span style='white-space: nowrap'>abort_recording</span></a>
,
must be preformed by the same thread; i.e.,
<a href="ta_thread_num.htm" target="_top"><span style='white-space: nowrap'>thread_alloc::thread_num</span></a>
 must be the same.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>


<br>
<br>
<big><a name="Example.Sequence Constructor" id="Example.Sequence Constructor">Sequence Constructor</a></big>
<br>
The file
<a href="independent.cpp.htm" target="_top"><span style='white-space: nowrap'>independent.cpp</span></a>

contains an example and test of the sequence constructor.

<br>
<br>
<big><a name="Example.Default Constructor" id="Example.Default Constructor">Default Constructor</a></big>
<br>
The files
<a href="fun_check.cpp.htm" target="_top"><span style='white-space: nowrap'>fun_check.cpp</span></a>

and
<a href="hes_lagrangian.cpp.htm" target="_top"><span style='white-space: nowrap'>hes_lagrangian.cpp</span></a>

contain an examples and tests using the default constructor.
They return true if they succeed and false otherwise.


<br>
<br>
<big><a name="Example.Assignment Operator" id="Example.Assignment Operator">Assignment Operator</a></big>
<br>
The file
<a href="fun_assign.cpp.htm" target="_top"><span style='white-space: nowrap'>fun_assign.cpp</span></a>

contains an example and test of the 
<code><font color="blue"><span style='white-space: nowrap'>ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>

assignment operator.


<hr>Input File: include/cppad/core/fun_construct.hpp

</body>
</html>
