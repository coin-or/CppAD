<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Simple Vector Template Class: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Simple Vector Template Class: Example and Test">
<meta name="keywords" id="keywords" content=" simple vector template class: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_simple_vector.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="simplevector.htm" target="_top">Prev</a>
</td><td><a href="thread_alloc.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>utility</option>
<option>SimpleVector</option>
<option>simple_vector.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_utility_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_simplevector_htm.js'></script>
</td>
<td>simple_vector.cpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@



<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Simple Vector Template Class: Example and Test</big></big></b></center>
<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;iostream&gt;</font>                   <i><font color="#9A1900">// std::cout and std::endl</font></i>

<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;vector&gt;</font>                     <i><font color="#9A1900">// std::vector</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;valarray&gt;</font>                   <i><font color="#9A1900">// std::valarray</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/utility/vector.hpp&gt;</font>       <i><font color="#9A1900">// CppAD::vector</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/utility/check_simple_vector.hpp&gt;</font>  <i><font color="#9A1900">// CppAD::CheckSimpleVector</font></i>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
    <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Vector</font><font color="#990000">&gt;</font>
    <font color="#009900">bool</font> <b><font color="#000000">Ok</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// type corresponding to elements of Vector</font></i>
        <b><font color="#0000FF">typedef</font></b> <b><font color="#0000FF">typename</font></b> <font color="#008080">Vector</font><font color="#990000">::</font><font color="#008080">value_type</font> Scalar<font color="#990000">;</font>

        <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>             <i><font color="#9A1900">// initialize testing flag</font></i>

        <font color="#008080">Vector</font> x<font color="#990000">;</font>                   <i><font color="#9A1900">// use the default constructor</font></i>
        ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">);</font>      <i><font color="#9A1900">// test size for an empty vector</font></i>
        <font color="#008080">Vector</font> <b><font color="#000000">y</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">);</font>                <i><font color="#9A1900">// use the sizing constructor</font></i>
        ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>y<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">);</font>      <i><font color="#9A1900">// size for an vector with elements</font></i>

        <i><font color="#9A1900">// non-const access to the elements of y</font></i>
        <font color="#008080">size_t</font> i<font color="#990000">;</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> <font color="#993399">2</font><font color="#990000">;</font> i<font color="#990000">++)</font>
            y<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">Scalar</font></b><font color="#990000">(</font>i<font color="#990000">);</font>

        <b><font color="#0000FF">const</font></b> <font color="#008080">Vector</font> <b><font color="#000000">z</font></b><font color="#990000">(</font>y<font color="#990000">);</font>          <i><font color="#9A1900">// copy constructor</font></i>
        x<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">);</font>                <i><font color="#9A1900">// resize</font></i>
        x <font color="#990000">=</font> z<font color="#990000">;</font>                      <i><font color="#9A1900">// vector assignment</font></i>

        <i><font color="#9A1900">// use the const access to the elements of x</font></i>
        <i><font color="#9A1900">// and test the values of elements of x, y, z</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> <font color="#993399">2</font><font color="#990000">;</font> i<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>x<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#000000">Scalar</font></b><font color="#990000">(</font>i<font color="#990000">));</font>
            ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>y<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#000000">Scalar</font></b><font color="#990000">(</font>i<font color="#990000">));</font>
            ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>z<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">==</font> <b><font color="#000000">Scalar</font></b><font color="#990000">(</font>i<font color="#990000">));</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
    <font color="#FF0000">}</font>
<font color="#FF0000">}</font>
<font color="#009900">bool</font> <b><font color="#000000">SimpleVector</font></b> <font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>

    <i><font color="#9A1900">// use routine above to check these cases</font></i>
    ok <font color="#990000">&amp;=</font> Ok<font color="#990000">&lt;</font> std<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">&gt;();</font>
    ok <font color="#990000">&amp;=</font> Ok<font color="#990000">&lt;</font> std<font color="#990000">::</font>valarray<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;</font> <font color="#990000">&gt;();</font>
    ok <font color="#990000">&amp;=</font> Ok<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">int</font><font color="#990000">&gt;</font> <font color="#990000">&gt;();</font>
<b><font color="#000080"># ifndef</font></b> _MSC_VER
    <i><font color="#9A1900">// Avoid Microsoft following compiler warning:  'size_t' :</font></i>
    <i><font color="#9A1900">// forcing value to bool 'true' or 'false' (performance warning)</font></i>
    ok <font color="#990000">&amp;=</font> Ok<font color="#990000">&lt;</font> std<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;</font> <font color="#990000">&gt;();</font>
    ok <font color="#990000">&amp;=</font> Ok<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;</font> <font color="#990000">&gt;();</font>
<b><font color="#000080"># endif</font></b>
    <i><font color="#9A1900">// use CheckSimpleVector for more extensive testing</font></i>
    CppAD<font color="#990000">::</font>CheckSimpleVector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">,</font> std<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font>  <font color="#990000">&gt;();</font>
    CppAD<font color="#990000">::</font>CheckSimpleVector<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">,</font>  std<font color="#990000">::</font>valarray<font color="#990000">&lt;</font><font color="#009900">float</font><font color="#990000">&gt;</font> <font color="#990000">&gt;();</font>
    CppAD<font color="#990000">::</font>CheckSimpleVector<font color="#990000">&lt;</font><font color="#009900">int</font><font color="#990000">,</font>    CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">int</font><font color="#990000">&gt;</font>   <font color="#990000">&gt;();</font>
    CppAD<font color="#990000">::</font>CheckSimpleVector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">,</font>   std<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;</font>    <font color="#990000">&gt;();</font>
    CppAD<font color="#990000">::</font>CheckSimpleVector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">,</font>   CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;</font>  <font color="#990000">&gt;();</font>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/utility/simple_vector.cpp

</body>
</html>
