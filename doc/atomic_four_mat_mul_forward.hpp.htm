<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Atomic Matrix Multiply Forward Mode: Example Implementation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Atomic Matrix Multiply Forward Mode: Example Implementation">
<meta name="keywords" id="keywords" content=" atomic matrix multiply forward mode: example implementation purpose source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_four_mat_mul_forward.hpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_four_mat_mul_for_type.hpp.htm" target="_top">Prev</a>
</td><td><a href="atomic_four_mat_mul_reverse.hpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_four</option>
<option>atomic_four_example</option>
<option>atomic_four_mat_mul</option>
<option>atomic_four_mat_mul_implement</option>
<option>atomic_four_mat_mul_forward.hpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_example_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_mat_mul_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_mat_mul_implement_htm.js'></script>
</td>
<td>atomic_four_mat_mul_forward.hpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Atomic Matrix Multiply Forward Mode: Example Implementation</big></big></b></center>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
The <code><font color="blue">forward</font></code> routine overrides the virtual functions
used by the atomic_four base; see
<a href="atomic_four_forward.htm" target="_top"><span style='white-space: nowrap'>forward</span></a>
.

<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/example/atomic_four/mat_mul/mat_mul.hpp&gt;</font>

<b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font> <i><font color="#9A1900">// BEGIN_CPPAD_NAMESPACE</font></i>
<i><font color="#9A1900">//</font></i>
<i><font color="#9A1900">// forward override for Base matrix multiply</font></i>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font>
<font color="#009900">bool</font> atomic_mat_mul<font color="#990000">&lt;</font>Base<font color="#990000">&gt;::</font><b><font color="#000000">forward</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font>                                     call_id     <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                 select_y    <font color="#990000">,</font>
    <font color="#008080">size_t</font>                                     order_low   <font color="#990000">,</font>
    <font color="#008080">size_t</font>                                     order_up    <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                 taylor_x    <font color="#990000">,</font>
    CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                       taylor_y    <font color="#990000">)</font>
<font color="#FF0000">{</font>
    <i><font color="#9A1900">// q</font></i>
    <font color="#008080">size_t</font> q     <font color="#990000">=</font> order_up <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// n_left, n_middle, n_right</font></i>
    <font color="#008080">size_t</font> n_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> n_right<font color="#990000">;</font>
    <b><font color="#000000">get</font></b><font color="#990000">(</font>call_id<font color="#990000">,</font> n_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> n_right<font color="#990000">);</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
    <i><font color="#9A1900">// n, m</font></i>
    <font color="#008080">size_t</font> n     <font color="#990000">=</font> taylor_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
    <font color="#008080">size_t</font> m     <font color="#990000">=</font> taylor_y<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// check sizes</font></i>
    <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> n_middle <font color="#990000">*</font> <font color="#990000">(</font> n_left <font color="#990000">+</font>  n_right <font color="#990000">)</font> <font color="#990000">*</font> q <font color="#990000">);</font>
    <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> n_left <font color="#990000">*</font> n_right <font color="#990000">*</font> q <font color="#990000">);</font>
<b><font color="#000080"># endif</font></b>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// offset</font></i>
    <font color="#008080">size_t</font> offset <font color="#990000">=</font> n_left <font color="#990000">*</font> n_middle<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// for k = order_low, ..., order_up :</font></i>
    <i><font color="#9A1900">//    C^k = sum_ell A^ell * B^{k-ell}</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;Base&gt;</font> <b><font color="#000000">x</font></b><font color="#990000">(</font> n_middle <font color="#990000">*</font> <font color="#990000">(</font> n_left <font color="#990000">+</font> n_right<font color="#990000">)</font> <font color="#990000">);</font>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;Base&gt;</font> <b><font color="#000000">y</font></b><font color="#990000">(</font>n_left <font color="#990000">*</font> n_right<font color="#990000">);</font>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;Base&gt;</font> <b><font color="#000000">sum</font></b><font color="#990000">(</font>n_left <font color="#990000">*</font> n_right<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> order_low<font color="#990000">;</font> k <font color="#990000">&lt;</font> q<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// sum = 0</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_left <font color="#990000">*</font> n_right<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
            sum<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">Base</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;=</font> k<font color="#990000">;</font> <font color="#990000">++</font>ell<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// x = [ A^ell, B^{k-ell} ]</font></i>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_left <font color="#990000">*</font> n_middle<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
                x<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> taylor_x<font color="#990000">[</font> i <font color="#990000">*</font> q <font color="#990000">+</font> ell <font color="#990000">];</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_middle <font color="#990000">*</font> n_right<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
                x<font color="#990000">[</font>offset <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">=</font> taylor_x<font color="#990000">[</font> <font color="#990000">(</font>offset <font color="#990000">+</font> i<font color="#990000">)</font> <font color="#990000">*</font> q <font color="#990000">+</font> <font color="#990000">(</font>k <font color="#990000">-</font> ell<font color="#990000">)</font> <font color="#990000">];</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// y = A^ell * B^{k-ell}</font></i>
            <b><font color="#000000">base_mat_mul</font></b><font color="#990000">(</font>n_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> n_right<font color="#990000">,</font> x<font color="#990000">,</font> y<font color="#990000">);</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// sum += y</font></i>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_left <font color="#990000">*</font> n_right<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
                sum<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">+=</font> y<font color="#990000">[</font>i<font color="#990000">];</font>
        <font color="#FF0000">}</font>
        <i><font color="#9A1900">// C^k = sum</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_left <font color="#990000">*</font> n_right<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
            taylor_y<font color="#990000">[</font>i <font color="#990000">*</font> q <font color="#990000">+</font> k<font color="#990000">]</font> <font color="#990000">=</font> sum<font color="#990000">[</font>i<font color="#990000">];</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
<font color="#FF0000">}</font>
<i><font color="#9A1900">//</font></i>
<i><font color="#9A1900">// forward override for AD&lt;Base&gt; matrix multiply</font></i>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font>
<font color="#009900">bool</font> atomic_mat_mul<font color="#990000">&lt;</font>Base<font color="#990000">&gt;::</font><b><font color="#000000">forward</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font>                                     call_id     <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                 select_y    <font color="#990000">,</font>
    <font color="#008080">size_t</font>                                     order_low   <font color="#990000">,</font>
    <font color="#008080">size_t</font>                                     order_up    <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>    ataylor_x   <font color="#990000">,</font>
    CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>          ataylor_y   <font color="#990000">)</font>
<font color="#FF0000">{</font>   <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// vector, AD</font></i>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
    <i><font color="#9A1900">// q</font></i>
    <font color="#008080">size_t</font> q     <font color="#990000">=</font> order_up <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// n_left, n_middle, n_right</font></i>
    <font color="#008080">size_t</font> n_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> n_right<font color="#990000">;</font>
    <b><font color="#000000">get</font></b><font color="#990000">(</font>call_id<font color="#990000">,</font> n_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> n_right<font color="#990000">);</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
    <i><font color="#9A1900">// n, m</font></i>
    <font color="#008080">size_t</font> n     <font color="#990000">=</font> ataylor_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
    <font color="#008080">size_t</font> m     <font color="#990000">=</font> ataylor_y<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// check sizes</font></i>
    <b><font color="#000000">assert</font></b><font color="#990000">(</font> n <font color="#990000">==</font> n_middle <font color="#990000">*</font> <font color="#990000">(</font> n_left <font color="#990000">+</font>  n_right <font color="#990000">)</font> <font color="#990000">*</font> q <font color="#990000">);</font>
    <b><font color="#000000">assert</font></b><font color="#990000">(</font> m <font color="#990000">==</font> n_left <font color="#990000">*</font> n_right <font color="#990000">*</font> q <font color="#990000">);</font>
<b><font color="#000080"># endif</font></b>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// offset</font></i>
    <font color="#008080">size_t</font> offset <font color="#990000">=</font> n_left <font color="#990000">*</font> n_middle<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// for k = order_low, ..., order_up :</font></i>
    <i><font color="#9A1900">//    C^k = sum_ell A^ell * B^{k-ell}</font></i>
    <font color="#008080">vector&lt; AD&lt;Base&gt; &gt;</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font> n_middle <font color="#990000">*(</font> n_left <font color="#990000">+</font> n_right<font color="#990000">)</font> <font color="#990000">);</font>
    <font color="#008080">vector&lt; AD&lt;Base&gt; &gt;</font> <b><font color="#000000">ay</font></b><font color="#990000">(</font>n_left <font color="#990000">*</font> n_right<font color="#990000">);</font>
    <font color="#008080">vector&lt; AD&lt;Base&gt; &gt;</font> <b><font color="#000000">asum</font></b><font color="#990000">(</font>n_left <font color="#990000">*</font> n_right<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> order_low<font color="#990000">;</font> k <font color="#990000">&lt;</font> q<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// sum = 0</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_left <font color="#990000">*</font> n_right<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
            asum<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;(</font><font color="#993399">0</font><font color="#990000">);</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;=</font> k<font color="#990000">;</font> <font color="#990000">++</font>ell<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// ax = [ A^ell, B^{k-ell} ]</font></i>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_left <font color="#990000">*</font> n_middle<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
                ax<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> ataylor_x<font color="#990000">[</font> i <font color="#990000">*</font> q <font color="#990000">+</font> ell <font color="#990000">];</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_middle <font color="#990000">*</font> n_right<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
                ax<font color="#990000">[</font>offset <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">=</font> ataylor_x<font color="#990000">[</font> <font color="#990000">(</font>offset <font color="#990000">+</font> i<font color="#990000">)</font> <font color="#990000">*</font> q <font color="#990000">+</font> <font color="#990000">(</font>k <font color="#990000">-</font> ell<font color="#990000">)</font> <font color="#990000">];</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// ay = A^ell * B^{k-ell}</font></i>
            <font color="#990000">(*</font><b><font color="#0000FF">this</font></b><font color="#990000">)(</font>call_id<font color="#990000">,</font> ax<font color="#990000">,</font> ay<font color="#990000">);</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// asum += ay</font></i>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_left <font color="#990000">*</font> n_right<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
                asum<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">+=</font> ay<font color="#990000">[</font>i<font color="#990000">];</font>
        <font color="#FF0000">}</font>
        <i><font color="#9A1900">// C^k = asum</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_left <font color="#990000">*</font> n_right<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
            ataylor_y<font color="#990000">[</font>i <font color="#990000">*</font> q <font color="#990000">+</font> k<font color="#990000">]</font> <font color="#990000">=</font> asum<font color="#990000">[</font>i<font color="#990000">];</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
<font color="#FF0000">}</font>
<font color="#FF0000">}</font> <i><font color="#9A1900">// END_CPPAD_NAMESPACE</font></i></tt></pre>

<hr>Input File: include/cppad/example/atomic_four/mat_mul/forward.hpp

</body>
</html>
