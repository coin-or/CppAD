<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Computing Sparse Jacobian Using Reverse Mode: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Computing Sparse Jacobian Using Reverse Mode: Example and Test">
<meta name="keywords" id="keywords" content=" computing sparse jacobian using reverse mode: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_subgraph_jac_rev.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="subgraph_jac_rev.htm" target="_top">Prev</a>
</td><td><a href="subgraph_hes2jac.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>sparse_derivative</option>
<option>subgraph_jac_rev</option>
<option>subgraph_jac_rev.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_sparse_derivative_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_subgraph_jac_rev_htm.js'></script>
</td>
<td>subgraph_jac_rev.cpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@



<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Computing Sparse Jacobian Using Reverse Mode: Example and Test</big></big></b></center>
<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<font color="#009900">bool</font> <b><font color="#000000">subgraph_jac_rev</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>NearEqual<font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>sparse_rc<font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>sparse_rcv<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;)</font> a_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font>     d_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>size_t<font color="#990000">)</font>     s_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">bool</font><font color="#990000">)</font>       b_vector<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// domain space vector</font></i>
    <font color="#008080">size_t</font> n <font color="#990000">=</font> <font color="#993399">4</font><font color="#990000">;</font>
    <font color="#008080">a_vector</font>  <b><font color="#000000">a_x</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        a_x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// declare independent variables and starting recording</font></i>
    CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>a_x<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>
    <font color="#008080">a_vector</font>  <b><font color="#000000">a_y</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    a_y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> a_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+</font> a_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
    a_y<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> a_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">+</font> a_x<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">];</font>
    a_y<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> a_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+</font> a_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">+</font> a_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">+</font> a_x<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">]</font> <font color="#990000">*</font> a_x<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">]</font> <font color="#990000">/</font> <font color="#993399">2</font><font color="#990000">.;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// create f: x -&gt; y and stop tape recording</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> <b><font color="#000000">f</font></b><font color="#990000">(</font>a_x<font color="#990000">,</font> a_y<font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> f<font color="#990000">.</font><b><font color="#000000">size_random</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// new value for the independent variable vector</font></i>
    <font color="#008080">d_vector</font> <b><font color="#000000">x</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>j<font color="#990000">);</font>
    <i><font color="#9A1900">/*</font></i>
<i><font color="#9A1900">           [ 1 1 0 0  ]</font></i>
<i><font color="#9A1900">    J(x) = [ 0 0 1 1  ]</font></i>
<i><font color="#9A1900">           [ 1 1 1 x_3]</font></i>
<i><font color="#9A1900">    */</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// row-major order values of J(x)</font></i>
    <font color="#008080">size_t</font> nnz <font color="#990000">=</font> <font color="#993399">8</font><font color="#990000">;</font>
    <font color="#008080">s_vector</font> <b><font color="#000000">check_row</font></b><font color="#990000">(</font>nnz<font color="#990000">),</font> <b><font color="#000000">check_col</font></b><font color="#990000">(</font>nnz<font color="#990000">);</font>
    <font color="#008080">d_vector</font> <b><font color="#000000">check_val</font></b><font color="#990000">(</font>nnz<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> nnz<font color="#990000">;</font> k<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// check_val</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> k <font color="#990000">&lt;</font> <font color="#993399">7</font> <font color="#990000">)</font>
            check_val<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
        <b><font color="#0000FF">else</font></b>
            check_val<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">];</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// check_row and check_col</font></i>
        check_col<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> k<font color="#990000">;</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> k <font color="#990000">&lt;</font> <font color="#993399">2</font> <font color="#990000">)</font>
            check_row<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <b><font color="#0000FF">else</font></b> <b><font color="#0000FF">if</font></b><font color="#990000">(</font> k <font color="#990000">&lt;</font> <font color="#993399">4</font> <font color="#990000">)</font>
            check_row<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
        <b><font color="#0000FF">else</font></b>
        <font color="#FF0000">{</font>   check_row<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
            check_col<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">=</font> k <font color="#990000">-</font> <font color="#993399">4</font><font color="#990000">;</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// select all range components of domain and range</font></i>
    <font color="#008080">b_vector</font> <b><font color="#000000">select_domain</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">select_range</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
        select_domain<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
        select_range<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// Compute Jacobian using f.subgraph_jac_rev(x, subset)</font></i>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// get sparsity pattern</font></i>
    <font color="#009900">bool</font> transpose     <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    <font color="#008080">sparse_rc&lt;s_vector&gt;</font> pattern_jac<font color="#990000">;</font>
    f<font color="#990000">.</font><b><font color="#000000">subgraph_sparsity</font></b><font color="#990000">(</font>
        select_domain<font color="#990000">,</font> select_range<font color="#990000">,</font> transpose<font color="#990000">,</font> pattern_jac
    <font color="#990000">);</font>
    <i><font color="#9A1900">// f.subgraph_jac_rev(x, subset)</font></i>
    <font color="#008080">sparse_rcv&lt;s_vector, d_vector&gt;</font> <b><font color="#000000">subset</font></b><font color="#990000">(</font> pattern_jac <font color="#990000">);</font>
    f<font color="#990000">.</font><b><font color="#000000">subgraph_jac_rev</font></b><font color="#990000">(</font>x<font color="#990000">,</font> subset<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// check result</font></i>
    ok  <font color="#990000">&amp;=</font> subset<font color="#990000">.</font><b><font color="#000000">nnz</font></b><font color="#990000">()</font> <font color="#990000">==</font> nnz<font color="#990000">;</font>
    <font color="#008080">s_vector</font> row_major <font color="#990000">=</font> subset<font color="#990000">.</font><b><font color="#000000">row_major</font></b><font color="#990000">();</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> nnz<font color="#990000">;</font> k<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   ok <font color="#990000">&amp;=</font> subset<font color="#990000">.</font><b><font color="#000000">row</font></b><font color="#990000">()[</font> row_major<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">]</font> <font color="#990000">==</font> check_row<font color="#990000">[</font>k<font color="#990000">];</font>
        ok <font color="#990000">&amp;=</font> subset<font color="#990000">.</font><b><font color="#000000">col</font></b><font color="#990000">()[</font> row_major<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">]</font> <font color="#990000">==</font> check_col<font color="#990000">[</font>k<font color="#990000">];</font>
        ok <font color="#990000">&amp;=</font> subset<font color="#990000">.</font><b><font color="#000000">val</font></b><font color="#990000">()[</font> row_major<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">]</font> <font color="#990000">==</font> check_val<font color="#990000">[</font>k<font color="#990000">];</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// f.subgraph_jac_rev(select_domain, select_range, x, matrix_out)</font></i>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <font color="#008080">sparse_rcv&lt;s_vector, d_vector&gt;</font>  matrix_out<font color="#990000">;</font>
    f<font color="#990000">.</font><b><font color="#000000">subgraph_jac_rev</font></b><font color="#990000">(</font>select_domain<font color="#990000">,</font> select_range<font color="#990000">,</font> x<font color="#990000">,</font> matrix_out<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// check result</font></i>
    ok  <font color="#990000">&amp;=</font> matrix_out<font color="#990000">.</font><b><font color="#000000">nnz</font></b><font color="#990000">()</font> <font color="#990000">==</font> nnz<font color="#990000">;</font>
    row_major <font color="#990000">=</font> matrix_out<font color="#990000">.</font><b><font color="#000000">row_major</font></b><font color="#990000">();</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> nnz<font color="#990000">;</font> k<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   ok <font color="#990000">&amp;=</font> matrix_out<font color="#990000">.</font><b><font color="#000000">row</font></b><font color="#990000">()[</font> row_major<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">]</font> <font color="#990000">==</font> check_row<font color="#990000">[</font>k<font color="#990000">];</font>
        ok <font color="#990000">&amp;=</font> matrix_out<font color="#990000">.</font><b><font color="#000000">col</font></b><font color="#990000">()[</font> row_major<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">]</font> <font color="#990000">==</font> check_col<font color="#990000">[</font>k<font color="#990000">];</font>
        ok <font color="#990000">&amp;=</font> matrix_out<font color="#990000">.</font><b><font color="#000000">val</font></b><font color="#990000">()[</font> row_major<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">]</font> <font color="#990000">==</font> check_val<font color="#990000">[</font>k<font color="#990000">];</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    ok <font color="#990000">&amp;=</font> f<font color="#990000">.</font><b><font color="#000000">size_random</font></b><font color="#990000">()</font> <font color="#990000">&gt;</font> <font color="#993399">0</font><font color="#990000">;</font>
    f<font color="#990000">.</font><b><font color="#000000">clear_subgraph</font></b><font color="#990000">();</font>
    ok <font color="#990000">&amp;=</font> f<font color="#990000">.</font><b><font color="#000000">size_random</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/sparse/subgraph_jac_rev.cpp

</body>
</html>
