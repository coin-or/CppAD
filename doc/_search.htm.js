// ------------------------------------------------------------ 
// Copyright (C) Bradley M. Bell 1998-2015, All rights reserved 
// ------------------------------------------------------------ 
Keyword = 
[
{ tag: 'CppAD', title:'cppad-20220518: A C++ Algorithmic Differentiation Package', other:' features operator overloading base type recording operations multi-threading optimizing sequences dynamic parameters derivative calculations sparsity atomic functions logical comparisons vectors software engineering testing correctness speed utilities release notes example' },
{ tag: 'Install', title:'CppAD Download, Test, and Install Instructions', other:' step 1: 2: cmake 3: check 4: installation deprecated' },
{ tag: 'download', title:'Download The CppAD Source Code', other:' purpose distribution directory version release git compressed archives documentation building' },
{ tag: 'cmake', title:'Using CMake to Configure CppAD', other:' the program build directory command simple warning options msys2 visual studio autotools check cmake_verbose_makefile cmake_build_type generator cppad_prefix cppad_postfix cmake_install_includedirs cmake_install_libdirs cppad_lib cmake_install_datadir cmake_install_docdir include_adolc include_eigen include_ipopt include_cppadcg package_prefix cppad_cxx_flags c++17 debug release cppad_profile_flag cppad_testvector cppad_max_num_threads cppad_tape_id_type cstdint cppad_tape_addr_type cppad_debug_which' },
{ tag: 'get_optional.sh', title:'Download and Install The CppAD Optional Packages', other:' syntax purpose distribution directory prefix absolute path relative configuration get_optional.log get_optional.err' },
{ tag: 'get_adolc.sh', title:'Download and Install Adolc in Build Directory', other:' syntax purpose requirements distribution source prefix version configuration' },
{ tag: 'get_cppadcg.sh', title:'Download and Install CppADCodeGen in Build Directory', other:' syntax purpose requirements distribution source prefix git hash configuration documentation' },
{ tag: 'get_colpack.sh', title:'Download and Install ColPack in Build Directory', other:' syntax purpose distribution source prefix version configuration' },
{ tag: 'get_eigen.sh', title:'Download and Install Eigen in Build Directory', other:' syntax purpose distribution source prefix version configuration' },
{ tag: 'get_fadbad.sh', title:'Download and Install Fadbad in Build Directory', other:' syntax purpose distribution source prefix version' },
{ tag: 'get_ipopt.sh', title:'Download and Install Ipopt in Build Directory', other:' syntax purpose requirements distribution source prefix version configuration' },
{ tag: 'get_sacado.sh', title:'Download and Install Sacado in Build Directory', other:' syntax purpose distribution source prefix version configuration' },
{ tag: 'adolc', title:'Including Adolc Examples and Tests', other:' home page purpose include_adolc speed unix cygwin get_adolc' },
{ tag: 'eigen', title:'Including Eigen Examples, Tests, and sparse2eigen', other:' home page include_eigen vector get_eigen' },
{ tag: 'cppadcg', title:'Including CppADCodeGen Examples and Tests', other:' home page purpose include_cppadcg speed get_cppadcg' },
{ tag: 'ipopt', title:'Including Ipopt Library Examples, Tests, and pkg-config', other:' include_ipopt deprecated get_ipopt directories' },
{ tag: 'fadbad_prefix', title:'Including Fadbad Speed Tests', other:' home page purpose get_fadbad' },
{ tag: 'sacado_prefix', title:'Including Sacado Speed Tests', other:' home page purpose get_sacado' },
{ tag: 'colpack_prefix', title:'Enabling Colpack Sparsity Calculations', other:' home page purpose cppad_lib example get_colpack' },
{ tag: 'colpack_jac.cpp', title:'ColPack: Sparse Jacobian Example and Test', other:'' },
{ tag: 'colpack_jacobian.cpp', title:'ColPack: Sparse Jacobian Example and Test', other:'' },
{ tag: 'colpack_hes.cpp', title:'ColPack: Sparse Hessian Example and Test', other:'' },
{ tag: 'colpack_hessian.cpp', title:'ColPack: Sparse Hessian Example and Test', other:'' },
{ tag: 'cppad_testvector', title:'Choosing the CppAD Test Vector Template Class', other:' syntax example simple std boost eigen' },
{ tag: 'cmake_check', title:'Checking the CppAD Examples and Tests', other:' purpose all subsets first level' },
{ tag: 'pkgconfig', title:'CppAD pkg-config Files', other:' purpose cppad.pc pkg_config_path compile flags link extra definitions cppad-uninstalled.pc' },
{ tag: 'Theory', title:'The Theory of Derivative Calculations', other:'' },
{ tag: 'Introduction', title:'An Introduction by Example to Algorithmic Differentiation', other:' purpose preface forward mode reverse operation count efficiency outline reference' },
{ tag: 'exp_2', title:'Second Order Exponential Approximation', other:' syntax purpose mathematical form include type implementation test exercises' },
{ tag: 'exp_2.hpp', title:'exp_2: Implementation', other:'' },
{ tag: 'exp_2.cpp', title:'exp_2: Test', other:'' },
{ tag: 'exp_2_for0', title:'exp_2: Operation Sequence and Zero Order Forward Mode', other:' mathematical form expansion index code sweep return value verification exercises' },
{ tag: 'exp_2_for1', title:'exp_2: First Order Forward Mode', other:' expansion purpose mathematical form operation sequence index zero derivative sweep return value verification exercises' },
{ tag: 'exp_2_rev1', title:'exp_2: First Order Reverse Mode', other:' purpose mathematical form f_5 index 5: f_4 4: f_3 3: f_2 f_1 verification exercises' },
{ tag: 'exp_2_for2', title:'exp_2: Second Order Forward Mode', other:' expansion purpose mathematical form operation sequence index zero first derivative sweep return value verification exercises' },
{ tag: 'exp_2_rev2', title:'exp_2: Second Order Reverse Mode', other:' purpose mathematical form f_5 index 5: f_4 4: f_3 3: f_2 f_1 verification exercises' },
{ tag: 'exp_2_for0.cpp', title:'exp_2: Verify Zero Order Forward Sweep', other:'' },
{ tag: 'exp_2_for1.cpp', title:'exp_2: Verify First Order Forward Sweep', other:'' },
{ tag: 'exp_2_rev1.cpp', title:'exp_2: Verify First Order Reverse Sweep', other:'' },
{ tag: 'exp_2_for2.cpp', title:'exp_2: Verify Second Order Forward Sweep', other:'' },
{ tag: 'exp_2_rev2.cpp', title:'exp_2: Verify Second Order Reverse Sweep', other:'' },
{ tag: 'exp_2_cppad', title:'exp_2: CppAD Forward and Reverse Sweeps', other:' purpose exercises' },
{ tag: 'exp_eps', title:'An Epsilon Accurate Exponential Approximation', other:' syntax purpose mathematical function include type implementation test exercises' },
{ tag: 'exp_eps.hpp', title:'exp_eps: Implementation', other:'' },
{ tag: 'exp_eps.cpp', title:'exp_eps: Test of exp_eps', other:'' },
{ tag: 'exp_eps_for0', title:'exp_eps: Operation Sequence and Zero Order Forward Sweep', other:' mathematical form variable parameter index code return value comparisons verification exercises' },
{ tag: 'exp_eps_for1', title:'exp_eps: First Order Forward Sweep', other:' expansion mathematical form operation sequence index zero derivative return value verification exercises' },
{ tag: 'exp_eps_rev1', title:'exp_eps: First Order Reverse Sweep', other:' purpose mathematical form epsilon f_7 index 7: f_6 6: f_5 5: f_4 4: f_3 3: f_2 2: f_1 verification exercises' },
{ tag: 'exp_eps_for2', title:'exp_eps: Second Order Forward Mode', other:' expansion purpose mathematical form operation sequence index zero first derivative sweep return value verification exercises' },
{ tag: 'exp_eps_rev2', title:'exp_eps: Second Order Reverse Sweep', other:' purpose mathematical form epsilon f_7 index 7: f_6 6: f_5 5: f_4 4: f_3 3: f_2 2: f_1 verification exercises' },
{ tag: 'exp_eps_for0.cpp', title:'exp_eps: Verify Zero Order Forward Sweep', other:'' },
{ tag: 'exp_eps_for1.cpp', title:'exp_eps: Verify First Order Forward Sweep', other:'' },
{ tag: 'exp_eps_rev1.cpp', title:'exp_eps: Verify First Order Reverse Sweep', other:'' },
{ tag: 'exp_eps_for2.cpp', title:'exp_eps: Verify Second Order Forward Sweep', other:'' },
{ tag: 'exp_eps_rev2.cpp', title:'exp_eps: Verify Second Order Reverse Sweep', other:'' },
{ tag: 'exp_eps_cppad', title:'exp_eps: CppAD Forward and Reverse Sweeps', other:' purpose exercises' },
{ tag: 'exp_apx.cpp', title:'Correctness Tests For Exponential Approximation in Introduction', other:' running source' },
{ tag: 'ForwardTheory', title:'The Theory of Forward Mode', other:' taylor notation binary operators addition subtraction multiplication division standard math functions differential equation coefficients recursion formula cases that apply above special' },
{ tag: 'exp_forward', title:'Exponential Function Forward Mode Theory', other:' derivatives taylor coefficients recursion' },
{ tag: 'log_forward', title:'Logarithm Function Forward Mode Theory', other:' derivatives taylor coefficients recursion' },
{ tag: 'sqrt_forward', title:'Square Root Function Forward Mode Theory', other:'' },
{ tag: 'sin_cos_forward', title:'Trigonometric and Hyperbolic Sine and Cosine Forward Theory', other:' differential equation' },
{ tag: 'atan_forward', title:'Inverse Tangent and Hyperbolic Tangent Forward Mode Theory', other:' derivatives taylor coefficients recursion' },
{ tag: 'asin_forward', title:'Inverse Sine and Hyperbolic Sine Forward Mode Theory', other:' derivatives taylor coefficients recursion' },
{ tag: 'acos_forward', title:'Inverse Cosine and Hyperbolic Cosine Forward Mode Theory', other:' derivatives taylor coefficients recursion' },
{ tag: 'tan_forward', title:'Tangent and Hyperbolic Tangent Forward Taylor Polynomial Theory', other:' derivatives coefficients recursion' },
{ tag: 'erf_forward', title:'Error Function Forward Taylor Polynomial Theory', other:' derivatives coefficients recursion' },
{ tag: 'pow_forward', title:'Power Function Forward Mode Theory', other:' derivatives taylor coefficients recursion z^(0) e^(j) z^j' },
{ tag: 'ReverseTheory', title:'The Theory of Reverse Mode', other:' taylor notation binary operators addition subtraction multiplication division standard math functions' },
{ tag: 'exp_reverse', title:'Exponential Function Reverse Mode Theory', other:'' },
{ tag: 'log_reverse', title:'Logarithm Function Reverse Mode Theory', other:'' },
{ tag: 'sqrt_reverse', title:'Square Root Function Reverse Mode Theory', other:'' },
{ tag: 'sin_cos_reverse', title:'Trigonometric and Hyperbolic Sine and Cosine Reverse Theory', other:'' },
{ tag: 'atan_reverse', title:'Inverse Tangent and Hyperbolic Tangent Reverse Mode Theory', other:'' },
{ tag: 'asin_reverse', title:'Inverse Sine and Hyperbolic Sine Reverse Mode Theory', other:'' },
{ tag: 'acos_reverse', title:'Inverse Cosine and Hyperbolic Cosine Reverse Mode Theory', other:'' },
{ tag: 'tan_reverse', title:'Tangent and Hyperbolic Tangent Reverse Mode Theory', other:' notation eliminating y(t) positive orders z(t) zero' },
{ tag: 'erf_reverse', title:'Error Function Reverse Mode Theory', other:' notation positive orders z(t) zero' },
{ tag: 'pow_reverse', title:'Power Function Reverse Mode Theory', other:' x^j x^k z^k x^0 z^0' },
{ tag: 'reverse_identity', title:'An Important Reverse Mode Identity', other:' notation sweep theorem proof' },
{ tag: 'taylor_ode', title:'AD Theory for Solving ODE\'s Using Taylor\'s Method', other:' problem z(t) example' },
{ tag: 'taylor_ode.cpp', title:'Taylor\'s Ode Solver: An Example and Test', other:' purpose solution' },
{ tag: 'research', title:'Research and Software Engineering Projects Related to CppAD', other:' see also purpose abs-normal form atomic functions dynamic parameters multi-threading optimization scripting language sparsity patterns coloring problem subgraphs speed' },
{ tag: 'AD', title:'AD Objects', other:' purpose base type requirements' },
{ tag: 'ad_ctor', title:'AD Constructors', other:' syntax purpose implicit explicit example' },
{ tag: 'ad_ctor.cpp', title:'AD Constructors: Example and Test', other:'' },
{ tag: 'ad_assign', title:'AD Assignment Operator', other:' syntax purpose example' },
{ tag: 'ad_assign.cpp', title:'AD Assignment: Example and Test', other:'' },
{ tag: 'Convert', title:'Conversion and I/O of AD Objects', other:'' },
{ tag: 'Value', title:'Convert From an AD Type to its Base Type', other:' syntax see also purpose operation sequence restriction example' },
{ tag: 'value.cpp', title:'Convert From AD to its Base Type: Example and Test', other:'' },
{ tag: 'Integer', title:'Convert From AD to Integer', other:' syntax purpose real types complex operation sequence example' },
{ tag: 'integer.cpp', title:'Convert From AD to Integer: Example and Test', other:'' },
{ tag: 'ad_to_string', title:'Convert An AD or Base Type to String', other:' syntax see also value example' },
{ tag: 'ad_input', title:'AD Input Stream Operator', other:' syntax purpose is result operation sequence example' },
{ tag: 'ad_output', title:'AD Output Stream Operator', other:' syntax see also purpose assumption result operation sequence example' },
{ tag: 'ad_input.cpp', title:'AD Output Operator: Example and Test', other:'' },
{ tag: 'ad_output.cpp', title:'AD Output Operator: Example and Test', other:'' },
{ tag: 'PrintFor', title:'Printing AD Values During Forward Mode', other:' syntax see also purpose f.forward(0 x) notpos before after discussion example' },
{ tag: 'print_for_cout.cpp', title:'Printing During Forward Mode: Example and Test', other:' running source code output' },
{ tag: 'print_for_string.cpp', title:'Print During Zero Order Forward Mode: Example and Test', other:'' },
{ tag: 'Var2Par', title:'Convert an AD Variable or Dynamic Parameter to a Constant', other:' syntax see also purpose example' },
{ tag: 'var2par.cpp', title:'Convert a Variable or Dynamic Parameter a Constant: Example and Test', other:'' },
{ tag: 'ADValued', title:'AD Valued Operations and Functions', other:'' },
{ tag: 'Arithmetic', title:'AD Arithmetic Operators and Compound Assignments', other:'' },
{ tag: 'UnaryPlus', title:'AD Unary Plus Operator', other:' syntax purpose operation sequence derivative example' },
{ tag: 'unary_plus.cpp', title:'AD Unary Plus Operator: Example and Test', other:'' },
{ tag: 'UnaryMinus', title:'AD Unary Minus Operator', other:' syntax purpose base operation sequence derivative example' },
{ tag: 'unary_minus.cpp', title:'AD Unary Minus Operator: Example and Test', other:'' },
{ tag: 'ad_binary', title:'AD Binary Arithmetic Operators', other:' syntax purpose base z operation sequence example derivative addition subtraction multiplication division' },
{ tag: 'add.cpp', title:'AD Binary Addition: Example and Test', other:'' },
{ tag: 'sub.cpp', title:'AD Binary Subtraction: Example and Test', other:'' },
{ tag: 'mul.cpp', title:'AD Binary Multiplication: Example and Test', other:'' },
{ tag: 'div.cpp', title:'AD Binary Division: Example and Test', other:'' },
{ tag: 'compound_assign', title:'AD Compound Assignment Operators', other:' syntax purpose base result operation sequence example derivative addition subtraction multiplication division' },
{ tag: 'AddEq.cpp', title:'AD Compound Assignment Addition: Example and Test', other:'' },
{ tag: 'sub_eq.cpp', title:'AD Compound Assignment Subtraction: Example and Test', other:'' },
{ tag: 'mul_eq.cpp', title:'AD Compound Assignment Multiplication: Example and Test', other:'' },
{ tag: 'div_eq.cpp', title:'AD Compound Assignment Division: Example and Test', other:'' },
{ tag: 'unary_standard_math', title:'The Unary Standard Math Functions', other:' syntax purpose possible types base ad<base> vecad<base>' },
{ tag: 'binary_math', title:'The Binary Math Functions', other:'' },
{ tag: 'acos', title:'Inverse Cosine Function: acos', other:' syntax atomic derivative example' },
{ tag: 'acosh', title:'The Inverse Hyperbolic Cosine Function: acosh', other:' syntax description atomic example' },
{ tag: 'asin', title:'Inverse Sine Function: asin', other:' syntax atomic derivative example' },
{ tag: 'asinh', title:'The Inverse Hyperbolic Sine Function: asinh', other:' syntax description atomic example' },
{ tag: 'atan', title:'Inverse Tangent Function: atan', other:' syntax atomic derivative example' },
{ tag: 'atanh', title:'The Inverse Hyperbolic Tangent Function: atanh', other:' syntax description atomic example' },
{ tag: 'cos', title:'The Cosine Function: cos', other:' syntax atomic derivative example' },
{ tag: 'cosh', title:'The Hyperbolic Cosine Function: cosh', other:' syntax atomic derivative example' },
{ tag: 'erf', title:'The Error Function', other:' syntax description atomic example' },
{ tag: 'erfc', title:'The Complementary Error Function: erfc', other:' syntax description atomic example' },
{ tag: 'exp', title:'The Exponential Function: exp', other:' syntax atomic derivative example' },
{ tag: 'expm1', title:'The Exponential Function Minus One: expm1', other:' syntax description atomic example' },
{ tag: 'log', title:'The Exponential Function: log', other:' syntax atomic derivative example' },
{ tag: 'log1p', title:'The Logarithm of One Plus Argument: log1p', other:' syntax description atomic example' },
{ tag: 'log10', title:'The Base 10 Logarithm Function: log10', other:' syntax method example' },
{ tag: 'sin', title:'The Sine Function: sin', other:' syntax atomic derivative example' },
{ tag: 'sinh', title:'The Hyperbolic Sine Function: sinh', other:' syntax atomic derivative example' },
{ tag: 'sqrt', title:'The Square Root Function: sqrt', other:' syntax atomic derivative example' },
{ tag: 'tan', title:'The Tangent Function: tan', other:' syntax atomic derivative example' },
{ tag: 'tanh', title:'The Hyperbolic Tangent Function: tanh', other:' syntax atomic derivative example' },
{ tag: 'acos.cpp', title:'The AD acos Function: Example and Test', other:'' },
{ tag: 'acosh.cpp', title:'The AD acosh Function: Example and Test', other:'' },
{ tag: 'asin.cpp', title:'The AD asin Function: Example and Test', other:'' },
{ tag: 'asinh.cpp', title:'The AD asinh Function: Example and Test', other:'' },
{ tag: 'atan.cpp', title:'The AD atan Function: Example and Test', other:'' },
{ tag: 'atanh.cpp', title:'The AD atanh Function: Example and Test', other:'' },
{ tag: 'cos.cpp', title:'The AD cos Function: Example and Test', other:'' },
{ tag: 'cosh.cpp', title:'The AD cosh Function: Example and Test', other:'' },
{ tag: 'erf.cpp', title:'The AD erf Function: Example and Test', other:'' },
{ tag: 'erfc.cpp', title:'The AD erfc Function: Example and Test', other:'' },
{ tag: 'exp.cpp', title:'The AD exp Function: Example and Test', other:'' },
{ tag: 'expm1.cpp', title:'The AD exp Function: Example and Test', other:'' },
{ tag: 'log.cpp', title:'The AD log Function: Example and Test', other:'' },
{ tag: 'log1p.cpp', title:'The AD log1p Function: Example and Test', other:'' },
{ tag: 'log10.cpp', title:'The AD log10 Function: Example and Test', other:'' },
{ tag: 'sin.cpp', title:'The AD sin Function: Example and Test', other:'' },
{ tag: 'sinh.cpp', title:'The AD sinh Function: Example and Test', other:'' },
{ tag: 'sqrt.cpp', title:'The AD sqrt Function: Example and Test', other:'' },
{ tag: 'tan.cpp', title:'The AD tan Function: Example and Test', other:'' },
{ tag: 'tanh.cpp', title:'The AD tanh Function: Example and Test', other:'' },
{ tag: 'abs', title:'AD Absolute Value Functions: abs, fabs', other:' syntax atomic complex types derivative example' },
{ tag: 'fabs.cpp', title:'AD Absolute Value Function: Example and Test', other:'' },
{ tag: 'sign', title:'The Sign: sign', other:' syntax description atomic derivative example' },
{ tag: 'sign.cpp', title:'Sign Function: Example and Test', other:'' },
{ tag: 'atan2', title:'AD Two Argument Inverse Tangent Function', other:' syntax purpose theta operation sequence example' },
{ tag: 'atan2.cpp', title:'The AD atan2 Function: Example and Test', other:'' },
{ tag: 'pow', title:'The AD Power Function', other:' syntax see also purpose if is variable parameter integer z operation sequence example' },
{ tag: 'pow.cpp', title:'The AD Power Function: Example and Test', other:'' },
{ tag: 'pow_nan.cpp', title:'pow: Nan in Result of Pow Function: Example and Test', other:' purpose problem' },
{ tag: 'azmul', title:'Absolute Zero Multiplication', other:' syntax purpose base ad<base> vecad<base> example' },
{ tag: 'azmul.cpp', title:'AD Absolute Zero Multiplication: Example and Test', other:'' },
{ tag: 'CondExp', title:'AD Conditional Expressions', other:' syntax purpose rel type left right if_true if_false result optimize deprecate 2005-08-07 operation sequence example test atan2' },
{ tag: 'cond_exp.cpp', title:'Conditional Expressions: Example and Test', other:' see also description' },
{ tag: 'Discrete', title:'Discrete AD Functions', other:' syntax purpose base name ay create version operation sequence derivatives parallel mode example cppadcreatediscrete deprecated 2007-07-28' },
{ tag: 'tape_index.cpp', title:'Taping Array Index Operation: Example and Test', other:'' },
{ tag: 'interp_onetape.cpp', title:'Interpolation With Out Retaping: Example and Test', other:' see also' },
{ tag: 'interp_retape.cpp', title:'Interpolation With Retaping: Example and Test', other:' see also' },
{ tag: 'numeric_limits', title:'Numeric Limits For an AD and Base Types', other:' syntax cppad::numeric_limits std::numeric_limits float epsilon min max quiet_nan infinity digits10 example' },
{ tag: 'num_limits.cpp', title:'Numeric Limits: Example and Test', other:'' },
{ tag: 'atomic', title:'Atomic AD Functions', other:' deprecated' },
{ tag: 'atomic_four', title:'Atomic AD Functions: Fourth Generation', other:'' },
{ tag: 'atomic_four_define', title:'Defining Atomic Functions: Fourth Generation', other:' syntax class constructor call callbacks see also purpose speed reduce memory virtual' },
{ tag: 'atomic_four_ctor', title:'Atomic Function Constructor', other:' syntax prototype atomic_user ctor_arg_list afun implementation restrictions base name example' },
{ tag: 'atomic_four_call', title:'Calling an Atomic Function', other:' syntax prototype purpose base advector afun ay call_id for_type restriction' },
{ tag: 'atomic_four_for_type', title:'Atomic Function Forward Type Calculation', other:' syntax prototype dependency analysis usage implementation vector base call_id ad_type type_x type_y ok example' },
{ tag: 'atomic_four_forward', title:'Atomic Function Forward Mode', other:' syntax base ad<base> prototype vector usage implementation call_id select_y order_low order_up q taylor_x parameters ataylor_x taylor_y ataylor_y ok discussion example' },
{ tag: 'atomic_four_reverse', title:'Atomic Function Reverse Mode', other:' syntax base ad<base> prototype vector usage implementation call_id select_x order_up q taylor_x parameters ataylor_x taylor_y ataylor_y h partial_y apartial_y partial_x azmul apartial_x ok example examples' },
{ tag: 'atomic_four_jac_sparsity', title:'Atomic Function Jacobian Sparsity Patterns', other:' syntax preferred deprecated 2022-05-10 prototype implementation base vector call_id dependency ident_zero_x select_x select_y pattern_out ok example' },
{ tag: 'atomic_four_hes_sparsity', title:'Atomic Function Hessian Sparsity Patterns', other:' syntax preferred deprecated 2022-05-16 prototype implementation base vector call_id ident_zero_x select_x select_y pattern_out ok example' },
{ tag: 'atomic_four_rev_depend', title:'Atomic Function Reverse Dependency', other:' syntax preferred deprecated 2022-05-10 prototype analysis implementation base vector call_id ident_zero_x depend_x optimize depend_y ok example' },
{ tag: 'atomic_four_example', title:'Example Defining Atomic Functions: Fourth Generation', other:'' },
{ tag: 'atomic_four_get_started.cpp', title:'Getting Started with Atomic Functions: Example and Test', other:' purpose define use' },
{ tag: 'atomic_four_norm_sq.cpp', title:'Atomic Euclidean Norm Squared: Example and Test', other:' function purpose define use' },
{ tag: 'atomic_four_forward.cpp', title:'Atomic Functions and Forward Mode: Example and Test', other:' purpose jacobian hessian define use' },
{ tag: 'atomic_four_dynamic.cpp', title:'Atomic Functions with Dynamic Parameters: Example and Test', other:' purpose define use' },
{ tag: 'atomic_four_vector', title:'Atomic Vector Element-wise Operators: Example and Test', other:' syntax purpose operations base2ad ad<double>' },
{ tag: 'atomic_four_vector_implement', title:'Implementing Atomic Vector Operations', other:'' },
{ tag: 'atomic_four_vector.hpp', title:'Atomic Vector Class: Example Implementation', other:'' },
{ tag: 'atomic_four_vector_forward_op.hpp', title:'Atomic Vector Forward Mode: Example Implementation', other:' purpose source' },
{ tag: 'atomic_four_vector_reverse_op.hpp', title:'Atomic Vector Forward Mode: Example Implementation', other:' purpose source' },
{ tag: 'atomic_four_vector_jac_sparsity.hpp', title:'Atomic Vector Jacobian Sparsity Pattern: Example Implementation', other:' purpose source' },
{ tag: 'atomic_four_vector_hes_sparsity.hpp', title:'Atomic Vector Hessian Sparsity Pattern: Example Implementation', other:' purpose source' },
{ tag: 'atomic_four_vector_for_type.hpp', title:'Atomic Vector Forward Type Calculation: Example Implementation', other:' purpose source' },
{ tag: 'atomic_four_vector_rev_depend.hpp', title:'Atomic Vector Forward Type Calculation: Example Implementation', other:' purpose source' },
{ tag: 'atomic_four_vector_add_op.hpp', title:'Atomic Vector Add Operator: Example Implementation', other:' forward mode reverse source' },
{ tag: 'atomic_four_vector_sub_op.hpp', title:'Atomic Vector Subtract Operator: Example Implementation', other:' forward mode reverse source' },
{ tag: 'atomic_four_vector_mul_op.hpp', title:'Atomic Vector Multiply Operator: Example Implementation', other:' forward mode reverse source' },
{ tag: 'atomic_four_vector_div_op.hpp', title:'Atomic Vector Divide Operator: Example Implementation', other:' forward mode reverse source' },
{ tag: 'atomic_four_vector_neg_op.hpp', title:'Atomic Vector Negative Operator: Example Implementation', other:' source' },
{ tag: 'atomic_four_vector_add.cpp', title:'Atomic Vector Addition Example', other:' f(u w) g(u source' },
{ tag: 'atomic_four_vector_div.cpp', title:'Atomic Vector Division Example', other:' f(u w) g(u v) source' },
{ tag: 'atomic_four_vector_hes_sparsity.cpp', title:'Atomic Vector Sparsity Patterns Example', other:' f(u v) source' },
{ tag: 'atomic_four_vector_jac_sparsity.cpp', title:'Atomic Vector Sparsity Patterns Example', other:' f(u v) source' },
{ tag: 'atomic_four_vector_mul.cpp', title:'Atomic Vector Multiplication Example', other:' f(u w) g(u source' },
{ tag: 'atomic_four_vector_neg.cpp', title:'Atomic Vector Negation Example', other:' f(u w) g(u source' },
{ tag: 'atomic_four_vector_rev_depend.cpp', title:'Example Optimizing Atomic Vector Usage', other:' f(u v) source' },
{ tag: 'atomic_four_vector_sub.cpp', title:'Atomic Vector Subtraction Example', other:' f(u w) g(u source' },
{ tag: 'atomic_four_mat_mul', title:'Atomic Matrix Multiply Class: Example Implementation', other:' syntax purpose n_left n_middle n_right call_id theory forward argument scalar valued function reverse' },
{ tag: 'atomic_four_mat_mul_implement', title:'Implementing Atomic Matrix Multiply', other:'' },
{ tag: 'atomic_four_mat_mul.hpp', title:'Atomic Matrix Multiply Class: Example Implementation', other:'' },
{ tag: 'atomic_four_mat_mul_set.hpp', title:'atomic_mat_mul Set Routine: Example Implementation', other:' syntax prototype purpose n_left n_middle n_right call_id source' },
{ tag: 'atomic_four_mat_mul_get.hpp', title:'atomic_mat_mul Get Routine: Example Implementation', other:' syntax prototype purpose call_id n_left n_middle n_right source' },
{ tag: 'atomic_four_mat_mul_base_mat_mul.hpp', title:'Atomic Multiply Base Matrices: Example Implementation', other:' source' },
{ tag: 'atomic_four_mat_mul_for_type.hpp', title:'Atomic Matrix Multiply Forward Type Calculation: Example Implementation', other:' purpose source' },
{ tag: 'atomic_four_mat_mul_forward.hpp', title:'Atomic Matrix Multiply Forward Mode: Example Implementation', other:' purpose source' },
{ tag: 'atomic_four_mat_mul_reverse.hpp', title:'Atomic Matrix Multiply Reverse Mode: Example Implementation', other:' purpose theory source' },
{ tag: 'atomic_four_mat_mul_jac_sparsity.hpp', title:'Atomic Matrix Multiply Jacobian Sparsity Pattern: Example Implementation', other:' purpose source' },
{ tag: 'atomic_four_mat_mul_hes_sparsity.hpp', title:'Atomic Matrix Multiply Jacobian Sparsity Pattern: Example Implementation', other:' purpose source' },
{ tag: 'atomic_four_mat_mul_rev_depend.hpp', title:'Atomic Matrix Multiply Reverse Dependency Analysis: Example Implementation', other:' purpose source' },
{ tag: 'atomic_four_mat_mul_forward.cpp', title:'Atomic Matrix Multiply Forward Mode: Example and Test', other:' purpose f(x) jacobian g(x) hessian source' },
{ tag: 'atomic_four_mat_mul_reverse.cpp', title:'Atomic Matrix Multiply Reverse Mode: Example and Test', other:' purpose f(x) jacobian g(x) hessian source' },
{ tag: 'atomic_four_mat_mul_sparsity.cpp', title:'Atomic Matrix Multiply Sparsity Patterns: Example and Test', other:' purpose f(x) jacobian hessian source' },
{ tag: 'atomic_four_mat_mul_rev_depend.cpp', title:'Atomic Matrix Multiply Reverse Dependency: Example and Test', other:' purpose f(u) forward analysis size_var source' },
{ tag: 'atomic_four_mat_mul_identical_zero.cpp', title:'Atomic Matrix Multiply Identical Zero: Example and Test', other:' purpose one source' },
{ tag: 'atomic_four_lin_ode', title:'Atomic First Order Linear ODE Method: Example Implementation', other:' syntax z(t x) call_id step pattern nnz row col transpose a(x) b(x) y(x) ay vk(x) approximations rosen34 simpon\'s rule' },
{ tag: 'atomic_four_lin_ode_implement', title:'Implementing Atomic Linear ODE', other:'' },
{ tag: 'atomic_four_lin_ode.hpp', title:'Atomic Linear ODE Class: Example Implementation', other:'' },
{ tag: 'atomic_four_lin_ode_set.hpp', title:'atomic_lin_ode Set Routine: Example Implementation', other:' syntax prototype purpose step pattern transpose source' },
{ tag: 'atomic_four_lin_ode_get.hpp', title:'atomic_lin_ode Get Routine: Example Implementation', other:' syntax prototype purpose call_id step pattern transpose source' },
{ tag: 'atomic_four_lin_ode_base_solver.hpp', title:'Atomic Multiply Base Matrices: Example Implementation', other:' syntax prototype notation rosen34 source' },
{ tag: 'atomic_four_lin_ode_for_type.hpp', title:'Atomic Linear ODE Forward Type Calculation: Example Implementation', other:' purpose notation t(s) theory source' },
{ tag: 'atomic_four_lin_ode_forward.hpp', title:'Atomic Linear ODE Forward Mode: Example Implementation', other:' purpose theory source' },
{ tag: 'atomic_four_lin_ode_reverse.hpp', title:'Atomic Linear ODE Reverse Mode: Example Implementation', other:' purpose theory simpon\'s rule source' },
{ tag: 'atomic_four_lin_ode_jac_sparsity.hpp', title:'Atomic Linear ODE Jacobian Sparsity Pattern: Example Implementation', other:' purpose notation s[ g(x) ] j_i a(x) p_i theory source' },
{ tag: 'atomic_four_lin_ode_hes_sparsity.hpp', title:'Atomic Linear ODE Hessian Sparsity Pattern: Example Implementation', other:' purpose notation wk(x) source' },
{ tag: 'atomic_four_lin_ode_rev_depend.hpp', title:'Atomic Linear ODE Forward Type Calculation: Example Implementation', other:' purpose notation wk(x) source' },
{ tag: 'atomic_four_lin_ode_forward.cpp', title:'Atomic Linear ODE Forward Mode: Example and Test', other:' purpose f(u) z(t g(u) source' },
{ tag: 'atomic_four_lin_ode_reverse.cpp', title:'Atomic Linear ODE Reverse Mode: Example and Test', other:' purpose f(u) solution g(u) source' },
{ tag: 'atomic_four_lin_ode_sparsity.cpp', title:'Atomic Linear ODE Sparsity Calculations: Example and Test', other:' purpose f(u) solution source' },
{ tag: 'atomic_four_lin_ode_rev_depend.cpp', title:'Atomic Linear ODE Reverse Dependency Analysis: Example and Test', other:' purpose f(x) solution source' },
{ tag: 'atomic_three', title:'Atomic AD Functions: Third Generation', other:'' },
{ tag: 'atomic_three_define', title:'Defining Atomic Functions: Third Generation', other:' syntax class construct use member callbacks see also purpose speed reduce memory ad_type virtual base parameter_x constant dynamic variable type_x' },
{ tag: 'atomic_three_ctor', title:'Atomic Function Constructor', other:' syntax prototype atomic_user ctor_arg_list afun implementation restrictions base name example define' },
{ tag: 'atomic_three_afun', title:'Using AD Version of an Atomic Function', other:' syntax prototype purpose base advector ay' },
{ tag: 'atomic_three_for_type', title:'Atomic Function Forward Type Calculation', other:' syntax prototype dependency analysis usage implementation base parameter_x type_x type_y ok example' },
{ tag: 'atomic_three_forward', title:'Atomic Function Forward Mode', other:' base syntax prototype ad<base> implementation parameter_x aparameter_x type_x need_y constant parameters dynamic variables all order_low order_up q taylor_x ataylor_x taylor_y ataylor_y ok discussion examples' },
{ tag: 'atomic_three_forward.cpp', title:'Atomic Functions and Forward Mode: Example and Test', other:' purpose jacobian hessian start class definition constructor for_type use' },
{ tag: 'atomic_three_dynamic.cpp', title:'Atomic Functions with Dynamic Parameters: Example and Test', other:' purpose start class definition constructor for_type forward end use recording return result' },
{ tag: 'atomic_three_reverse', title:'Atomic Function Reverse Mode', other:' base syntax prototype ad<base> implementation parameter_x aparameter_x type_x order_up taylor_x parameters ataylor_x taylor_y ataylor_y g partial_y apartial_y partial_x short circuit operations azmul apartial_x ok examples' },
{ tag: 'atomic_three_reverse.cpp', title:'Atomic Functions and Reverse Mode: Example and Test', other:' purpose jacobian hessian start class definition constructor for_type forward use' },
{ tag: 'atomic_three_jac_sparsity', title:'Atomic Function Jacobian Sparsity Patterns', other:' syntax prototype implementation base parameter_x type_x dependency select_x select_y pattern_out ok examples' },
{ tag: 'atomic_three_jac_sparsity.cpp', title:'Atomic Function Jacobian Sparsity: Example and Test', other:' purpose start class definition constructor for_type forward use with u_1 both variable parameter' },
{ tag: 'atomic_three_hes_sparsity', title:'Atomic Function Hessian Sparsity Patterns', other:' syntax prototype implementation base parameter_x type_x select_x select_y pattern_out ok examples' },
{ tag: 'atomic_three_hes_sparsity.cpp', title:'Atomic Forward Hessian Sparsity: Example and Test', other:' purpose function jacobian hessians start class definition constructor for_type jac_sparsity use with u_1 both variable parameter' },
{ tag: 'atomic_three_rev_depend', title:'Atomic Function Reverse Dependency Calculation', other:' syntax prototype analysis implementation base parameter_x type_x depend_x optimize depend_y ok example' },
{ tag: 'atomic_three_rev_depend.cpp', title:'Atomic Functions Reverse Dependency Analysis: Example and Test', other:' purpose start class definition constructor for_type forward use recording optimize return result' },
{ tag: 'atomic_three_example', title:'Example Defining Atomic Functions: Third Generation', other:'' },
{ tag: 'atomic_three_get_started.cpp', title:'Getting Started with Atomic Functions: Example and Test', other:' purpose class definition constructor for_type forward end use recording return result' },
{ tag: 'atomic_three_norm_sq.cpp', title:'Atomic Euclidean Norm Squared: Example and Test', other:' function start class definition constructor for_type forward reverse jac_sparsity hes_sparsity end use recording rev_jac_sparsity for_hes_sparsity' },
{ tag: 'atomic_three_tangent.cpp', title:'Tan and Tanh as User Atomic Operations: Example and Test', other:' discussion start class definition constructor for_type forward reverse jac_sparsity hes_sparsity end function recording for_jac_sparsity rev_sparse_hes large values' },
{ tag: 'atomic_three_base2ad.cpp', title:'base2ad with Atomic Operations: Example and Test', other:' source code' },
{ tag: 'atomic_three_reciprocal.cpp', title:'Reciprocal as an Atomic Operation: Example and Test', other:' function start class definition constructor for_type forward reverse jac_sparsity hes_sparsity end use recording for_jac_sparsity rev_sparse_jac rev_sparse_hes for_sparse_hes' },
{ tag: 'atomic_three_mat_mul.cpp', title:'User Atomic Matrix Multiply: Example and Test', other:' see also class definition function constructor recording forward reverse jac_sparsity hes_sparsity' },
{ tag: 'atomic_three_mat_mul.hpp', title:'Matrix Multiply as an Atomic Operation', other:' see also purpose parameter_x type_x dimensions left right result start class definition constructor operand element index forward reverse for_type jac_sparsity hes_sparsity rev_depend' },
{ tag: 'chkpoint_two', title:'Checkpoint Functions: Second Generation', other:' syntax constructor use new_dynamic reduce memory faster recording repeating forward operation sequence atomic_three base' },
{ tag: 'chkpoint_two_ctor', title:'Checkpoint Function Constructor', other:' syntax prototype parallel base name internal_bool use_hes_sparsity use_base2ad use_in_parallel chk_fun' },
{ tag: 'chkpoint_two_chk_fun', title:'Using Checkpoint Functions', other:' syntax purpose advector ay' },
{ tag: 'chkpoint_two_dynamic', title:'Dynamic Parameters in Checkpoint Functions', other:' syntax prototype chk_fun base basevector multi-threading' },
{ tag: 'chkpoint_two_get_started.cpp', title:'Get Started Checkpointing: Example and Test', other:' purpose f f[g(x)] source code' },
{ tag: 'chkpoint_two_compare.cpp', title:'Compare With and Without Checkpointing: Example and Test', other:'' },
{ tag: 'chkpoint_two_base2ad.cpp', title:'Checkpointing With base2ad: Example and Test', other:'' },
{ tag: 'chkpoint_two_dynamic.cpp', title:'Checkpoint Functions with Dynamic Parameters: Example and Test', other:' purpose g(x) f(x) source' },
{ tag: 'chkpoint_two_ode.cpp', title:'Checkpointing an ODE Solver: Example and Test', other:' purpose problem solution source' },
{ tag: 'BoolValued', title:'Bool Valued Operations and Functions with AD Arguments', other:'' },
{ tag: 'Compare', title:'AD Binary Comparison Operators', other:' syntax purpose operation sequence assumptions example' },
{ tag: 'compare.cpp', title:'AD Binary Comparison Operators: Example and Test', other:'' },
{ tag: 'NearEqualExt', title:'Compare AD and Base Objects for Nearly Equal', other:' syntax purpose type operation sequence example' },
{ tag: 'near_equal_ext.cpp', title:'Compare AD with Base Objects: Example and Test', other:'' },
{ tag: 'BoolFun', title:'AD Boolean Functions', other:' syntax purpose unary_name create binary_name v operation sequence example deprecated 2007-07-31' },
{ tag: 'bool_fun.cpp', title:'AD Boolean Functions: Example and Test', other:'' },
{ tag: 'con_dyn_var', title:'Constant, Dynamic, Parameter, and Variable', other:' syntax operation sequence example' },
{ tag: 'con_dyn_var.cpp', title:'AD Parameter and Variable Functions: Example and Test', other:'' },
{ tag: 'EqualOpSeq', title:'Check if Two Value are Identically Equal', other:' syntax purpose motivation b example' },
{ tag: 'equal_op_seq.cpp', title:'EqualOpSeq: Example and Test', other:'' },
{ tag: 'VecAD', title:'AD Vectors that Record Index Operations', other:' syntax purpose alternatives efficiency vecad<base>::reference exceptions constructor size indexing result right left example base2ad speed memory' },
{ tag: 'vec_ad.cpp', title:'AD Vectors that Record Index Operations: Example and Test', other:'' },
{ tag: 'base_require', title:'AD<Base> Requirements for a CppAD Base Type', other:' syntax purpose api warning standard types include order numeric output operator integer suggestion absolute zero azmul' },
{ tag: 'base_member', title:'Required Base Class Member Functions', other:' notation default constructor double copy unary operators assignment binary bool example' },
{ tag: 'base_cond_exp', title:'Base Type Requirements for Conditional Expressions', other:' purpose compareop condexptemplate ordered not condexprel' },
{ tag: 'base_identical', title:'Base Type Requirements for Identically Equal Comparisons', other:' equalopseq the simple case more complicated identicalcon prototypes functions examples' },
{ tag: 'base_ordered', title:'Base Type Requirements for Ordered Comparisons', other:' purpose not special independent optimize printfor' },
{ tag: 'base_std_math', title:'Base Type Requirements for Standard Math Functions', other:' purpose unary cppad_standard_math_unary sign pow isnan' },
{ tag: 'base_limits', title:'Base Type Requirements for Numeric Limits', other:' cppad::numeric_limits cppad_numeric_limits' },
{ tag: 'base_to_string', title:'Extending to_string To Another Floating Point Type', other:' requirement cppad_to_string' },
{ tag: 'base_hash', title:'Base Type Requirements for Hash Coding Values', other:' syntax purpose default code inline example' },
{ tag: 'base_example', title:'Example AD Base Types That are not AD<OtherBase>', other:'' },
{ tag: 'base_alloc.hpp', title:'Example AD<Base> Where Base Constructor Allocates Memory', other:' purpose include file compound assignment macro binary operator boolean class definition condexpop condexprel equalopseq identical output integer azmul ordered unary standard math pow numeric_limits to_string hash_code' },
{ tag: 'base_require.cpp', title:'Using a User Defined AD Base Type: Example and Test', other:' purpose' },
{ tag: 'base_adolc.hpp', title:'Enable use of AD<Base> where Base is Adolc\'s adouble Type', other:' syntax example include files condexpop condexprel equalopseq identical integer azmul ordered unary standard math erfc sign abs pow numeric_limits to_string hash_code' },
{ tag: 'mul_level_adolc.cpp', title:'Using Adolc with Multiple Levels of Taping: Example and Test', other:' purpose memory management configuration requirement source' },
{ tag: 'base_float.hpp', title:'Enable use of AD<Base> where Base is float', other:' condexpop condexprel equalopseq identical integer azmul ordered unary standard math sign pow numeric_limits to_string' },
{ tag: 'base_double.hpp', title:'Enable use of AD<Base> where Base is double', other:' condexpop condexprel equalopseq identical integer azmul ordered unary standard math sign pow numeric_limits to_string' },
{ tag: 'base_complex.hpp', title:'Enable use of AD<Base> where Base is std::complex<double>', other:' example include order condexpop condexprel equalopseq identical ordered integer azmul isnan valid unary math invalid pow numeric_limits to_string' },
{ tag: 'complex_poly.cpp', title:'Complex Polynomial: Example and Test', other:'' },
{ tag: 'ADFun', title:'ADFun Objects', other:' purpose' },
{ tag: 'record_adfun', title:'Create an ADFun Object by Recording an Operation Sequence', other:'' },
{ tag: 'other_adfun', title:'Other Ways to Create an ADFun Object', other:' see also' },
{ tag: 'drivers', title:'First and Second Order Derivatives: Easy Drivers', other:'' },
{ tag: 'Forward', title:'Forward Mode', other:'' },
{ tag: 'Reverse', title:'Reverse Mode', other:' multiple directions' },
{ tag: 'sparsity_pattern', title:'Calculating Sparsity Patterns', other:' preferred calculations old' },
{ tag: 'sparse_derivative', title:'Calculating Sparse Derivatives', other:' preferred sparsity patterns old' },
{ tag: 'Independent', title:'Declare Independent Variables and Start Recording', other:' syntax stop abort_op_index record_compare dynamic efficiency advector parallel mode example' },
{ tag: 'independent.cpp', title:'Independent and ADFun Constructor: Example and Test', other:'' },
{ tag: 'FunConstruct', title:'Construct an ADFun Object and Stop Recording', other:' syntax purpose advector default constructor sequence copy swap assignment operator move semantics taylor coefficients sparsity patterns parallel mode example' },
{ tag: 'fun_assign.cpp', title:'ADFun Assignment: Example and Test', other:'' },
{ tag: 'Dependent', title:'Stop Recording and Store Operation Sequence', other:' syntax purpose f advector taping forward parallel mode example' },
{ tag: 'abort_recording', title:'Abort Recording of an Operation Sequence', other:' syntax purpose example' },
{ tag: 'abort_recording.cpp', title:'Abort Current Recording: Example and Test', other:'' },
{ tag: 'fun_property', title:'ADFun Function Properties', other:' syntax see also purpose domain range parameter size_var size_par size_op size_op_arg size_text size_vecad size_random size_dyn_ind size_dyn_par size_dyn_arg size_op_seq example' },
{ tag: 'fun_property.cpp', title:'ADFun Function Properties: Example and Test', other:'' },
{ tag: 'function_name', title:'Setting and Getting a Function\'s Name', other:' syntax see also example' },
{ tag: 'function_name.cpp', title:'ADFun Function Name: Example and Test', other:'' },
{ tag: 'base2ad', title:'Create an AD<Base> Function From a Base Function', other:' syntax see also af example vecad' },
{ tag: 'base2ad.cpp', title:'Taylor\'s Ode Solver: base2ad Example and Test', other:' see also purpose solution derivative method using source' },
{ tag: 'base2vec_ad.cpp', title:'Using base2ad and VecAD together: Example and Test', other:' purpose' },
{ tag: 'json_ad_graph', title:'Json Representation of an AD Graph', other:' see also node indices x r_i format token white space non-negative integer floating point number string single character op_define_vec op_code n_arg n_result op_usage definition not strings first_arg ... last_arg dynamic_ind_vec n_dynamic_ind variable_ind_vec n_variable_ind constant_vec n_constant op_usage_vec n_usage dependent_vec n_dependent function_name' },
{ tag: 'json_graph_op', title:'Json AD Graph Operator Definitions', other:' notation op_code arguments unary operators example binary add azmul div pow sub sum conditional expressions cexp_eq cexp_le cexp_lt other comparisons compare n_result n_arg left right comp_eq comp_le comp_lt comp_ne discrete functions name atomic three four call_id first_arg ... last_arg print before after notpos value' },
{ tag: 'json_unary_op.cpp', title:'Json Unary Operators: Example and Test', other:' source code' },
{ tag: 'json_add_op.cpp', title:'Json add Operator: Example and Test', other:' source code' },
{ tag: 'json_azmul_op.cpp', title:'Json azmul Operator: Example and Test', other:' source code' },
{ tag: 'json_div_op.cpp', title:'Json div Operator: Example and Test', other:' source code' },
{ tag: 'json_mul_op.cpp', title:'Json mul Operator: Example and Test', other:' source code' },
{ tag: 'json_pow_op.cpp', title:'Json pow Operator: Example and Test', other:' source code' },
{ tag: 'json_sub_op.cpp', title:'Json sub Operator: Example and Test', other:' source code' },
{ tag: 'json_sum_op.cpp', title:'Json sum Operator: Example and Test', other:' source code' },
{ tag: 'json_cexp_op.cpp', title:'Json Conditional Expressions: Example and Test', other:' source code' },
{ tag: 'json_comp_op.cpp', title:'Json Comparison Operators: Example and Test', other:' source code' },
{ tag: 'json_discrete_op.cpp', title:'Json add Operator: Example and Test', other:' source code' },
{ tag: 'json_atom_op.cpp', title:'Json Atomic Function Three Operator: Example and Test', other:' source code' },
{ tag: 'json_atom4_op.cpp', title:'Json Atomic Function Operator: Example and Test', other:' source code' },
{ tag: 'json_print_op.cpp', title:'Json AD Graph print Operator: Example and Test', other:' source code' },
{ tag: 'from_json', title:'ADFun Object Corresponding to a Json AD Graph', other:' syntax prototype base recbase example' },
{ tag: 'from_json.cpp', title:'Convert Jason Graph to an ADFun Object: Example and Test', other:' source code' },
{ tag: 'to_json', title:'Json AD Graph Corresponding to an ADFun Object', other:' syntax prototype base recbase restrictions example' },
{ tag: 'to_json.cpp', title:'Convert an ADFun Object to a Json AD Graph: Example and Test', other:' source code' },
{ tag: 'json_get_started.cpp', title:'Json Get Started: Example and Test', other:' notation node table include syntax setup function begin op_define_vec unary sum end n_dynamic_ind n_variable_ind constant_vec op_usage_vec dependent_vec convert single to double quotes f(x p) check ad<double> evaluate derivative g(x = d/dx back' },
{ tag: 'json_sparse.cpp', title:'Json Representation of a Sparse Matrix: Example and Test', other:' discussion source code' },
{ tag: 'cpp_ad_graph', title:'C++ Representation of an AD Graph', other:' see also function node indices x function_name discrete_name_vec atomic_name_vec print_text_vec n_dynamic_ind n_variable_ind constant_vec operator_vec operator_arg print_graph_op discrete_graph_op atom_graph_op sum_graph_op dependent_vec cpp_graph' },
{ tag: 'graph_op_enum', title:'C++ AD Graph Operator Enum Type', other:' unary binary conditional expression other comparisons summation discrete function atomic print missing operators values examples' },
{ tag: 'graph_azmul_op.cpp', title:'C++ AD Graph add Operator: Example and Test', other:' source code' },
{ tag: 'graph_add_op.cpp', title:'C++ AD Graph add Operator: Example and Test', other:' source code' },
{ tag: 'graph_div_op.cpp', title:'C++ AD Graph div Operator: Example and Test', other:' source code' },
{ tag: 'graph_mul_op.cpp', title:'C++ AD Graph mul Operator: Example and Test', other:' source code' },
{ tag: 'graph_pow_op.cpp', title:'C++ AD Graph pow Operator: Example and Test', other:' source code' },
{ tag: 'graph_sub_op.cpp', title:'C++ AD Graph sub Operator: Example and Test', other:' source code' },
{ tag: 'graph_unary_op.cpp', title:'Graph Unary Operator: Example and Test', other:' source code' },
{ tag: 'graph_sum_op.cpp', title:'C++ AD Graph sum Operator: Example and Test', other:' source code' },
{ tag: 'graph_comp_op.cpp', title:'C++ AD Graph Comparison Operators: Example and Test', other:' source code' },
{ tag: 'graph_cexp_op.cpp', title:'C++ AD Graph Conditional Expressions: Example and Test', other:' source code' },
{ tag: 'graph_discrete_op.cpp', title:'C++ AD Graph add Operator: Example and Test', other:' source code' },
{ tag: 'graph_atom_op.cpp', title:'C++ AD Graph Atomic Three Functions: Example and Test', other:' source code' },
{ tag: 'graph_atom4_op.cpp', title:'C++ AD Graph Atomic Four Functions: Example and Test', other:' source code' },
{ tag: 'graph_print_op.cpp', title:'C++ AD Graph print Operator: Example and Test', other:' source code' },
{ tag: 'cpp_graph', title:'A C++ AD Graph Class', other:'' },
{ tag: 'cpp_graph_ctor', title:'C++ AD Graph Constructor', other:' syntax function_name n_dynamic_ind n_variable_ind constant_vec operator_vec operator_arg dependent_vec parallel mode' },
{ tag: 'cpp_graph_scalar', title:'C++ AD Graph Scalar Values', other:' syntax get set graph_obj function_name n_dynamic_ind n_variable_ind' },
{ tag: 'cpp_graph_vector', title:'C++ AD Graph Vector Values', other:' syntax size get push back find arguments index push_back graph_obj discrete_name atomic_name print_text constant op_enum node_index discrete_index atomic_index print_index' },
{ tag: 'cpp_graph_print', title:'Print A C++ AD Graph', other:' syntax graph_obj os discussion example' },
{ tag: 'print_graph.cpp', title:'Print a C++ AD Graph: Example and Test', other:' source code' },
{ tag: 'from_graph', title:'ADFun Object Corresponding to a CppAD Graph', other:' syntax prototype base recbase graph_obj dyn2var var2dyn m_true m_false n_true n_false independent dynamic parameters variables examples' },
{ tag: 'switch_var_dyn.cpp', title:'Switching Between Variables and Dynamic Parameters: Example and Test', other:' function convert to graph source code' },
{ tag: 'to_graph', title:'Create a C++ AD Graph Corresponding to an ADFun Object', other:' syntax prototype base recbase graph_obj restrictions examples' },
{ tag: 'abs_normal_fun', title:'Create An Abs-normal Representation of a Function', other:' syntax zeta a(x) g z(x u) y(x affine approximation approximating f(x) correspondence to literature example' },
{ tag: 'example_abs_normal', title:'Examples and Tests: Abs-normal Representation of Non-Smooth Functions', other:' reference' },
{ tag: 'abs_get_started.cpp', title:'abs_normal Getting Started: Example and Test', other:' purpose source' },
{ tag: 'abs_print_mat', title:'abs_normal: Print a Vector or Matrix', other:' syntax prototype purpose name nr nc' },
{ tag: 'abs_eval', title:'abs_normal: Evaluate First Order Approximation', other:' syntax prototype source purpose vector g g_hat g_jac delta_x g_tilde example' },
{ tag: 'abs_eval.cpp', title:'abs_eval: Example and Test', other:' purpose source' },
{ tag: 'abs_eval.hpp', title:'abs_eval Source Code', other:'' },
{ tag: 'simplex_method', title:'abs_normal: Solve a Linear Program Using Simplex Method', other:' syntax prototype source problem vector level maxitr xout ok example' },
{ tag: 'simplex_method.cpp', title:'abs_normal simplex_method: Example and Test', other:' problem source' },
{ tag: 'simplex_method.hpp', title:'simplex_method Source Code', other:'' },
{ tag: 'lp_box', title:'abs_normal: Solve a Linear Program With Box Constraints', other:' syntax prototype source problem vector level d maxitr xout ok example' },
{ tag: 'lp_box.cpp', title:'abs_normal lp_box: Example and Test', other:' problem source' },
{ tag: 'lp_box.hpp', title:'lp_box Source Code', other:'' },
{ tag: 'abs_min_linear', title:'abs_normal: Minimize a Linear Abs-normal Approximation', other:' syntax prototype source purpose dblvector sizevector f level g g_hat g_jac bound epsilon maxitr delta_x method sigma cutting planes iteration example' },
{ tag: 'abs_min_linear.cpp', title:'abs_min_linear: Example and Test', other:' purpose source' },
{ tag: 'abs_min_linear.hpp', title:'abs_min_linear Source Code', other:'' },
{ tag: 'min_nso_linear', title:'Non-Smooth Optimization Using Abs-normal Linear Approximations', other:' syntax prototype source purpose dblvector sizevector f level epsilon maxitr b_in x_in x_out example' },
{ tag: 'min_nso_linear.cpp', title:'abs_normal min_nso_linear: Example and Test', other:' purpose discussion source' },
{ tag: 'min_nso_linear.hpp', title:'min_nso_linear Source Code', other:'' },
{ tag: 'qp_interior', title:'Solve a Quadratic Program Using Interior Point Method', other:' syntax prototype source purpose problem vector level epsilon maxitr xin xout yout sout ok kkt conditions newton step elementary row reduction solution example' },
{ tag: 'qp_interior.cpp', title:'abs_normal qp_interior: Example and Test', other:' problem source' },
{ tag: 'qp_interior.hpp', title:'qp_interior Source Code', other:'' },
{ tag: 'qp_box', title:'abs_normal: Solve a Quadratic Program With Box Constraints', other:' syntax prototype source purpose problem vector level epsilon maxitr xin xout ok kkt conditions example' },
{ tag: 'qp_box.cpp', title:'abs_normal qp_box: Example and Test', other:' problem source' },
{ tag: 'qp_box.hpp', title:'qp_box Source Code', other:'' },
{ tag: 'abs_min_quad', title:'abs_normal: Minimize a Linear Abs-normal Approximation', other:' syntax prototype source purpose dblvector sizevector f level g g_hat g_jac hessian bound epsilon maxitr delta_x method sigma cutting planes iteration example' },
{ tag: 'abs_min_quad.cpp', title:'abs_min_quad: Example and Test', other:' purpose source' },
{ tag: 'abs_min_quad.hpp', title:'abs_min_quad Source Code', other:'' },
{ tag: 'min_nso_quad', title:'Non-Smooth Optimization Using Abs-normal Quadratic Approximations', other:' syntax prototype source purpose dblvector sizevector level f epsilon maxitr b_in x_in x_out example' },
{ tag: 'min_nso_quad.cpp', title:'abs_normal min_nso_quad: Example and Test', other:' purpose discussion source' },
{ tag: 'min_nso_quad.hpp', title:'min_nso_quad Source Code', other:'' },
{ tag: 'Jacobian', title:'Jacobian: Driver Routine', other:' syntax purpose f vector forward reverse example' },
{ tag: 'jacobian.cpp', title:'Jacobian: Example and Test', other:'' },
{ tag: 'Hessian', title:'Hessian: Easy Driver', other:' syntax purpose f l w vector uses forward example' },
{ tag: 'hessian.cpp', title:'Hessian: Example and Test', other:'' },
{ tag: 'hes_lagrangian.cpp', title:'Hessian of Lagrangian and ADFun Default Constructor: Example and Test', other:'' },
{ tag: 'ForOne', title:'First Order Partial Derivative: Driver Routine', other:' syntax purpose j dy vector uses forward example' },
{ tag: 'for_one.cpp', title:'First Order Partial Driver: Example and Test', other:'' },
{ tag: 'RevOne', title:'First Order Derivative: Driver Routine', other:' syntax purpose dw vector uses forward example' },
{ tag: 'rev_one.cpp', title:'First Order Derivative Driver: Example and Test', other:'' },
{ tag: 'ForTwo', title:'Forward Mode Second Partial Derivative Driver', other:' syntax purpose j k ddy basevector sizevector_t uses examples' },
{ tag: 'for_two.cpp', title:'Subset of Second Order Partials: Example and Test', other:'' },
{ tag: 'RevTwo', title:'Reverse Mode Second Partial Derivative Driver', other:' syntax purpose f j ddw basevector sizevector_t uses forward examples' },
{ tag: 'rev_two.cpp', title:'Second Partials Reverse Driver: Example and Test', other:'' },
{ tag: 'new_dynamic', title:'Change the Dynamic Parameters', other:' syntax purpose f basevector taylor coefficients example' },
{ tag: 'new_dynamic.cpp', title:'Dynamic Parameters: Example and Test', other:'' },
{ tag: 'forward_zero', title:'Zero Order Forward Mode: Function Values', other:' syntax purpose x0 y0 vector example special case' },
{ tag: 'forward_one', title:'First Order Forward Mode: Derivative Values', other:' syntax purpose x0 x1 vector example special case' },
{ tag: 'forward_two', title:'Second Order Forward Mode: Derivative Values', other:' syntax purpose x0 x1 x2 y2 vector example special case' },
{ tag: 'forward_order', title:'Multiple Order Forward Mode', other:' syntax purpose function values derivative notation one q xq orders restrictions x(t) y(t) yq basevector zero first second example' },
{ tag: 'forward.cpp', title:'Forward Mode: Example and Test', other:'' },
{ tag: 'forward_order.cpp', title:'Forward Mode: Example and Test of Multiple Orders', other:'' },
{ tag: 'forward_dir', title:'Multiple Directions Forward Mode', other:' syntax purpose reverse notation q xq zero order non-zero lower orders x(t) y(t) yq vector example' },
{ tag: 'forward_dir.cpp', title:'Forward Mode: Example and Test of Multiple Directions', other:'' },
{ tag: 'size_order', title:'Number Taylor Coefficient Orders Currently Stored', other:' syntax see also purpose constructor forward capacity_order example' },
{ tag: 'compare_change', title:'Comparison Changes Between Taping and Zero Order Forward', other:' syntax purpose count speed number discussion op_index example' },
{ tag: 'compare_change.cpp', title:'CompareChange and Re-Tape: Example and Test', other:'' },
{ tag: 'capacity_order', title:'Controlling Taylor Coefficients Memory Allocation', other:' syntax see also purpose pre-allocating freeing original state example' },
{ tag: 'capacity_order.cpp', title:'Controlling Taylor Coefficient Memory Allocation: Example and Test', other:'' },
{ tag: 'number_skip', title:'Number of Variables that Can be Skipped', other:' syntax see also purpose example' },
{ tag: 'number_skip.cpp', title:'Number of Variables That Can be Skipped: Example and Test', other:'' },
{ tag: 'reverse_one', title:'First Order Reverse Mode', other:' syntax purpose w dw vector example' },
{ tag: 'reverse_one.cpp', title:'First Order Reverse Mode: Example and Test', other:'' },
{ tag: 'reverse_two', title:'Second Order Reverse Mode', other:' syntax purpose x^(k) f dw first partials vector hessian times direction example' },
{ tag: 'reverse_two.cpp', title:'Second Order Reverse ModeExample and Test', other:'' },
{ tag: 'hes_times_dir.cpp', title:'Hessian Times Direction: Example and Test', other:'' },
{ tag: 'reverse_any', title:'Any Order Reverse Mode', other:' syntax purpose notation u^(k) x(t u) y(t w^(k) w(u) f q dw first second vector example' },
{ tag: 'reverse_three.cpp', title:'Third Order Reverse Mode: Example and Test', other:' taylor coefficients' },
{ tag: 'rev_checkpoint.cpp', title:'Reverse Mode General Case (Checkpointing): Example and Test', other:' see also purpose processing steps' },
{ tag: 'subgraph_reverse', title:'Reverse Mode Using Subgraphs', other:' syntax purpose notation basevector boolvector sizevector select_domain q ell col dw clear_subgraph example' },
{ tag: 'subgraph_reverse.cpp', title:'Computing Reverse Mode on Subgraphs: Example and Test', other:'' },
{ tag: 'for_jac_sparsity', title:'Forward Mode Jacobian Sparsity Patterns', other:' syntax purpose sizevector size_forward_bool size_forward_set pattern_in transpose dependency internal_bool pattern_out entire example' },
{ tag: 'for_jac_sparsity.cpp', title:'Forward Mode Jacobian Sparsity: Example and Test', other:'' },
{ tag: 'rev_jac_sparsity', title:'Reverse Mode Jacobian Sparsity Patterns', other:' syntax purpose sizevector f pattern_in transpose dependency internal_bool pattern_out entire example' },
{ tag: 'rev_jac_sparsity.cpp', title:'Reverse Mode Jacobian Sparsity: Example and Test', other:'' },
{ tag: 'for_hes_sparsity', title:'Forward Mode Hessian Sparsity Patterns', other:' syntax purpose boolvector sizevector select_domain select_range internal_bool pattern_out entire algorithm example' },
{ tag: 'for_hes_sparsity.cpp', title:'Forward Mode Hessian Sparsity: Example and Test', other:'' },
{ tag: 'rev_hes_sparsity', title:'Reverse Mode Hessian Sparsity Patterns', other:' syntax purpose boolvector sizevector f select_range transpose internal_bool pattern_out entire example' },
{ tag: 'rev_hes_sparsity.cpp', title:'Reverse Mode Hessian Sparsity: Example and Test', other:'' },
{ tag: 'subgraph_sparsity', title:'Subgraph Dependency Sparsity Patterns', other:' syntax see also notation method atomic function boolvector sizevector select_domain select_range transpose pattern_out example' },
{ tag: 'subgraph_sparsity.cpp', title:'Subgraph Dependency Sparsity Patterns: Example and Test', other:'' },
{ tag: 'dependency.cpp', title:'Computing Dependency: Example and Test', other:' discussion pattern computation' },
{ tag: 'rc_sparsity.cpp', title:'Preferred Sparsity Patterns: Row and Column Indices: Example and Test', other:' purpose' },
{ tag: 'ForSparseJac', title:'Jacobian Sparsity Pattern: Forward Mode', other:' syntax purpose size_forward_bool size_forward_set q transpose dependency false true setvector entire example' },
{ tag: 'for_sparse_jac.cpp', title:'Forward Mode Jacobian Sparsity: Example and Test', other:'' },
{ tag: 'RevSparseJac', title:'Jacobian Sparsity Pattern: Reverse Mode', other:' syntax purpose f q transpose dependency false true setvector entire example' },
{ tag: 'rev_sparse_jac.cpp', title:'Reverse Mode Jacobian Sparsity: Example and Test', other:'' },
{ tag: 'RevSparseHes', title:'Hessian Sparsity Pattern: Reverse Mode', other:' syntax purpose f q transpose false true setvector entire example' },
{ tag: 'rev_sparse_hes.cpp', title:'Reverse Mode Hessian Sparsity: Example and Test', other:'' },
{ tag: 'sparsity_sub.cpp', title:'Sparsity Patterns For a Subset of Variables: Example and Test', other:' see also forsparsejac revsparsehes' },
{ tag: 'ForSparseHes', title:'Hessian Sparsity Pattern: Forward Mode', other:' syntax purpose setvector algorithm example' },
{ tag: 'for_sparse_hes.cpp', title:'Forward Mode Hessian Sparsity: Example and Test', other:'' },
{ tag: 'sparse_jac', title:'Computing Sparse Jacobians', other:' syntax purpose sizevector basevector sparse_jac_for sparse_jac_rev group_max subset pattern coloring cppad colpack work n_color uses forward example' },
{ tag: 'sparse_jac_for.cpp', title:'Computing Sparse Jacobian Using Forward Mode: Example and Test', other:'' },
{ tag: 'sparse_jac_rev.cpp', title:'Computing Sparse Jacobian Using Reverse Mode: Example and Test', other:'' },
{ tag: 'sparse_jacobian', title:'Sparse Jacobian', other:' syntax purpose f row col work color_method n_sweep basevector setvector restrictions sizevector uses forward example' },
{ tag: 'sparse_jacobian.cpp', title:'Sparse Jacobian: Example and Test', other:'' },
{ tag: 'sparse_hes', title:'Computing Sparse Hessians', other:' syntax purpose sizevector basevector f w subset pattern coloring cppad.symmetric cppad.general colpack.symmetric colpack.general colpack.star deprecated 2017-06-01 work n_sweep uses forward example' },
{ tag: 'sparse_hes.cpp', title:'Computing Sparse Hessian: Example and Test', other:'' },
{ tag: 'sparse_hessian', title:'Sparse Hessian', other:' syntax purpose f w work column subset row color_method colpack.star deprecated 2017-06-01 n_sweep basevector setvector restrictions sizevector uses forward example' },
{ tag: 'sparse_hessian.cpp', title:'Sparse Hessian: Example and Test', other:'' },
{ tag: 'sub_sparse_hes.cpp', title:'Computing Sparse Hessian for a Subset of Variables', other:' purpose see also function example' },
{ tag: 'sparse_sub_hes.cpp', title:'Subset of a Sparse Hessian: Example and Test', other:' purpose see also' },
{ tag: 'subgraph_jac_rev', title:'Compute Sparse Jacobians Using Subgraphs', other:' syntax see also purpose method basevector sizevector boolvector f uses forward subset select_domain select_range matrix_out example' },
{ tag: 'subgraph_jac_rev.cpp', title:'Computing Sparse Jacobian Using Reverse Mode: Example and Test', other:'' },
{ tag: 'subgraph_hes2jac.cpp', title:'Sparse Hessian Using Subgraphs and Jacobian: Example and Test', other:'' },
{ tag: 'optimize', title:'Optimize an ADFun Object Tape', other:' syntax purpose options no_conditional_skip no_compare_op no_print_for_op no_cumulative_sum_op collision_limit=value re-optimize efficiency taylor coefficients speed testing atomic functions rev_sparse_jac nan checking optimization exceed_collision_limit examples' },
{ tag: 'optimize_twice.cpp', title:'Optimizing Twice: Example and Test', other:' discussion' },
{ tag: 'optimize_forward_active.cpp', title:'Optimize Forward Activity Analysis: Example and Test', other:'' },
{ tag: 'optimize_reverse_active.cpp', title:'Optimize Reverse Activity Analysis: Example and Test', other:'' },
{ tag: 'optimize_compare_op.cpp', title:'Optimize Comparison Operators: Example and Test', other:' see also' },
{ tag: 'optimize_print_for.cpp', title:'Optimize Print Forward Operators: Example and Test', other:'' },
{ tag: 'optimize_conditional_skip.cpp', title:'Optimize Conditional Expressions: Example and Test', other:' see also' },
{ tag: 'optimize_nest_conditional.cpp', title:'Optimize Nested Conditional Expressions: Example and Test', other:' see also' },
{ tag: 'optimize_cumulative_sum.cpp', title:'Optimize Cumulative Sum Operations: Example and Test', other:'' },
{ tag: 'FunCheck', title:'Check an ADFun Sequence of Operations', other:' syntax purpose g ok vector uses forward discussion example' },
{ tag: 'fun_check.cpp', title:'ADFun Check and Re-Tape: Example and Test', other:'' },
{ tag: 'check_for_nan', title:'Check an ADFun Object For Nan Results', other:' syntax debugging default error message vector_size file_name index get_check_for_nan example' },
{ tag: 'check_for_nan.cpp', title:'ADFun Checking For Nan: Example and Test', other:'' },
{ tag: 'preprocessor', title:'CppAD API Preprocessor Symbols', other:' rule nominmax documented here cppad_debug_and_release cppad_null cppad_package_string cppad_use_cplusplus_2011 elsewhere deprecated' },
{ tag: 'multi_thread', title:'Using CppAD in a Multi-Threading Environment', other:' purpose cppad_max_num_threads parallel_setup hold_memory initialization same prohibited' },
{ tag: 'parallel_ad', title:'Enable AD Calculations During Parallel Mode', other:' syntax purpose discussion checksimplevector example restriction' },
{ tag: 'thread_test.cpp', title:'Run Multi-Threading Examples and Speed Tests', other:' purpose build program running a11c simple_ad team_example test_time max_threads harmonic mega_sum atomic checkpoint num_solve multi_newton num_zero num_sub num_sum use_ad implementations source' },
{ tag: 'a11c_openmp.cpp', title:'A Simple OpenMP Example and Test', other:' purpose source code' },
{ tag: 'a11c_bthread.cpp', title:'A Simple Boost Thread Example and Test', other:' purpose source code' },
{ tag: 'a11c_pthread.cpp', title:'A Simple Parallel Pthread Example and Test', other:' purpose source code' },
{ tag: 'simple_ad_openmp.cpp', title:'A Simple OpenMP AD: Example and Test', other:' purpose source code' },
{ tag: 'simple_ad_bthread.cpp', title:'A Simple Boost Threading AD: Example and Test', other:' purpose source code' },
{ tag: 'simple_ad_pthread.cpp', title:'A Simple pthread AD: Example and Test', other:' purpose source code' },
{ tag: 'team_example.cpp', title:'Using a Team of AD Threads: Example and Test', other:' purpose thread_team source code' },
{ tag: 'harmonic.cpp', title:'Multi-Threading Harmonic Summation Example / Test', other:' source file' },
{ tag: 'harmonic_common', title:'Common Variables Used by Multi-threading Sum of 1/i', other:' purpose source' },
{ tag: 'harmonic_setup', title:'Set Up Multi-threading Sum of 1/i', other:' syntax purpose num_sum source' },
{ tag: 'harmonic_worker', title:'Do One Thread\'s Work for Sum of 1/i', other:' syntax purpose start end thread_num source' },
{ tag: 'harmonic_takedown', title:'Take Down Multi-threading Sum of 1/i', other:' syntax purpose source' },
{ tag: 'harmonic_sum', title:'Multi-Threaded Implementation of Summation of 1/i', other:' syntax purpose ok num_sum source' },
{ tag: 'harmonic_time', title:'Timing Test of Multi-Threaded Summation of 1/i', other:' syntax purpose ok time_out test_time num_threads mega_sum source' },
{ tag: 'multi_atomic_three.cpp', title:'Multi-Threading atomic_three Example / Test', other:' source file' },
{ tag: 'multi_atomic_three_user', title:'Defines a atomic_three Operation that Computes Square Root', other:' syntax purpose au num_itr y_initial y_squared ay limitations source' },
{ tag: 'multi_atomic_three_common', title:'Multi-Threaded atomic_three Common Information', other:' purpose source' },
{ tag: 'multi_atomic_three_setup', title:'Multi-Threaded atomic_three Set Up', other:' syntax purpose y_squared ok source' },
{ tag: 'multi_atomic_three_worker', title:'Multi-Threaded atomic_three Worker', other:' purpose source' },
{ tag: 'multi_atomic_three_takedown', title:'Multi-Threaded atomic_three Take Down', other:' syntax purpose square_root ok source' },
{ tag: 'multi_atomic_three_run', title:'Run Multi-Threaded atomic_three Calculation', other:' syntax y_squared square_root ok source' },
{ tag: 'multi_atomic_three_time', title:'Timing Test for Multi-Threaded atomic_three Calculation', other:' syntax time_out test_time num_threads num_solve ok' },
{ tag: 'multi_chkpoint_two.cpp', title:'Multi-Threading chkpoint_two Example / Test', other:' source file' },
{ tag: 'multi_chkpoint_two_algo', title:'chkpoint_two Algorithm that Computes Square Root', other:' syntax purpose au y_initial y_squared ay source' },
{ tag: 'multi_chkpoint_two_common', title:'Multi-Threaded chkpoint_two Common Information', other:' purpose source' },
{ tag: 'multi_chkpoint_two_setup', title:'Multi-Threaded chkpoint_two Set Up', other:' syntax purpose y_squared ok source' },
{ tag: 'multi_chkpoint_two_worker', title:'Multi-Threaded chkpoint_two Worker', other:' purpose source' },
{ tag: 'multi_chkpoint_two_takedown', title:'Multi-Threaded chkpoint_two Take Down', other:' syntax purpose square_root ok source' },
{ tag: 'multi_chkpoint_two_run', title:'Run Multi-Threaded chkpoint_two Calculation', other:' syntax y_squared square_root ok source' },
{ tag: 'multi_chkpoint_two_time', title:'Timing Test for Multi-Threaded chkpoint_two Calculation', other:' syntax time_out test_time num_threads num_solve ok' },
{ tag: 'multi_newton.cpp', title:'Multi-Threaded Newton Method Example / Test', other:' source file' },
{ tag: 'multi_newton_common', title:'Common Variables use by Multi-Threaded Newton Method', other:' purpose source' },
{ tag: 'multi_newton_setup', title:'Set Up Multi-Threaded Newton Method', other:' syntax purpose num_sub xlow xup epsilon max_itr num_threads source' },
{ tag: 'multi_newton_worker', title:'Do One Thread\'s Work for Multi-Threaded Newton Method', other:' syntax purpose low up thread_num source' },
{ tag: 'multi_newton_takedown', title:'Take Down Multi-threaded Newton Method', other:' syntax purpose xout source' },
{ tag: 'multi_newton_run', title:'A Multi-Threaded Newton\'s Method', other:' syntax purpose ok xout fun num_sub xlow xup epsilon max_itr num_threads source' },
{ tag: 'multi_newton_time', title:'Timing Test of Multi-Threaded Newton Method', other:' syntax purpose ok time_out test_time num_threads num_zero num_sub num_sum use_ad source' },
{ tag: 'team_thread.hpp', title:'Specifications for A Team of AD Threads', other:' syntax purpose restrictions team_create team_work team_destroy team_name ok example use implementation speed test source' },
{ tag: 'team_openmp.cpp', title:'OpenMP Implementation of a Team of AD Threads', other:'' },
{ tag: 'team_bthread.cpp', title:'Boost Thread Implementation of a Team of AD Threads', other:'' },
{ tag: 'team_pthread.cpp', title:'Pthread Implementation of a Team of AD Threads', other:' bug cygwin' },
{ tag: 'utility', title:'Some General Purpose Utilities', other:' testing c++ concepts numerical routines miscellaneous error handler the cppad vector template class multi-threading memory allocation sorting indices to_string set_union sparse matrices' },
{ tag: 'ErrorHandler', title:'Replacing the CppAD Error Handler', other:' syntax constructor parallel mode call info known line file exp msg example' },
{ tag: 'error_handler.cpp', title:'Replacing The CppAD Error Handler: Example and Test', other:'' },
{ tag: 'cppad_assert', title:'CppAD Assertions During Execution', other:' syntax purpose ndebug restriction known unknown exp msg error handler' },
{ tag: 'NearEqual', title:'Determine if Two Values Are Nearly Equal', other:' syntax purpose b type include files example exercise' },
{ tag: 'near_equal.cpp', title:'NearEqual Function: Example and Test', other:' file name' },
{ tag: 'speed_test', title:'Run One Speed Test and Return Results', other:' syntax see also purpose motivation include vector size repeat size_vec time_min rate_vec timing example' },
{ tag: 'SpeedTest', title:'Run One Speed Test and Print Results', other:' syntax see also purpose motivation include size repeat name first last rate errors example' },
{ tag: 'speed_test.cpp', title:'speed_test: Example and test', other:'' },
{ tag: 'speed_program.cpp', title:'Example Use of SpeedTest', other:' output' },
{ tag: 'time_test', title:'Determine Amount of Time to Execute a Test', other:' syntax purpose motivation include size repeat time_min test_size repeat_out timing example' },
{ tag: 'elapsed_seconds', title:'Returns Elapsed Number of Seconds', other:' syntax accuracy example' },
{ tag: 'elapsed_seconds.cpp', title:'Elapsed Seconds: Example and Test', other:'' },
{ tag: 'time_test.cpp', title:'time_test: Example and test', other:'' },
{ tag: 'test_boolofvoid', title:'Object that Runs a Group of Tests', other:' syntax purpose width name memory_ok example' },
{ tag: 'NumericType', title:'Definition of a Numeric Type', other:' requirements default constructor from integer copy assignment operators example exercise' },
{ tag: 'numeric_type.cpp', title:'The NumericType: Example and Test', other:'' },
{ tag: 'CheckNumericType', title:'Check NumericType Class Concept', other:' syntax purpose include parallel mode example' },
{ tag: 'check_numeric_type.cpp', title:'The CheckNumericType Function: Example and Test', other:'' },
{ tag: 'SimpleVector', title:'C++ Concept: A Simple Vector', other:' template class requirements elements specified type default constructor sizing copy destructor assignment size resize value_type access using example exercise' },
{ tag: 'simple_vector.cpp', title:'Simple Vector Template Class: Example and Test', other:'' },
{ tag: 'CheckSimpleVector', title:'Check Simple Vector Concept', other:' syntax purpose restrictions include parallel mode example' },
{ tag: 'check_simple_vector.cpp', title:'The CheckSimpleVector Function: Example and Test', other:'' },
{ tag: 'nan', title:'Obtain Nan or Determine if a Value is Nan', other:' syntax purpose include macros isnan hasnan nan(zero) deprecated 2015-10-04 scalar vector example' },
{ tag: 'nan.cpp', title:'nan: Example and Test', other:'' },
{ tag: 'pow_int', title:'The Integer Power Function', other:' syntax see also purpose include z type operation sequence example' },
{ tag: 'pow_int.cpp', title:'The Pow Integer Exponent: Example and Test', other:'' },
{ tag: 'Poly', title:'Evaluate a Polynomial or its Derivative', other:' syntax description include k z type operations vector sequence example source' },
{ tag: 'poly.cpp', title:'Polynomial Evaluation: Example and Test', other:'' },
{ tag: 'poly.hpp', title:'Source: Poly', other:'' },
{ tag: 'LuDetAndSolve', title:'Compute Determinants and Solve Equations by LU Factorization', other:'' },
{ tag: 'LuSolve', title:'Compute Determinant and Solve Linear Equations', other:' syntax description include factor invert matrix storage signdet b logdet float floatvector leqzero absgeq example source' },
{ tag: 'lu_solve.cpp', title:'LuSolve With Complex Arguments: Example and Test', other:'' },
{ tag: 'lu_solve.hpp', title:'Source: LuSolve', other:'' },
{ tag: 'LuFactor', title:'LU Factorization of A Square Matrix', other:' syntax description include storage sign jp determinant sizevector floatvector absgeq example source' },
{ tag: 'lu_factor.cpp', title:'LuFactor: Example and Test', other:'' },
{ tag: 'lu_factor.hpp', title:'Source: LuFactor', other:'' },
{ tag: 'LuInvert', title:'Invert an LU Factored Equation', other:' syntax description include matrix storage jp example source' },
{ tag: 'lu_invert.cpp', title:'LuInvert: Example and Test', other:'' },
{ tag: 'lu_invert.hpp', title:'Source: LuInvert', other:'' },
{ tag: 'RombergOne', title:'One DimensionalRomberg Integration', other:' syntax description include f float example source code' },
{ tag: 'romberg_one.cpp', title:'One Dimensional Romberg Integration: Example and Test', other:'' },
{ tag: 'RombergMul', title:'Multi-dimensional Romberg Integration', other:' syntax description include f float floatvector example source code' },
{ tag: 'Rombergmul.cpp', title:'One Dimensional Romberg Integration: Example and Test', other:'' },
{ tag: 'Runge45', title:'An Embedded 4th and 5th Order Runge-Kutta ODE Solver', other:' syntax purpose operation sequence include xf fun warning tf xi scalar fabs vector parallel mode example source code' },
{ tag: 'runge45_1.cpp', title:'Runge45: Example and Test', other:'' },
{ tag: 'runge_45.cpp', title:'Runge45: Example and Test', other:'' },
{ tag: 'Rosen34', title:'A 3rd and 4th Order Rosenbrock ODE Solver', other:' syntax description include xf fun f_t f_x nan warning optimization tf xi scalar vector parallel mode example source code' },
{ tag: 'rosen_34.cpp', title:'rosen_34: Example and Test', other:' operation sequence' },
{ tag: 'OdeErrControl', title:'An Error Controller for ODE Solvers', other:' syntax description include notation xf method step nan order tf xi smin smax scur eabs erel ef maxabs nstep criteria discussion scalar vector example theory source code' },
{ tag: 'ode_err_control.cpp', title:'OdeErrControl: Example and Test', other:' nan' },
{ tag: 'ode_err_maxabs.cpp', title:'OdeErrControl: Example and Test Using Maxabs Argument', other:'' },
{ tag: 'OdeGear', title:'An Arbitrary Order Gear Method', other:' syntax purpose include fun f_x warning scalar vector example source code theory gear\'s' },
{ tag: 'ode_gear.cpp', title:'OdeGear: Example and Test', other:'' },
{ tag: 'OdeGearControl', title:'An Error Controller for Gear\'s Ode Solvers', other:' syntax purpose include notation xf fun f_x warning m tf xi smin smax sini eabs erel ef maxabs nstep criteria discussion scalar vector example theory source code' },
{ tag: 'ode_gear_control.cpp', title:'OdeGearControl: Example and Test', other:'' },
{ tag: 'CppAD_vector', title:'The CppAD::vector Template Class', other:' syntax description include deprecated 2019-08-19 integer size capacity swap assignment check return reference move semantics element access error checking push_back push_vector output resize data memory clear iterators itr citr begin end operator[] vectorbool bit_per_unit type parallel mode example exercise' },
{ tag: 'cppad_vector.cpp', title:'CppAD::vector Template Class: Example and Test', other:' purpose' },
{ tag: 'vector_bool.cpp', title:'CppAD::vectorBool Class: Example and Test', other:'' },
{ tag: 'thread_alloc', title:'A Fast Multi-Threading Memory Allocator', other:' syntax purpose include' },
{ tag: 'thread_alloc.cpp', title:'Fast Multi-Threading Memory Allocator: Example and Test', other:'' },
{ tag: 'ta_parallel_setup', title:'Setup thread_alloc For Use in Multi-Threading Environment', other:' syntax purpose speed num_threads in_parallel thread_num restrictions example' },
{ tag: 'ta_num_threads', title:'Get Number of Threads', other:' syntax purpose example' },
{ tag: 'ta_in_parallel', title:'Is The Current Execution in Parallel Mode', other:' syntax purpose flag example' },
{ tag: 'ta_thread_num', title:'Get the Current Thread Number', other:' syntax purpose example' },
{ tag: 'ta_get_memory', title:'Get At Least A Specified Amount of Memory', other:' syntax purpose min_bytes cap_bytes v_ptr allocation speed alignment example' },
{ tag: 'ta_return_memory', title:'Return Memory to thread_alloc', other:' syntax purpose v_ptr ndebug example' },
{ tag: 'ta_free_available', title:'Free Memory Currently Available for Quick Use by a Thread', other:' syntax purpose extra example' },
{ tag: 'ta_hold_memory', title:'Control When Thread Alloc Retains Memory For Future Use', other:' syntax purpose value free_available' },
{ tag: 'ta_inuse', title:'Amount of Memory a Thread is Currently Using', other:' syntax purpose num_bytes example' },
{ tag: 'ta_available', title:'Amount of Memory Available for Quick Use by a Thread', other:' syntax purpose num_bytes example' },
{ tag: 'ta_create_array', title:'Allocate An Array and Call Default Constructor for its Elements', other:' syntax purpose type size_min size_out delta alignment example' },
{ tag: 'ta_delete_array', title:'Deallocate An Array and Call Destructor for its Elements', other:' syntax purpose type thread delta example' },
{ tag: 'ta_free_all', title:'Free All Memory That Was Allocated for Use by thread_alloc', other:' syntax purpose ok restrictions example' },
{ tag: 'index_sort', title:'Returns Indices that Sort a Vector', other:' syntax keys input example' },
{ tag: 'index_sort.cpp', title:'Index Sort: Example and Test', other:'' },
{ tag: 'to_string', title:'Convert Certain Types to a String', other:' syntax see also purpose value integer float example' },
{ tag: 'to_string.cpp', title:'to_string: Example and Test', other:'' },
{ tag: 'set_union', title:'Union of Standard Sets', other:' syntax purpose element left right result example' },
{ tag: 'set_union.cpp', title:'Set Union: Example and Test', other:'' },
{ tag: 'sparse_rc', title:'Row and Column Index Sparsity Patterns', other:' syntax include constructor assignment equality setting scalars vectors output sizevector empty other move semantics swap nr nnz resize push_back row_major set_row_major get_row_major col_major set_col_major get_col_major example os' },
{ tag: 'sparse_rc.cpp', title:'sparse_rc: Example and Test', other:'' },
{ tag: 'sparse_rcv', title:'Sparse Matrix Row, Column, Value Representation', other:' syntax sizevector valuevector empty pattern other assignment constructor move semantics swap nr nc nnz set k row_major col_major eigen example' },
{ tag: 'sparse_rcv.cpp', title:'sparse_rcv: Example and Test', other:'' },
{ tag: 'sparse2eigen', title:'Convert A CppAD Sparse Matrix to an Eigen Sparse Matrix', other:' syntax prototype include sizevector valuevector options value_type source destination compressed example' },
{ tag: 'sparse2eigen.cpp', title:'Converting CppAD Sparse Matrix to Eigen Format: Example and Test', other:'' },
{ tag: 'ipopt_solve', title:'Use Ipopt to Solve a Nonlinear Programming Problem', other:' syntax purpose include file bvector dvector options retape sparse string numeric integer xi xl xu gl gu fg_eval advector solution status zl zu lambda obj_value example get_started ode_inverse' },
{ tag: 'ipopt_solve_get_started.cpp', title:'Nonlinear Programming Using CppAD and Ipopt: Example and Test', other:' purpose configuration requirement' },
{ tag: 'ipopt_solve_retape.cpp', title:'Nonlinear Programming Retaping: Example and Test', other:' purpose' },
{ tag: 'ipopt_solve_ode_inverse.cpp', title:'ODE Inverse Problem Definitions: Source Code', other:' purpose forward measurements simulation analytic solution parameter values simulated trapezoidal approximation method' },
{ tag: 'Example', title:'Examples', other:' introduction get_started running the cppad test vector template class' },
{ tag: 'get_started.cpp', title:'Getting Started Using CppAD to Compute Derivatives', other:' purpose function value include file poly namespace preprocessor symbols program output running exercises' },
{ tag: 'ListAllExamples', title:'List All (Except Deprecated) CppAD Examples', other:'' },
{ tag: 'General', title:'General Examples', other:' description' },
{ tag: 'ExampleUtility', title:'Utility Routines used by CppAD Examples', other:'' },
{ tag: 'ad_fun.cpp', title:'Creating Your Own Interface to an ADFun Object', other:'' },
{ tag: 'ad_in_c.cpp', title:'Example and Test Linking CppAD to Languages Other than C++', other:'' },
{ tag: 'conj_grad.cpp', title:'Differentiate Conjugate Gradient Algorithm: Example and Test', other:' purpose' },
{ tag: 'cppad_eigen.hpp', title:'Enable Use of Eigen Linear Algebra Package with CppAD', other:' syntax purpose example declarations std include eigen/core numtraits namespace eigen_vector cppad.hpp definitions' },
{ tag: 'eigen_plugin.hpp', title:'Source Code for eigen_plugin.hpp', other:'' },
{ tag: 'eigen_array.cpp', title:'Using Eigen Arrays: Example and Test', other:'' },
{ tag: 'eigen_det.cpp', title:'Using Eigen To Compute Determinant: Example and Test', other:'' },
{ tag: 'hes_minor_det.cpp', title:'Gradient of Determinant Using Expansion by Minors: Example and Test', other:'' },
{ tag: 'hes_lu_det.cpp', title:'Gradient of Determinant Using LU Factorization: Example and Test', other:'' },
{ tag: 'interface2c.cpp', title:'Interfacing to C: Example and Test', other:'' },
{ tag: 'jac_minor_det.cpp', title:'Gradient of Determinant Using Expansion by Minors: Example and Test', other:'' },
{ tag: 'jac_lu_det.cpp', title:'Gradient of Determinant Using Lu Factorization: Example and Test', other:'' },
{ tag: 'mul_level', title:'Using Multiple Levels of AD', other:' alternative background motivation procedure first start ad<double> recording inner function second outer derivatives example' },
{ tag: 'mul_level.cpp', title:'Multiple Level of AD: Example and Test', other:' see also purpose source' },
{ tag: 'change_param.cpp', title:'Computing a Jacobian With Constants that Change', other:' purpose' },
{ tag: 'ode_stiff.cpp', title:'A Stiff Ode: Example and Test', other:'' },
{ tag: 'mul_level_ode.cpp', title:'Taylor\'s Ode Solver: A Multi-Level AD Example and Test', other:' see also purpose solution derivative method using source' },
{ tag: 'mul_level_adolc_ode.cpp', title:'Taylor\'s Ode Solver: A Multi-Level Adolc Example and Test', other:' see also purpose solution derivative method using base_adolc.hpp memory management configuration requirement source' },
{ tag: 'stack_machine.cpp', title:'Example Differentiating a Stack Machine Interpreter', other:'' },
{ tag: 'code_gen_fun', title:'Generate Source Code and Compile an AD Function', other:' syntax constructors swap jacobian sparse_jacobian prototype operations cppad::cg::cg<double> speed fun_name other_fun file_name cg_fun eval_jac jrcv examples implementation' },
{ tag: 'code_gen_fun.hpp', title:'code_gen_fun Class Include File', other:' see also source' },
{ tag: 'code_gen_fun.cpp', title:'code_gen_fun Class Member Implementation', other:' see also source' },
{ tag: 'code_gen_fun_function.cpp', title:'Evaluate a Code Gen Function: Example and Test', other:'' },
{ tag: 'code_gen_fun_file.cpp', title:'File Store and Retrieve a Code Gen Function: Example and Test', other:'' },
{ tag: 'code_gen_fun_jacobian.cpp', title:'Evaluate Jacobian of a Code Gen Function: Example and Test', other:'' },
{ tag: 'code_gen_fun_jac_as_fun.cpp', title:'Pass Jacobian as Code Gen Function: Example and Test', other:'' },
{ tag: 'code_gen_fun_sparse_jacobian.cpp', title:'Evaluate Sparse Jacobian of a Code Gen Function: Example and Test', other:'' },
{ tag: 'code_gen_fun_sparse_jac_as_fun.cpp', title:'Pass Sparse Jacobian as Code Gen Function: Example and Test', other:'' },
{ tag: 'general.cpp', title:'CppAD Examples and Tests', other:' running' },
{ tag: 'speed_example.cpp', title:'Run the Speed Examples', other:' running tests' },
{ tag: 'lu_vec_ad.cpp', title:'Lu Factor and Solve with Recorded Pivoting', other:' syntax purpose storage convention m matrix rhs result logdet example' },
{ tag: 'lu_vec_ad_ok.cpp', title:'Lu Factor and Solve With Recorded Pivoting: Example and Test', other:'' },
{ tag: 'testvector', title:'Using The CppAD Test Vector Template Class', other:' syntax choice cppad::vector std::vector boost::numeric::ublas::vector cppad::eigen_vector' },
{ tag: 'wno_conversion', title:'Suppress Suspect Implicit Conversion Warnings', other:' syntax purpose' },
{ tag: 'speed', title:'Speed Test an Operator Overloading AD Package', other:' purpose debug_which' },
{ tag: 'speed_main', title:'Running the Speed Test Program', other:' syntax purpose package ad double profile correct seed global options onetape memory optimize atomic hes2jac subgraph sparsity boolsparsity revsparsity subsparsity colpack symmetric correctness results n_color link routines' },
{ tag: 'link_routines', title:'Package Specific Speed Test Linking Routines', other:' syntax purpose thread save link_name namespace available job setup run teardown size repeat other_arguments' },
{ tag: 'link_det_lu', title:'Speed Testing Gradient of Determinant Using Lu Factorization', other:' prototype purpose method return value size repeat matrix double' },
{ tag: 'link_det_minor', title:'Speed Testing Gradient of Determinant by Minor Expansion', other:' prototype method job size repeat matrix double' },
{ tag: 'link_mat_mul', title:'Speed Testing Derivative of Matrix Multiply', other:' prototype purpose return value repeat z dz' },
{ tag: 'link_ode', title:'Speed Testing the Jacobian of Ode Solution', other:' prototype purpose method return value size repeat x double' },
{ tag: 'link_poly', title:'Speed Testing Second Derivative of a Polynomial', other:' prototype purpose method return value size repeat ddp double' },
{ tag: 'link_sparse_hessian', title:'Link to Speed Test Sparse Hessian', other:' syntax prototype namespace method sparsity pattern size repeat row col major lower triangular n_color double' },
{ tag: 'link_sparse_jacobian', title:'Speed Testing Sparse Jacobians', other:' prototype method sparsity pattern job size repeat row col major x n_color double' },
{ tag: 'speed_utility', title:'Speed Testing Utilities', other:' main program routines library source code' },
{ tag: 'det_by_lu', title:'Determinant Using Expansion by Lu Factorization', other:' syntax inclusion constructor scalar vector example source code' },
{ tag: 'det_by_lu.cpp', title:'Determinant Using Lu Factorization: Example and Test', other:'' },
{ tag: 'det_by_lu.hpp', title:'Source: det_by_lu', other:'' },
{ tag: 'det_of_minor', title:'Determinant of a Minor', other:' syntax inclusion purpose scalar example source code' },
{ tag: 'det_of_minor.cpp', title:'Determinant of a Minor: Example and Test', other:'' },
{ tag: 'det_of_minor.hpp', title:'Source: det_of_minor', other:'' },
{ tag: 'det_by_minor', title:'Determinant Using Expansion by Minors', other:' syntax inclusion constructor scalar vector example source code' },
{ tag: 'det_by_minor.cpp', title:'Determinant Using Expansion by Minors: Example and Test', other:'' },
{ tag: 'det_by_minor.hpp', title:'Source: det_by_minor', other:'' },
{ tag: 'det_33', title:'Check Determinant of 3 by 3 matrix', other:' syntax purpose inclusion vector ok source code' },
{ tag: 'det_33.hpp', title:'Source: det_33', other:'' },
{ tag: 'det_grad_33', title:'Check Gradient of Determinant of 3 by 3 matrix', other:' syntax purpose inclusion vector ok source code' },
{ tag: 'det_grad_33.hpp', title:'Source: det_grad_33', other:'' },
{ tag: 'mat_sum_sq', title:'Sum Elements of a Matrix Times Itself', other:' syntax purpose inclusion z vector example source code' },
{ tag: 'mat_sum_sq.cpp', title:'Sum of the Elements of the Square of a Matrix: Example and Test', other:'' },
{ tag: 'mat_sum_sq.hpp', title:'Source: mat_sum_sq', other:'' },
{ tag: 'ode_evaluate', title:'Evaluate a Function Defined in Terms of an ODE', other:' syntax purpose inclusion float operation sequence fabs == 0 1 fp gradient example source code' },
{ tag: 'ode_evaluate.cpp', title:'ode_evaluate: Example and test', other:'' },
{ tag: 'ode_evaluate.hpp', title:'Source: ode_evaluate', other:'' },
{ tag: 'sparse_jac_fun', title:'Evaluate a Function That Has a Sparse Jacobian', other:' syntax purpose inclusion float floatvector m row col fp example source code' },
{ tag: 'sparse_jac_fun.cpp', title:'sparse_jac_fun: Example and test', other:'' },
{ tag: 'sparse_jac_fun.hpp', title:'Source: sparse_jac_fun', other:'' },
{ tag: 'sparse_hes_fun', title:'Evaluate a Function That Has a Sparse Hessian', other:' syntax purpose inclusion float floatvector row col fp example source code' },
{ tag: 'sparse_hes_fun.cpp', title:'sparse_hes_fun: Example and test', other:'' },
{ tag: 'sparse_hes_fun.hpp', title:'Source: sparse_hes_fun', other:'' },
{ tag: 'uniform_01', title:'Simulate a [0,1] Uniform Random Variate', other:' [01] syntax purpose inclusion seed vector source code' },
{ tag: 'uniform_01.hpp', title:'Source: uniform_01', other:'' },
{ tag: 'speed_double', title:'Speed Test of Functions in Double', other:' purpose running tests' },
{ tag: 'double_det_minor.cpp', title:'Double Speed: Determinant by Minor Expansion', other:' specifications implementation' },
{ tag: 'double_det_lu.cpp', title:'Double Speed: Determinant Using Lu Factorization', other:' specifications implementation' },
{ tag: 'double_mat_mul.cpp', title:'Double Speed: Matrix Multiplication', other:' specifications implementation' },
{ tag: 'double_ode.cpp', title:'Double Speed: Ode Solution', other:' specifications implementation' },
{ tag: 'double_poly.cpp', title:'Double Speed: Evaluate a Polynomial', other:' specifications implementation' },
{ tag: 'double_sparse_hessian.cpp', title:'Double Speed: Sparse Hessian', other:' specifications implementation' },
{ tag: 'double_sparse_jacobian.cpp', title:'Double Speed: Sparse Jacobian', other:' specifications implementation' },
{ tag: 'speed_adolc', title:'Speed Test of Derivatives Using Adolc', other:' purpose include_adolc running tests' },
{ tag: 'adolc_det_minor.cpp', title:'Adolc Speed: Gradient of Determinant by Minor Expansion', other:' specifications implementation' },
{ tag: 'adolc_det_lu.cpp', title:'Adolc Speed: Gradient of Determinant Using Lu Factorization', other:' specifications implementation' },
{ tag: 'adolc_mat_mul.cpp', title:'Adolc Speed: Matrix Multiplication', other:' specifications implementation' },
{ tag: 'adolc_ode.cpp', title:'Adolc Speed: Ode', other:' specifications implementation' },
{ tag: 'adolc_poly.cpp', title:'Adolc Speed: Second Derivative of a Polynomial', other:' specifications implementation' },
{ tag: 'adolc_sparse_hessian.cpp', title:'Adolc Speed: Sparse Hessian', other:' specifications implementation' },
{ tag: 'adolc_sparse_jacobian.cpp', title:'Adolc Speed: Sparse Jacobian', other:' specifications implementation' },
{ tag: 'adolc_alloc_mat', title:'Adolc Test Utility: Allocate and Free Memory For a Matrix', other:' syntax purpose' },
{ tag: 'speed_cppad', title:'Speed Test Derivatives Using CppAD', other:' purpose running tests' },
{ tag: 'cppad_det_minor.cpp', title:'Cppad Speed: Gradient of Determinant by Minor Expansion', other:' specifications implementation' },
{ tag: 'cppad_det_lu.cpp', title:'Cppad Speed: Gradient of Determinant Using Lu Factorization', other:' specifications implementation' },
{ tag: 'cppad_mat_mul.cpp', title:'CppAD Speed, Matrix Multiplication', other:' specifications implementation' },
{ tag: 'cppad_ode.cpp', title:'Cppad Speed: Gradient of Ode Solution', other:' specifications implementation' },
{ tag: 'cppad_poly.cpp', title:'Cppad Speed: Second Derivative of a Polynomial', other:' specifications implementation' },
{ tag: 'cppad_sparse_hessian.cpp', title:'Cppad Speed: Sparse Hessian', other:' specifications implementation' },
{ tag: 'cppad_sparse_jacobian.cpp', title:'Cppad Speed: Sparse Jacobian', other:' specifications implementation' },
{ tag: 'speed_fadbad', title:'Speed Test Derivatives Using Fadbad', other:' purpose fadbad_prefix running tests' },
{ tag: 'fadbad_det_minor.cpp', title:'Fadbad Speed: Gradient of Determinant by Minor Expansion', other:' specifications implementation' },
{ tag: 'fadbad_det_lu.cpp', title:'Fadbad Speed: Gradient of Determinant Using Lu Factorization', other:' specifications implementation' },
{ tag: 'fadbad_mat_mul.cpp', title:'Fadbad Speed: Matrix Multiplication', other:' specifications implementation' },
{ tag: 'fadbad_ode.cpp', title:'Fadbad Speed: Ode', other:' specifications implementation' },
{ tag: 'fadbad_poly.cpp', title:'Fadbad Speed: Second Derivative of a Polynomial', other:' specifications implementation' },
{ tag: 'fadbad_sparse_hessian.cpp', title:'Fadbad Speed: Sparse Hessian', other:'' },
{ tag: 'fadbad_sparse_jacobian.cpp', title:'Fadbad Speed: sparse_jacobian', other:'' },
{ tag: 'speed_cppadcg', title:'Speed Test Derivatives Using Cppadcg', other:' purpose building tests running' },
{ tag: 'cppadcg_det_minor.cpp', title:'cppadcg Speed: Gradient of Determinant by Minor Expansion', other:' specifications pass_jacobian_to_code_gen implementation' },
{ tag: 'cppadcg_det_lu.cpp', title:'Cppadcg Speed: Gradient of Determinant Using Lu Factorization', other:' specifications implementation' },
{ tag: 'cppadcg_mat_mul.cpp', title:'Cppadcg Speed: Matrix Multiplication', other:' specifications implementation' },
{ tag: 'cppadcg_ode.cpp', title:'Cppadcg Speed: Ode', other:' specifications implementation' },
{ tag: 'cppadcg_poly.cpp', title:'Cppadcg Speed: Second Derivative of a Polynomial', other:' specifications implementation' },
{ tag: 'cppadcg_sparse_hessian.cpp', title:'Cppadcg Speed: Sparse Hessian', other:' specifications' },
{ tag: 'cppadcg_sparse_jacobian.cpp', title:'Cppadcg Speed: Sparse Jacobian', other:' specifications pass_sparse_jacobian_to_code_gen implementation' },
{ tag: 'speed_sacado', title:'Speed Test Derivatives Using Sacado', other:' purpose sacado_prefix running tests' },
{ tag: 'sacado_det_minor.cpp', title:'Sacado Speed: Gradient of Determinant by Minor Expansion', other:' specifications implementation' },
{ tag: 'sacado_det_lu.cpp', title:'Sacado Speed: Gradient of Determinant Using Lu Factorization', other:' specifications implementation' },
{ tag: 'sacado_mat_mul.cpp', title:'Sacado Speed: Matrix Multiplication', other:' specifications implementation' },
{ tag: 'sacado_ode.cpp', title:'Sacado Speed: Gradient of Ode Solution', other:' specifications implementation' },
{ tag: 'sacado_poly.cpp', title:'Sacado Speed: Second Derivative of a Polynomial', other:' specifications implementation' },
{ tag: 'sacado_sparse_hessian.cpp', title:'Sacado Speed: Sparse Hessian', other:'' },
{ tag: 'sacado_sparse_jacobian.cpp', title:'Sacado Speed: sparse_jacobian', other:'' },
{ tag: 'speed_xpackage', title:'Speed Test Example and Template for a New Package', other:' purpose files running tests' },
{ tag: 'xpackage_det_minor.cpp', title:'Xpackage Speed: Gradient of Determinant by Minor Expansion', other:' specifications implementation' },
{ tag: 'xpackage_det_lu.cpp', title:'Xpackage Speed: Gradient of Determinant Using Lu Factorization', other:' specifications implementation' },
{ tag: 'xpackage_mat_mul.cpp', title:'Xpackage Speed: Matrix Multiplication', other:' specifications implementation' },
{ tag: 'xpackage_ode.cpp', title:'Xpackage Speed: Ode', other:' specifications implementation' },
{ tag: 'xpackage_poly.cpp', title:'Xpackage Speed: Second Derivative of a Polynomial', other:' specifications implementation' },
{ tag: 'xpackage_sparse_hessian.cpp', title:'Xpackage Speed: Sparse Hessian', other:' specifications' },
{ tag: 'xpackage_sparse_jacobian.cpp', title:'Xpackage Speed: sparse_jacobian', other:' specifications' },
{ tag: 'Appendix', title:'Appendix', other:'' },
{ tag: 'Faq', title:'Frequently Asked Questions and Answers', other:' assignment independent bugs comparechange complex types exceptions variables matrix inverse lusolve atomic operation mode: forward reverse namespace test vector preprocessor symbol speed ndebug optimize memory allocation tape storage: disk' },
{ tag: 'directory', title:'Directory Structure', other:' distribution example' },
{ tag: 'glossary', title:'Glossary', other:' ad function base type above elementary vector operation atomic sequence dependent independent parameter constant dynamic row-major representation sparsity pattern column index vectors boolean sets tape active inactive variable variables taylor coefficient' },
{ tag: 'Bib', title:'Bibliography', other:' abramowitz stegun the c++ programming language evaluating derivatives numerical recipes shampine l.f.' },
{ tag: 'wish_list', title:'The CppAD Wish List', other:' see also purpose base2ad dynamic parameters comparison operators vecad vectors graph reverse mode atomic examples abs-normal functions return cancellation cppad_lib requirement inline compilation speed checkpoint tapeless re-taping testing subgraph forward sparsity check_finite test_boolofvoid optimization special requirements adolc recomputation iterator interface tracing atan2' },
{ tag: 'whats_new', title:'Changes and Additions to CppAD', other:' introduction this year previous years' },
{ tag: 'whats_new_22', title:'Changes and Additions to CppAD During 2022', other:' 05-19 05-17 05-16 05-15 05-13 05-12 05-11 05-10 05-09 05-07 05-06 04-21 04-20 04-19 04-15 03-29 03-26 03-25 03-24 03-23 02-21 02-19 02-18 02-17 02-16 02-13 02-12 02-11 02-01 01-27 01-25 01-23 01-19 01-15 01-06 01-04 01-01' },
{ tag: 'whats_new_21', title:'Changes and Additions to CppAD During 2021', other:' 12-17 12-16 12-10 12-08 09-04 08-31 08-27 08-26 07-31 07-30 07-12 06-22 06-06 06-02 05-12 04-30 04-28 04-27 04-26 04-16 04-09 04-07 04-05 04-02 03-29 03-24 03-11 03-09 03-08 03-07 02-21 02-16 02-14 02-12 02-11 02-08 02-06 01-27 01-26 01-08 01-07 01-05 01-03' },
{ tag: 'whats_new_20', title:'Changes and Additions to CppAD During 2020', other:' 12-28 12-27 12-21 12-20 12-19 12-12 12-11 12-06 12-05 12-04 12-03 12-02 12-01 11-29 10-26 10-23 10-22 10-21 10-20 10-17 09-05 06-08 06-04 05-27 05-26 05-23 05-01 03-11 02-02 02-01 01-29 01-24 01-22 01-18 01-17 01-12 01-06 01-04' },
{ tag: 'whats_new_19', title:'Changes and Additions to CppAD During 2019', other:' 12-27 12-25 12-24 12-23 12-21 12-20 12-18 12-16 12-15 12-14 12-13 12-12 12-09 12-08 11-15 11-10 11-09 11-05 10-28 10-27 10-22 10-21 10-17 10-02 09-30 09-24 09-23 09-18 09-17 09-14 09-12 09-10 09-09 08-29 08-25 08-23 08-22 08-26 08-19 08-17 08-16 08-13 08-12 08-10 08-09 08-08 08-06 07-31 07-30 07-29 07-25 07-19 07-18 07-05 07-04 07-03 06-29 06-19 06-18 06-17 06-10 06-02 05-31 05-28 05-22 05-21 05-07 04-01 03-27 03-19 03-13 02-26 02-23 02-22 02-20 02-06 02-01 01-18 01-17 01-16 01-15 01-14 01-06 01-05 01-11' },
{ tag: 'whats_new_18', title:'Changes and Additions to CppAD During 2018', other:' 12-30 12-23 12-17 12-16 12-15 12-12 11-13 11-11 11-06 11-04 11-01 10-31 10-29 10-25 10-24 10-19 10-18 09-25 09-23 09-22 09-19 09-17 09-16 09-15 08-27 08-19 08-18 08-17 08-16 08-14 08-13 08-12 08-10 08-08 08-05 08-04 07-30 07-27 07-23 07-18 07-02 06-27 06-22 06-20 06-19 06-13 06-12 06-04 05-29 05-28 05-26 05-20 05-17 05-04 05-03 04-29 04-13 03-20 03-19 03-04 03-02 02-27 02-26 02-23 02-20' },
{ tag: 'whats_new_17', title:'Changes and Additions to CppAD During 2017', other:' api 12-14 12-08 12-06 12-05 12-04 12-01 11-30 11-23 11-20 11-19 11-15 11-13 11-12 11-08 11-06 11-04 10-23 09-16 08-30 08-29 08-09 08-08 07-25 07-03 07-01 06-28 06-11 06-10 06-07 06-04 06-03 06-01 05-29 05-19 05-14 05-12 04-08 04-02 03-31 03-29 03-25 03-20 03-13 03-11 03-10 03-06 03-04 02-26 02-21 02-19 02-15 02-13 02-11 02-10 02-09 02-08 02-05 02-03 02-02 02-01 01-30 01-29 01-27 01-19 01-18 01-17' },
{ tag: 'whats_new_16', title:'Changes and Additions to CppAD During 2016', other:' introduction 12-23 12-20 12-18 12-13 12-11 12-09 11-18 11-14 11-13 10-27 10-12 09-29 09-27 09-26 09-16 09-13 08-30 08-25 07-17 07-14 06-30 06-29 06-27 06-25 06-10 05-05 04-17 03-27 03-26 03-25 03-24 03-23 03-22 03-21 03-20 03-19 03-17 03-12 03-05 03-01 02-29 02-28 02-27 02-26 02-25 02-23 01-21 01-20 01-18' },
{ tag: 'whats_new_15', title:'CppAD Changes and Additions During 2015', other:' introduction 12-31 12-29 12-28 12-08 12-01 11-30 11-25 11-24 11-14 11-08 11-06 10-21 10-16 10-06 10-04 10-03 10-02 09-28 09-27 09-25 09-24 09-23 09-21 09-20 09-19 09-16 09-03 09-02 08-31 08-30 08-29 08-28 08-26 08-25 08-20 08-17 08-16 08-09 08-06 07-31 06-16 06-11 06-09 06-07 05-26 cond_exp_1 cond_exp_2 05-11 05-10 05-09 05-08 05-07 05-05 04-18 03-13 03-06 02-28 02-18 02-16 02-14 02-11 02-10 02-09 02-07 02-06 02-04 02-03 02-02 01-30 01-29 01-26 01-23 01-21 01-20 01-09 01-07 01-02' },
{ tag: 'whats_new_14', title:'CppAD Changes and Additions During 2014', other:' introduction 12-30 12-29 12-28 12-27 12-26 12-25 12-23 12-22 12-17 12-16 12-15 11-28 11-27 09-28 09-27 09-25 09-21 05-28 05-27 05-23 05-22 05-20 05-19 05-16 05-14 03-18 03-17 03-09 03-05 03-02 03-01 02-28 02-27 02-26 02-23 02-22 02-17 02-15 01-26 01-21 01-10' },
{ tag: 'whats_new_13', title:'CppAD Changes and Additions During 2013', other:' introduction 12-29 12-27 12-26 12-24 11-27 11-13 11-12 10-29 10-23 10-22 10-16 10-15 10-14 10-13 10-12 09-20 09-19 09-18 09-07 08-12 08-11 08-06 07-26 05-28 05-21 05-17 05-15 05-14 05-12 05-11 05-04 04-28 04-27 04-26' },
{ tag: 'whats_new_12', title:'CppAD Changes and Additions During 2012', other:' introduction 12-30 12-29 12-28 12-27 12-26 12-23 12-22 12-20 12-19 12-17 12-15 12-14 12-13 11-28 11-21 11-20 11-17 11-16 11-14 11-09 11-06 11-04 10-31 10-30 10-25 10-24 10-12 10-04 10-03 10-02 09-24 09-11 08-05 07-30 07-08 07-07 07-05 07-04 07-03 07-02 07-01 06-17 06-16 06-15 06-12 06-10 06-09 06-08 06-07 06-05 06-04 06-03 06-02 06-01 05-31 05-30 05-29 05-27 05-24 04-19 04-18 04-17 04-10 04-06 04-05 04-01 03-27 03-26 03-23 03-21 03-17 03-11 03-03 03-02 02-11 02-10 02-09 01-30 01-27 01-24 01-23 01-20 01-19 01-16 01-15 01-12 01-07 01-02' },
{ tag: 'whats_new_11', title:'Changes and Additions to CppAD During 2011', other:' introduction 12-30 12-28 12-21 12-20 11-29 11-27 11-24 11-21 11-20 11-18 11-17 11-09 11-07 11-06 11-04 11-01 10-30 10-29 10-14 10-12 09-06 09-05 09-02 09-01 08-31 08-30 08-25 08-23 08-21 08-11 08-10 08-09 08-08 08-07 08-06 08-04 08-03 08-02 07-31 07-29 07-28 07-27 07-25 07-18 07-17 07-14 07-13 07-11 openmp/run.sh 07-10 07-09 07-07 06-23 06-21 06-18 05-29 05-28 05-26 05-22 05-11 05-03 04-29 04-20 04-19 03-19 03-11 03-05 02-22 02-19 02-17 02-15 02-09 02-06 02-02 02-01 01-19 01-16 01-09' },
{ tag: 'whats_new_10', title:'Changes and Additions to CppAD During 2010', other:' introduction 12-31 11-27 09-26 09-22 08-21 07-14 07-11 06-01 04-28 04-26 04-24 04-01 03-11 03-10 03-09 03-03 02-11 02-08 02-06 02-05 02-03 01-26 01-24 01-23 01-20 01-18 01-04' },
{ tag: 'whats_new_09', title:'Changes and Additions to CppAD During 2009', other:' introduction 12-23 12-22 12-18 12-12 12-04 12-02 11-28 11-27 11-26 10-30 10-29 10-28 10-27 10-24 10-23 10-21 10-16 10-14 10-03 09-30 09-29 09-28 09-26 09-20 09-19 09-18 08-25 08-14 08_13 08-13 08-11 08-10 08-09 08-06 08-02 08-01 07-31 07-26 07-25 07-24 07-23 07-06 07-04 07-03 07-02 07-01 06-30 06-29 06-28 06-25 06-22 06-21 06-20 06-06 05-20 03-24 02-20 02-15 02-01 01-31 01-18 01-06' },
{ tag: 'whats_new_08', title:'Changes and Additions to CppAD During 2008', other:' introduction 12-19 12-14 12-04 11-22 11-21 11-20 10-27 10-17 10-16 09-30 09-26 09-18 09-17 09-16 09-12 09-10 09-09 09-07 09-06 09-05 09-04 09-03 09-01 08-29 08-19 08-08 07-02 06-18 06-15 06-11 06-10 05-08 05-03 04-20 04-18 04-10 04-06 04-04 03-27 02-05 02-03 01-26 01-24 01-21 01-20 01-11 01-08' },
{ tag: 'whats_new_07', title:'Changes and Additions to CppAD During 2007', other:' introduction 12-29 12-25 12-21 12-08 12-05 12-04 12-03 12-02 11-29 11-23 11-18 11-06 11-05 11-04 11-03 11-02 11-01 10-30 10-27 10-23 10-22 10-16 10-13 10-05 10-02 09-06 08-09 08-07 07-30 07-29 07-28 07-26 07-25 07-23 07-22 07-21 07-20 07-19 07-18 07-14 07-13 06-22 06-20 06-14 05-26 05-25 05-24 05-22 05-08 05-05 04-19 04-17 04-14 04-11 04-10 04-07 04-06 04-05 03-31 03-30 03-29 03-20 03-15 03-14 03-13 03-09 03-28 02-27 02-22 02-17 02-16 02-15 02-06 02-04 02-03 02-02 02-01 01-29' },
{ tag: 'whats_new_06', title:'Changes and Additions to CppAD During 2006', other:' introduction 12-24 12-23 12-22 12-21 12-19 12-18 12-17 12-15 12-13 12-12 12-11 12-10 12-09 12-07 12-05 12-03 12-02 12-01 11-30 11-29 11-28 11-23 11-18 11-12 11-08 11-06 11-05 11-04 11-02 11-01 10-31 10-29 10-28 10-27 10-26 10-25 10-18 10-16 10-10 09-30 08-17 07-14 07-12 06-29 06-22 06-19 06-17 06-18 06-15 06-09 06-07 06-05 06-02 05-31 05-29 05-27 05-03 04-29 04-28 04-26 04-25 04-19 04-18 04-17 04-15 04-14 04-13 04-08 04-06 04-05 04-04 04-03 04-02 04-01 03-31 03-30 03-29 03-28 03-27 03-26 03-24 03-23 03-22 03-18 03-17 03-16 03-15 03-11 03-10 03-09 03-07 03-05 02-28 02-25 02-24 02-23 02-21 02-15 02-14 02-13 02-11 02-10 02-04 01-20 01-18 01-08 01-07 01-02 01-05' },
{ tag: 'whats_new_05', title:'Changes and Additions to CppAD During 2005', other:' 12-24 12-23 12-22 12-20 12-19 12-16 12-15 12-14 12-11 12-08 12-07 12-06 12-05 12-03 12-02 12-01 11-23 11-22 11-20 11-19 11-15 11-12 11-09 11-07 11-06 11-01 10-20 10-18 10-14 10-12 10-06 09-29 09-27 09-24 09-20 09-14 09-09 09-07 08-30 08-24 08-20 08-19 08-15 08-14 08-13 08-07 07-21 07-19 07-15 07-11 07-08 07-05 07-04 07-03 07-02 07-01 06-25 06-24 06-18 06-14 06-13 06-06 05-19 05-18 05-16 05-12 05-06 05-01 04-21 04-20 04-19 03-26 03-23 03-22 03-09 03-04 03-01 02-24 01-08' },
{ tag: 'whats_new_04', title:'Changes and Additions to CppAD During 2004', other:' introduction 12-11 12-09 12-03 11-17 11-16 11-15 11-14 11-13 11-12 11-10 11-04 11-02 11-01 10-29 10-28 10-27 10-21 10-19 10-16 10-06 09-29 09-26 09-23 09-21 09-13 09-10 09-09 09-07 09-04 09-02 08-27 08-25 08-24 08-12 07-31 07-08 07-07 07-03 07-02 06-29 06-25 06-12 06-04 06-03 06-01 05-30 05-29 05-26 05-25 05-14 05-12 05-09 05-07 05-04 05-03 04-29 04-28 04-25 04-24 04-22 04-21 04-20 04-19 04-09 04-08 04-07 04-03 04-02 04-01 03-30 03-28 03-25 03-18 03-17 03-15 03-12 03-11 03-09 03-07 03-06 03-05 03-04 03-03 03-01 02-29 02-28 02-21 02-20 02-17 02-16 02-15 02-12 02-01 01-29 01-28 01-22' },
{ tag: 'whats_new_03', title:'Changes and Additions to CppAD During 2003', other:' introduction 12-24 12-22 12-14 12-13 12-12 12-10 12-05 12-01 11-21 11-20 11-16 11-15 11-14 11-12 11-11 11-06 11-04 11-02 10-21 10-16 10-14 10-10 10-06 10-05 09-30 09-20 09-19 09-18 09-15 09-14 09-13 09-06 09-05 09-04 09-03 08-23 08-22 08-19 08-17 08-16 08-11 08-10 08-07 08-06 08-05 08-04 08-03 08-01 07-30 07-29 07-26 07-22 07-20 07-18 07-16 07-14' },
{ tag: 'deprecated', title:'CppAD Deprecated API Features', other:' name changes' },
{ tag: 'include_deprecated', title:'Deprecated Include Files', other:' 2015-11-30 2006-12-17' },
{ tag: 'FunDeprecated', title:'ADFun Object Deprecated Member Functions', other:' syntax purpose dependent 2007-08-07 order 2006-03-31 memory size 2006-04-03 taylor_size 2006-06-17 use_vecad 2006-04-08 size_taylor 2014-03-18 capacity_taylor' },
{ tag: 'CompareChange', title:'Comparison Changes During Zero Order Forward Mode', other:' syntax deprecated 2015-01-20 purpose discussion' },
{ tag: 'omp_max_thread', title:'OpenMP Parallel Setup', other:' deprecated 2011-06-23 syntax purpose number independent restriction' },
{ tag: 'TrackNewDel', title:'Routines That Track Use of New and Delete', other:' deprecated 2007-07-23 syntax purpose include file line oldptr newlen head newptr ncopy tracknewvec macro previously trackdelvec trackextend trackcount multi-threading' },
{ tag: 'omp_alloc', title:'A Quick OpenMP Memory Allocator Used by CppAD', other:' syntax purpose include deprecated 2011-08-23' },
{ tag: 'omp_max_num_threads', title:'Set and Get Maximum Number of Threads for omp_alloc Allocator', other:' deprecated 2011-08-31 syntax purpose set_max_num_threads get_max_num_threads restrictions' },
{ tag: 'omp_in_parallel', title:'Is The Current Execution in OpenMP Parallel Mode', other:' deprecated 2011-08-31 syntax purpose flag' },
{ tag: 'omp_get_thread_num', title:'Get the Current OpenMP Thread Number', other:' deprecated 2011-08-31 syntax purpose' },
{ tag: 'omp_get_memory', title:'Get At Least A Specified Amount of Memory', other:' deprecated 2011-08-31 syntax purpose min_bytes cap_bytes v_ptr allocation speed' },
{ tag: 'omp_return_memory', title:'Return Memory to omp_alloc', other:' deprecated 2011-08-31 syntax purpose v_ptr thread ndebug' },
{ tag: 'omp_free_available', title:'Free Memory Currently Available for Quick Use by a Thread', other:' deprecated 2011-08-31 syntax purpose' },
{ tag: 'omp_inuse', title:'Amount of Memory a Thread is Currently Using', other:' deprecated 2011-08-31 syntax purpose num_bytes' },
{ tag: 'omp_available', title:'Amount of Memory Available for Quick Use by a Thread', other:' deprecated 2011-08-31 syntax purpose num_bytes' },
{ tag: 'omp_create_array', title:'Allocate Memory and Create A Raw Array', other:' deprecated 2011-08-31 syntax purpose type size_min size_out delta' },
{ tag: 'omp_delete_array', title:'Return A Raw Array to The Available Memory for a Thread', other:' deprecated 2011-08-31 syntax purpose type delta' },
{ tag: 'omp_efficient', title:'Check If A Memory Allocation is Efficient for Another Use', other:' removed syntax purpose v_ptr num_bytes flag thread ndebug' },
{ tag: 'old_max_num_threads', title:'Set Maximum Number of Threads for omp_alloc Allocator', other:' removed syntax purpose restrictions' },
{ tag: 'memory_leak', title:'Memory Leak Detection', other:' deprecated 2012-04-06 syntax purpose thread add_static flag inuse available track_count error message' },
{ tag: 'epsilon', title:'Machine Epsilon For AD Types', other:' deprecated 2012-06-17 syntax purpose float' },
{ tag: 'test_vector', title:'Choosing The Vector Testing Template Class', other:' deprecated 2012-07-03 syntax introduction ms windows cppad::vector std::vector boost::numeric::ublas::vector cppadvector 2007-07-28' },
{ tag: 'cppad_ipopt_nlp', title:'Nonlinear Programming Using the CppAD Interface to Ipopt', other:' deprecated 2012-11-28 syntax purpose namespace ipopt_library_paths fg(x) index vector projection injection representation simple sizevector numbervector adnumber advector x_i x_l x_u g_l g_u fg_info fg_info.number_functions fg_info.eval_r fg_info.retape fg_info.domain_size fg_info.range_size fg_info.number_terms fg_info.index solution status z_l z_u lambda obj_value' },
{ tag: 'atomic_one', title:'Defining Atomic Functions: First Generation', other:' deprecated 2013-05-27 syntax use callback routines free static memory purpose partial implementation cppad_user_atomic tvector base ok id tx ty forward reverse afun ay parallel mode usage vx vy py px for_jac_sparse q rev_jac_sparse rev_hes_sparse clear restriction' },
{ tag: 'atomic_two', title:'Defining Atomic Functions: Second Generation', other:' deprecated 2019-01-01 syntax see also purpose speed reduce memory virtual examples' },
{ tag: 'atomic_two_example', title:'Example Defining Atomic Functions: Second Generation', other:' getting started scalar vector range hessian sparsity patterns' },
{ tag: 'atomic_two_ctor', title:'Atomic Function Constructor', other:' syntax atomic_user ctor_arg_list afun implementation atomic_base restrictions name sparsity' },
{ tag: 'atomic_two_option', title:'Set Atomic Function Options', other:' syntax scope atomic_sparsity pack_sparsity_enum bool_sparsity_enum set_sparsity_enum' },
{ tag: 'atomic_two_afun', title:'Using AD Version of Atomic Function', other:' syntax purpose advector ay' },
{ tag: 'atomic_two_forward', title:'Atomic Forward Mode', other:' syntax base ad<base> purpose implementation q vx vy tx atx ty aty ok discussion' },
{ tag: 'atomic_two_reverse', title:'Atomic Reverse Mode', other:' syntax base ad<base> purpose implementation q tx atx ty aty f g h py apy px apx ok' },
{ tag: 'atomic_two_for_sparse_jac', title:'Atomic Forward Jacobian Sparsity Patterns', other:' syntax deprecated 2016-06-27 purpose implementation q ok' },
{ tag: 'atomic_two_rev_sparse_jac', title:'Atomic Reverse Jacobian Sparsity Patterns', other:' syntax deprecated 2016-06-27 purpose implementation q rt st ok' },
{ tag: 'atomic_two_for_sparse_hes', title:'Atomic Forward Hessian Sparsity Patterns', other:' syntax deprecated 2016-06-27 purpose implementation vx' },
{ tag: 'atomic_two_rev_sparse_hes', title:'Atomic Reverse Hessian Sparsity Patterns', other:' syntax deprecated 2016-06-27 purpose implementation vx q' },
{ tag: 'atomic_two_clear', title:'Free Static Variables', other:' syntax purpose future use restriction' },
{ tag: 'atomic_two_eigen_mat_mul.cpp', title:'Atomic Eigen Matrix Multiply: Example and Test', other:' description class definition use function constructor' },
{ tag: 'atomic_two_eigen_mat_mul.hpp', title:'atomic_two Eigen Matrix Multiply Class', other:' see also purpose dimensions theory forward product matrices reverse start definition public types constructor op private variables for_sparse_jac rev_sparse_jac for_sparse_hes rev_sparse_hes end' },
{ tag: 'atomic_two_eigen_mat_inv.cpp', title:'Atomic Eigen Matrix Inverse: Example and Test', other:' description class definition use function constructor' },
{ tag: 'atomic_two_eigen_mat_inv.hpp', title:'atomic_two Eigen Matrix Inversion Class', other:' purpose dimensions theory forward product three matrices reverse start definition public types constructor op private variables end' },
{ tag: 'atomic_two_eigen_cholesky.cpp', title:'Atomic Eigen Cholesky Factorization: Example and Test', other:' description use function constructor' },
{ tag: 'cholesky_theory', title:'AD Theory for Cholesky Factorization', other:' reference notation taylor coefficient lower triangular part forward mode lemma 1 proof 2 reverse case = 0 >' },
{ tag: 'atomic_two_eigen_cholesky.hpp', title:'atomic_two Eigen Cholesky Factorization Class', other:' purpose start definition public types constructor op private variables forward reverse end' },
{ tag: 'multi_atomic_two.cpp', title:'Multi-Threading atomic_two Example / Test', other:' deprecated 2019-08-05 source file' },
{ tag: 'multi_atomic_two_user', title:'Defines a atomic_two Operation that Computes Square Root', other:' syntax purpose au num_itr y_initial y_squared ay limitations source' },
{ tag: 'multi_atomic_two_common', title:'Multi-Threaded atomic_two Common Information', other:' purpose source' },
{ tag: 'multi_atomic_two_setup', title:'Multi-Threaded atomic_two Set Up', other:' syntax purpose y_squared ok source' },
{ tag: 'multi_atomic_two_worker', title:'Multi-Threaded atomic_two Worker', other:' purpose source' },
{ tag: 'multi_atomic_two_takedown', title:'Multi-Threaded atomic_two Take Down', other:' syntax purpose square_root ok source' },
{ tag: 'multi_atomic_two_run', title:'Run Multi-Threaded atomic_two Calculation', other:' syntax y_squared square_root ok source' },
{ tag: 'multi_atomic_two_time', title:'Timing Test for Multi-Threaded atomic_two Calculation', other:' syntax time_out test_time num_threads num_solve ok' },
{ tag: 'chkpoint_one', title:'Checkpoint Functions: First Generation', other:' deprecated 2019-01-14 syntax see also purpose reduce memory faster recording repeating forward restriction multiple level ad method constructor base advector name ay sparsity optimize size_var option algo atom_fun parallel mode clear' },
{ tag: 'multi_chkpoint_one.cpp', title:'Multi-Threading chkpoint_one Example / Test', other:' deprecated 2019-08-06 source file' },
{ tag: 'multi_chkpoint_one_algo', title:'chkpoint_one Algorithm that Computes Square Root', other:' syntax purpose au y_initial y_squared ay source' },
{ tag: 'multi_chkpoint_one_common', title:'Multi-Threaded chkpoint_one Common Information', other:' purpose source' },
{ tag: 'multi_chkpoint_one_setup', title:'Multi-Threaded chkpoint_one Set Up', other:' syntax purpose y_squared ok source' },
{ tag: 'multi_chkpoint_one_worker', title:'Multi-Threaded chkpoint_one Worker', other:' purpose source' },
{ tag: 'multi_chkpoint_one_takedown', title:'Multi-Threaded chkpoint_one Take Down', other:' syntax purpose square_root ok source' },
{ tag: 'multi_chkpoint_one_run', title:'Run Multi-Threaded chkpoint_one Calculation', other:' syntax y_squared square_root ok source' },
{ tag: 'multi_chkpoint_one_time', title:'Timing Test for Multi-Threaded chkpoint_one Calculation', other:' syntax time_out test_time num_threads num_solve ok' },
{ tag: 'zdouble', title:'zdouble: An AD Base Type With Absolute Zero', other:' deprecated 2015-09-26 syntax constructor assignment comparison operators arithmetic standard math nan motivation general cppad requirements' },
{ tag: 'autotools', title:'Autotools Unix Test and Installation', other:' deprecated 2012-12-26 distribution directory build configure make examples tests profiling cppad prefix_dir --with-documentation --with-testvector --enable-msvc max_num_threads cxx_flags openmp_flags postfix_dir adolc_dir linux cygwin boost_dir eigen_dir fadbad_dir ipopt_dir sacado_dir tape_addr_type tape_id_type' },
{ tag: 'compare_c', title:'Compare Speed of C and C++', other:' with syntax purpose' },
{ tag: 'det_of_minor_c', title:'Determinant of a Minor', other:' syntax purpose source code' },
{ tag: 'det_by_minor_c', title:'Compute Determinant using Expansion by Minors', other:' syntax purpose source code' },
{ tag: 'uniform_01_c', title:'Simulate a [0,1] Uniform Random Variate', other:' [01] syntax purpose seed source code' },
{ tag: 'correct_det_by_minor_c', title:'Correctness Test of det_by_minor Routine', other:' syntax flag source code' },
{ tag: 'repeat_det_by_minor_c', title:'Repeat det_by_minor Routine A Specified Number of Times', other:' syntax size source code' },
{ tag: 'elapsed_seconds_c', title:'Returns Elapsed Number of Seconds', other:' syntax purpose source code' },
{ tag: 'time_det_by_minor_c', title:'Determine Amount of Time to Execute det_by_minor', other:' syntax purpose time_min source code' },
{ tag: 'main_compare_c', title:'Main Program For Comparing C and C++ Speed', other:' source code' },
{ tag: 'numeric_ad', title:'Some Numerical AD Utilities', other:'' },
{ tag: 'BenderQuad', title:'Computing Jacobian and Hessian of Bender\'s Reduced Objective', other:' syntax see also problem purpose fun fun.f fun.h fun.dy gx gxx bavector advector example' },
{ tag: 'bender_quad.cpp', title:'BenderQuad: Example and Test', other:'' },
{ tag: 'opt_val_hes', title:'Jacobian and Hessian of Optimal Values', other:' syntax see also reference purpose basevector fun fun::ad_vector fun.ell fun.s fun.sy signdet example' },
{ tag: 'opt_val_hes.cpp', title:'opt_val_hes: Example and Test', other:'' },
{ tag: 'LuRatio', title:'LU Factorization of A Square Matrix and Stability Calculation', other:' syntax description include storage sign jp determinant purpose sizevector advector example' },
{ tag: 'lu_ratio.cpp', title:'LuRatio: Example and Test', other:'' },
{ tag: 'addon', title:'CppAD Addons', other:' name include files library preprocessor symbols namespace' },
{ tag: 'License', title:'Your License for the CppAD Software', other:' eclipse public version 2.0' }
]

var MaxList = 100;
var Nstring = -1;
var Nkeyword = Keyword.length;
var Row2Tag  = [];
Initialize();

function Initialize()
{
	UpdateList();
	document.search.keywords.focus();
}
function UpdateList()
{
	var string  = document.search.keywords.value;
	if( Nstring == string.length )
		return;
	Nstring     = string.length;

	var word    = string.match(/\S+/g);
	var nword   = 0;
	if(word != null )
		nword   = word.length;

	var pattern = new Array(nword);
	for(var j = 0; j < nword; j++)
		pattern[j] = new RegExp(word[j], 'i');

	var nlist       = 0;
	var title_list  = '';
	var tag_list    = '';
	for(i = 0; (i < Nkeyword) && (nlist < MaxList) ; i++)
	{
		var match = true;
		for(j = 0; j < nword; j++)
		{	var flag = pattern[j].test(Keyword[i].tag);
			flag     = flag || pattern[j].test(Keyword[i].title);
			flag     = flag || pattern[j].test(Keyword[i].other);
			match    = match && flag;
		}
		if( match )
		{
			var tag    = Keyword[i].tag;
			var title  = Keyword[i].title
			title      = title.split(/\s+/);
			title      = title.join(' ');
			title_list = title_list + title + '\n';
			tag_list   = tag_list + tag + '\n'
			Row2Tag[nlist] = tag;
			nlist = nlist + 1;
		}
	}
	document.search.title_list.value = title_list;
	document.search.title_list.setAttribute('wrap', 'off');;
	document.search.title_list.readOnly = true;
	document.search.tag_list.value = tag_list;
	document.search.tag_list.setAttribute('wrap', 'off');;
	document.search.tag_list.readOnly = true;
}
function Choose(textarea)
{	var start_select = textarea.value.substring(0, textarea.selectionStart);
	var start_pos    = Math.max(0, start_select.lastIndexOf('\n') + 1);
	var length       = textarea.value.length;
	var end_select   = 
		textarea.value.substring(textarea.selectionEnd, length);
	var end_pos  = end_select.indexOf('\n');
	end_pos      = textarea.selectionEnd + end_pos;
	textarea.selectionStart = start_pos;
	textarea.selectionEnd   = end_pos;
	var row = start_select.split('\n').length - 1;
	var tag = Row2Tag[row];
	document.search.selection.value    = tag.toLowerCase();
	document.search.selection.readOnly = true;
	
	return true;
}
function Goto()
{  selection       = document.search.selection.value;
   if( selection != '' )
	    parent.location = selection + '.htm';
}
function CheckForReturn()
{
	var key = event.which;
	if( key == 13 ) Goto();
}
