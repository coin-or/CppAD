<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Running the Speed Test Program</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Running the Speed Test Program">
<meta name="keywords" id="keywords" content=" running the speed test program syntax purpose package ad double profile correct seed global options onetape memory optimize atomic hes2jac subgraph sparsity boolsparsity revsparsity subsparsity colpack symmetric correctness results n_color link routines ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_speed_main_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="speed.htm" target="_top">Prev</a>
</td><td><a href="link_routines.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_main</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_speed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_speed_main_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>package</option>
<option>---..AD Package</option>
<option>---..double</option>
<option>---..profile</option>
<option>test</option>
<option>---..correct</option>
<option>---..speed</option>
<option>seed</option>
<option>Global Options</option>
<option>---..onetape</option>
<option>---..memory</option>
<option>---..optimize</option>
<option>---..atomic</option>
<option>---..hes2jac</option>
<option>---..subgraph</option>
<option>Sparsity Options</option>
<option>---..boolsparsity</option>
<option>---..revsparsity</option>
<option>---..subsparsity</option>
<option>---..colpack</option>
<option>---..symmetric</option>
<option>Correctness Results</option>
<option>Speed Results</option>
<option>---..n_color</option>
<option>Link Routines</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Running the Speed Test Program</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>speed/</span></font><i><font color="black"><span style='white-space: nowrap'>package</span></font></i><font color="blue"><span style='white-space: nowrap'>/speed_</span></font><i><font color="black"><span style='white-space: nowrap'>package</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>test</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>seed</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>option_list</span></font></i></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
A version of this program runs the correctness tests
or the speed tests for one AD package identified by 
<code><i><font color="black"><span style='white-space: nowrap'>package</span></font></i></code>
.

<br>
<br>
<b><big><a name="package" id="package">package</a></big></b>


<br>
<br>
<big><a name="package.AD Package" id="package.AD Package">AD Package</a></big>
<br>
The command line argument

<code><i><font color="black"><span style='white-space: nowrap'>package</span></font></i></code>
 specifies one of the AD package.
The CppAD distribution comes with support for the following packages:
<a href="speed_adolc.htm" target="_top"><span style='white-space: nowrap'>adolc</span></a>
,
<a href="speed_cppad.htm" target="_top"><span style='white-space: nowrap'>cppad</span></a>
,
<a href="speed_fadbad.htm" target="_top"><span style='white-space: nowrap'>fadbad</span></a>
,
<a href="speed_sacado.htm" target="_top"><span style='white-space: nowrap'>sacado</span></a>
,
<a href="speed_cppadcg.htm" target="_top"><span style='white-space: nowrap'>cppadcg</span></a>
.
You can extend this program to include other package;
see <a href="speed_xpackage.htm" target="_top"><span style='white-space: nowrap'>speed_xpackage</span></a>
.

<br>
<br>
<big><a name="package.double" id="package.double">double</a></big>
<br>
The value

<code><i><font color="black"><span style='white-space: nowrap'>package</span></font></i></code>
 can be <code><font color="blue">double</font></code> in which case
the function values (instead of derivatives) are computed
using double precision operations.
This enables one to compare the speed of computing function
values in <code><font color="blue">double</font></code> to the speed of the derivative computations.
(It is often useful to divide the speed of the derivative computation by
the speed of the function evaluation in <code><font color="blue">double</font></code>.)

<br>
<br>
<big><a name="package.profile" id="package.profile">profile</a></big>
<br>
In the special case where 
<code><i><font color="black"><span style='white-space: nowrap'>package</span></font></i></code>
 is <code><font color="blue">profile</font></code>,
the CppAD package is compiled and run with profiling to aid in determining
where it is spending most of its time.

<br>
<br>
<b><big><a name="test" id="test">test</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>test</span></font></i></code>
 specifies which test to run
and has the following possible values:
<a href="speed_main.htm#test.correct" target="_top"><span style='white-space: nowrap'>correct</span></a>
,
<a href="speed_main.htm#test.speed" target="_top"><span style='white-space: nowrap'>speed</span></a>
,
<a href="link_det_minor.htm" target="_top"><span style='white-space: nowrap'>det_minor</span></a>
,
<a href="link_det_lu.htm" target="_top"><span style='white-space: nowrap'>det_lu</span></a>
,
<a href="link_mat_mul.htm" target="_top"><span style='white-space: nowrap'>mat_mul</span></a>
,
<a href="link_ode.htm" target="_top"><span style='white-space: nowrap'>ode</span></a>
,
<a href="link_poly.htm" target="_top"><span style='white-space: nowrap'>poly</span></a>
,
<a href="link_sparse_hessian.htm" target="_top"><span style='white-space: nowrap'>sparse_hessian</span></a>
,
<a href="link_sparse_jacobian.htm" target="_top"><span style='white-space: nowrap'>sparse_jacobian</span></a>
.
You can experiment with changing the implementation of a
particular test for a particular package.

<br>
<br>
<big><a name="test.correct" id="test.correct">correct</a></big>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>test</span></font></i></code>
 is equal to <code><font color="blue">correct</font></code>,
all of the correctness tests are run.

<br>
<br>
<big><a name="test.speed" id="test.speed">speed</a></big>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>test</span></font></i></code>
 is equal to <code><font color="blue">speed</font></code>,
all of the speed tests are run.

<br>
<br>
<b><big><a name="seed" id="seed">seed</a></big></b>
<br>
The command line argument 
<code><i><font color="black"><span style='white-space: nowrap'>seed</span></font></i></code>
 is an unsigned integer
(all its characters are between 0 and 9).
The random number simulator <a href="uniform_01.htm" target="_top"><span style='white-space: nowrap'>uniform_01</span></a>
 is initialized with
the call

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;uniform_01(</span></font><i><font color="black"><span style='white-space: nowrap'>seed</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
before any of the testing routines (listed above) are called.

<br>
<br>
<b><big><a name="Global Options" id="Global Options">Global Options</a></big></b>
<br>
This global variable has prototype
<pre style='display:inline'><tt>
    <b><font color="#0000FF">extern</font></b> std<font color="#990000">::</font><font color="#008080">map&lt;std::string, bool&gt;</font> global_option<font color="#990000">;</font>
</tt></pre>
The syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;global_option[&quot;</span></font><i><font color="black"><span style='white-space: nowrap'>option</span></font></i><font color="blue"><span style='white-space: nowrap'>&quot;]<br>
</span></font></code>
has the value true, if 
<code><i><font color="black"><span style='white-space: nowrap'>option</span></font></i></code>
 is present,
and false otherwise.
This is true for each option that follows 
<code><i><font color="black"><span style='white-space: nowrap'>seed</span></font></i></code>
.
The order of the options does not matter and the list can be empty.
Each option, is be a separate command line argument to the main program.
The documentation below specifics how the
<a href="speed_cppad.htm" target="_top"><span style='white-space: nowrap'>speed_cppad</span></a>
 program uses these options.
It is the intention that other packages use each option in a similar
way or make it invalid.
The implementation of each test should check that the option
setting are valid for that test and if not it should return false;
for example, see the source code for <a href="adolc_sparse_hessian.cpp.htm" target="_top"><span style='white-space: nowrap'>adolc_sparse_hessian.cpp</span></a>
.

<br>
<br>
<big><a name="Global Options.onetape" id="Global Options.onetape">onetape</a></big>
<br>
If this option is present,
<a href="speed_cppad.htm" target="_top"><span style='white-space: nowrap'>speed_cppad</span></a>
 will use one taping of the operation
sequence for all the repetitions of that speed test.
Otherwise, the
<a href="glossary.htm#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&nbsp;sequence</span></a>

will be retaped for each test repetition.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>All of the tests, except <a href="link_det_lu.htm" target="_top"><span style='white-space: nowrap'>det_lu</span></a>
,
have the same operation sequence for each repetition.
The operation sequence for <code><font color="blue">det_lu</font></code>
may be different because it depends on the matrix for which the determinant
is being calculated.
For this reason, <a href="cppad_det_lu.cpp.htm" target="_top"><span style='white-space: nowrap'>cppad_det_lu.cpp</span></a>
 returns false,
to indicate that the test not implemented,
when <code><font color="blue">global_onetape</font></code> is true.

<br>
<br>
<big><a name="Global Options.memory" id="Global Options.memory">memory</a></big>
<br>
This option is special because individual CppAD speed tests need not do
anything different if this option is true or false.
If the <code><font color="blue">memory</font></code> option is present, the CppAD
<a href="ta_hold_memory.htm" target="_top"><span style='white-space: nowrap'>hold_memory</span></a>
 routine will be called by
the speed test main program before any of the tests are executed
This should make the CppAD <code><font color="blue">thread_alloc</font></code> allocator faster.
If it is not present, CppAD will used standard memory allocation.
Another package might use this option for a different
memory allocation method.

<br>
<br>
<big><a name="Global Options.optimize" id="Global Options.optimize">optimize</a></big>
<br>
If this option is present,
CppAD will <a href="optimize.htm" target="_top"><span style='white-space: nowrap'>optimize</span></a>

the operation sequence before doing computations.
If it is false, this optimization will not be done.
Note that this option is usually slower unless it is combined with the
<code><font color="blue">onetape</font></code> option.

<br>
<br>
<big><a name="Global Options.atomic" id="Global Options.atomic">atomic</a></big>
<br>
If this option is present,
CppAD will use a user defined
<a href="atomic_two.htm" target="_top"><span style='white-space: nowrap'>atomic</span></a>
 operation is used for the test.
So far, CppAD has only implemented
the <a href="link_mat_mul.htm" target="_top"><span style='white-space: nowrap'>mat_mul</span></a>
 test as an atomic operation.

<br>
<br>
<big><a name="Global Options.hes2jac" id="Global Options.hes2jac">hes2jac</a></big>
<br>
If this option is present,
<a href="speed_cppad.htm" target="_top"><span style='white-space: nowrap'>speed_cppad</span></a>
 will compute hessians as the Jacobian
of the gradient.
This is accomplished using
<a href="mul_level.htm" target="_top"><span style='white-space: nowrap'>multiple&nbsp;levels</span></a>
 of AD.
So far, CppAD has only implemented
the <a href="link_sparse_hessian.htm" target="_top"><span style='white-space: nowrap'>sparse_hessian</span></a>

test in this manner.

<br>
<br>
<big><a name="Global Options.subgraph" id="Global Options.subgraph">subgraph</a></big>
<br>
If this option is present,
<a href="speed_cppad.htm" target="_top"><span style='white-space: nowrap'>speed_cppad</span></a>
 will compute sparse Jacobians using subgraphs.
The CppAD <a href="link_sparse_jacobian.htm" target="_top"><span style='white-space: nowrap'>sparse_jacobian</span></a>

test is implemented for this option.
In addition, the CppAD <a href="link_sparse_hessian.htm" target="_top"><span style='white-space: nowrap'>sparse_hessian</span></a>

test is implemented for this option when <code><font color="blue">hes2jac</font></code> is present.

<br>
<br>
<b><big><a name="Sparsity Options" id="Sparsity Options">Sparsity Options</a></big></b>
<br>
The following options only apply to the
<a href="link_sparse_jacobian.htm" target="_top"><span style='white-space: nowrap'>sparse_jacobian</span></a>
 and
<a href="link_sparse_hessian.htm" target="_top"><span style='white-space: nowrap'>sparse_hessian</span></a>
 tests.
The other tests return false when any of these options
are present.

<br>
<br>
<big><a name="Sparsity Options.boolsparsity" id="Sparsity Options.boolsparsity">boolsparsity</a></big>
<br>
If this option is present, CppAD will use a
<a href="glossary.htm#Sparsity Pattern.Boolean Vector" target="_top"><span style='white-space: nowrap'>vectors&nbsp;of&nbsp;bool</span></a>

to compute sparsity patterns.
Otherwise CppAD will use
<a href="glossary.htm#Sparsity Pattern.Vector of Sets" target="_top"><span style='white-space: nowrap'>vectors&nbsp;of&nbsp;sets</span></a>
.

<br>
<br>
<big><a name="Sparsity Options.revsparsity" id="Sparsity Options.revsparsity">revsparsity</a></big>
<br>
If this option is present,
CppAD will use reverse mode for to compute sparsity patterns.
Otherwise CppAD will use forward mode.

<br>
<br>
<big><a name="Sparsity Options.subsparsity" id="Sparsity Options.subsparsity">subsparsity</a></big>
<br>
If this option is present,
CppAD will use subgraphs to compute sparsity patterns.
If
<code><font color="blue">boolsparsity</font></code>, <code><font color="blue">revsparsity</font></code>, or <code><font color="blue">colpack</font></code> is also present,
the CppAD speed tests will return false; i.e., these options are not
supported by <a href="subgraph_sparsity.htm" target="_top"><span style='white-space: nowrap'>subgraph_sparsity</span></a>
.

<br>
<br>
<big><a name="Sparsity Options.colpack" id="Sparsity Options.colpack">colpack</a></big>
<br>
If this option is present,
CppAD will use <a href="colpack_prefix.htm" target="_top"><span style='white-space: nowrap'>colpack</span></a>
 to do the coloring.
Otherwise, it will use it's own coloring algorithm.

<br>
<br>
<big><a name="Sparsity Options.symmetric" id="Sparsity Options.symmetric">symmetric</a></big>
<br>
If this option is present, CppAD will use a symmetric
<a href="sparse_hessian.htm#work.color_method" target="_top"><span style='white-space: nowrap'>coloring&nbsp;method</span></a>

for computing Hessian sparsity patterns.
Otherwise, it will use a general coloring method.
The CppAD
<a href="link_sparse_hessian.htm" target="_top"><span style='white-space: nowrap'>sparse_hessian</span></a>
 test
is implemented for this option.

<br>
<br>
<b><big><a name="Correctness Results" id="Correctness Results">Correctness Results</a></big></b>
<br>
One, but not both, of the following two output lines

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>package</span></font></i><font color="blue"><span style='white-space: nowrap'>_</span></font><i><font color="black"><span style='white-space: nowrap'>test</span></font></i><font color="blue"><span style='white-space: nowrap'>_</span></font><i><font color="black"><span style='white-space: nowrap'>optionlist</span></font></i><font color="blue"><span style='white-space: nowrap'>_available&nbsp;=&nbsp;false<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>package</span></font></i><font color="blue"><span style='white-space: nowrap'>_</span></font><i><font color="black"><span style='white-space: nowrap'>test</span></font></i><font color="blue"><span style='white-space: nowrap'>_</span></font><i><font color="black"><span style='white-space: nowrap'>optionlist</span></font></i><font color="blue"><span style='white-space: nowrap'>_ok&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>flag</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
is generated for each correctness test where

<code><i><font color="black"><span style='white-space: nowrap'>package</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>test</span></font></i></code>
 are as above,

<code><i><font color="black"><span style='white-space: nowrap'>optionlist</span></font></i></code>
 are the options (in 
<code><i><font color="black"><span style='white-space: nowrap'>option_list</span></font></i></code>
)
separated by the underbar <code><font color="blue">_</font></code> character
(whereas they are separated by spaces in 
<code><i><font color="black"><span style='white-space: nowrap'>option_list</span></font></i></code>
),
and 
<code><i><font color="black"><span style='white-space: nowrap'>flag</span></font></i></code>
 is <code><font color="blue">true</font></code> or <code><font color="blue">false</font></code>.

<br>
<br>
<b><big><a name="Speed Results" id="Speed Results">Speed Results</a></big></b>
<br>
For each speed test, corresponds to three lines of the
following form are generated:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>package</span></font></i><font color="blue"><span style='white-space: nowrap'>_</span></font><i><font color="black"><span style='white-space: nowrap'>test</span></font></i><font color="blue"><span style='white-space: nowrap'>_</span></font><i><font color="black"><span style='white-space: nowrap'>optionlist</span></font></i><font color="blue"><span style='white-space: nowrap'>_ok&nbsp;&nbsp;&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>flag</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>test</span></font></i><font color="blue"><span style='white-space: nowrap'>_size&nbsp;=&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>size_1</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>size_n</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>package</span></font></i><font color="blue"><span style='white-space: nowrap'>_</span></font><i><font color="black"><span style='white-space: nowrap'>test</span></font></i><font color="blue"><span style='white-space: nowrap'>_rate&nbsp;=&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>rate_1</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>rate_n</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]<br>
</span></font></code>
The values 
<code><i><font color="black"><span style='white-space: nowrap'>package</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>test</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>optionlist</span></font></i></code>
,
and 
<code><i><font color="black"><span style='white-space: nowrap'>flag</span></font></i></code>
 are as in the correctness results above.
The values 
<code><i><font color="black"><span style='white-space: nowrap'>size_1</span></font></i></code>
, ..., 
<code><i><font color="black"><span style='white-space: nowrap'>size_n</span></font></i></code>
 are the
size arguments used for the corresponding tests.
The values 
<code><i><font color="black"><span style='white-space: nowrap'>rate_1</span></font></i></code>
, ..., 
<code><i><font color="black"><span style='white-space: nowrap'>rate_n</span></font></i></code>
 are the number of times
per second that the corresponding size problem executed.

<br>
<br>
<big><a name="Speed Results.n_color" id="Speed Results.n_color">n_color</a></big>
<br>
The <a href="link_sparse_jacobian.htm" target="_top"><span style='white-space: nowrap'>sparse_jacobian</span></a>

and <a href="link_sparse_hessian.htm" target="_top"><span style='white-space: nowrap'>sparse_hessian</span></a>
 tests has an extra output
line with the following form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>package</span></font></i><font color="blue"><span style='white-space: nowrap'>_sparse_</span></font><i><font color="black"><span style='white-space: nowrap'>test</span></font></i><font color="blue"><span style='white-space: nowrap'>_n_color&nbsp;=&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_color_1</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_color_n</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]<br>
</span></font></code>
were 
<code><i><font color="black"><span style='white-space: nowrap'>test</span></font></i></code>
 is <code><font color="blue">jacobian</font></code> (<code><font color="blue">hessian</font></code>).
The values 
<code><i><font color="black"><span style='white-space: nowrap'>n_color_1</span></font></i></code>
, ..., 
<code><i><font color="black"><span style='white-space: nowrap'>n_color_n</span></font></i></code>
 are the number of
colors used for each sparse Jacobian (Hessian) calculation; see

<code><i><font color="black"><span style='white-space: nowrap'>n_color</span></font></i></code>
 for
<a href="sparse_jac.htm#n_color" target="_top"><span style='white-space: nowrap'>sparse_jac</span></a>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>n_sweep</span></font></i></code>
 for
<a href="sparse_hessian.htm#n_sweep" target="_top"><span style='white-space: nowrap'>sparse_hessian</span></a>
.



<br>
<br>
<b><big><a name="Link Routines" id="Link Routines">Link Routines</a></big></b>
<br>
Each <a href="speed_main.htm#package" target="_top"><span style='white-space: nowrap'>package</span></a>

defines it's own version of one of the
<a href="link_routines.htm" target="_top"><span style='white-space: nowrap'>link_routines</span></a>
 listed below.
Each of these routines links this main program to the corresponding test:
<table><tr><td align='left'  valign='top'>

<a href="link_det_lu.htm" target="_top">link_det_lu</a></td><td>
Speed Testing Gradient of Determinant Using Lu Factorization</td></tr>
<tr><td>

<a href="link_det_minor.htm" target="_top">link_det_minor</a></td><td>
Speed Testing Gradient of Determinant by Minor Expansion</td></tr>
<tr><td>

<a href="link_mat_mul.htm" target="_top">link_mat_mul</a></td><td>
Speed Testing Derivative of Matrix Multiply</td></tr>
<tr><td>

<a href="link_ode.htm" target="_top">link_ode</a></td><td>
Speed Testing the Jacobian of Ode Solution</td></tr>
<tr><td>

<a href="link_poly.htm" target="_top">link_poly</a></td><td>
Speed Testing Second Derivative of a Polynomial</td></tr>
<tr><td>

<a href="link_sparse_hessian.htm" target="_top">link_sparse_hessian</a></td><td>
Link to Speed Test Sparse Hessian</td></tr>
<tr><td>

<a href="link_sparse_jacobian.htm" target="_top">link_sparse_jacobian</a></td><td>
Speed Testing Sparse Jacobians</td></tr>
<tr><td>

</td></tr>
</table>

<hr>Input File: speed/main.cpp

</body>
</html>
