<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>OpenMP Implementation of a Team of AD Threads</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="OpenMP Implementation of a Team of AD Threads">
<meta name="keywords" id="keywords" content=" openmp implementation team ad threads ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_team_openmp.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="team_thread.hpp.htm" target="_top">Prev</a>
</td><td><a href="team_bthread.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>team_thread.hpp</option>
<option>team_openmp.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_multi_thread_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_thread_test.cpp_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_team_thread.hpp_htm.js'></script>
</td>
<td>team_openmp.cpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>OpenMP Implementation of a Team of AD Threads</big></big></b></center>
See <a href="team_thread.hpp.htm" target="_top"><span style='white-space: nowrap'>team_thread.hpp</span></a>
 for this routines specifications.

<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;omp.h&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">"../team_thread.hpp"</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>thread_alloc<font color="#990000">;</font>

    <i><font color="#9A1900">// number of threads in this team</font></i>
    <font color="#008080">size_t</font> num_threads_<font color="#990000">;</font>

    <i><font color="#9A1900">// used to inform CppAD when we are in parallel execution mode</font></i>
    <font color="#009900">bool</font> <b><font color="#000000">in_parallel</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> <b><font color="#000000">omp_in_parallel</font></b><font color="#990000">()</font> <font color="#990000">!=</font> <font color="#993399">0</font><font color="#990000">;</font> <font color="#FF0000">}</font>

    <i><font color="#9A1900">// used to inform CppAD of the current thread number</font></i>
    <font color="#008080">size_t</font> <b><font color="#000000">thread_num</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">static_cast</font></b><font color="#990000">&lt;</font>size_t<font color="#990000">&gt;(</font> <b><font color="#000000">omp_get_thread_num</font></b><font color="#990000">()</font> <font color="#990000">);</font> <font color="#FF0000">}</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">team_create</font></b><font color="#990000">(</font><font color="#008080">size_t</font> num_threads<font color="#990000">)</font>
<font color="#FF0000">{</font>
    <font color="#009900">bool</font> ok <font color="#990000">=</font> <font color="#990000">!</font> <b><font color="#000000">in_parallel</font></b><font color="#990000">();</font>
    ok     <font color="#990000">&amp;=</font> <b><font color="#000000">thread_num</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;;</font>
    ok     <font color="#990000">&amp;=</font> num_threads <font color="#990000">&gt;</font> <font color="#993399">0</font><font color="#990000">;</font>

    <i><font color="#9A1900">// Turn off dynamic thread adjustment</font></i>
    <b><font color="#000000">omp_set_dynamic</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>

    <i><font color="#9A1900">// Set the number of OpenMP threads</font></i>
    <b><font color="#000000">omp_set_num_threads</font></b><font color="#990000">(</font> <font color="#009900">int</font><font color="#990000">(</font>num_threads<font color="#990000">)</font> <font color="#990000">);</font>

    <i><font color="#9A1900">// setup for using CppAD::AD&lt;double&gt; in parallel</font></i>
    thread_alloc<font color="#990000">::</font><b><font color="#000000">parallel_setup</font></b><font color="#990000">(</font>num_threads<font color="#990000">,</font> in_parallel<font color="#990000">,</font> thread_num<font color="#990000">);</font>
    thread_alloc<font color="#990000">::</font><b><font color="#000000">hold_memory</font></b><font color="#990000">(</font><b><font color="#0000FF">true</font></b><font color="#990000">);</font>
    CppAD<font color="#990000">::</font>parallel_ad<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;();</font>

    <i><font color="#9A1900">// inform team_work of number of threads</font></i>
    num_threads_ <font color="#990000">=</font> num_threads<font color="#990000">;</font>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">team_work</font></b><font color="#990000">(</font><font color="#009900">void</font> <b><font color="#000000">worker</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">))</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <font color="#990000">!</font> <b><font color="#000000">in_parallel</font></b><font color="#990000">();</font>
    ok     <font color="#990000">&amp;=</font> <b><font color="#000000">thread_num</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;;</font>
    ok     <font color="#990000">&amp;=</font> num_threads_ <font color="#990000">&gt;</font> <font color="#993399">0</font><font color="#990000">;</font>

    <font color="#009900">int</font> number_threads <font color="#990000">=</font> <font color="#009900">int</font><font color="#990000">(</font>num_threads_<font color="#990000">);</font>
    <font color="#009900">int</font> thread_num<font color="#990000">;</font>
<b><font color="#000080"># pragma</font></b> omp parallel <b><font color="#0000FF">for</font></b>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>thread_num <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> thread_num <font color="#990000">&lt;</font> number_threads<font color="#990000">;</font> thread_num<font color="#990000">++)</font>
        <b><font color="#000000">worker</font></b><font color="#990000">();</font>
<i><font color="#9A1900">// end omp parallel for</font></i>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">team_destroy</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <font color="#990000">!</font> <b><font color="#000000">in_parallel</font></b><font color="#990000">();</font>
    ok     <font color="#990000">&amp;=</font> <b><font color="#000000">thread_num</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;;</font>
    ok     <font color="#990000">&amp;=</font> num_threads_ <font color="#990000">&gt;</font> <font color="#993399">0</font><font color="#990000">;</font>

    <i><font color="#9A1900">// inform team_work of number of threads</font></i>
    num_threads_ <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>

    <i><font color="#9A1900">// Set the number of OpenMP threads to one</font></i>
    <b><font color="#000000">omp_set_num_threads</font></b><font color="#990000">(</font> <font color="#009900">int</font><font color="#990000">(</font>num_threads_<font color="#990000">)</font> <font color="#990000">);</font>

    <i><font color="#9A1900">// inform CppAD no longer in multi-threading mode</font></i>
    thread_alloc<font color="#990000">::</font><b><font color="#000000">parallel_setup</font></b><font color="#990000">(</font>num_threads_<font color="#990000">,</font> nullptr<font color="#990000">,</font> nullptr<font color="#990000">);</font>
    thread_alloc<font color="#990000">::</font><b><font color="#000000">hold_memory</font></b><font color="#990000">(</font><b><font color="#0000FF">false</font></b><font color="#990000">);</font>
    CppAD<font color="#990000">::</font>parallel_ad<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;();</font>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>

<b><font color="#0000FF">const</font></b> <font color="#009900">char</font><font color="#990000">*</font> <b><font color="#000000">team_name</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> <font color="#FF0000">"openmp"</font><font color="#990000">;</font> <font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/multi_thread/openmp/team_openmp.cpp

</body>
</html>
