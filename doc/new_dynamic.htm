<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Change the Dynamic Parameters</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Change the Dynamic Parameters">
<meta name="keywords" id="keywords" content=" change the dynamic parameters syntax purpose f basevector taylor coefficients example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_new_dynamic_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="forward.htm" target="_top">Prev</a>
</td><td><a href="new_dynamic.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>Forward</option>
<option>new_dynamic</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_forward_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_new_dynamic_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>f</option>
<option>dynamic</option>
<option>BaseVector</option>
<option>Taylor Coefficients</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Change the Dynamic Parameters</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.new_dynamic(</span></font><i><font color="black"><span style='white-space: nowrap'>dynamic</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
Often one is only interested in computing derivatives with respect
to a subset of arguments to a function.
In this case, it is easier to make all the arguments to the function
<a href="glossary.htm#Tape.Independent Variable" target="_top"><span style='white-space: nowrap'>independent&nbsp;variables</span></a>
.
It is more efficient,
will use less memory and be faster,
if the only the argument were are computing derivatives with respect to
are independent variables and the other arguments are
<a href="glossary.htm#Parameter.Dynamic" target="_top"><span style='white-space: nowrap'>dynamic</span></a>
 parameters.
The <code><font color="blue">new_dynamic</font></code> method is used to change the value
of the dynamic parameters in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.

<br>
<br>
<b><big><a name="f" id="f">f</a></big></b>
<br>
The object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
Note that the <a href="adfun.htm" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 is not <code><font color="blue">const</font></code>.

<br>
<br>
<b><big><a name="dynamic" id="dynamic">dynamic</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>BaseVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dynamic</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
(see 
<code><i><font color="black"><span style='white-space: nowrap'>BaseVector</span></font></i></code>
 below).
It specifies a new value for the independent
<a href="glossary.htm#Parameter.Dynamic" target="_top"><span style='white-space: nowrap'>dynamic</span></a>
 parameters.
It size must be the same as the size of the independent
<a href="independent.htm#dynamic" target="_top"><span style='white-space: nowrap'>dynamic</span></a>
 parameter vector
in the call to <code><font color="blue">Independent</font></code> that started
the recording for 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
; see
<a href="fun_property.htm#size_dyn_ind" target="_top"><span style='white-space: nowrap'>size_dyn_ind</span></a>
.

<br>
<br>
<b><big><a name="BaseVector" id="BaseVector">BaseVector</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>BaseVector</span></font></i></code>
 must be a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with
<a href="simplevector.htm#Elements of Specified Type" target="_top"><span style='white-space: nowrap'>elements&nbsp;of&nbsp;type</span></a>


<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
.

<br>
<br>
<b><big><a name="Taylor Coefficients" id="Taylor Coefficients">Taylor Coefficients</a></big></b>
<br>
The Taylor coefficients computed by previous calls to
<a href="forward.htm" target="_top"><span style='white-space: nowrap'>f.Forward</span></a>
 are lost after this operation; including the
order zero coefficients (because they may depend on the dynamic parameters).
In order words;
<a href="size_order.htm" target="_top"><span style='white-space: nowrap'>f.size_order</span></a>
 returns zero directly after

<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.new_dynamic</span></font></code>
 is called.


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="new_dynamic.cpp.htm" target="_top"><span style='white-space: nowrap'>new_dynamic.cpp</span></a>

contains an example and test of this operation.


<hr>Input File: include/cppad/core/new_dynamic.hpp

</body>
</html>
