<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>A Multi-Threaded Newton's Method</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="A Multi-Threaded Newton's Method">
<meta name="keywords" id="keywords" content=" multi-threaded newton's method syntax purpose thread ok xout fun num_sub xlow xup epsilon max_itr num_threads source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_multi_newton_run_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="multi_newton_takedown.htm" target="_top">Prev</a>
</td><td><a href="multi_newton_time.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>multi_newton.cpp</option>
<option>multi_newton_run</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_multi_thread_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_thread_test.cpp_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_multi_newton.cpp_htm.js'></script>
</td>
<td>multi_newton_run</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Thread</option>
<option>Method</option>
<option>ok</option>
<option>xout</option>
<option>fun</option>
<option>num_sub</option>
<option>xlow</option>
<option>xup</option>
<option>epsilon</option>
<option>max_itr</option>
<option>num_threads</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>A Multi-Threaded Newton's Method</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>multi_newton_run(</span></font></i><font color="blue"><span style='white-space: nowrap'>xout</span></font><i><font color="black"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font></i><font color="blue"><span style='white-space: nowrap'>fun</span></font><i><font color="black"><span style='white-space: nowrap'>,&nbsp;</span></font></i><font color="blue"><span style='white-space: nowrap'>num_sub</span></font><i><font color="black"><span style='white-space: nowrap'>,&nbsp;</span></font></i><font color="blue"><span style='white-space: nowrap'>xlow</span></font><i><font color="black"><span style='white-space: nowrap'>,&nbsp;</span></font></i><font color="blue"><span style='white-space: nowrap'>xup</span></font><i><font color="black"><span style='white-space: nowrap'>,&nbsp;</span></font></i><font color="blue"><span style='white-space: nowrap'>epsilon</span></font><i><font color="black"><span style='white-space: nowrap'>,&nbsp;</span></font></i><font color="blue"><span style='white-space: nowrap'>max_itr</span></font><i><font color="black"><span style='white-space: nowrap'>,&nbsp;</span></font></i><font color="blue"><span style='white-space: nowrap'>num_threads</span></font><i><font color="black"><span style='white-space: nowrap'><br>
)</span></font></i></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
Multi-threaded determination of the argument values <small>@(@
x
@)@</small>,
in the interval <small>@(@
[a, b]
@)@</small> (where <small>@(@
a < b
@)@</small>),
such that <small>@(@
f(x) = 0
@)@</small>.

<br>
<br>
<b><big><a name="Thread" id="Thread">Thread</a></big></b>
<br>
It is assumed that this function is called by thread zero,
and all the other threads are blocked (waiting).

<br>
<br>
<b><big><a name="Method" id="Method">Method</a></big></b>
<br>
For <small>@(@
i = 0 , \ldots , n
@)@</small>,
we define the <code><i>i</i></code>-th grid point <small>@(@
g_i
@)@</small> by
<small>@[@

    g_i = a \frac{n - i}{n} +  b \frac{i}{n}

@]@</small>
For <small>@(@
i = 0 , \ldots , n-1
@)@</small>,
we define the <code><i>i</i></code>-th sub-interval of <small>@(@
[a, b]
@)@</small> by
<small>@[@

    I_i = [ g_i , g_{i+1} ]

@]@</small>
Newton's method is applied starting
at the center of each of the sub-intervals <small>@(@
I_i
@)@</small> for
<small>@(@
i = 0 , \ldots , n-1
@)@</small>
and at most one zero is found for each sub-interval.

<br>
<br>
<b><big><a name="ok" id="ok">ok</a></big></b>
<br>
The return value 
<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
If an error occurs, it is false, otherwise it is true.

<br>
<br>
<b><big><a name="xout" id="xout">xout</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>xout</span></font></i></code>
 has the prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xout</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The input size and value of the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>xout</span></font></i></code>
 do not matter.
Upon return from <code><font color="blue">multi_newton</font></code>,
the size of 
<code><i><font color="black"><span style='white-space: nowrap'>xout</span></font></i></code>
 is less than or equal
the number of sub-intervals <small>@(@
n
@)@</small> and
<small>@[@

    | f( xout[i] ) | \leq epsilon

@]@</small>
for each valid index 
<code><font color="blue"><span style='white-space: nowrap'>0</span></font><i><font color="black"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font></i><font color="blue"><span style='white-space: nowrap'>i</span></font><i><font color="black"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font></i><font color="blue"><span style='white-space: nowrap'>xout</span></font><i><font color="black"><span style='white-space: nowrap'>.size()</span></font></i></code>
.
Two <small>@(@
x
@)@</small> solutions are considered equal (and joined as one) if
the absolute difference between the solutions is less than
<small>@(@
(b - a) / n
@)@</small>.

<br>
<br>
<b><big><a name="fun" id="fun">fun</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>fun</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fun</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;(double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;double&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;double&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>df</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
This function must evaluate <small>@(@
f(x)
@)@</small>,
and its derivative <small>@(@
f^{(1)} (x)
@)@</small>,
using the syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fun</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>df</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
where the arguments to 
<code><i><font color="black"><span style='white-space: nowrap'>fun</span></font></i></code>
 have the prototypes

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;double&amp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;double&amp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>df</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
.
The input values of 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>df</span></font></i></code>
 do not matter.
Upon return they are <small>@(@
f(x)
@)@</small> and <small>@(@
f^{(1)} (x)
@)@</small> respectively.

<br>
<br>
<b><big><a name="num_sub" id="num_sub">num_sub</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>num_sub</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>num_sub</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the number of sub-intervals; i.e., <small>@(@
n
@)@</small>.

<br>
<br>
<b><big><a name="xlow" id="xlow">xlow</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>xlow</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xlow</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the lower limit for the entire search interval; i.e., <small>@(@
a
@)@</small>.

<br>
<br>
<b><big><a name="xup" id="xup">xup</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>xup</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xup</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the upper limit for the entire search interval; i.e., <small>@(@
b
@)@</small>.

<br>
<br>
<b><big><a name="epsilon" id="epsilon">epsilon</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the convergence criteria for Newton's method in terms
of how small the function value must be.

<br>
<br>
<b><big><a name="max_itr" id="max_itr">max_itr</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>max_itr</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>max_itr</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the maximum number of iterations of Newton's method to try
before giving up on convergence (on each sub-interval).

<br>
<br>
<b><big><a name="num_threads" id="num_threads">num_threads</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the number of threads that are available for this test.
If it is zero, the test is run without the multi-threading environment.

<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
<font color="#009900">bool</font> <b><font color="#000000">multi_newton_run</font></b><font color="#990000">(</font>
    vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> xout                       <font color="#990000">,</font>
    <font color="#009900">void</font> <b><font color="#000000">fun</font></b><font color="#990000">(</font><font color="#009900">double</font> x<font color="#990000">,</font> <font color="#009900">double</font><font color="#990000">&amp;</font> f<font color="#990000">,</font> <font color="#009900">double</font><font color="#990000">&amp;</font> df<font color="#990000">)</font>  <font color="#990000">,</font>
    <font color="#008080">size_t</font> num_sub                             <font color="#990000">,</font>
    <font color="#009900">double</font> xlow                                <font color="#990000">,</font>
    <font color="#009900">double</font> xup                                 <font color="#990000">,</font>
    <font color="#009900">double</font> epsilon                             <font color="#990000">,</font>
    <font color="#008080">size_t</font> max_itr                             <font color="#990000">,</font>
    <font color="#008080">size_t</font> num_threads                         <font color="#990000">)</font>
<font color="#FF0000">{</font>
    <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    ok     <font color="#990000">&amp;=</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">thread_num</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>

    <i><font color="#9A1900">// setup the work for num_threads threads</font></i>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">multi_newton_setup</font></b><font color="#990000">(</font>
        num_sub<font color="#990000">,</font> xlow<font color="#990000">,</font> xup<font color="#990000">,</font> epsilon<font color="#990000">,</font> max_itr<font color="#990000">,</font> num_threads
    <font color="#990000">);</font>

    <i><font color="#9A1900">// now do the work for each thread</font></i>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> num_threads <font color="#990000">&gt;</font> <font color="#993399">0</font> <font color="#990000">)</font>
        <b><font color="#000000">team_work</font></b><font color="#990000">(</font> multi_newton_worker <font color="#990000">);</font>
    <b><font color="#0000FF">else</font></b>
        <b><font color="#000000">multi_newton_worker</font></b><font color="#990000">();</font>

    <i><font color="#9A1900">// now combine the results for all the threads</font></i>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">multi_newton_takedown</font></b><font color="#990000">(</font>xout<font color="#990000">);</font>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/multi_thread/multi_newton.cpp

</body>
</html>
