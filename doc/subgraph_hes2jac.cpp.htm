<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Sparse Hessian Using Subgraphs and Jacobian: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Sparse Hessian Using Subgraphs and Jacobian: Example and Test">
<meta name="keywords" id="keywords" content=" sparse hessian using subgraphs jacobian: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_subgraph_hes2jac.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="subgraph_jac_rev.cpp.htm" target="_top">Prev</a>
</td><td><a href="optimize.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>sparse_derivative</option>
<option>subgraph_jac_rev</option>
<option>subgraph_hes2jac.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_sparse_derivative_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_subgraph_jac_rev_htm.js'></script>
</td>
<td>subgraph_hes2jac.cpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Sparse Hessian Using Subgraphs and Jacobian: Example and Test</big></big></b></center>
<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<font color="#009900">bool</font> <b><font color="#000000">subgraph_hes2jac</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>NearEqual<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;double&gt;</font>                      a_double<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">)</font>               d_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>a_double<font color="#990000">)</font>             a_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>size_t<font color="#990000">)</font>               s_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font><font color="#009900">bool</font><font color="#990000">)</font>                 b_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">sparse_rcv&lt;s_vector, d_vector&gt;</font>  sparse_matrix<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <font color="#009900">double</font> eps <font color="#990000">=</font> <font color="#993399">10</font><font color="#990000">.</font> <font color="#990000">*</font> CppAD<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// double version of x</font></i>
    <font color="#008080">size_t</font> n <font color="#990000">=</font> <font color="#993399">12</font><font color="#990000">;</font>
    <font color="#008080">d_vector</font> <b><font color="#000000">x</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>j <font color="#990000">+</font> <font color="#993399">2</font><font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// a_double version of x</font></i>
    <font color="#008080">a_vector</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        ax<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font>j<font color="#990000">];</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// declare independent variables and starting recording</font></i>
    CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>ax<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// a_double version of y = f(x) = 5 * x0 * x1 + sum_j xj^3</font></i>
    <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
    <font color="#008080">a_vector</font> <b><font color="#000000">ay</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    ay<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">5.0</font> <font color="#990000">*</font> ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> ax<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
        ay<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> ax<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">*</font> ax<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">*</font> ax<font color="#990000">[</font>j<font color="#990000">];</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// create double version of f: x -&gt; y and stop tape recording</font></i>
    <i><font color="#9A1900">// (without executing zero order forward calculation)</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> f<font color="#990000">;</font>
    f<font color="#990000">.</font><b><font color="#000000">Dependent</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// Optimize this function to reduce future computations.</font></i>
    <i><font color="#9A1900">// Perhaps only one optimization at the end would be faster.</font></i>
    f<font color="#990000">.</font><b><font color="#000000">optimize</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// create a_double version of f</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;a_double, double&gt;</font> af <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">base2ad</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// declare independent variables and start recording g(x) = f'(x)</font></i>
    <b><font color="#000000">Independent</font></b><font color="#990000">(</font>ax<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// Use one reverse mode pass to compute z = f'(x)</font></i>
    <font color="#008080">a_vector</font> <b><font color="#000000">aw</font></b><font color="#990000">(</font>m<font color="#990000">),</font> <b><font color="#000000">az</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    aw<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
    af<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> ax<font color="#990000">);</font>
    az <font color="#990000">=</font> af<font color="#990000">.</font><b><font color="#000000">Reverse</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">,</font> aw<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// create double version of g : x -&gt; f'(x)</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> g<font color="#990000">;</font>
    g<font color="#990000">.</font><b><font color="#000000">Dependent</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> az<font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> g<font color="#990000">.</font><b><font color="#000000">size_random</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// Optimize this function to reduce future computations.</font></i>
    <i><font color="#9A1900">// Perhaps no optimization would be faster.</font></i>
    g<font color="#990000">.</font><b><font color="#000000">optimize</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// compute f''(x) = g'(x)</font></i>
    <font color="#008080">b_vector</font> <b><font color="#000000">select_domain</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">select_range</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
    <font color="#FF0000">{</font>   select_domain<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
        select_range<font color="#990000">[</font>j<font color="#990000">]</font>  <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <font color="#008080">sparse_matrix</font> hessian<font color="#990000">;</font>
    g<font color="#990000">.</font><b><font color="#000000">subgraph_jac_rev</font></b><font color="#990000">(</font>select_domain<font color="#990000">,</font> select_range<font color="#990000">,</font> x<font color="#990000">,</font> hessian<font color="#990000">);</font>
    <i><font color="#9A1900">// -------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// check number of non-zeros in the Hessian</font></i>
    <i><font color="#9A1900">// (only x0 * x1 generates off diagonal terms)</font></i>
    ok <font color="#990000">&amp;=</font> hessian<font color="#990000">.</font><b><font color="#000000">nnz</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">+</font> <font color="#993399">2</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> hessian<font color="#990000">.</font><b><font color="#000000">nnz</font></b><font color="#990000">();</font> <font color="#990000">++</font>k<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> r <font color="#990000">=</font> hessian<font color="#990000">.</font><b><font color="#000000">row</font></b><font color="#990000">()[</font>k<font color="#990000">];</font>
        <font color="#008080">size_t</font> c <font color="#990000">=</font> hessian<font color="#990000">.</font><b><font color="#000000">col</font></b><font color="#990000">()[</font>k<font color="#990000">];</font>
        <font color="#009900">double</font> v <font color="#990000">=</font> hessian<font color="#990000">.</font><b><font color="#000000">val</font></b><font color="#990000">()[</font>k<font color="#990000">];</font>
        <i><font color="#9A1900">//</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> r <font color="#990000">==</font> c <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// a diagonal element</font></i>
            <font color="#009900">double</font> check <font color="#990000">=</font> <font color="#993399">6.0</font> <font color="#990000">*</font> x<font color="#990000">[</font>r<font color="#990000">];</font>
            ok          <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>v<font color="#990000">,</font> check<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">else</font></b>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// off diagonal element</font></i>
            ok   <font color="#990000">&amp;=</font> <font color="#990000">(</font>r <font color="#990000">==</font> <font color="#993399">0</font> <font color="#990000">&amp;&amp;</font> c <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">||</font> <font color="#990000">(</font>r <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">&amp;&amp;</font> c <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">);</font>
            <font color="#009900">double</font> check <font color="#990000">=</font> <font color="#993399">5.0</font><font color="#990000">;</font>
            ok          <font color="#990000">&amp;=</font> <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>v<font color="#990000">,</font> check<font color="#990000">,</font> eps<font color="#990000">,</font> eps<font color="#990000">);</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    ok <font color="#990000">&amp;=</font> g<font color="#990000">.</font><b><font color="#000000">size_random</font></b><font color="#990000">()</font> <font color="#990000">&gt;</font> <font color="#993399">0</font><font color="#990000">;</font>
    g<font color="#990000">.</font><b><font color="#000000">clear_subgraph</font></b><font color="#990000">();</font>
    ok <font color="#990000">&amp;=</font> g<font color="#990000">.</font><b><font color="#000000">size_random</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/sparse/subgraph_hes2jac.cpp

</body>
</html>
