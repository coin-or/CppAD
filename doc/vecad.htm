<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>AD Vectors that Record Index Operations</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="AD Vectors that Record Index Operations">
<meta name="keywords" id="keywords" content=" ad vectors that record index operations syntax purpose alternatives efficiency vecad&lt;base&gt;::reference exceptions constructor vec n size base indexing i ind result right left example base2ad speed memory ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_vecad_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="equal_op_seq.cpp.htm" target="_top">Prev</a>
</td><td><a href="vec_ad.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>VecAD</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_ad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_vecad_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Alternatives</option>
<option>Efficiency</option>
<option>VecAD&lt;Base&gt;::reference</option>
<option>---..Exceptions</option>
<option>Constructor</option>
<option>---..vec</option>
<option>---..n</option>
<option>size</option>
<option>Base Indexing</option>
<option>---..i</option>
<option>---..base</option>
<option>AD Indexing</option>
<option>---..ind</option>
<option>---..result</option>
<option>---..right</option>
<option>---..left</option>
<option>Example</option>
<option>base2ad</option>
<option>Speed and Memory</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>AD Vectors that Record Index Operations</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>VecAD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>

<code><span style='white-space: nowrap'><br>
</span></code>
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()</span></font></code>

<code><span style='white-space: nowrap'><br>
</span></code>
<code><i><font color="black"><span style='white-space: nowrap'>base</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>

<code><span style='white-space: nowrap'><br>
</span></code>
<code><i><font color="black"><span style='white-space: nowrap'>abase</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;&nbsp;&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
If either 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 or 
<code><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i></code>
 is a
<a href="glossary.htm#Variable" target="_top"><span style='white-space: nowrap'>variable</span></a>
 or
<a href="glossary.htm#Parameter.Dynamic" target="_top"><span style='white-space: nowrap'>dynamic&nbsp;parameter</span></a>
,
the indexing operation

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
is recorded in the corresponding 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>

<a href="glossary.htm#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&nbsp;sequence</span></a>
 and
included in the corresponding <a href="adfun.htm" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.
Such an index can change each time
zero order <a href="forward.htm" target="_top"><span style='white-space: nowrap'>f.Forward</span></a>
 is used; i.e.,
each time 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 is evaluated with new value for the
<a href="glossary.htm#Tape.Independent Variable" target="_top"><span style='white-space: nowrap'>independent&nbsp;variables</span></a>
.
Note that the value of 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>

depends on the value of 
<code><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i></code>

in a discrete fashion and CppAD computes its partial derivative with
respect to 
<code><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i></code>
 as zero.

<br>
<br>
<b><big><a name="Alternatives" id="Alternatives">Alternatives</a></big></b>
<br>
If only the values in 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
,
and not the indices 
<code><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i></code>
,
depend on the independent variables,
a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 with elements of type 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>

would be more efficient than using 
<code><font color="blue"><span style='white-space: nowrap'>VecAD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
.
If only the indices, and not the values in the vector,
depend on the independent variables,
a <a href="discrete.htm" target="_top"><span style='white-space: nowrap'>Discrete</span></a>
 functions would be a much more efficient.

<br>
<br>
<b><big><a name="Efficiency" id="Efficiency">Efficiency</a></big></b>
<br>
If one uses <code><font color="blue">VecAD</font></code> vector where one could use a simple vector,
the <a href="sparsity_pattern.htm" target="_top"><span style='white-space: nowrap'>sparsity_pattern</span></a>
 will be less efficient
because the dependence on different elements cannot be separated.
In addition, <code><font color="blue">VecAD</font></code> objects that only depend on dynamic parameters
are treated as if they were variables making sparsity patterns
even less efficient (have more possibly non-zero values than necessary);
see <a href="wish_list.htm#Dynamic Parameters.VecAD Vectors" target="_top"><span style='white-space: nowrap'>VecAD&nbsp;vectors</span></a>

under dynamic parameters in the wish list.

<br>
<br>
<b><big><a name="VecAD&lt;Base&gt;::reference" id="VecAD&lt;Base&gt;::reference">VecAD&lt;Base&gt;::reference</a></big></b>
<br>
The expression 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;VecAD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;::reference&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
which is like the 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 type
with some notable exceptions:

<br>
<br>
<big><a name="VecAD&lt;Base&gt;::reference.Exceptions" id="VecAD&lt;Base&gt;::reference.Exceptions">Exceptions</a></big>


<ol type="1"><li>
This object cannot be used with the
<a href="value.htm" target="_top"><span style='white-space: nowrap'>Value</span></a>
 function to compute the corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 value.
In some cases, the syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
can be used to obtain the corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 value; see below.

</li><li>

This object cannot be used as the left hand side in a
with a <a href="compound_assign.htm" target="_top"><span style='white-space: nowrap'>compound&nbsp;assignment</span></a>
; i.e.,
<code><font color="blue">+=</font></code>,
<code><font color="blue">-=</font></code>,
<code><font color="blue">*=</font></code>, or
<code><font color="blue">/=</font></code>.
For example, the following syntax is not valid:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;+=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>z</span></font></i><font color="blue"><span style='white-space: nowrap'>;<br>
</span></font></code>
no matter what the types of 
<code><i><font color="black"><span style='white-space: nowrap'>z</span></font></i></code>
.

</li><li>

Assignment to 
<code><font color="blue"><span style='white-space: nowrap'>vec</span></font><i><font color="black"><span style='white-space: nowrap'>[</span></font></i><font color="blue"><span style='white-space: nowrap'>ind</span></font><i><font color="black"><span style='white-space: nowrap'>]</span></font></i></code>
 returns a <code><font color="blue">void</font></code>.
For example, the following syntax is not valid:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>z</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>u</span></font></i><font color="blue"><span style='white-space: nowrap'>;<br>
</span></font></code>
no matter what the types of 
<code><i><font color="black"><span style='white-space: nowrap'>z</span></font></i></code>
, and 
<code><i><font color="black"><span style='white-space: nowrap'>u</span></font></i></code>
.

</li><li>

A 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 object cannot appear in a <a href="condexp.htm" target="_top"><span style='white-space: nowrap'>CondExp</span></a>
;
For example, the following syntax is not valid:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;CondExpGt(</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i><font color="blue"><span style='white-space: nowrap'>],&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>u</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>v</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>w</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
no matter what the types of 
<code><i><font color="black"><span style='white-space: nowrap'>u</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>v</span></font></i></code>
, and 
<code><i><font color="black"><span style='white-space: nowrap'>w</span></font></i></code>
.

</li><li>

A 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 object should not be used with the
<code><font color="blue">Constant</font></code>, <code><font color="blue">Dynamic</font></code>, <code><font color="blue">Parameter</font></code>, and <code><font color="blue">Variable</font></code>
functions (see <a href="con_dyn_var.htm" target="_top"><span style='white-space: nowrap'>con_dyn_var</span></a>
).
The entire vector 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 should be used instead.

</li><li>

A <code><font color="blue">VecAD</font></code> vector
cannot be passed to <code><font color="blue">Independent</font></code> function.

</li></ol>


<br>
<br>
<b><big><a name="Constructor" id="Constructor">Constructor</a></big></b>


<br>
<br>
<big><a name="Constructor.vec" id="Constructor.vec">vec</a></big>
<br>
The syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;VecAD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
creates an <code><font color="blue">VecAD</font></code> object 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 with

<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 elements.
The initial value of the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 is unspecified.

<br>
<br>
<big><a name="Constructor.n" id="Constructor.n">n</a></big>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="size" id="size">size</a></big></b>
<br>
The syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()<br>
</span></font></code>
returns the number of elements in the vector 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
;
i.e., the value of 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 when it was constructed.

<br>
<br>
<b><big><a name="Base Indexing" id="Base Indexing">Base Indexing</a></big></b>
<br>
We refer to the syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>base</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
as base indexing of a <code><font color="blue">VecAD</font></code> object.
This indexing is only valid if the vector 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 is a
<a href="con_dyn_var.htm#Constant" target="_top"><span style='white-space: nowrap'>constant</span></a>
; i.e.,
it does not depend on the independent variables.

<br>
<br>
<big><a name="Base Indexing.i" id="Base Indexing.i">i</a></big>
<br>
The operand 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and must be less than 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
; i.e., less than
the number of elements in 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
.

<br>
<br>
<big><a name="Base Indexing.base" id="Base Indexing.base">base</a></big>
<br>
The result 
<code><i><font color="black"><span style='white-space: nowrap'>base</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>base</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
i.e., it is a reference to the <code><i>i</i></code>-th element in the vector 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
.
It can be used to change the element value;
for example,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>b</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
is valid where 
<code><i><font color="black"><span style='white-space: nowrap'>b</span></font></i></code>
 is a 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 object.
The reference 
<code><i><font color="black"><span style='white-space: nowrap'>base</span></font></i></code>
 is no longer valid once the

<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
 changes in any way; i.e., has another assignment.

<br>
<br>
<b><big><a name="AD Indexing" id="AD Indexing">AD Indexing</a></big></b>
<br>
We refer to the syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
as AD indexing of a <code><font color="blue">VecAD</font></code> object.

<br>
<br>
<big><a name="AD Indexing.ind" id="AD Indexing.ind">ind</a></big>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The value of 
<code><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i></code>
 must be greater than or equal zero
and less than 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
; i.e., less than
the number of elements in 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
.

<br>
<br>
<big><a name="AD Indexing.result" id="AD Indexing.result">result</a></big>
<br>
The resulting expression has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;VecAD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;::reference&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
This objects operations are recorded as part of the 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>

<a href="glossary.htm#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&nbsp;sequence</span></a>
.
It acts like a reference to the
element with index 
<code><font color="blue"><span style='white-space: nowrap'>floor(</span></font><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
 in the vector 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
;
(
<code><font color="blue"><span style='white-space: nowrap'>floor(</span></font><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
 is
the greatest integer less than or equal 
<code><i><font color="black"><span style='white-space: nowrap'>ind</span></font></i></code>
).

<br>
<br>
<big><a name="AD Indexing.right" id="AD Indexing.right">right</a></big>
<br>
Is the right hand side of the assignment statement
and specifies the new value for the corresponding element of 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
.
It has one of the following prototypes:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&amp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;VecAD_reverence&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<big><a name="AD Indexing.left" id="AD Indexing.left">left</a></big>
<br>
Is the left hand side of the assignment statement
is the current value for the corresponding element of 
<code><i><font color="black"><span style='white-space: nowrap'>vec</span></font></i></code>
.
It has the following prototype:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
The file
<a href="vec_ad.cpp.htm" target="_top"><span style='white-space: nowrap'>vec_ad.cpp</span></a>

contains an example and test using <code><font color="blue">VecAD</font></code> vectors.

<br>
<br>
<b><big><a name="base2ad" id="base2ad">base2ad</a></big></b>
<br>
Forward mode on a <code><font color="blue">base2ad</font></code> function does not preserve
<a href="vecad.htm" target="_top"><span style='white-space: nowrap'>VecAD</span></a>
 operations (which might be expected); see the
<a href="base2vec_ad.cpp.htm" target="_top"><span style='white-space: nowrap'>base2vec_ad.cpp</span></a>
 example.


<br>
<br>
<b><big><a name="Speed and Memory" id="Speed and Memory">Speed and Memory</a></big></b>
<br>
The <a href="vecad.htm" target="_top"><span style='white-space: nowrap'>VecAD</span></a>
 vector type is inefficient because every
time an element of a vector is accessed, a new CppAD
<a href="glossary.htm#Variable" target="_top"><span style='white-space: nowrap'>variable</span></a>
 is created on the tape
using either the <code><font color="blue">Ldp</font></code> or <code><font color="blue">Ldv</font></code> operation
(unless all of the elements of the vector are
<a href="glossary.htm#Parameter" target="_top"><span style='white-space: nowrap'>parameters</span></a>
).
The effect of this can be seen by executing the following steps:

<ol type="1"><li>
In the file <code><font color="blue">cppad/local/forward1sweep.h</font></code>,
change the definition of <code><font color="blue">CPPAD_FORWARD1SWEEP_TRACE</font></code> to
<code><font color='blue'><pre style='display:inline'> 
    # define CPPAD_FORWARD1SWEEP_TRACE 1
</pre></font></code>
</li><li>
In the <code><font color="blue">Example</font></code> directory, execute the command
<code><font color='blue'><pre style='display:inline'> 
    ./test_one.sh lu_vec_ad_ok.cpp lu_vec_ad.cpp -DNDEBUG &gt; lu_vec_ad_ok.log
</pre></font></code>
This will write a trace of all the forward tape operations,
for the test case <a href="lu_vec_ad_ok.cpp.htm" target="_top"><span style='white-space: nowrap'>lu_vec_ad_ok.cpp</span></a>
,
to the file <code><font color="blue">lu_vec_ad_ok.log</font></code>.
</li><li>

In the <code><font color="blue">Example</font></code> directory execute the commands
<code><font color='blue'><pre style='display:inline'> 
    grep &quot;op=&quot;           lu_vec_ad_ok.log | wc -l
    grep &quot;op=Ld[vp]&quot;     lu_vec_ad_ok.log | wc -l
    grep &quot;op=St[vp][vp]&quot; lu_vec_ad_ok.log | wc -l
</pre></font></code>
The first command counts the number of operators in the tracing,
the second counts the number of VecAD load operations,
and the third counts the number of VecAD store operations.
(For CppAD version 05-11-20 these counts were 956, 348, and 118
respectively.)
</li></ol>



<hr>Input File: include/cppad/core/vec_ad/user.omh

</body>
</html>
