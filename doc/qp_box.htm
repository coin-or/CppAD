<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>abs_normal: Solve a Quadratic Program With Box Constraints</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="abs_normal: Solve a Quadratic Program With Box Constraints">
<meta name="keywords" id="keywords" content=" abs_normal: solve quadratic program with box constraints syntax prototype source purpose problem vector level b c g epsilon maxitr xin xout ok kkt conditions example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_qp_box_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="qp_interior.hpp.htm" target="_top">Prev</a>
</td><td><a href="qp_box.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>other_adfun</option>
<option>abs_normal_fun</option>
<option>example_abs_normal</option>
<option>qp_box</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_other_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_abs_normal_fun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_example_abs_normal_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_qp_box_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Prototype</option>
<option>Source</option>
<option>Purpose</option>
<option>Problem</option>
<option>Vector</option>
<option>level</option>
<option>a</option>
<option>b</option>
<option>c</option>
<option>C</option>
<option>g</option>
<option>G</option>
<option>epsilon</option>
<option>maxitr</option>
<option>xin</option>
<option>xout</option>
<option>ok</option>
<option>KKT Conditions</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>abs_normal: Solve a Quadratic Program With Box Constraints</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;qp_box(<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>level</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>b</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>c</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>C</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>g</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>G</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>maxitr</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xin</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xout</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
)</span></font></code>


<br>
<br>
<b><big><a name="Prototype" id="Prototype">Prototype</a></big></b>

<pre><tt>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Vector</font><font color="#990000">&gt;</font>
<font color="#009900">bool</font> <b><font color="#000000">qp_box</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font>        level   <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> a       <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> b       <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> c       <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> C       <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> g       <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> G       <font color="#990000">,</font>
    <font color="#009900">double</font>        epsilon <font color="#990000">,</font>
    <font color="#008080">size_t</font>        maxitr  <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> Vector<font color="#990000">&amp;</font> xin     <font color="#990000">,</font>
    Vector<font color="#990000">&amp;</font>       xout    <font color="#990000">)</font></tt></pre>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>
<br>
This following is a link to the source code for this example:
<a href="qp_box.hpp.htm" target="_top"><span style='white-space: nowrap'>qp_box.hpp</span></a>
.

<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This routine could be used to create a version of <a href="abs_min_linear.htm" target="_top"><span style='white-space: nowrap'>abs_min_linear</span></a>

that solved quadratic programs (instead of linear programs).

<br>
<br>
<b><big><a name="Problem" id="Problem">Problem</a></big></b>
<br>
We are given
<small>@(@
a \in \B{R}^n
@)@</small>,
<small>@(@
b \in \B{R}^n
@)@</small>,
<small>@(@
c \in \B{R}^m
@)@</small>,
<small>@(@
C \in \B{R}^{m \times n}
@)@</small>,
<small>@(@
g \in \B{R}^n
@)@</small>,
<small>@(@
G \in \B{R}^{n \times n}
@)@</small>,
where <small>@(@
G
@)@</small> is positive semi-definite.
This routine solves the problem
<small>@[@

\begin{array}{rl}
\R{minimize} &
\frac{1}{2} x^T G x + g^T x \; \R{w.r.t} \; x \in \B{R}^n
\\
\R{subject \; to} & C x + c \leq 0 \; \R{and} \; a \leq x \leq b
\end{array}

@]@</small>
The matrix <small>@(@
G + C^T C
@)@</small> must be positive definite on components
of the vector <small>@(@
x
@)@</small> where the lower limit minus infinity
and the upper limit is plus infinity; see 
<code><i><font color="black"><span style='white-space: nowrap'>a</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>b</span></font></i></code>
 below.

<br>
<br>
<b><big><a name="Vector" id="Vector">Vector</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i></code>
 is a
simple vector with elements of type <code><font color="blue">double</font></code>.

<br>
<br>
<b><big><a name="level" id="level">level</a></big></b>
<br>
This value is less that or equal two.
If 
<code><i><font color="black"><span style='white-space: nowrap'>level</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;==&nbsp;0</span></font></code>
,
no tracing is printed.
If 
<code><i><font color="black"><span style='white-space: nowrap'>level</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;=&nbsp;1</span></font></code>
,
a trace of the <code><font color="blue">qp_box</font></code> operations is printed.
If 
<code><i><font color="black"><span style='white-space: nowrap'>level</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;==&nbsp;2</span></font></code>
,
a trace of the <a href="qp_interior.htm" target="_top"><span style='white-space: nowrap'>qp_interior</span></a>
 sub-problem is printed.

<br>
<br>
<b><big><a name="a" id="a">a</a></big></b>
<br>
This is the vector of lower limits for <small>@(@
x
@)@</small> in the problem.
If 
<code><i><font color="black"><span style='white-space: nowrap'>a</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 is minus infinity, there is no lower limit
for <small>@(@
x_j
@)@</small>.

<br>
<br>
<b><big><a name="b" id="b">b</a></big></b>
<br>
This is the vector of upper limits for <small>@(@
x
@)@</small> in the problem.
If 
<code><i><font color="black"><span style='white-space: nowrap'>a</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 is plus infinity, there is no upper limit
for <small>@(@
x_j
@)@</small>.

<br>
<br>
<b><big><a name="c" id="c">c</a></big></b>
<br>
This is the value of the inequality constraint function at <small>@(@
x = 0
@)@</small>.

<br>
<br>
<b><big><a name="C" id="C">C</a></big></b>
<br>
This is a <a href="glossary.htm#Row-major Representation" target="_top"><span style='white-space: nowrap'>row-major</span></a>
 representation
of thee the inequality constraint matrix <small>@(@
C
@)@</small>.

<br>
<br>
<b><big><a name="g" id="g">g</a></big></b>
<br>
This is the gradient of the objective function.

<br>
<br>
<b><big><a name="G" id="G">G</a></big></b>
<br>
This is a row-major representation of the Hessian of the objective function.
For <small>@(@
j = 0 , \ldots , n-1
@)@</small>,
<small>@(@
- \infty < a_j
@)@</small> or
<small>@(@
b_j < + \infty
@)@</small> or
<small>@(@
G_{j,j} > 0.0
@)@</small>.

<br>
<br>
<b><big><a name="epsilon" id="epsilon">epsilon</a></big></b>
<br>
This argument is the convergence criteria;
see <a href="qp_box.htm#KKT Conditions" target="_top"><span style='white-space: nowrap'>KKT&nbsp;conditions</span></a>
 below.
It must be greater than zero.

<br>
<br>
<b><big><a name="maxitr" id="maxitr">maxitr</a></big></b>
<br>
This is the maximum number of
<a href="qp_interior.htm" target="_top"><span style='white-space: nowrap'>qp_interior</span></a>
 iterations to try before giving up
on convergence.

<br>
<br>
<b><big><a name="xin" id="xin">xin</a></big></b>
<br>
This argument has size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 and is the initial point for the algorithm.
It must strictly satisfy the constraints; i.e.,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xin</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xin</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>b</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>C</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xin</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;-&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>c</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;0<br>
</span></font></code>
<br>
<b><big><a name="xout" id="xout">xout</a></big></b>
<br>
This argument has size is 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 and
the input value of its elements does no matter.
Upon return it is the primal variables
<small>@(@
x
@)@</small> corresponding to the problem solution.

<br>
<br>
<b><big><a name="ok" id="ok">ok</a></big></b>
<br>
If the return value 
<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i></code>
 is true, convergence is obtained; i.e.,
<small>@[@

    | F ( x , y_a, s_a, y_b, s_b, y_c, s_c ) |_\infty < \varepsilon

@]@</small>
where <small>@(@
|v|_\infty
@)@</small> is the infinity norm of the vector <small>@(@
v
@)@</small>,
<small>@(@
\varepsilon
@)@</small> is 
<code><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i></code>
,
<small>@(@
x
@)@</small> is equal to 
<code><i><font color="black"><span style='white-space: nowrap'>xout</span></font></i></code>
,
<small>@(@
y_a, s_a \in \B{R}_+^n
@)@</small>,
<small>@(@
y_b, s_b \in \B{R}_+^n
@)@</small> and
<small>@(@
y_c, s_c \in \B{R}_+^m
@)@</small>.

<br>
<br>
<b><big><a name="KKT Conditions" id="KKT Conditions">KKT Conditions</a></big></b>
<br>
Give a vector <small>@(@
v \in \B{R}^m
@)@</small> we define
<small>@(@
D(v) \in \B{R}^{m \times m}
@)@</small> as the corresponding diagonal matrix.
We also define <small>@(@
1_m \in \B{R}^m
@)@</small> as the vector of ones.
We define
<small>@[@

F ( x , y_a, s_a, y_b, s_b, y_c, s_c )
=
\left(
\begin{array}{c}
g + G x - y_a + y_b + y_c^T C         \\
a + s_a - x                           \\
x + s_b - b                           \\
C x + c + s_c                         \\
D(s_a) D(y_a) 1_m                     \\
D(s_b) D(y_b) 1_m                     \\
D(s_c) D(y_c) 1_m
\end{array}
\right)

@]@</small>
where
<small>@(@
x \in \B{R}^n
@)@</small>,
<small>@(@
y_a, s_a \in \B{R}_+^n
@)@</small>,
<small>@(@
y_b, s_b \in \B{R}_+^n
@)@</small> and
<small>@(@
y_c, s_c \in \B{R}_+^m
@)@</small>.
The KKT conditions for a solution of this problem is
<small>@[@

    F ( x , y_a, s_a, y_b, s_b, y_c, s_c ) = 0

@]@</small>


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="qp_box.cpp.htm" target="_top"><span style='white-space: nowrap'>qp_box.cpp</span></a>
 contains an example and test of
<code><font color="blue">qp_box</font></code>.


<hr>Input File: example/abs_normal/qp_box.hpp

</body>
</html>
