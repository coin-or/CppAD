<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Matrix Multiply as an Atomic Operation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Matrix Multiply as an Atomic Operation">
<meta name="keywords" id="keywords" content=" matrix multiply atomic operation see also purpose parameter_x type_x dimensions left right result start class definition constructor operand element index forward reverse for_type jac_sparsity hes_sparsity rev_depend end ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_three_mat_mul.hpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_three_mat_mul.cpp.htm" target="_top">Prev</a>
</td><td><a href="chkpoint_two.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_three</option>
<option>atomic_three_example</option>
<option>atomic_three_mat_mul.cpp</option>
<option>atomic_three_mat_mul.hpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_three_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_three_example_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_three_mat_mul.cpp_htm.js'></script>
</td>
<td>atomic_three_mat_mul.hpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>See Also</option>
<option>Purpose</option>
<option>---..parameter_x</option>
<option>---..type_x</option>
<option>Matrix Dimensions</option>
<option>Left Matrix</option>
<option>Right Matrix</option>
<option>Result Matrix</option>
<option>Start Class Definition</option>
<option>Constructor</option>
<option>Left Operand Element Index</option>
<option>Right Operand Element Index</option>
<option>Result Element Index</option>
<option>Forward Matrix Multiply</option>
<option>Reverse Matrix Multiply</option>
<option>for_type</option>
<option>forward</option>
<option>reverse</option>
<option>jac_sparsity</option>
<option>hes_sparsity</option>
<option>rev_depend</option>
<option>End Class Definition</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Matrix Multiply as an Atomic Operation</big></big></b></center>
<br>
<b><big><a name="See Also" id="See Also">See Also</a></big></b>

<br>
<a href="atomic_two_eigen_mat_mul.hpp.htm" target="_top"><span style='white-space: nowrap'>atomic_two_eigen_mat_mul.hpp</span></a>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
Use scalar <code><font color="blue">double</font></code> operations in an <a href="atomic_three.htm" target="_top"><span style='white-space: nowrap'>atomic_three</span></a>
 operation
that computes the matrix product for <code><font color="blue">AD&lt;double</font></code> operations.

<br>
<br>
<big><a name="Purpose.parameter_x" id="Purpose.parameter_x">parameter_x</a></big>
<br>
This example demonstrates the use of the
<a href="atomic_three_define.htm#parameter_x" target="_top"><span style='white-space: nowrap'>parameter_x</span></a>

argument to the <a href="atomic_three.htm" target="_top"><span style='white-space: nowrap'>atomic_three</span></a>
 virtual functions.

<br>
<br>
<big><a name="Purpose.type_x" id="Purpose.type_x">type_x</a></big>
<br>
This example also demonstrates the use of the
<a href="atomic_three_define.htm#type_x" target="_top"><span style='white-space: nowrap'>type_x</span></a>

argument to the <a href="atomic_three.htm" target="_top"><span style='white-space: nowrap'>atomic_three</span></a>
 virtual functions.

<br>
<br>
<b><big><a name="Matrix Dimensions" id="Matrix Dimensions">Matrix Dimensions</a></big></b>
<br>
The first three components of the argument vector 
<code><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i></code>

in the call 
<code><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>

are parameters and contain the matrix dimensions.
This enables them to be different for each use of the same atomic
function 
<code><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i></code>
.
These dimensions are:
<table><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>[0]</span></font></code>
  <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>
    </td><td align='left'  valign='top'>
 
<code><i><font color="black"><span style='white-space: nowrap'>nr_left</span></font></i></code>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>
    </td><td align='left'  valign='top'>
 number of rows in the left matrix and result matrix
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>[1]</span></font></code>
  <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>
    </td><td align='left'  valign='top'>
 
<code><i><font color="black"><span style='white-space: nowrap'>n_middle</span></font></i></code>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>
    </td><td align='left'  valign='top'>
 columns in the left matrix and rows in right matrix
</td></tr><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>[2]</span></font></code>
  <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>
    </td><td align='left'  valign='top'>
 
<code><i><font color="black"><span style='white-space: nowrap'>nc_right</span></font></i></code>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code>
    </td><td align='left'  valign='top'>
 number of columns in the right matrix and result matrix
</td></tr>
</table>
<br>
<b><big><a name="Left Matrix" id="Left Matrix">Left Matrix</a></big></b>
<br>
The number of elements in the left matrix is

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_left</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nr_left</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_middle</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The elements are in

<code><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>[3]</span></font></code>
 through 
<code><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>[2+</span></font><i><font color="black"><span style='white-space: nowrap'>n_left</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 in row major order.

<br>
<br>
<b><big><a name="Right Matrix" id="Right Matrix">Right Matrix</a></big></b>
<br>
The number of elements in the right matrix is

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_right</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_middle</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nc_right</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The elements are in

<code><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>[3+</span></font><i><font color="black"><span style='white-space: nowrap'>n_left</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 through

<code><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>[2+</span></font><i><font color="black"><span style='white-space: nowrap'>n_left</span></font></i><font color="blue"><span style='white-space: nowrap'>+</span></font><i><font color="black"><span style='white-space: nowrap'>n_right</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 in row major order.

<br>
<br>
<b><big><a name="Result Matrix" id="Result Matrix">Result Matrix</a></big></b>
<br>
The number of elements in the result matrix is

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nr_left</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nc_right</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The elements are in

<code><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>[0]</span></font></code>
 through 
<code><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i><font color="blue"><span style='white-space: nowrap'>-1]</span></font></code>
 in row major order.

<br>
<br>
<b><big><a name="Start Class Definition" id="Start Class Definition">Start Class Definition</a></big></b>

<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font> <i><font color="#9A1900">// Begin empty namespace</font></i>
<b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">;</font>
<i><font color="#9A1900">//</font></i>
<i><font color="#9A1900">// matrix result = left * right</font></i>
<b><font color="#0000FF">class</font></b> <font color="#008080">atomic_mat_mul</font> <font color="#990000">:</font> <b><font color="#0000FF">public</font></b> CppAD<font color="#990000">::</font>atomic_three<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#FF0000">{</font></tt></pre>
<br>
<b><big><a name="Constructor" id="Constructor">Constructor</a></big></b>

<pre><tt><b><font color="#0000FF">public</font></b><font color="#990000">:</font>
    <i><font color="#9A1900">// ---------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// constructor</font></i>
    <b><font color="#000000">atomic_mat_mul</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font> <font color="#990000">:</font> CppAD<font color="#990000">::</font>atomic_three<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;(</font><font color="#FF0000">"mat_mul"</font><font color="#990000">)</font>
    <font color="#FF0000">{</font> <font color="#FF0000">}</font>
<b><font color="#0000FF">private</font></b><font color="#990000">:</font></tt></pre>
<br>
<b><big><a name="Left Operand Element Index" id="Left Operand Element Index">Left Operand Element Index</a></big></b>
<br>
Index in the Taylor coefficient matrix 
<code><i><font color="black"><span style='white-space: nowrap'>tx</span></font></i></code>
 of a left matrix element.
<pre><tt>    <font color="#008080">size_t</font> <b><font color="#000000">left</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font> i        <font color="#990000">,</font> <i><font color="#9A1900">// left matrix row index</font></i>
        <font color="#008080">size_t</font> j        <font color="#990000">,</font> <i><font color="#9A1900">// left matrix column index</font></i>
        <font color="#008080">size_t</font> k        <font color="#990000">,</font> <i><font color="#9A1900">// Taylor coeffocient order</font></i>
        <font color="#008080">size_t</font> nk       <font color="#990000">,</font> <i><font color="#9A1900">// number of Taylor coefficients in tx</font></i>
        <font color="#008080">size_t</font> nr_left  <font color="#990000">,</font> <i><font color="#9A1900">// rows in left matrix</font></i>
        <font color="#008080">size_t</font> n_middle <font color="#990000">,</font> <i><font color="#9A1900">// rows in left and columns in right</font></i>
        <font color="#008080">size_t</font> nc_right <font color="#990000">)</font> <i><font color="#9A1900">// columns in right matrix</font></i>
    <font color="#FF0000">{</font>   <b><font color="#000000">assert</font></b><font color="#990000">(</font> i <font color="#990000">&lt;</font> nr_left <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> j <font color="#990000">&lt;</font> n_middle <font color="#990000">);</font>
        <b><font color="#0000FF">return</font></b> <font color="#990000">(</font><font color="#993399">3</font> <font color="#990000">+</font> i <font color="#990000">*</font> n_middle <font color="#990000">+</font> j<font color="#990000">)</font> <font color="#990000">*</font> nk <font color="#990000">+</font> k<font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="Right Operand Element Index" id="Right Operand Element Index">Right Operand Element Index</a></big></b>
<br>
Index in the Taylor coefficient matrix 
<code><i><font color="black"><span style='white-space: nowrap'>tx</span></font></i></code>
 of a right matrix element.
<pre><tt>    <font color="#008080">size_t</font> <b><font color="#000000">right</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font> i        <font color="#990000">,</font> <i><font color="#9A1900">// right matrix row index</font></i>
        <font color="#008080">size_t</font> j        <font color="#990000">,</font> <i><font color="#9A1900">// right matrix column index</font></i>
        <font color="#008080">size_t</font> k        <font color="#990000">,</font> <i><font color="#9A1900">// Taylor coeffocient order</font></i>
        <font color="#008080">size_t</font> nk       <font color="#990000">,</font> <i><font color="#9A1900">// number of Taylor coefficients in tx</font></i>
        <font color="#008080">size_t</font> nr_left  <font color="#990000">,</font> <i><font color="#9A1900">// rows in left matrix</font></i>
        <font color="#008080">size_t</font> n_middle <font color="#990000">,</font> <i><font color="#9A1900">// rows in left and columns in right</font></i>
        <font color="#008080">size_t</font> nc_right <font color="#990000">)</font> <i><font color="#9A1900">// columns in right matrix</font></i>
    <font color="#FF0000">{</font>   <b><font color="#000000">assert</font></b><font color="#990000">(</font> i <font color="#990000">&lt;</font> n_middle <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> j <font color="#990000">&lt;</font> nc_right <font color="#990000">);</font>
        <font color="#008080">size_t</font> offset <font color="#990000">=</font> <font color="#993399">3</font> <font color="#990000">+</font> nr_left <font color="#990000">*</font> n_middle<font color="#990000">;</font>
        <b><font color="#0000FF">return</font></b> <font color="#990000">(</font>offset <font color="#990000">+</font> i <font color="#990000">*</font> nc_right <font color="#990000">+</font> j<font color="#990000">)</font> <font color="#990000">*</font> nk <font color="#990000">+</font> k<font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="Result Element Index" id="Result Element Index">Result Element Index</a></big></b>
<br>
Index in the Taylor coefficient matrix 
<code><i><font color="black"><span style='white-space: nowrap'>ty</span></font></i></code>
 of a result matrix element.
<pre><tt>    <font color="#008080">size_t</font> <b><font color="#000000">result</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font> i        <font color="#990000">,</font> <i><font color="#9A1900">// result matrix row index</font></i>
        <font color="#008080">size_t</font> j        <font color="#990000">,</font> <i><font color="#9A1900">// result matrix column index</font></i>
        <font color="#008080">size_t</font> k        <font color="#990000">,</font> <i><font color="#9A1900">// Taylor coeffocient order</font></i>
        <font color="#008080">size_t</font> nk       <font color="#990000">,</font> <i><font color="#9A1900">// number of Taylor coefficients in ty</font></i>
        <font color="#008080">size_t</font> nr_left  <font color="#990000">,</font> <i><font color="#9A1900">// rows in left matrix</font></i>
        <font color="#008080">size_t</font> n_middle <font color="#990000">,</font> <i><font color="#9A1900">// rows in left and columns in right</font></i>
        <font color="#008080">size_t</font> nc_right <font color="#990000">)</font> <i><font color="#9A1900">// columns in right matrix</font></i>
    <font color="#FF0000">{</font>   <b><font color="#000000">assert</font></b><font color="#990000">(</font> i <font color="#990000">&lt;</font> nr_left  <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> j <font color="#990000">&lt;</font> nc_right <font color="#990000">);</font>
        <b><font color="#0000FF">return</font></b> <font color="#990000">(</font>i <font color="#990000">*</font> nc_right <font color="#990000">+</font> j<font color="#990000">)</font> <font color="#990000">*</font> nk <font color="#990000">+</font> k<font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="Forward Matrix Multiply" id="Forward Matrix Multiply">Forward Matrix Multiply</a></big></b>
<br>
Forward mode multiply Taylor coefficients in 
<code><i><font color="black"><span style='white-space: nowrap'>tx</span></font></i></code>
 and sum into

<code><i><font color="black"><span style='white-space: nowrap'>ty</span></font></i></code>
 (for one pair of left and right orders)
<pre><tt>    <font color="#009900">void</font> <b><font color="#000000">forward_multiply</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font>                 k_left   <font color="#990000">,</font> <i><font color="#9A1900">// order for left coefficients</font></i>
        <font color="#008080">size_t</font>                 k_right  <font color="#990000">,</font> <i><font color="#9A1900">// order for right coefficients</font></i>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>  tx       <font color="#990000">,</font> <i><font color="#9A1900">// domain space Taylor coefficients</font></i>
              vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>  ty       <font color="#990000">,</font> <i><font color="#9A1900">// range space Taylor coefficients</font></i>
        <font color="#008080">size_t</font>                 nr_left  <font color="#990000">,</font> <i><font color="#9A1900">// rows in left matrix</font></i>
        <font color="#008080">size_t</font>                 n_middle <font color="#990000">,</font> <i><font color="#9A1900">// rows in left and columns in right</font></i>
        <font color="#008080">size_t</font>                 nc_right <font color="#990000">)</font> <i><font color="#9A1900">// columns in right matrix</font></i>
    <font color="#FF0000">{</font>
        <font color="#008080">size_t</font> nx       <font color="#990000">=</font> <font color="#993399">3</font> <font color="#990000">+</font> <font color="#990000">(</font>nr_left <font color="#990000">+</font> nc_right<font color="#990000">)</font> <font color="#990000">*</font> n_middle<font color="#990000">;</font>
        <font color="#008080">size_t</font> nk       <font color="#990000">=</font> tx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> nx<font color="#990000">;</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
        <font color="#008080">size_t</font> ny       <font color="#990000">=</font> nr_left <font color="#990000">*</font> nc_right<font color="#990000">;</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> nk <font color="#990000">==</font> ty<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> ny <font color="#990000">);</font>
<b><font color="#000080"># endif</font></b>
        <i><font color="#9A1900">//</font></i>
        <font color="#008080">size_t</font> k_result <font color="#990000">=</font> k_left <font color="#990000">+</font> k_right<font color="#990000">;</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> k_result <font color="#990000">&lt;</font> nk <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nr_left<font color="#990000">;</font> i<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nc_right<font color="#990000">;</font> j<font color="#990000">++)</font>
            <font color="#FF0000">{</font>   <font color="#009900">double</font> sum <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
                <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;</font> n_middle<font color="#990000">;</font> ell<font color="#990000">++)</font>
                <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i_left  <font color="#990000">=</font> <b><font color="#000000">left</font></b><font color="#990000">(</font>
                        i<font color="#990000">,</font> ell<font color="#990000">,</font> k_left<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                    <font color="#990000">);</font>
                    <font color="#008080">size_t</font> i_right <font color="#990000">=</font> <b><font color="#000000">right</font></b><font color="#990000">(</font>
                        ell<font color="#990000">,</font> j<font color="#990000">,</font>  k_right<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                    <font color="#990000">);</font>
                    sum           <font color="#990000">+=</font> tx<font color="#990000">[</font>i_left<font color="#990000">]</font> <font color="#990000">*</font> tx<font color="#990000">[</font>i_right<font color="#990000">];</font>
                <font color="#FF0000">}</font>
                <font color="#008080">size_t</font> i_result <font color="#990000">=</font> <b><font color="#000000">result</font></b><font color="#990000">(</font>
                    i<font color="#990000">,</font> j<font color="#990000">,</font> k_result<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                <font color="#990000">);</font>
                ty<font color="#990000">[</font>i_result<font color="#990000">]</font>   <font color="#990000">+=</font> sum<font color="#990000">;</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="Reverse Matrix Multiply" id="Reverse Matrix Multiply">Reverse Matrix Multiply</a></big></b>
<br>
Reverse mode partials of Taylor coefficients and sum into 
<code><i><font color="black"><span style='white-space: nowrap'>px</span></font></i></code>

(for one pair of left and right orders)
<pre><tt>    <font color="#009900">void</font> <b><font color="#000000">reverse_multiply</font></b><font color="#990000">(</font>
        <font color="#008080">size_t</font>                 k_left  <font color="#990000">,</font> <i><font color="#9A1900">// order for left coefficients</font></i>
        <font color="#008080">size_t</font>                 k_right <font color="#990000">,</font> <i><font color="#9A1900">// order for right coefficients</font></i>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>  tx      <font color="#990000">,</font> <i><font color="#9A1900">// domain space Taylor coefficients</font></i>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>  ty      <font color="#990000">,</font> <i><font color="#9A1900">// range space Taylor coefficients</font></i>
              vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>  px      <font color="#990000">,</font> <i><font color="#9A1900">// partials w.r.t. tx</font></i>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>  py      <font color="#990000">,</font> <i><font color="#9A1900">// partials w.r.t. ty</font></i>
        <font color="#008080">size_t</font>                 nr_left  <font color="#990000">,</font> <i><font color="#9A1900">// rows in left matrix</font></i>
        <font color="#008080">size_t</font>                 n_middle <font color="#990000">,</font> <i><font color="#9A1900">// rows in left and columns in right</font></i>
        <font color="#008080">size_t</font>                 nc_right <font color="#990000">)</font> <i><font color="#9A1900">// columns in right matrix</font></i>
    <font color="#FF0000">{</font>
        <font color="#008080">size_t</font> nx       <font color="#990000">=</font> <font color="#993399">3</font> <font color="#990000">+</font> <font color="#990000">(</font>nr_left <font color="#990000">+</font> nc_right<font color="#990000">)</font> <font color="#990000">*</font> n_middle<font color="#990000">;</font>
        <font color="#008080">size_t</font> nk       <font color="#990000">=</font> tx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> nx<font color="#990000">;</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
        <font color="#008080">size_t</font> ny       <font color="#990000">=</font> nr_left <font color="#990000">*</font> nc_right<font color="#990000">;</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> nk <font color="#990000">==</font> ty<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">/</font> ny <font color="#990000">);</font>
<b><font color="#000080"># endif</font></b>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> tx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> px<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> ty<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> py<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <font color="#008080">size_t</font> k_result <font color="#990000">=</font> k_left <font color="#990000">+</font> k_right<font color="#990000">;</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> k_result <font color="#990000">&lt;</font> nk <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nr_left<font color="#990000">;</font> i<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nc_right<font color="#990000">;</font> j<font color="#990000">++)</font>
            <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i_result <font color="#990000">=</font> <b><font color="#000000">result</font></b><font color="#990000">(</font>
                    i<font color="#990000">,</font> j<font color="#990000">,</font> k_result<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                <font color="#990000">);</font>
                <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;</font> n_middle<font color="#990000">;</font> ell<font color="#990000">++)</font>
                <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i_left  <font color="#990000">=</font> <b><font color="#000000">left</font></b><font color="#990000">(</font>
                        i<font color="#990000">,</font> ell<font color="#990000">,</font> k_left<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                    <font color="#990000">);</font>
                    <font color="#008080">size_t</font> i_right <font color="#990000">=</font> <b><font color="#000000">right</font></b><font color="#990000">(</font>
                        ell<font color="#990000">,</font> j<font color="#990000">,</font>  k_right<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                    <font color="#990000">);</font>
                    <i><font color="#9A1900">// sum        += tx[i_left] * tx[i_right];</font></i>
                    px<font color="#990000">[</font>i_left<font color="#990000">]</font>    <font color="#990000">+=</font> tx<font color="#990000">[</font>i_right<font color="#990000">]</font> <font color="#990000">*</font> py<font color="#990000">[</font>i_result<font color="#990000">];</font>
                    px<font color="#990000">[</font>i_right<font color="#990000">]</font>   <font color="#990000">+=</font> tx<font color="#990000">[</font>i_left<font color="#990000">]</font>  <font color="#990000">*</font> py<font color="#990000">[</font>i_result<font color="#990000">];</font>
                <font color="#FF0000">}</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">return</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="for_type" id="for_type">for_type</a></big></b>
<br>
Routine called by CppAD during <a href="atomic_three_afun.htm" target="_top"><span style='white-space: nowrap'>afun(ax,&nbsp;ay)</span></a>
.
<pre><tt>    <i><font color="#9A1900">// calculate type_y</font></i>
    <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">for_type</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>               parameter_x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font>  type_x      <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font>        type_y      <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#000000">assert</font></b><font color="#990000">(</font> parameter_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> type_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
        <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
        ok <font color="#990000">&amp;=</font> type_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> CppAD<font color="#990000">::</font>constant_enum<font color="#990000">;</font>
        ok <font color="#990000">&amp;=</font> type_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">==</font> CppAD<font color="#990000">::</font>constant_enum<font color="#990000">;</font>
        ok <font color="#990000">&amp;=</font> type_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">==</font> CppAD<font color="#990000">::</font>constant_enum<font color="#990000">;</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> ok <font color="#990000">)</font>
            <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <font color="#008080">size_t</font> nr_left  <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> parameter_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">);</font>
        <font color="#008080">size_t</font> n_middle <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> parameter_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">);</font>
        <font color="#008080">size_t</font> nc_right <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> parameter_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        ok <font color="#990000">&amp;=</font> type_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">3</font> <font color="#990000">+</font> <font color="#990000">(</font>nr_left <font color="#990000">+</font> nc_right<font color="#990000">)</font> <font color="#990000">*</font> n_middle<font color="#990000">;</font>
        ok <font color="#990000">&amp;=</font> type_y<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n_middle <font color="#990000">*</font> nc_right<font color="#990000">;</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> ok <font color="#990000">)</font>
            <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// commpute type_y</font></i>
        <font color="#008080">size_t</font> nk <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> <i><font color="#9A1900">// number of orders</font></i>
        <font color="#008080">size_t</font> k  <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> <i><font color="#9A1900">// order</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nr_left<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nc_right<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
            <font color="#FF0000">{</font>   <i><font color="#9A1900">// compute type for result[i, j]</font></i>
                CppAD<font color="#990000">::</font><font color="#008080">ad_type_enum</font> type_yij <font color="#990000">=</font> CppAD<font color="#990000">::</font>constant_enum<font color="#990000">;</font>
                <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;</font> n_middle<font color="#990000">;</font> <font color="#990000">++</font>ell<font color="#990000">)</font>
                <font color="#FF0000">{</font>   <i><font color="#9A1900">// index for left(i, ell)</font></i>
                    <font color="#008080">size_t</font> i_left <font color="#990000">=</font> <b><font color="#000000">left</font></b><font color="#990000">(</font>
                        i<font color="#990000">,</font> ell<font color="#990000">,</font> k<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                    <font color="#990000">);</font>
                    <i><font color="#9A1900">// indx for right(ell, j)</font></i>
                    <font color="#008080">size_t</font> i_right <font color="#990000">=</font> <b><font color="#000000">right</font></b><font color="#990000">(</font>
                        ell<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                    <font color="#990000">);</font>
                    <i><font color="#9A1900">// multiplication on left or right by the constant zero</font></i>
                    <i><font color="#9A1900">// always results in a constant</font></i>
                    <font color="#009900">bool</font> zero_left  <font color="#990000">=</font> type_x<font color="#990000">[</font>i_left<font color="#990000">]</font> <font color="#990000">==</font> CppAD<font color="#990000">::</font>constant_enum<font color="#990000">;</font>
                    zero_left      <font color="#990000">&amp;=</font> parameter_x<font color="#990000">[</font>i_left<font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0.0</font><font color="#990000">;</font>
                    <font color="#009900">bool</font> zero_right <font color="#990000">=</font> type_x<font color="#990000">[</font>i_right<font color="#990000">]</font> <font color="#990000">==</font> CppAD<font color="#990000">::</font>constant_enum<font color="#990000">;</font>
                    zero_right     <font color="#990000">&amp;=</font> parameter_x<font color="#990000">[</font>i_right<font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0.0</font><font color="#990000">;</font>
                    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> <font color="#990000">(</font>zero_left <font color="#990000">|</font> zero_right<font color="#990000">)</font> <font color="#990000">)</font>
                    <font color="#FF0000">{</font>   type_yij <font color="#990000">=</font> std<font color="#990000">::</font><b><font color="#000000">max</font></b><font color="#990000">(</font>type_yij<font color="#990000">,</font> type_x<font color="#990000">[</font>i_left<font color="#990000">]</font> <font color="#990000">);</font>
                        type_yij <font color="#990000">=</font> std<font color="#990000">::</font><b><font color="#000000">max</font></b><font color="#990000">(</font>type_yij<font color="#990000">,</font> type_x<font color="#990000">[</font>i_right<font color="#990000">]</font> <font color="#990000">);</font>
                    <font color="#FF0000">}</font>
                <font color="#FF0000">}</font>
                <font color="#008080">size_t</font> i_result <font color="#990000">=</font> <b><font color="#000000">result</font></b><font color="#990000">(</font>
                    i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                <font color="#990000">);</font>
                type_y<font color="#990000">[</font>i_result<font color="#990000">]</font> <font color="#990000">=</font> type_yij<font color="#990000">;</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="forward" id="forward">forward</a></big></b>
<br>
Routine called by CppAD during <a href="forward.htm" target="_top"><span style='white-space: nowrap'>Forward</span></a>
 mode.
<pre><tt>    <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">forward</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>              parameter_x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font> type_x <font color="#990000">,</font>
        <font color="#008080">size_t</font>                             need_y <font color="#990000">,</font>
        <font color="#008080">size_t</font>                             q      <font color="#990000">,</font>
        <font color="#008080">size_t</font>                             p      <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>              tx     <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>                    ty     <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> n_order  <font color="#990000">=</font> p <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">;</font>
        <font color="#008080">size_t</font> nr_left  <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> tx<font color="#990000">[</font> <font color="#993399">0</font> <font color="#990000">*</font> n_order <font color="#990000">+</font> <font color="#993399">0</font> <font color="#990000">]</font> <font color="#990000">);</font>
        <font color="#008080">size_t</font> n_middle <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> tx<font color="#990000">[</font> <font color="#993399">1</font> <font color="#990000">*</font> n_order <font color="#990000">+</font> <font color="#993399">0</font> <font color="#990000">]</font> <font color="#990000">);</font>
        <font color="#008080">size_t</font> nc_right <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> tx<font color="#990000">[</font> <font color="#993399">2</font> <font color="#990000">*</font> n_order <font color="#990000">+</font> <font color="#993399">0</font> <font color="#990000">]</font> <font color="#990000">);</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
        <font color="#008080">size_t</font> nx       <font color="#990000">=</font> <font color="#993399">3</font> <font color="#990000">+</font> <font color="#990000">(</font>nr_left <font color="#990000">+</font> nc_right<font color="#990000">)</font> <font color="#990000">*</font> n_middle<font color="#990000">;</font>
        <font color="#008080">size_t</font> ny       <font color="#990000">=</font> nr_left <font color="#990000">*</font> nc_right<font color="#990000">;</font>
<b><font color="#000080"># endif</font></b>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> nx <font color="#990000">*</font> n_order <font color="#990000">==</font> tx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> ny <font color="#990000">*</font> n_order <font color="#990000">==</font> ty<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
        <font color="#008080">size_t</font> i<font color="#990000">,</font> j<font color="#990000">,</font> ell<font color="#990000">;</font>

        <i><font color="#9A1900">// initialize result as zero</font></i>
        <font color="#008080">size_t</font> k<font color="#990000">;</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nr_left<font color="#990000">;</font> i<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nc_right<font color="#990000">;</font> j<font color="#990000">++)</font>
            <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> q<font color="#990000">;</font> k <font color="#990000">&lt;=</font> p<font color="#990000">;</font> k<font color="#990000">++)</font>
                <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i_result <font color="#990000">=</font> <b><font color="#000000">result</font></b><font color="#990000">(</font>
                        i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">,</font> n_order<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                    <font color="#990000">);</font>
                    ty<font color="#990000">[</font>i_result<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
                <font color="#FF0000">}</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>k <font color="#990000">=</font> q<font color="#990000">;</font> k <font color="#990000">&lt;=</font> p<font color="#990000">;</font> k<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// sum the produces that result in order k</font></i>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font>ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;=</font> k<font color="#990000">;</font> ell<font color="#990000">++)</font>
                <b><font color="#000000">forward_multiply</font></b><font color="#990000">(</font>
                    ell<font color="#990000">,</font> k <font color="#990000">-</font> ell<font color="#990000">,</font> tx<font color="#990000">,</font> ty<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                <font color="#990000">);</font>
        <font color="#FF0000">}</font>

        <i><font color="#9A1900">// all orders are implemented, so always return true</font></i>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="reverse" id="reverse">reverse</a></big></b>
<br>
Routine called by CppAD during <a href="reverse.htm" target="_top"><span style='white-space: nowrap'>Reverse</span></a>
 mode.
<pre><tt>    <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">reverse</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>              parameter_x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font> type_x      <font color="#990000">,</font>
        <font color="#008080">size_t</font>                             p           <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>              tx          <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>              ty          <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>                    px          <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>              py          <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> n_order  <font color="#990000">=</font> p <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">;</font>
        <font color="#008080">size_t</font> nr_left  <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> tx<font color="#990000">[</font> <font color="#993399">0</font> <font color="#990000">*</font> n_order <font color="#990000">+</font> <font color="#993399">0</font> <font color="#990000">]</font> <font color="#990000">);</font>
        <font color="#008080">size_t</font> n_middle <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> tx<font color="#990000">[</font> <font color="#993399">1</font> <font color="#990000">*</font> n_order <font color="#990000">+</font> <font color="#993399">0</font> <font color="#990000">]</font> <font color="#990000">);</font>
        <font color="#008080">size_t</font> nc_right <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> tx<font color="#990000">[</font> <font color="#993399">2</font> <font color="#990000">*</font> n_order <font color="#990000">+</font> <font color="#993399">0</font> <font color="#990000">]</font> <font color="#990000">);</font>
<b><font color="#000080"># ifndef</font></b> NDEBUG
        <font color="#008080">size_t</font> nx       <font color="#990000">=</font> <font color="#993399">3</font> <font color="#990000">+</font> <font color="#990000">(</font>nr_left <font color="#990000">+</font> nc_right<font color="#990000">)</font> <font color="#990000">*</font> n_middle<font color="#990000">;</font>
        <font color="#008080">size_t</font> ny       <font color="#990000">=</font> nr_left <font color="#990000">*</font> nc_right<font color="#990000">;</font>
<b><font color="#000080"># endif</font></b>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> nx <font color="#990000">*</font> n_order <font color="#990000">==</font> tx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> ny <font color="#990000">*</font> n_order <font color="#990000">==</font> ty<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> px<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> tx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> py<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> ty<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>

        <i><font color="#9A1900">// initialize summation</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> px<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font> i<font color="#990000">++)</font>
            px<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>

        <i><font color="#9A1900">// number of orders to differentiate</font></i>
        <font color="#008080">size_t</font> k <font color="#990000">=</font> n_order<font color="#990000">;</font>
        <b><font color="#0000FF">while</font></b><font color="#990000">(</font>k<font color="#990000">--)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// differentiate the produces that result in order k</font></i>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;=</font> k<font color="#990000">;</font> ell<font color="#990000">++)</font>
                <b><font color="#000000">reverse_multiply</font></b><font color="#990000">(</font>
                    ell<font color="#990000">,</font> k <font color="#990000">-</font> ell<font color="#990000">,</font> tx<font color="#990000">,</font> ty<font color="#990000">,</font> px<font color="#990000">,</font> py<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                <font color="#990000">);</font>
        <font color="#FF0000">}</font>

        <i><font color="#9A1900">// all orders are implented, so always return true</font></i>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="jac_sparsity" id="jac_sparsity">jac_sparsity</a></big></b>

<pre><tt>    <i><font color="#9A1900">// Jacobian sparsity routine called by CppAD</font></i>
    <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">jac_sparsity</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>               parameter_x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font>  type_x      <font color="#990000">,</font>
        <font color="#009900">bool</font>                                dependency  <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                 select_x    <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                 select_y    <font color="#990000">,</font>
        CppAD<font color="#990000">::</font>sparse_rc<font color="#990000">&lt;</font> vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font> pattern_out <font color="#990000">)</font>
    <font color="#FF0000">{</font>
        <font color="#008080">size_t</font> n <font color="#990000">=</font> select_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
        <font color="#008080">size_t</font> m <font color="#990000">=</font> select_y<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> parameter_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> type_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <font color="#008080">size_t</font> nr_left  <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> parameter_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">);</font>
        <font color="#008080">size_t</font> n_middle <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> parameter_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">);</font>
        <font color="#008080">size_t</font> nc_right <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> parameter_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">);</font>
        <font color="#008080">size_t</font> nk       <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> <i><font color="#9A1900">// only one order</font></i>
        <font color="#008080">size_t</font> k        <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> <i><font color="#9A1900">// order zero</font></i>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// count number of non-zeros in sparsity pattern</font></i>
        <font color="#008080">size_t</font> nnz <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nr_left<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nc_right<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
            <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i_result <font color="#990000">=</font> <b><font color="#000000">result</font></b><font color="#990000">(</font>
                    i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                <font color="#990000">);</font>
                <b><font color="#0000FF">if</font></b><font color="#990000">(</font> select_y<font color="#990000">[</font>i_result<font color="#990000">]</font> <font color="#990000">)</font>
                <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;</font> n_middle<font color="#990000">;</font> <font color="#990000">++</font>ell<font color="#990000">)</font>
                    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i_left <font color="#990000">=</font> <b><font color="#000000">left</font></b><font color="#990000">(</font>
                            i<font color="#990000">,</font> ell<font color="#990000">,</font> k<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                        <font color="#990000">);</font>
                        <font color="#008080">size_t</font> i_right <font color="#990000">=</font> <b><font color="#000000">right</font></b><font color="#990000">(</font>
                            ell<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                        <font color="#990000">);</font>
                        <font color="#009900">bool</font> zero_left  <font color="#990000">=</font>
                            type_x<font color="#990000">[</font>i_left<font color="#990000">]</font> <font color="#990000">==</font> CppAD<font color="#990000">::</font>constant_enum<font color="#990000">;</font>
                        zero_left      <font color="#990000">&amp;=</font> parameter_x<font color="#990000">[</font>i_left<font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0.0</font><font color="#990000">;</font>
                        <font color="#009900">bool</font> zero_right <font color="#990000">=</font>
                            type_x<font color="#990000">[</font>i_right<font color="#990000">]</font> <font color="#990000">==</font> CppAD<font color="#990000">::</font>constant_enum<font color="#990000">;</font>
                        zero_right     <font color="#990000">&amp;=</font> parameter_x<font color="#990000">[</font>i_right<font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0.0</font><font color="#990000">;</font>
                        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> <font color="#990000">(</font>zero_left <font color="#990000">|</font> zero_right <font color="#990000">)</font> <font color="#990000">)</font>
                        <font color="#FF0000">{</font>   <font color="#009900">bool</font> var_left  <font color="#990000">=</font>
                                type_x<font color="#990000">[</font>i_left<font color="#990000">]</font> <font color="#990000">==</font> CppAD<font color="#990000">::</font>variable_enum<font color="#990000">;</font>
                            <font color="#009900">bool</font> var_right <font color="#990000">=</font>
                                type_x<font color="#990000">[</font>i_right<font color="#990000">]</font> <font color="#990000">==</font> CppAD<font color="#990000">::</font>variable_enum<font color="#990000">;</font>
                            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> select_x<font color="#990000">[</font>i_left<font color="#990000">]</font> <font color="#990000">&amp;</font> var_left <font color="#990000">)</font>
                                <font color="#990000">++</font>nnz<font color="#990000">;</font>
                            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> select_x<font color="#990000">[</font>i_right<font color="#990000">]</font> <font color="#990000">&amp;</font> var_right <font color="#990000">)</font>
                                <font color="#990000">++</font>nnz<font color="#990000">;</font>
                        <font color="#FF0000">}</font>
                    <font color="#FF0000">}</font>
                <font color="#FF0000">}</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// fill in the sparsity pattern</font></i>
        pattern_out<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font>m<font color="#990000">,</font> n<font color="#990000">,</font> nnz<font color="#990000">);</font>
        <font color="#008080">size_t</font> idx <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nr_left<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nc_right<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
            <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i_result <font color="#990000">=</font> <b><font color="#000000">result</font></b><font color="#990000">(</font>
                    i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                <font color="#990000">);</font>
                <b><font color="#0000FF">if</font></b><font color="#990000">(</font> select_y<font color="#990000">[</font>i_result<font color="#990000">]</font> <font color="#990000">)</font>
                <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;</font> n_middle<font color="#990000">;</font> <font color="#990000">++</font>ell<font color="#990000">)</font>
                    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i_left <font color="#990000">=</font> <b><font color="#000000">left</font></b><font color="#990000">(</font>
                            i<font color="#990000">,</font> ell<font color="#990000">,</font> k<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                        <font color="#990000">);</font>
                        <font color="#008080">size_t</font> i_right <font color="#990000">=</font> <b><font color="#000000">right</font></b><font color="#990000">(</font>
                            ell<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                        <font color="#990000">);</font>
                        <font color="#009900">bool</font> zero_left  <font color="#990000">=</font>
                            type_x<font color="#990000">[</font>i_left<font color="#990000">]</font> <font color="#990000">==</font> CppAD<font color="#990000">::</font>constant_enum<font color="#990000">;</font>
                        zero_left      <font color="#990000">&amp;=</font> parameter_x<font color="#990000">[</font>i_left<font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0.0</font><font color="#990000">;</font>
                        <font color="#009900">bool</font> zero_right <font color="#990000">=</font>
                            type_x<font color="#990000">[</font>i_right<font color="#990000">]</font> <font color="#990000">==</font> CppAD<font color="#990000">::</font>constant_enum<font color="#990000">;</font>
                        zero_right     <font color="#990000">&amp;=</font> parameter_x<font color="#990000">[</font>i_right<font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0.0</font><font color="#990000">;</font>
                        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> <font color="#990000">(</font>zero_left <font color="#990000">|</font> zero_right <font color="#990000">)</font> <font color="#990000">)</font>
                        <font color="#FF0000">{</font>   <font color="#009900">bool</font> var_left  <font color="#990000">=</font>
                                type_x<font color="#990000">[</font>i_left<font color="#990000">]</font> <font color="#990000">==</font> CppAD<font color="#990000">::</font>variable_enum<font color="#990000">;</font>
                            <font color="#009900">bool</font> var_right <font color="#990000">=</font>
                                type_x<font color="#990000">[</font>i_right<font color="#990000">]</font> <font color="#990000">==</font> CppAD<font color="#990000">::</font>variable_enum<font color="#990000">;</font>
                            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> select_x<font color="#990000">[</font>i_left<font color="#990000">]</font> <font color="#990000">&amp;</font> var_left <font color="#990000">)</font>
                                pattern_out<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>idx<font color="#990000">++,</font> i_result<font color="#990000">,</font> i_left<font color="#990000">);</font>
                            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> select_x<font color="#990000">[</font>i_right<font color="#990000">]</font> <font color="#990000">&amp;</font> var_right <font color="#990000">)</font>
                                pattern_out<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>idx<font color="#990000">++,</font> i_result<font color="#990000">,</font> i_right<font color="#990000">);</font>
                        <font color="#FF0000">}</font>
                    <font color="#FF0000">}</font>
                <font color="#FF0000">}</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> idx <font color="#990000">==</font> nnz <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="hes_sparsity" id="hes_sparsity">hes_sparsity</a></big></b>

<pre><tt>    <i><font color="#9A1900">// Jacobian sparsity routine called by CppAD</font></i>
    <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">hes_sparsity</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>               parameter_x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font>  type_x      <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                 select_x    <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                 select_y    <font color="#990000">,</font>
        CppAD<font color="#990000">::</font>sparse_rc<font color="#990000">&lt;</font> vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font> pattern_out <font color="#990000">)</font>
    <font color="#FF0000">{</font>
        <font color="#008080">size_t</font> n <font color="#990000">=</font> select_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> parameter_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> type_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <font color="#008080">size_t</font> nr_left  <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> parameter_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">);</font>
        <font color="#008080">size_t</font> n_middle <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> parameter_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">);</font>
        <font color="#008080">size_t</font> nc_right <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> parameter_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">);</font>
        <font color="#008080">size_t</font> nk       <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> <i><font color="#9A1900">// only one order</font></i>
        <font color="#008080">size_t</font> k        <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> <i><font color="#9A1900">// order zero</font></i>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// count number of non-zeros in sparsity pattern</font></i>
        <font color="#008080">size_t</font> nnz <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nr_left<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nc_right<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
            <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i_result <font color="#990000">=</font> <b><font color="#000000">result</font></b><font color="#990000">(</font>
                    i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                <font color="#990000">);</font>
                <b><font color="#0000FF">if</font></b><font color="#990000">(</font> select_y<font color="#990000">[</font>i_result<font color="#990000">]</font> <font color="#990000">)</font>
                <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;</font> n_middle<font color="#990000">;</font> <font color="#990000">++</font>ell<font color="#990000">)</font>
                    <font color="#FF0000">{</font>   <i><font color="#9A1900">// i_left depends on i, ell</font></i>
                        <font color="#008080">size_t</font> i_left <font color="#990000">=</font> <b><font color="#000000">left</font></b><font color="#990000">(</font>
                            i<font color="#990000">,</font> ell<font color="#990000">,</font> k<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                        <font color="#990000">);</font>
                        <i><font color="#9A1900">// i_right depens on ell, j</font></i>
                        <font color="#008080">size_t</font> i_right <font color="#990000">=</font> <b><font color="#000000">right</font></b><font color="#990000">(</font>
                            ell<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                        <font color="#990000">);</font>
                        <font color="#009900">bool</font> var_left   <font color="#990000">=</font> select_x<font color="#990000">[</font>i_left<font color="#990000">]</font> <font color="#990000">&amp;</font>
                            <font color="#990000">(</font>type_x<font color="#990000">[</font>i_left<font color="#990000">]</font> <font color="#990000">==</font> CppAD<font color="#990000">::</font>variable_enum<font color="#990000">);</font>
                        <font color="#009900">bool</font> var_right  <font color="#990000">=</font> select_x<font color="#990000">[</font>i_right<font color="#990000">]</font> <font color="#990000">&amp;</font>
                            <font color="#990000">(</font>type_x<font color="#990000">[</font>i_right<font color="#990000">]</font> <font color="#990000">==</font> CppAD<font color="#990000">::</font>variable_enum<font color="#990000">);</font>
                        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> var_left <font color="#990000">&amp;</font> var_right <font color="#990000">)</font>
                                nnz <font color="#990000">+=</font> <font color="#993399">2</font><font color="#990000">;</font>
                    <font color="#FF0000">}</font>
                <font color="#FF0000">}</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// fill in the sparsity pattern</font></i>
        pattern_out<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font>n<font color="#990000">,</font> n<font color="#990000">,</font> nnz<font color="#990000">);</font>
        <font color="#008080">size_t</font> idx <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nr_left<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nc_right<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
            <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i_result <font color="#990000">=</font> <b><font color="#000000">result</font></b><font color="#990000">(</font>
                    i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                <font color="#990000">);</font>
                <b><font color="#0000FF">if</font></b><font color="#990000">(</font> select_y<font color="#990000">[</font>i_result<font color="#990000">]</font> <font color="#990000">)</font>
                <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;</font> n_middle<font color="#990000">;</font> <font color="#990000">++</font>ell<font color="#990000">)</font>
                    <font color="#FF0000">{</font>   <font color="#008080">size_t</font> i_left <font color="#990000">=</font> <b><font color="#000000">left</font></b><font color="#990000">(</font>
                            i<font color="#990000">,</font> ell<font color="#990000">,</font> k<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                        <font color="#990000">);</font>
                        <font color="#008080">size_t</font> i_right <font color="#990000">=</font> <b><font color="#000000">right</font></b><font color="#990000">(</font>
                            ell<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                        <font color="#990000">);</font>
                        <font color="#009900">bool</font> var_left   <font color="#990000">=</font> select_x<font color="#990000">[</font>i_left<font color="#990000">]</font> <font color="#990000">&amp;</font>
                            <font color="#990000">(</font>type_x<font color="#990000">[</font>i_left<font color="#990000">]</font> <font color="#990000">==</font> CppAD<font color="#990000">::</font>variable_enum<font color="#990000">);</font>
                        <font color="#009900">bool</font> var_right  <font color="#990000">=</font> select_x<font color="#990000">[</font>i_right<font color="#990000">]</font> <font color="#990000">&amp;</font>
                            <font color="#990000">(</font>type_x<font color="#990000">[</font>i_right<font color="#990000">]</font> <font color="#990000">==</font> CppAD<font color="#990000">::</font>variable_enum<font color="#990000">);</font>
                        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> var_left <font color="#990000">&amp;</font> var_right <font color="#990000">)</font>
                        <font color="#FF0000">{</font>   <i><font color="#9A1900">// Cannot possibly set the same (i_left, i_right)</font></i>
                            <i><font color="#9A1900">// pair twice.</font></i>
                            <b><font color="#000000">assert</font></b><font color="#990000">(</font> i_left <font color="#990000">!=</font> i_right <font color="#990000">);</font>
                            pattern_out<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>idx<font color="#990000">++,</font> i_left<font color="#990000">,</font> i_right<font color="#990000">);</font>
                            pattern_out<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>idx<font color="#990000">++,</font> i_right<font color="#990000">,</font> i_left<font color="#990000">);</font>
                        <font color="#FF0000">}</font>
                    <font color="#FF0000">}</font>
                <font color="#FF0000">}</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> idx <font color="#990000">==</font> nnz <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="rev_depend" id="rev_depend">rev_depend</a></big></b>
<br>
Routine called when a function using <code><font color="blue">mat_mul</font></code> is optimized.
<pre><tt>    <i><font color="#9A1900">// calculate depend_x</font></i>
    <b><font color="#0000FF">virtual</font></b> <font color="#009900">bool</font> <b><font color="#000000">rev_depend</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>              parameter_x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font>CppAD<font color="#990000">::</font>ad_type_enum<font color="#990000">&gt;&amp;</font> type_x      <font color="#990000">,</font>
        vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                      depend_x    <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">bool</font><font color="#990000">&gt;&amp;</font>                depend_y    <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#000000">assert</font></b><font color="#990000">(</font> parameter_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> depend_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
        <b><font color="#000000">assert</font></b><font color="#990000">(</font> parameter_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> type_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">);</font>
        <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <font color="#008080">size_t</font> nr_left  <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> parameter_x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">);</font>
        <font color="#008080">size_t</font> n_middle <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> parameter_x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">);</font>
        <font color="#008080">size_t</font> nc_right <font color="#990000">=</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font> parameter_x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        ok <font color="#990000">&amp;=</font> depend_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">3</font> <font color="#990000">+</font> <font color="#990000">(</font>nr_left <font color="#990000">+</font> nc_right<font color="#990000">)</font> <font color="#990000">*</font> n_middle<font color="#990000">;</font>
        ok <font color="#990000">&amp;=</font> depend_y<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n_middle <font color="#990000">*</font> nc_right<font color="#990000">;</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> ok <font color="#990000">)</font>
            <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// initialize depend_x</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;</font> <font color="#993399">3</font><font color="#990000">;</font> <font color="#990000">++</font>ell<font color="#990000">)</font>
            depend_x<font color="#990000">[</font>ell<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font> <i><font color="#9A1900">// always need these parameters</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> ell <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font> ell <font color="#990000">&lt;</font> depend_x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font> <font color="#990000">++</font>ell<font color="#990000">)</font>
            depend_x<font color="#990000">[</font>ell<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font> <i><font color="#9A1900">// initialize as false</font></i>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// commpute depend_x</font></i>
        <font color="#008080">size_t</font> nk <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> <i><font color="#9A1900">// number of orders</font></i>
        <font color="#008080">size_t</font> k  <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> <i><font color="#9A1900">// order</font></i>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> nr_left<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nc_right<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
            <font color="#FF0000">{</font>   <i><font color="#9A1900">// check depend for result[i, j]</font></i>
                <font color="#008080">size_t</font> i_result <font color="#990000">=</font> <b><font color="#000000">result</font></b><font color="#990000">(</font>
                    i<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                <font color="#990000">);</font>
                <b><font color="#0000FF">if</font></b><font color="#990000">(</font> depend_y<font color="#990000">[</font>i_result<font color="#990000">]</font> <font color="#990000">)</font>
                <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> ell <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> ell <font color="#990000">&lt;</font> n_middle<font color="#990000">;</font> <font color="#990000">++</font>ell<font color="#990000">)</font>
                    <font color="#FF0000">{</font>   <i><font color="#9A1900">// index for left(i, ell)</font></i>
                        <font color="#008080">size_t</font> i_left <font color="#990000">=</font> <b><font color="#000000">left</font></b><font color="#990000">(</font>
                            i<font color="#990000">,</font> ell<font color="#990000">,</font> k<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                        <font color="#990000">);</font>
                        <i><font color="#9A1900">// indx for right(ell, j)</font></i>
                        <font color="#008080">size_t</font> i_right <font color="#990000">=</font> <b><font color="#000000">right</font></b><font color="#990000">(</font>
                            ell<font color="#990000">,</font> j<font color="#990000">,</font> k<font color="#990000">,</font> nk<font color="#990000">,</font> nr_left<font color="#990000">,</font> n_middle<font color="#990000">,</font> nc_right
                        <font color="#990000">);</font>
                        <font color="#009900">bool</font> zero_left  <font color="#990000">=</font>
                            type_x<font color="#990000">[</font>i_left<font color="#990000">]</font> <font color="#990000">==</font> CppAD<font color="#990000">::</font>constant_enum<font color="#990000">;</font>
                        zero_left      <font color="#990000">&amp;=</font> parameter_x<font color="#990000">[</font>i_left<font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0.0</font><font color="#990000">;</font>
                        <font color="#009900">bool</font> zero_right <font color="#990000">=</font>
                            type_x<font color="#990000">[</font>i_right<font color="#990000">]</font> <font color="#990000">==</font> CppAD<font color="#990000">::</font>constant_enum<font color="#990000">;</font>
                        zero_right     <font color="#990000">&amp;=</font> parameter_x<font color="#990000">[</font>i_right<font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0.0</font><font color="#990000">;</font>
                        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> zero_right <font color="#990000">)</font>
                            depend_x<font color="#990000">[</font>i_left<font color="#990000">]</font>  <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
                        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> zero_left <font color="#990000">)</font>
                            depend_x<font color="#990000">[</font>i_right<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
                    <font color="#FF0000">}</font>
                <font color="#FF0000">}</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="End Class Definition" id="End Class Definition">End Class Definition</a></big></b>

<pre style='display:inline'><tt>
<font color="#FF0000">}</font><font color="#990000">;</font> <i><font color="#9A1900">// End of mat_mul class</font></i>
<font color="#FF0000">}</font>  <i><font color="#9A1900">// End empty namespace</font></i>
</tt></pre>

<hr>Input File: include/cppad/example/atomic_three/mat_mul.hpp

</body>
</html>
