<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Multi-Threaded atomic_two Set Up</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Multi-Threaded atomic_two Set Up">
<meta name="keywords" id="keywords" content=" multi-threaded atomic_two set up syntax purpose thread y_squared ok source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_multi_atomic_two_setup_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="multi_atomic_two_common.htm" target="_top">Prev</a>
</td><td><a href="multi_atomic_two_worker.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>deprecated</option>
<option>multi_atomic_two.cpp</option>
<option>multi_atomic_two_setup</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_appendix_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_deprecated_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_multi_atomic_two.cpp_htm.js'></script>
</td>
<td>multi_atomic_two_setup</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Thread</option>
<option>y_squared</option>
<option>ok</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Multi-Threaded atomic_two Set Up</big></big></b></center>
.

<br>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;multi_atomic_two_setup(</span></font><i><font color="black"><span style='white-space: nowrap'>y_squared</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This routine splits up the computation into the individual threads.

<br>
<br>
<b><big><a name="Thread" id="Thread">Thread</a></big></b>
<br>
It is assumed that this function is called by thread zero
and all the other threads are blocked (waiting).

<br>
<br>
<b><big><a name="y_squared" id="y_squared">y_squared</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y_squared</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and its size is equal to the number of equations to solve.
It is the values that we are computing the square root of.

<br>
<br>
<b><big><a name="ok" id="ok">ok</a></big></b>
<br>
This return value has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
If it is false,
<code><font color="blue">multi_atomic_two_setup</font></code> detected an error.

<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
<font color="#009900">bool</font> <b><font color="#000000">multi_atomic_two_setup</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> y_squared<font color="#990000">)</font>
<font color="#FF0000">{</font>   <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
    <font color="#008080">size_t</font> num_threads <font color="#990000">=</font> std<font color="#990000">::</font><b><font color="#000000">max</font></b><font color="#990000">(</font>num_threads_<font color="#990000">,</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">));</font>
    <font color="#009900">bool</font>   ok          <font color="#990000">=</font> num_threads <font color="#990000">==</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">num_threads</font></b><font color="#990000">();</font>
    ok                <font color="#990000">&amp;=</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">thread_num</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// declare independent variable variable vector</font></i>
    <font color="#008080">vector&lt; AD&lt;double&gt; &gt;</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
    ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">2.0</font><font color="#990000">;</font>
    CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>ax<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// argument and result for atomic function</font></i>
    <font color="#008080">vector&lt; AD&lt;double&gt; &gt;</font> <b><font color="#000000">au</font></b><font color="#990000">(</font><font color="#993399">3</font><font color="#990000">),</font> <b><font color="#000000">ay</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
    au<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;(</font> num_itr_ <font color="#990000">);</font> <i><font color="#9A1900">// num_itr</font></i>
    au<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>                  <i><font color="#9A1900">// y_initial</font></i>
    au<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">=</font> ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>                  <i><font color="#9A1900">// y_squared</font></i>
    <i><font color="#9A1900">// put atomic function operation in recording</font></i>
    <font color="#990000">(*</font>a_square_root_<font color="#990000">)(</font>au<font color="#990000">,</font> ay<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// f(u) = sqrt(u)</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> <b><font color="#000000">fun</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// number of square roots for each thread</font></i>
    <font color="#008080">size_t</font> per_thread <font color="#990000">=</font> <font color="#990000">(</font>y_squared<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">+</font> num_threads <font color="#990000">-</font> <font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">/</font> num_threads<font color="#990000">;</font>
    <font color="#008080">size_t</font> y_index    <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> thread_num <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> thread_num <font color="#990000">&lt;</font> num_threads<font color="#990000">;</font> thread_num<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// allocate separate memory for each thread to avoid false sharing</font></i>
        <font color="#008080">size_t</font> <b><font color="#000000">min_bytes</font></b><font color="#990000">(</font><b><font color="#0000FF">sizeof</font></b><font color="#990000">(</font>work_one_t<font color="#990000">)),</font> cap_bytes<font color="#990000">;</font>
        <font color="#009900">void</font><font color="#990000">*</font> v_ptr <font color="#990000">=</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">get_memory</font></b><font color="#990000">(</font>min_bytes<font color="#990000">,</font> cap_bytes<font color="#990000">);</font>
        work_all_<font color="#990000">[</font>thread_num<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">static_cast</font></b><font color="#990000">&lt;</font>work_one_t<font color="#990000">*&gt;(</font>v_ptr<font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// Run constructor on work_all_[thread_num]-&gt;fun</font></i>
        work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>fun <font color="#990000">=</font> <b><font color="#0000FF">new</font></b> CppAD<font color="#990000">::</font>ADFun<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// Run constructor on work_all_[thread_num] vectors</font></i>
        work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>y_squared <font color="#990000">=</font> <b><font color="#0000FF">new</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;;</font>
        work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>square_root <font color="#990000">=</font> <b><font color="#0000FF">new</font></b> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// Each worker gets a separate copy of fun. This is necessary because</font></i>
        <i><font color="#9A1900">// the Taylor coefficients will be set by each thread.</font></i>
        <font color="#990000">*(</font>work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>fun<font color="#990000">)</font> <font color="#990000">=</font> fun<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// values we are computing square root of for this thread</font></i>
        ok <font color="#990000">&amp;=</font>  <font color="#993399">0</font> <font color="#990000">==</font> work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>y_squared<font color="#990000">-&gt;</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> per_thread<font color="#990000">;</font> i<font color="#990000">++)</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> y_index <font color="#990000">&lt;</font> y_squared<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">)</font>
            work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>y_squared<font color="#990000">-&gt;</font><b><font color="#000000">push_back</font></b><font color="#990000">(</font>y_squared<font color="#990000">[</font>y_index<font color="#990000">++]);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// set to false in case this thread's worker does not get called</font></i>
        work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>ok <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    ok <font color="#990000">&amp;=</font> y_index <font color="#990000">==</font> y_squared<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/multi_thread/multi_atomic_two.cpp

</body>
</html>
