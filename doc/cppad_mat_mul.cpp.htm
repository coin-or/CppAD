<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>CppAD Speed, Matrix Multiplication</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="CppAD Speed, Matrix Multiplication">
<meta name="keywords" id="keywords" content=" cppad speed matrix multiplication specifications implementation ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_cppad_mat_mul.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="cppad_det_lu.cpp.htm" target="_top">Prev</a>
</td><td><a href="cppad_ode.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_cppad</option>
<option>cppad_mat_mul.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_speed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_speed_cppad_htm.js'></script>
</td>
<td>cppad_mat_mul.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Specifications</option>
<option>Implementation</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>CppAD Speed, Matrix Multiplication</big></big></b></center>
<br>
<b><big><a name="Specifications" id="Specifications">Specifications</a></big></b>
<br>
See <a href="link_mat_mul.htm" target="_top"><span style='white-space: nowrap'>link_mat_mul</span></a>
.

<br>
<br>
<b><big><a name="Implementation" id="Implementation">Implementation</a></big></b>


<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/speed/mat_sum_sq.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/speed/uniform_01.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/example/atomic_four/mat_mul/mat_mul.hpp&gt;</font>

<i><font color="#9A1900">// Note that CppAD uses global_option["memory"] at the main program level</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;map&gt;</font>
<b><font color="#0000FF">extern</font></b> std<font color="#990000">::</font><font color="#008080">map&lt;std::string, bool&gt;</font> global_option<font color="#990000">;</font>
<i><font color="#9A1900">// see comments in main program for this external</font></i>
<b><font color="#0000FF">extern</font></b> <font color="#008080">size_t</font> global_cppad_thread_alloc_inuse<font color="#990000">;</font>

<font color="#009900">bool</font> <b><font color="#000000">link_mat_mul</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font>                           size     <font color="#990000">,</font>
    <font color="#008080">size_t</font>                           repeat   <font color="#990000">,</font>
    CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>           x        <font color="#990000">,</font>
    CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>           z        <font color="#990000">,</font>
    CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>           dz
<font color="#990000">)</font>
<font color="#FF0000">{</font>   global_cppad_thread_alloc_inuse <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>

    <i><font color="#9A1900">// --------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// check global options</font></i>
    <b><font color="#0000FF">const</font></b> <font color="#009900">char</font><font color="#990000">*</font> valid<font color="#990000">[]</font> <font color="#990000">=</font> <font color="#FF0000">{</font> <font color="#FF0000">"memory"</font><font color="#990000">,</font> <font color="#FF0000">"onetape"</font><font color="#990000">,</font> <font color="#FF0000">"optimize"</font><font color="#990000">,</font> <font color="#FF0000">"atomic"</font><font color="#FF0000">}</font><font color="#990000">;</font>
    <font color="#008080">size_t</font> n_valid <font color="#990000">=</font> <b><font color="#0000FF">sizeof</font></b><font color="#990000">(</font>valid<font color="#990000">)</font> <font color="#990000">/</font> <b><font color="#0000FF">sizeof</font></b><font color="#990000">(</font>valid<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]);</font>
    <b><font color="#0000FF">typedef</font></b> std<font color="#990000">::</font>map<font color="#990000">&lt;</font>std<font color="#990000">::</font>string<font color="#990000">,</font> <font color="#009900">bool</font><font color="#990000">&gt;::</font><font color="#008080">iterator</font> iterator<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">iterator</font> itr<font color="#990000">=</font>global_option<font color="#990000">.</font><b><font color="#000000">begin</font></b><font color="#990000">();</font> itr<font color="#990000">!=</font>global_option<font color="#990000">.</font><b><font color="#000000">end</font></b><font color="#990000">();</font> <font color="#990000">++</font>itr<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">if</font></b><font color="#990000">(</font> itr<font color="#990000">-&gt;</font>second <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_valid<font color="#990000">;</font> i<font color="#990000">++)</font>
                ok <font color="#990000">|=</font> itr<font color="#990000">-&gt;</font>first <font color="#990000">==</font> valid<font color="#990000">[</font>i<font color="#990000">];</font>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> ok <font color="#990000">)</font>
                <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// --------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// optimization options: no conditional skips or compare operators</font></i>
    std<font color="#990000">::</font><font color="#008080">string</font> optimize_options <font color="#990000">=</font>
        <font color="#FF0000">"no_conditional_skip no_compare_op no_print_for_op"</font><font color="#990000">;</font>
    <i><font color="#9A1900">// -----------------------------------------------------</font></i>
    <i><font color="#9A1900">// setup</font></i>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;double&gt;</font>           ADScalar<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">vector&lt;ADScalar&gt;</font>     ADVector<font color="#990000">;</font>

    <font color="#008080">size_t</font> j<font color="#990000">;</font>               <i><font color="#9A1900">// temporary index</font></i>
    <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>           <i><font color="#9A1900">// number of dependent variables</font></i>
    <font color="#008080">size_t</font> n <font color="#990000">=</font> size <font color="#990000">*</font> size<font color="#990000">;</font> <i><font color="#9A1900">// number of independent variables</font></i>
    <font color="#008080">ADVector</font>   <b><font color="#000000">X</font></b><font color="#990000">(</font>n<font color="#990000">);</font>        <i><font color="#9A1900">// AD domain space vector</font></i>
    <font color="#008080">ADVector</font>   <b><font color="#000000">Y</font></b><font color="#990000">(</font>n<font color="#990000">);</font>        <i><font color="#9A1900">// Store product matrix</font></i>
    <font color="#008080">ADVector</font>   <b><font color="#000000">Z</font></b><font color="#990000">(</font>m<font color="#990000">);</font>        <i><font color="#9A1900">// AD range space vector</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> f<font color="#990000">;</font> <i><font color="#9A1900">// AD function object</font></i>

    <i><font color="#9A1900">// vectors of reverse mode weights</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;double&gt;</font> <b><font color="#000000">w</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
    w<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>

    <i><font color="#9A1900">// atomic function information</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;ADScalar&gt;</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font><font color="#993399">2</font> <font color="#990000">*</font> n<font color="#990000">),</font> <b><font color="#000000">ay</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    CppAD<font color="#990000">::</font><font color="#008080">atomic_mat_mul&lt;double&gt;</font> <b><font color="#000000">atom_mul</font></b><font color="#990000">(</font><font color="#FF0000">"atom_mul"</font><font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// do not even record comparison operators</font></i>
    <font color="#008080">size_t</font> abort_op_index <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <font color="#009900">bool</font> record_compare   <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>

    <i><font color="#9A1900">// ------------------------------------------------------</font></i>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> global_option<font color="#990000">[</font><font color="#FF0000">"onetape"</font><font color="#990000">]</font> <font color="#990000">)</font> <b><font color="#0000FF">while</font></b><font color="#990000">(</font>repeat<font color="#990000">--)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// get the next matrix</font></i>
        CppAD<font color="#990000">::</font><b><font color="#000000">uniform_01</font></b><font color="#990000">(</font>n<font color="#990000">,</font> x<font color="#990000">);</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
            X<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font>j<font color="#990000">];</font>

        <i><font color="#9A1900">// declare independent variables</font></i>
        <b><font color="#000000">Independent</font></b><font color="#990000">(</font>X<font color="#990000">,</font> abort_op_index<font color="#990000">,</font> record_compare<font color="#990000">);</font>

        <i><font color="#9A1900">// do computations</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> global_option<font color="#990000">[</font><font color="#FF0000">"atomic"</font><font color="#990000">]</font> <font color="#990000">)</font>
            <b><font color="#000000">mat_sum_sq</font></b><font color="#990000">(</font>size<font color="#990000">,</font> X<font color="#990000">,</font> Y<font color="#990000">,</font> Z<font color="#990000">);</font>
        <b><font color="#0000FF">else</font></b>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
            <font color="#FF0000">{</font>   ax<font color="#990000">[</font>j<font color="#990000">]</font>     <font color="#990000">=</font> X<font color="#990000">[</font>j<font color="#990000">];</font>
                ax<font color="#990000">[</font>n <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">=</font> X<font color="#990000">[</font>j<font color="#990000">];</font>
            <font color="#FF0000">}</font>
            <i><font color="#9A1900">// Y = X * X</font></i>
            <font color="#008080">size_t</font> call_id <font color="#990000">=</font> atom_mul<font color="#990000">.</font><b><font color="#000000">set</font></b><font color="#990000">(</font>size<font color="#990000">,</font> size<font color="#990000">,</font> size<font color="#990000">);</font>
            <b><font color="#000000">atom_mul</font></b><font color="#990000">(</font>call_id<font color="#990000">,</font> ax<font color="#990000">,</font> ay<font color="#990000">);</font>
            Z<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
                Z<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> ay<font color="#990000">[</font>j<font color="#990000">];</font>
        <font color="#FF0000">}</font>
        <i><font color="#9A1900">// create function object f : X -&gt; Z</font></i>
        f<font color="#990000">.</font><b><font color="#000000">Dependent</font></b><font color="#990000">(</font>X<font color="#990000">,</font> Z<font color="#990000">);</font>

        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> global_option<font color="#990000">[</font><font color="#FF0000">"optimize"</font><font color="#990000">]</font> <font color="#990000">)</font>
            f<font color="#990000">.</font><b><font color="#000000">optimize</font></b><font color="#990000">(</font>optimize_options<font color="#990000">);</font>

        <i><font color="#9A1900">// skip comparison operators</font></i>
        f<font color="#990000">.</font><b><font color="#000000">compare_change_count</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>

        <i><font color="#9A1900">// evaluate and return gradient using reverse mode</font></i>
        z  <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">);</font>
        dz <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Reverse</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">,</font> w<font color="#990000">);</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">else</font></b>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// get a next matrix</font></i>
        CppAD<font color="#990000">::</font><b><font color="#000000">uniform_01</font></b><font color="#990000">(</font>n<font color="#990000">,</font> x<font color="#990000">);</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
            X<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font>j<font color="#990000">];</font>

        <i><font color="#9A1900">// declare independent variables</font></i>
        <b><font color="#000000">Independent</font></b><font color="#990000">(</font>X<font color="#990000">,</font> abort_op_index<font color="#990000">,</font> record_compare<font color="#990000">);</font>

        <i><font color="#9A1900">// do computations</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> global_option<font color="#990000">[</font><font color="#FF0000">"atomic"</font><font color="#990000">]</font> <font color="#990000">)</font>
            <b><font color="#000000">mat_sum_sq</font></b><font color="#990000">(</font>size<font color="#990000">,</font> X<font color="#990000">,</font> Y<font color="#990000">,</font> Z<font color="#990000">);</font>
        <b><font color="#0000FF">else</font></b>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
            <font color="#FF0000">{</font>   ax<font color="#990000">[</font>j<font color="#990000">]</font>   <font color="#990000">=</font> X<font color="#990000">[</font>j<font color="#990000">];</font>
                ax<font color="#990000">[</font>j<font color="#990000">+</font>n<font color="#990000">]</font> <font color="#990000">=</font> X<font color="#990000">[</font>j<font color="#990000">];</font>
            <font color="#FF0000">}</font>
            <i><font color="#9A1900">// Y = X * X</font></i>
            <b><font color="#000000">atom_mul</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">);</font>
            Z<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font>j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> j<font color="#990000">++)</font>
                Z<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+=</font> ay<font color="#990000">[</font>j<font color="#990000">];</font>
        <font color="#FF0000">}</font>

        <i><font color="#9A1900">// create function object f : X -&gt; Z</font></i>
        f<font color="#990000">.</font><b><font color="#000000">Dependent</font></b><font color="#990000">(</font>X<font color="#990000">,</font> Z<font color="#990000">);</font>

        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> global_option<font color="#990000">[</font><font color="#FF0000">"optimize"</font><font color="#990000">]</font> <font color="#990000">)</font>
            f<font color="#990000">.</font><b><font color="#000000">optimize</font></b><font color="#990000">(</font>optimize_options<font color="#990000">);</font>

        <i><font color="#9A1900">// skip comparison operators</font></i>
        f<font color="#990000">.</font><b><font color="#000000">compare_change_count</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>

        <b><font color="#0000FF">while</font></b><font color="#990000">(</font>repeat<font color="#990000">--)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// get a next matrix</font></i>
            CppAD<font color="#990000">::</font><b><font color="#000000">uniform_01</font></b><font color="#990000">(</font>n<font color="#990000">,</font> x<font color="#990000">);</font>

            <i><font color="#9A1900">// evaluate and return gradient using reverse mode</font></i>
            z  <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">);</font>
            dz <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Reverse</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">,</font> w<font color="#990000">);</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    <font color="#008080">size_t</font> thread                   <font color="#990000">=</font> CppAD<font color="#990000">::</font>thread_alloc<font color="#990000">::</font><b><font color="#000000">thread_num</font></b><font color="#990000">();</font>
    global_cppad_thread_alloc_inuse <font color="#990000">=</font> CppAD<font color="#990000">::</font>thread_alloc<font color="#990000">::</font><b><font color="#000000">inuse</font></b><font color="#990000">(</font>thread<font color="#990000">);</font>
    <i><font color="#9A1900">// --------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// Free temporary work space (any future atomic_mat_mul constructors</font></i>
    <i><font color="#9A1900">// would create new temporary work space.)</font></i>
    CppAD<font color="#990000">::</font>user_atomic<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">clear</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">// --------------------------------------------------------------------</font></i>

    <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: speed/cppad/mat_mul.cpp

</body>
</html>
