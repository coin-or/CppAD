<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Calling an Atomic Function</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Calling an Atomic Function">
<meta name="keywords" id="keywords" content=" calling atomic function syntax prototype purpose base advector afun ax ay call_id for_type restriction ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_four_call_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_four_ctor.htm" target="_top">Prev</a>
</td><td><a href="atomic_four_for_type.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_four</option>
<option>atomic_four_define</option>
<option>atomic_four_call</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_define_htm.js'></script>
</td>
<td>atomic_four_call</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Prototype</option>
<option>Purpose</option>
<option>Base</option>
<option>ADVector</option>
<option>afun</option>
<option>ax</option>
<option>ay</option>
<option>call_id</option>
<option>for_type</option>
<option>---..Restriction</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Calling an Atomic Function</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>call_id</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
<br>
<b><big><a name="Prototype" id="Prototype">Prototype</a></big></b>

<pre><tt>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font> <b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">ADVector</font><font color="#990000">&gt;</font>
<font color="#009900">void</font> atomic_four<font color="#990000">&lt;</font>Base<font color="#990000">&gt;::</font><b><font color="#0000FF">operator</font></b><font color="#990000">()(</font>
    <font color="#008080">size_t</font>           call_id <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> ADVector<font color="#990000">&amp;</font>  ax      <font color="#990000">,</font>
    ADVector<font color="#990000">&amp;</font>        ay      <font color="#990000">)</font></tt></pre>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
Given 
<code><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i></code>
, this call computes the corresponding value of 
<code><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i></code>
.
If 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 operations are being recorded,
it enters the computation as an atomic operation in the recording;
see <a href="independent.htm#Start Recording" target="_top"><span style='white-space: nowrap'>start&nbsp;recording</span></a>
.

<br>
<br>
<b><big><a name="Base" id="Base">Base</a></big></b>
<br>
This is the <a href="atomic_four_ctor.htm#atomic_four.Base" target="_top"><span style='white-space: nowrap'>Base</span></a>

in the 
<code><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i></code>
 constructor.
It is also the 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 type of the elements of

<code><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i></code>
 in the atomic function call.
To be specific, the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>ay</span></font></i></code>
 have type

<code><font color="blue"><span style='white-space: nowrap'>AD</span></font><i><font color="black"><span style='white-space: nowrap'>&lt;</span></font></i><font color="blue"><span style='white-space: nowrap'>Base</span></font><i><font color="black"><span style='white-space: nowrap'>&gt;</span></font></i></code>
.

<br>
<br>
<b><big><a name="ADVector" id="ADVector">ADVector</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>ADVector</span></font></i></code>
 must be a
<a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>simple&nbsp;vector&nbsp;class</span></a>
 with elements of type

<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
.

<br>
<br>
<b><big><a name="afun" id="afun">afun</a></big></b>
<br>
is a <a href="atomic_four_ctor.htm#atomic_user" target="_top"><span style='white-space: nowrap'>atomic_user</span></a>
 object
and this 
<code><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i></code>
 function call is implemented by the
<a href="atomic_four_ctor.htm#atomic_four" target="_top"><span style='white-space: nowrap'>atomic_four</span></a>
 class.

<br>
<br>
<b><big><a name="ax" id="ax">ax</a></big></b>
<br>
The size of this vector determines
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
It specifies vector <small>@(@
x \in \B{R}^n
@)@</small>
at which an 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 version of
<small>@(@
y = g(x)
@)@</small> is to be evaluated.

<br>
<br>
<b><big><a name="ay" id="ay">ay</a></big></b>
<br>
The size of this vector determines 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
.
The input values of its elements
are not specified (must not matter).
Upon return, it is an 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 version of
<small>@(@
y = g(x)
@)@</small>.

<br>
<br>
<b><big><a name="call_id" id="call_id">call_id</a></big></b>
<br>
This optional argument has default value zero.
It can be used to specify additional information about this call to

<code><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i></code>
. For example, it could specify the index in vector of structures
in the 
<code><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i></code>
 object where the actual information is placed.

<br>
<br>
<b><big><a name="for_type" id="for_type">for_type</a></big></b>
<br>
The <a href="atomic_four_for_type.htm" target="_top"><span style='white-space: nowrap'>for_type</span></a>
 routine will be called once,
for each call to an atomic function,
before any other callbacks corresponding to the atomic function call.
This enables you to store, during the <code><font color="blue">for_type</font></code> routine,
the values in
<a href="atomic_four_for_type.htm#type_x" target="_top"><span style='white-space: nowrap'>type_x</span></a>
 and or
<a href="atomic_four_for_type.htm#type_y" target="_top"><span style='white-space: nowrap'>type_y</span></a>
 corresponding
to this atomic function call.

<br>
<br>
<big><a name="for_type.Restriction" id="for_type.Restriction">Restriction</a></big>
<br>
The value of 
<code><i><font color="black"><span style='white-space: nowrap'>call_id</span></font></i></code>
 must be less than or equal

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;std::numeric_limits&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>cppad_tape_id_type</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;::max()<br>
</span></font></code>
see <a href="cmake.htm#cppad_tape_id_type" target="_top"><span style='white-space: nowrap'>cppad_tape_id_type</span></a>
.


<hr>Input File: include/cppad/core/atomic/four/call.hpp

</body>
</html>
