<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Absolute Zero Multiplication</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Absolute Zero Multiplication">
<meta name="keywords" id="keywords" content=" absolute zero multiplication syntax purpose base ad&lt;base&gt; vecad&lt;base&gt; example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_azmul_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="pow_nan.cpp.htm" target="_top">Prev</a>
</td><td><a href="azmul.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>binary_math</option>
<option>azmul</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_ad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_advalued_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_binary_math_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_azmul_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Base</option>
<option>AD&lt;Base&gt;</option>
<option>VecAD&lt;Base&gt;</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Absolute Zero Multiplication</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>z</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;azmul(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
Evaluates multiplication with an absolute zero
for any of the possible types listed below.
The result is given by
<small>@[@

z = \left\{ \begin{array}{ll}
    0          & {\rm if} \; x = 0 \\
    x \cdot y  & {\rm otherwise}
\end{array} \right.

@]@</small>
Note if 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 is zero and 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 is infinity,
ieee multiplication would result in not a number whereas

<code><i><font color="black"><span style='white-space: nowrap'>z</span></font></i></code>
 would be zero.

<br>
<br>
<b><big><a name="Base" id="Base">Base</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 satisfies the
<a href="base_require.htm" target="_top"><span style='white-space: nowrap'>base&nbsp;type&nbsp;requirements</span></a>

and arguments 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 have prototypes

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
then the result 
<code><i><font color="black"><span style='white-space: nowrap'>z</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>z</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="AD&lt;Base&gt;" id="AD&lt;Base&gt;">AD&lt;Base&gt;</a></big></b>
<br>
If the arguments 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 have prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
then the result 
<code><i><font color="black"><span style='white-space: nowrap'>z</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>z</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="VecAD&lt;Base&gt;" id="VecAD&lt;Base&gt;">VecAD&lt;Base&gt;</a></big></b>
<br>
If the arguments 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 have prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;VecAD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;::reference&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;VecAD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;::reference&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
then the result 
<code><i><font color="black"><span style='white-space: nowrap'>z</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>z</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
The file
<a href="azmul.cpp.htm" target="_top"><span style='white-space: nowrap'>azmul.cpp</span></a>

is an examples and tests of this function.


<hr>Input File: include/cppad/core/azmul.hpp

</body>
</html>
