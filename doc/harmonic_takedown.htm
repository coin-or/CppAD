<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Take Down Multi-threading Sum of 1/i</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Take Down Multi-threading Sum of 1/i">
<meta name="keywords" id="keywords" content=" take down multi-threading sum 1/i syntax purpose thread source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_harmonic_takedown_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="harmonic_worker.htm" target="_top">Prev</a>
</td><td><a href="harmonic_sum.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>harmonic.cpp</option>
<option>harmonic_takedown</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_multi_thread_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_thread_test.cpp_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_harmonic.cpp_htm.js'></script>
</td>
<td>harmonic_takedown</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Thread</option>
<option>sum</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Take Down Multi-threading Sum of 1/i</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;harmonic_takedown(</span></font><i><font color="black"><span style='white-space: nowrap'>sum</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This routine does the takedown for splitting
the summation that defines the harmonic series
<small>@[@

    s = 1 + 1/2 + 1/3 + ... + 1/n

@]@</small>
into separate parts for each thread; see <a href="harmonic_setup.htm" target="_top"><span style='white-space: nowrap'>harmonic_setup</span></a>
.

<br>
<br>
<b><big><a name="Thread" id="Thread">Thread</a></big></b>
<br>
It is assumed that this function is called by thread zero,
and all the other threads have completed their work and are blocked (waiting).

<br>
<br>
<b><big><a name="sum" id="sum">sum</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;double&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sum</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The input value of the argument does not matter.
Upon return it is the value of the summation; i.e. <small>@(@
s
@)@</small>.

<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
<font color="#009900">bool</font> <b><font color="#000000">harmonic_takedown</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">&amp;</font> sum<font color="#990000">)</font>
<font color="#FF0000">{</font>   <i><font color="#9A1900">// sum = 1/num_sum + 1/(num_sum-1) + ... + 1</font></i>
    <font color="#009900">bool</font> ok            <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    ok                <font color="#990000">&amp;=</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">thread_num</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
    <font color="#008080">size_t</font> num_threads <font color="#990000">=</font> std<font color="#990000">::</font><b><font color="#000000">max</font></b><font color="#990000">(</font>num_threads_<font color="#990000">,</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">));</font>
    sum                <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// go down so that free memory for other threads before memory for master</font></i>
    <font color="#008080">size_t</font> thread_num <font color="#990000">=</font> num_threads<font color="#990000">;</font>
    <b><font color="#0000FF">while</font></b><font color="#990000">(</font>thread_num<font color="#990000">--)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// check that this tread was ok with the work it did</font></i>
        ok  <font color="#990000">&amp;=</font> work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>ok<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// add this threads contribution to the sum</font></i>
        sum <font color="#990000">+=</font> work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>sum<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// delete problem specific information</font></i>
        <font color="#009900">void</font><font color="#990000">*</font> v_ptr <font color="#990000">=</font> <b><font color="#0000FF">static_cast</font></b><font color="#990000">&lt;</font><font color="#009900">void</font><font color="#990000">*&gt;(</font> work_all_<font color="#990000">[</font>thread_num<font color="#990000">]</font> <font color="#990000">);</font>
        thread_alloc<font color="#990000">::</font><b><font color="#000000">return_memory</font></b><font color="#990000">(</font> v_ptr <font color="#990000">);</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// check that there is no longer any memory inuse by this thread</font></i>
        <i><font color="#9A1900">// (for general applications, the master might still be using memory)</font></i>
        ok <font color="#990000">&amp;=</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">inuse</font></b><font color="#990000">(</font>thread_num<font color="#990000">)</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// return all memory being held for future use by this thread</font></i>
        thread_alloc<font color="#990000">::</font><b><font color="#000000">free_available</font></b><font color="#990000">(</font>thread_num<font color="#990000">);</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/multi_thread/harmonic.cpp

</body>
</html>
