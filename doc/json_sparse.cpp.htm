<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Json Representation of a Sparse Matrix: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Json Representation of a Sparse Matrix: Example and Test">
<meta name="keywords" id="keywords" content=" json representation sparse matrix: example test discussion source code ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_json_sparse.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="json_get_started.cpp.htm" target="_top">Prev</a>
</td><td><a href="cpp_ad_graph.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>other_adfun</option>
<option>json_ad_graph</option>
<option>json_sparse.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_other_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_json_ad_graph_htm.js'></script>
</td>
<td>json_sparse.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Discussion</option>
<option>Source Code</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Json Representation of a Sparse Matrix: Example and Test</big></big></b></center>
<br>
<b><big><a name="Discussion" id="Discussion">Discussion</a></big></b>
<br>
The example using a CppAD Json to represent the sparse matrix
<small>@[@

\partial_x f(x, p) = \left( \begin{array}{ccc}
    p_0 & 0    & 0 \\
    0   & p_1  & 0 \\
    0   & 0    & c_0
\end{array} \right)

@]@</small>
where <small>@(@
c_0
@)@</small> is the constant 3.

<br>
<br>
<b><big><a name="Source Code" id="Source Code">Source Code</a></big></b>

<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>

<font color="#009900">bool</font> <b><font color="#000000">sparse</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <font color="#008080">vector&lt;size_t&gt;</font> s_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <font color="#008080">vector&lt;double&gt;</font> d_vector<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// An AD graph example</font></i>
    <i><font color="#9A1900">// node_1 : p[0]</font></i>
    <i><font color="#9A1900">// node_2 : p[1]</font></i>
    <i><font color="#9A1900">// node_3 : x[0]</font></i>
    <i><font color="#9A1900">// node_4 : x[1]</font></i>
    <i><font color="#9A1900">// node_5 : x[2]</font></i>
    <i><font color="#9A1900">// node_6 : c[0]</font></i>
    <i><font color="#9A1900">// node_7 : p[0] * x[0]</font></i>
    <i><font color="#9A1900">// node_8 : p[1] * x[1]</font></i>
    <i><font color="#9A1900">// node_9 : c[0] * x[2]</font></i>
    <i><font color="#9A1900">// y[0]   = p[0] * x[0]</font></i>
    <i><font color="#9A1900">// y[1]   = p[1] * x[1]</font></i>
    <i><font color="#9A1900">// y[2]   = c[0] * x[0]</font></i>
    <i><font color="#9A1900">// use single quote to avoid having to escape double quote</font></i>
    std<font color="#990000">::</font><font color="#008080">string</font> json <font color="#990000">=</font>
        <font color="#FF0000">"{</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
        <font color="#FF0000">"   'function_name'  : 'sparse example',</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
        <font color="#FF0000">"   'op_define_vec'  : [ 1, [</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
        <font color="#FF0000">"       { 'op_code':1, 'name':'mul', 'n_arg':2 } ]</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
        <font color="#FF0000">"   ],</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
        <font color="#FF0000">"   'n_dynamic_ind'  : 2,</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
        <font color="#FF0000">"   'n_variable_ind' : 3,</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
        <font color="#FF0000">"   'constant_vec'   : [ 1, [ 3.0 ] ],</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
        <font color="#FF0000">"   'op_usage_vec'   : [ 3, [</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
        <font color="#FF0000">"       [ 1, 1, 3 ] , </font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
        <font color="#FF0000">"       [ 1, 2, 4 ] , </font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
        <font color="#FF0000">"       [ 1, 6, 5 ] ] </font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
        <font color="#FF0000">"   ],</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
        <font color="#FF0000">"   'dependent_vec'   : [ 3, [7, 8, 9] ] </font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
        <font color="#FF0000">"}</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
    <i><font color="#9A1900">// Convert the single quote to double quote</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> json<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font> <font color="#990000">++</font>i<font color="#990000">)</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> json<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">==</font> <font color="#FF0000">'</font><font color="#CC33CC">\'</font><font color="#FF0000">'</font> <font color="#990000">)</font> json<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#FF0000">'"'</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> fun<font color="#990000">;</font>
    fun<font color="#990000">.</font><b><font color="#000000">from_json</font></b><font color="#990000">(</font>json<font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> fun<font color="#990000">.</font><b><font color="#000000">Domain</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">3</font><font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> fun<font color="#990000">.</font><b><font color="#000000">Range</font></b><font color="#990000">()</font>  <font color="#990000">==</font> <font color="#993399">3</font><font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> fun<font color="#990000">.</font><b><font color="#000000">size_dyn_ind</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// Point at which we are going to evaluate the Jacobian of f(x, p).</font></i>
    <i><font color="#9A1900">// The Jacobian is constant w.r.t. x, so the value of x does not matter.</font></i>
    <font color="#008080">vector&lt;double&gt;</font> <b><font color="#000000">p</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">),</font> <b><font color="#000000">x</font></b><font color="#990000">(</font><font color="#993399">3</font><font color="#990000">);</font>
    p<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
    p<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">2.0</font><font color="#990000">;</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font> <font color="#990000">++</font>j<font color="#990000">)</font>
        x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// set the dynamic parameters</font></i>
    fun<font color="#990000">.</font><b><font color="#000000">new_dynamic</font></b><font color="#990000">(</font>p<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// compute the sparsity pattern for f_x(x, p)</font></i>
    <font color="#008080">vector&lt;bool&gt;</font> <b><font color="#000000">select_domain</font></b><font color="#990000">(</font><font color="#993399">3</font><font color="#990000">);</font>
    <font color="#008080">vector&lt;bool&gt;</font> <b><font color="#000000">select_range</font></b><font color="#990000">(</font><font color="#993399">3</font><font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> <font color="#993399">3</font><font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
    <font color="#FF0000">{</font>   select_domain<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
        select_range<font color="#990000">[</font>i<font color="#990000">]</font>  <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <font color="#009900">bool</font> transpose <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    CppAD<font color="#990000">::</font><font color="#008080">sparse_rc&lt;s_vector&gt;</font> pattern<font color="#990000">;</font>
    fun<font color="#990000">.</font><b><font color="#000000">subgraph_sparsity</font></b><font color="#990000">(</font>select_domain<font color="#990000">,</font> select_range<font color="#990000">,</font> transpose<font color="#990000">,</font> pattern<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// compute the entire Jacobian</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">sparse_rcv&lt;s_vector, d_vector&gt;</font> <b><font color="#000000">subset</font></b><font color="#990000">(</font>pattern<font color="#990000">);</font>
    fun<font color="#990000">.</font><b><font color="#000000">subgraph_jac_rev</font></b><font color="#990000">(</font>x<font color="#990000">,</font> subset<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// information in the sparse Jacobian</font></i>
    <b><font color="#0000FF">const</font></b> s_vector<font color="#990000">&amp;</font> <b><font color="#000000">row</font></b><font color="#990000">(</font> subset<font color="#990000">.</font><b><font color="#000000">row</font></b><font color="#990000">()</font> <font color="#990000">);</font>
    <b><font color="#0000FF">const</font></b> s_vector<font color="#990000">&amp;</font> <b><font color="#000000">col</font></b><font color="#990000">(</font> subset<font color="#990000">.</font><b><font color="#000000">col</font></b><font color="#990000">()</font> <font color="#990000">);</font>
    <b><font color="#0000FF">const</font></b> d_vector<font color="#990000">&amp;</font> <b><font color="#000000">val</font></b><font color="#990000">(</font> subset<font color="#990000">.</font><b><font color="#000000">val</font></b><font color="#990000">()</font> <font color="#990000">);</font>
    <font color="#008080">size_t</font>   nnz       <font color="#990000">=</font> subset<font color="#990000">.</font><b><font color="#000000">nnz</font></b><font color="#990000">();</font>
    <font color="#008080">s_vector</font> row_major <font color="#990000">=</font> subset<font color="#990000">.</font><b><font color="#000000">row_major</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// check number of non-zero elements in sparse matrix</font></i>
    ok      <font color="#990000">&amp;=</font> nnz <font color="#990000">==</font> <font color="#993399">3</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// check first element of matrix (in row major order)</font></i>
    <font color="#008080">size_t</font> k <font color="#990000">=</font> row_major<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
    ok      <font color="#990000">&amp;=</font> row<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
    ok      <font color="#990000">&amp;=</font> col<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
    ok      <font color="#990000">&amp;=</font> val<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">==</font> p<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// check second element of matrix</font></i>
    k        <font color="#990000">=</font> row_major<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
    ok      <font color="#990000">&amp;=</font> row<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">;</font>
    ok      <font color="#990000">&amp;=</font> col<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">;</font>
    ok      <font color="#990000">&amp;=</font> val<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">==</font> p<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// check third element of matrix</font></i>
    k        <font color="#990000">=</font> row_major<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">];</font>
    ok      <font color="#990000">&amp;=</font> row<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">;</font>
    ok      <font color="#990000">&amp;=</font> col<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">;</font>
    ok      <font color="#990000">&amp;=</font> val<font color="#990000">[</font>k<font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">3.0</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/json/sparse.cpp

</body>
</html>
