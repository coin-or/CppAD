<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Example Optimizing Atomic Vector Usage</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Example Optimizing Atomic Vector Usage">
<meta name="keywords" id="keywords" content=" example optimizing atomic vector usage f(u v) source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_four_vector_rev_depend.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_four_vector_neg.cpp.htm" target="_top">Prev</a>
</td><td><a href="atomic_four_vector_sub.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_four</option>
<option>atomic_four_example</option>
<option>atomic_four_vector</option>
<option>atomic_four_vector_rev_depend.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_example_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_vector_htm.js'></script>
</td>
<td>atomic_four_vector_rev_depend.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>f(u, v)</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Example Optimizing Atomic Vector Usage</big></big></b></center>
<br>
<b><big><a name="f(u, v)" id="f(u, v)">f(u, v)</a></big></b>
<br>
For this example,
<small>@(@
f : \B{R}^{3m} \rightarrow \B{R}
@)@</small>
is defined by <small>@(@
f(u, v, w) = - ( u_0 + v_0 ) * w_0
@)@</small>.
where 
<code><i><font color="black"><span style='white-space: nowrap'>u</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>v</span></font></i></code>
, and 
<code><i><font color="black"><span style='white-space: nowrap'>w</span></font></i></code>
 are in <small>@(@
\B{R}^m
@)@</small>.

<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/example/atomic_four/vector/vector.hpp&gt;</font>
<font color="#009900">bool</font> <b><font color="#000000">rev_depend</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>NearEqual<font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// vec_op</font></i>
    <i><font color="#9A1900">// atomic vector_op object</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">atomic_vector&lt;double&gt;</font> <b><font color="#000000">vec_op</font></b><font color="#990000">(</font><font color="#FF0000">"atomic_vector"</font><font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// m</font></i>
    <i><font color="#9A1900">// size of u, v, and w</font></i>
    <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#993399">6</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// n</font></i>
    <font color="#008080">size_t</font> n <font color="#990000">=</font> <font color="#993399">3</font> <font color="#990000">*</font> m<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// add_op, mul_op, neg_op</font></i>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font>atomic_vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><font color="#008080">op_enum_t</font> op_enum_t<font color="#990000">;</font>
    <font color="#008080">op_enum_t</font> add_op <font color="#990000">=</font> CppAD<font color="#990000">::</font>atomic_vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font>add_enum<font color="#990000">;</font>
    <font color="#008080">op_enum_t</font> mul_op <font color="#990000">=</font> CppAD<font color="#990000">::</font>atomic_vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font>mul_enum<font color="#990000">;</font>
    <font color="#008080">op_enum_t</font> neg_op <font color="#990000">=</font> CppAD<font color="#990000">::</font>atomic_vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font>neg_enum<font color="#990000">;</font>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// Record f(u, v, w) = - (u + v) * w</font></i>
    <i><font color="#9A1900">// -----------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// Independent variable vector</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font> <b><font color="#000000">a_ind</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
        a_ind<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;(</font><font color="#993399">1</font> <font color="#990000">+</font> j<font color="#990000">);</font>
    CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>a_ind<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// au, av, aw</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font> <b><font color="#000000">au</font></b><font color="#990000">(</font>m<font color="#990000">),</font> <b><font color="#000000">av</font></b><font color="#990000">(</font>m<font color="#990000">),</font> <b><font color="#000000">aw</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
    <font color="#FF0000">{</font>   au<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> a_ind<font color="#990000">[</font><font color="#993399">0</font> <font color="#990000">*</font> m <font color="#990000">+</font> i<font color="#990000">];</font>
        av<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> a_ind<font color="#990000">[</font><font color="#993399">1</font> <font color="#990000">*</font> m <font color="#990000">+</font> i<font color="#990000">];</font>
        aw<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> a_ind<font color="#990000">[</font><font color="#993399">2</font> <font color="#990000">*</font> m <font color="#990000">+</font> i<font color="#990000">];</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// ax = (au, av)</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font><font color="#993399">2</font> <font color="#990000">*</font> m<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
    <font color="#FF0000">{</font>   ax<font color="#990000">[</font>i<font color="#990000">]</font>     <font color="#990000">=</font> au<font color="#990000">[</font>i<font color="#990000">];</font>
        ax<font color="#990000">[</font>m <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">=</font> av<font color="#990000">[</font>i<font color="#990000">];</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// ay = u + v</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font> <b><font color="#000000">ay</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    <b><font color="#000000">vec_op</font></b><font color="#990000">(</font>add_op<font color="#990000">,</font> ax<font color="#990000">,</font> ay<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// ax = (ay, aw)</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
    <font color="#FF0000">{</font>   ax<font color="#990000">[</font>i<font color="#990000">]</font>     <font color="#990000">=</font> ay<font color="#990000">[</font>i<font color="#990000">];</font>
        ax<font color="#990000">[</font>m <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">=</font> aw<font color="#990000">[</font>i<font color="#990000">];</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// az = ay * w</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font> <b><font color="#000000">az</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    <b><font color="#000000">vec_op</font></b><font color="#990000">(</font>mul_op<font color="#990000">,</font> ax<font color="#990000">,</font> az<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// ay = - az</font></i>
    <b><font color="#000000">vec_op</font></b><font color="#990000">(</font>neg_op<font color="#990000">,</font> az<font color="#990000">,</font> ay<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// f</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font> <b><font color="#000000">a_dep</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
    a_dep<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> ay<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;double&gt;</font> <b><font color="#000000">f</font></b><font color="#990000">(</font>a_ind<font color="#990000">,</font> a_dep<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// size_var</font></i>
    <i><font color="#9A1900">// phantom variable, independent variables, operator results</font></i>
    ok   <font color="#990000">&amp;=</font> f<font color="#990000">.</font><b><font color="#000000">size_var</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">+</font> n <font color="#990000">+</font> <font color="#993399">3</font> <font color="#990000">*</font> m<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// optimize</font></i>
    <i><font color="#9A1900">// The atomic funciton rev_depend routine is called by optimizer</font></i>
    f<font color="#990000">.</font><b><font color="#000000">optimize</font></b><font color="#990000">();</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// size_var</font></i>
    <i><font color="#9A1900">// phantom variablem, independent variables, operator variables</font></i>
    ok <font color="#990000">&amp;=</font> f<font color="#990000">.</font><b><font color="#000000">size_var</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">+</font> n <font color="#990000">+</font> <font color="#993399">3</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/atomic_four/vector/rev_depend.cpp

</body>
</html>
