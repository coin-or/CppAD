<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Nonlinear Programming Retaping: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Nonlinear Programming Retaping: Example and Test">
<meta name="keywords" id="keywords" content=" nonlinear programming retaping: example test purpose ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_ipopt_solve_retape.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="ipopt_solve_get_started.cpp.htm" target="_top">Prev</a>
</td><td><a href="ipopt_solve_ode_inverse.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ipopt_solve</option>
<option>ipopt_solve_retape.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_ipopt_solve_htm.js'></script>
</td>
<td>ipopt_solve_retape.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Nonlinear Programming Retaping: Example and Test</big></big></b></center>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This example program demonstrates a case were the <code><font color="blue">ipopt::solve</font></code>
argument <a href="ipopt_solve.htm#options.Retape" target="_top"><span style='white-space: nowrap'>retape</span></a>
 should be true.

<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/ipopt/solve.hpp&gt;</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>

    <b><font color="#0000FF">class</font></b> <font color="#008080">FG_eval</font> <font color="#FF0000">{</font>
    <b><font color="#0000FF">public</font></b><font color="#990000">:</font>
        <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font> AD<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font> ADvector<font color="#990000">;</font>
        <font color="#009900">void</font> <b><font color="#0000FF">operator</font></b><font color="#990000">()(</font>ADvector<font color="#990000">&amp;</font> fg<font color="#990000">,</font> <b><font color="#0000FF">const</font></b> ADvector<font color="#990000">&amp;</font> x<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#000000">assert</font></b><font color="#990000">(</font> fg<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>
            <b><font color="#000000">assert</font></b><font color="#990000">(</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font>  <font color="#990000">==</font> <font color="#993399">1</font> <font color="#990000">);</font>

            <i><font color="#9A1900">// compute the Huber function using a conditional</font></i>
            <i><font color="#9A1900">// statement that depends on the value of x.</font></i>
            <font color="#009900">double</font> eps <font color="#990000">=</font> <font color="#993399">0.1</font><font color="#990000">;</font>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <b><font color="#000000">fabs</font></b><font color="#990000">(</font>x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">])</font> <font color="#990000">&lt;=</font> eps <font color="#990000">)</font>
                fg<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">/</font> <font color="#990000">(</font><font color="#993399">2.0</font> <font color="#990000">*</font> eps<font color="#990000">);</font>
            <b><font color="#0000FF">else</font></b>
                fg<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">fabs</font></b><font color="#990000">(</font>x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">])</font> <font color="#990000">-</font> eps <font color="#990000">/</font> <font color="#993399">2.0</font><font color="#990000">;</font>

            <b><font color="#0000FF">return</font></b><font color="#990000">;</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font><font color="#990000">;</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">retape</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font> <font color="#009900">double</font> <font color="#990000">)</font> Dvector<font color="#990000">;</font>

    <i><font color="#9A1900">// number of independent variables (domain dimension for f and g)</font></i>
    <font color="#008080">size_t</font> nx <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
    <i><font color="#9A1900">// number of constraints (range dimension for g)</font></i>
    <font color="#008080">size_t</font> ng <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <i><font color="#9A1900">// initial value, lower and upper limits, for the independent variables</font></i>
    <font color="#008080">Dvector</font> <b><font color="#000000">xi</font></b><font color="#990000">(</font>nx<font color="#990000">),</font> <b><font color="#000000">xl</font></b><font color="#990000">(</font>nx<font color="#990000">),</font> <b><font color="#000000">xu</font></b><font color="#990000">(</font>nx<font color="#990000">);</font>
    xi<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">2.0</font><font color="#990000">;</font>
    xl<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">-</font><font color="#993399">1e+19</font><font color="#990000">;</font>
    xu<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#990000">+</font><font color="#993399">1e+19</font><font color="#990000">;</font>
    <i><font color="#9A1900">// lower and upper limits for g</font></i>
    <font color="#008080">Dvector</font> <b><font color="#000000">gl</font></b><font color="#990000">(</font>ng<font color="#990000">),</font> <b><font color="#000000">gu</font></b><font color="#990000">(</font>ng<font color="#990000">);</font>

    <i><font color="#9A1900">// object that computes objective and constraints</font></i>
    <font color="#008080">FG_eval</font> fg_eval<font color="#990000">;</font>

    <i><font color="#9A1900">// options</font></i>
    std<font color="#990000">::</font><font color="#008080">string</font> options<font color="#990000">;</font>
    <i><font color="#9A1900">// retape operation sequence for each new x</font></i>
    options <font color="#990000">+=</font> <font color="#FF0000">"Retape  true</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
    <i><font color="#9A1900">// turn off any printing</font></i>
    options <font color="#990000">+=</font> <font color="#FF0000">"Integer print_level   0</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
    options <font color="#990000">+=</font> <font color="#FF0000">"String  sb          yes</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
    <i><font color="#9A1900">// maximum number of iterations</font></i>
    options <font color="#990000">+=</font> <font color="#FF0000">"Integer max_iter      10</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
    <i><font color="#9A1900">// approximate accuracy in first order necessary conditions;</font></i>
    <i><font color="#9A1900">// see Mathematical Programming, Volume 106, Number 1,</font></i>
    <i><font color="#9A1900">// Pages 25-57, Equation (6)</font></i>
    options <font color="#990000">+=</font> <font color="#FF0000">"Numeric tol           1e-9</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
    <i><font color="#9A1900">// derivative testing</font></i>
    options <font color="#990000">+=</font> <font color="#FF0000">"String  derivative_test            second-order</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
    <i><font color="#9A1900">// maximum amount of random pertubation; e.g.,</font></i>
    <i><font color="#9A1900">// when evaluation finite diff</font></i>
    options <font color="#990000">+=</font> <font color="#FF0000">"Numeric point_perturbation_radius  0.</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>

    <i><font color="#9A1900">// place to return solution</font></i>
    CppAD<font color="#990000">::</font>ipopt<font color="#990000">::</font><font color="#008080">solve_result&lt;Dvector&gt;</font> solution<font color="#990000">;</font>

    <i><font color="#9A1900">// solve the problem</font></i>
    CppAD<font color="#990000">::</font>ipopt<font color="#990000">::</font>solve<font color="#990000">&lt;</font>Dvector<font color="#990000">,</font> FG_eval<font color="#990000">&gt;(</font>
        options<font color="#990000">,</font> xi<font color="#990000">,</font> xl<font color="#990000">,</font> xu<font color="#990000">,</font> gl<font color="#990000">,</font> gu<font color="#990000">,</font> fg_eval<font color="#990000">,</font> solution
    <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// Check some of the solution values</font></i>
    <i><font color="#9A1900">//</font></i>
    ok <font color="#990000">&amp;=</font> solution<font color="#990000">.</font>status <font color="#990000">==</font> CppAD<font color="#990000">::</font>ipopt<font color="#990000">::</font>solve_result<font color="#990000">&lt;</font>Dvector<font color="#990000">&gt;::</font>success<font color="#990000">;</font>
    <font color="#009900">double</font> rel_tol    <font color="#990000">=</font> <font color="#993399">1e-6</font><font color="#990000">;</font>  <i><font color="#9A1900">// relative tolerance</font></i>
    <font color="#009900">double</font> abs_tol    <font color="#990000">=</font> <font color="#993399">1e-6</font><font color="#990000">;</font>  <i><font color="#9A1900">// absolute tolerance</font></i>
    ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font> solution<font color="#990000">.</font>x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">],</font> <font color="#993399">0.0</font><font color="#990000">,</font>  rel_tol<font color="#990000">,</font> abs_tol<font color="#990000">);</font>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/ipopt_solve/retape.cpp

</body>
</html>
