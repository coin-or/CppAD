<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Atomic Vector Add Operator: Example Implementation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Atomic Vector Add Operator: Example Implementation">
<meta name="keywords" id="keywords" content=" atomic vector add operator: example implementation forward mode reverse source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_four_vector_add_op.hpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_four_vector_rev_depend.hpp.htm" target="_top">Prev</a>
</td><td><a href="atomic_four_vector_sub_op.hpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>atomic</option>
<option>atomic_four</option>
<option>atomic_four_example</option>
<option>atomic_four_vector</option>
<option>atomic_four_vector_implement</option>
<option>atomic_four_vector_add_op.hpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_example_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_vector_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_four_vector_implement_htm.js'></script>
</td>
<td>atomic_four_vector_add_op.hpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Forward Mode</option>
<option>Reverse Mode</option>
<option>Example</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Atomic Vector Add Operator: Example Implementation</big></big></b></center>
<br>
<b><big><a name="Forward Mode" id="Forward Mode">Forward Mode</a></big></b>
<br>
see theory for forward mode
<a href="forwardtheory.htm#Binary Operators.Addition" target="_top"><span style='white-space: nowrap'>addition</span></a>
.

<br>
<br>
<b><big><a name="Reverse Mode" id="Reverse Mode">Reverse Mode</a></big></b>
<br>
see theory for reverse mode
<a href="reversetheory.htm#Binary Operators.Addition" target="_top"><span style='white-space: nowrap'>addition</span></a>
.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="atomic_four_vector_add.cpp.htm" target="_top"><span style='white-space: nowrap'>atomic_four_vector_add.cpp</span></a>
 contains an example
and test for this operator.

<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/example/atomic_four/vector/vector.hpp&gt;</font>

<b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font> <i><font color="#9A1900">// BEGIN_CPPAD_NAMESPACE</font></i>
<i><font color="#9A1900">// ---------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// comment below is used by atomic_vector.omh</font></i>
<i><font color="#9A1900">// BEGIN forward_add</font></i>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font>
<font color="#009900">void</font> atomic_vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;::</font><b><font color="#000000">forward_add</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font>                                           m<font color="#990000">,</font>
    <font color="#008080">size_t</font>                                           p<font color="#990000">,</font>
    <font color="#008080">size_t</font>                                           q<font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                       tx<font color="#990000">,</font>
    CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                             ty<font color="#990000">)</font>
<font color="#FF0000">{</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> p<font color="#990000">;</font> k <font color="#990000">&lt;</font> q<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <font color="#008080">size_t</font> u_index  <font color="#990000">=</font>       i <font color="#990000">*</font> q <font color="#990000">+</font> k<font color="#990000">;</font>
            <font color="#008080">size_t</font> v_index  <font color="#990000">=</font> <font color="#990000">(</font>m <font color="#990000">+</font> i<font color="#990000">)</font> <font color="#990000">*</font> q <font color="#990000">+</font> k<font color="#990000">;</font>
            <font color="#008080">size_t</font> y_index  <font color="#990000">=</font>       i <font color="#990000">*</font> q <font color="#990000">+</font> k<font color="#990000">;</font>
            <i><font color="#9A1900">// y_i^k = u_i^k + v_i^k</font></i>
            ty<font color="#990000">[</font>y_index<font color="#990000">]</font>     <font color="#990000">=</font> tx<font color="#990000">[</font>u_index<font color="#990000">]</font> <font color="#990000">+</font> tx<font color="#990000">[</font>v_index<font color="#990000">];</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
<font color="#FF0000">}</font>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font>
<font color="#009900">void</font> atomic_vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;::</font><b><font color="#000000">forward_add</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font>                                           m<font color="#990000">,</font>
    <font color="#008080">size_t</font>                                           p<font color="#990000">,</font>
    <font color="#008080">size_t</font>                                           q<font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>          atx<font color="#990000">,</font>
    CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>                aty<font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#008080">size_t</font> n <font color="#990000">=</font> <font color="#993399">2</font> <font color="#990000">*</font> m<font color="#990000">;</font>
    <b><font color="#000000">assert</font></b><font color="#990000">(</font> atx<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> n <font color="#990000">*</font> q <font color="#990000">);</font>
    <b><font color="#000000">assert</font></b><font color="#990000">(</font> aty<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> m <font color="#990000">*</font> q <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// atu, atv</font></i>
    <font color="#008080">ad_const_iterator</font> atu <font color="#990000">=</font> atx<font color="#990000">.</font><b><font color="#000000">begin</font></b><font color="#990000">();</font>
    <font color="#008080">ad_const_iterator</font> atv <font color="#990000">=</font> atu <font color="#990000">+</font> <b><font color="#000000">ad_difference_type</font></b><font color="#990000">(</font>m <font color="#990000">*</font> q<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// ax</font></i>
    <font color="#008080">ad_vector</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <font color="#008080">ad_iterator</font> au <font color="#990000">=</font> ax<font color="#990000">.</font><b><font color="#000000">begin</font></b><font color="#990000">();</font>
    <font color="#008080">ad_iterator</font> av <font color="#990000">=</font> au <font color="#990000">+</font> <b><font color="#000000">ad_difference_type</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// ay</font></i>
    <font color="#008080">ad_vector</font> <b><font color="#000000">ay</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> p<font color="#990000">;</font> k <font color="#990000">&lt;</font> q<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// au = u^k</font></i>
        <b><font color="#000000">copy_mat_to_vec</font></b><font color="#990000">(</font>m<font color="#990000">,</font> q<font color="#990000">,</font> k<font color="#990000">,</font> atu<font color="#990000">,</font> au<font color="#990000">);</font>
        <i><font color="#9A1900">// av = v^k</font></i>
        <b><font color="#000000">copy_mat_to_vec</font></b><font color="#990000">(</font>m<font color="#990000">,</font> q<font color="#990000">,</font> k<font color="#990000">,</font> atv<font color="#990000">,</font> av<font color="#990000">);</font>
        <i><font color="#9A1900">// ay = au + av</font></i>
        <font color="#990000">(*</font><b><font color="#0000FF">this</font></b><font color="#990000">)(</font>add_enum<font color="#990000">,</font> ax<font color="#990000">,</font> ay<font color="#990000">);</font> <i><font color="#9A1900">// atomic vector add</font></i>
        <i><font color="#9A1900">// y^k = ay</font></i>
        <b><font color="#000000">copy_vec_to_mat</font></b><font color="#990000">(</font>m<font color="#990000">,</font> q<font color="#990000">,</font> k<font color="#990000">,</font> ay<font color="#990000">.</font><b><font color="#000000">begin</font></b><font color="#990000">(),</font> aty<font color="#990000">.</font><b><font color="#000000">begin</font></b><font color="#990000">()</font> <font color="#990000">);</font>
    <font color="#FF0000">}</font>
<font color="#FF0000">}</font>
<i><font color="#9A1900">// END forward_add</font></i>
<i><font color="#9A1900">// comment above is used by atomic_vector.omh</font></i>
<i><font color="#9A1900">// ---------------------------------------------------------------------------</font></i>
<i><font color="#9A1900">// reverse_add</font></i>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font>
<font color="#009900">void</font> atomic_vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;::</font><b><font color="#000000">reverse_add</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font>                                           m<font color="#990000">,</font>
    <font color="#008080">size_t</font>                                           q<font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                       tx<font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                       ty<font color="#990000">,</font>
    CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                             px<font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;&amp;</font>                       py<font color="#990000">)</font>
<font color="#FF0000">{</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> q<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <font color="#008080">size_t</font> u_index  <font color="#990000">=</font>       i <font color="#990000">*</font> q <font color="#990000">+</font> k<font color="#990000">;</font>
            <font color="#008080">size_t</font> v_index  <font color="#990000">=</font> <font color="#990000">(</font>m <font color="#990000">+</font> i<font color="#990000">)</font> <font color="#990000">*</font> q <font color="#990000">+</font> k<font color="#990000">;</font>
            <font color="#008080">size_t</font> y_index  <font color="#990000">=</font>       i <font color="#990000">*</font> q <font color="#990000">+</font> k<font color="#990000">;</font>
            <i><font color="#9A1900">// y_i^k = u_i^k + v_i^k</font></i>
            px<font color="#990000">[</font>u_index<font color="#990000">]</font> <font color="#990000">=</font> py<font color="#990000">[</font>y_index<font color="#990000">];</font>
            px<font color="#990000">[</font>v_index<font color="#990000">]</font> <font color="#990000">=</font> py<font color="#990000">[</font>y_index<font color="#990000">];</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
<font color="#FF0000">}</font>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">Base</font><font color="#990000">&gt;</font>
<font color="#009900">void</font> atomic_vector<font color="#990000">&lt;</font>Base<font color="#990000">&gt;::</font><b><font color="#000000">reverse_add</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font>                                           m<font color="#990000">,</font>
    <font color="#008080">size_t</font>                                           q<font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>          atx<font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>          aty<font color="#990000">,</font>
    CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>                apx<font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font> CppAD<font color="#990000">::</font>AD<font color="#990000">&lt;</font>Base<font color="#990000">&gt;</font> <font color="#990000">&gt;&amp;</font>          apy<font color="#990000">)</font>
<font color="#FF0000">{</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// just copying values does not add any operators to the tape.</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> k <font color="#990000">&lt;</font> q<font color="#990000">;</font> <font color="#990000">++</font>k<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <font color="#008080">size_t</font> u_index  <font color="#990000">=</font>       i <font color="#990000">*</font> q <font color="#990000">+</font> k<font color="#990000">;</font>
            <font color="#008080">size_t</font> v_index  <font color="#990000">=</font> <font color="#990000">(</font>m <font color="#990000">+</font> i<font color="#990000">)</font> <font color="#990000">*</font> q <font color="#990000">+</font> k<font color="#990000">;</font>
            <font color="#008080">size_t</font> y_index  <font color="#990000">=</font>       i <font color="#990000">*</font> q <font color="#990000">+</font> k<font color="#990000">;</font>
            <i><font color="#9A1900">// y_i^k = u_i^k + v_i^k</font></i>
            apx<font color="#990000">[</font>u_index<font color="#990000">]</font> <font color="#990000">=</font> apy<font color="#990000">[</font>y_index<font color="#990000">];</font>
            apx<font color="#990000">[</font>v_index<font color="#990000">]</font> <font color="#990000">=</font> apy<font color="#990000">[</font>y_index<font color="#990000">];</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
<font color="#FF0000">}</font>
<font color="#FF0000">}</font> <i><font color="#9A1900">// END_CPPAD_NAMESPACE</font></i></tt></pre>

<hr>Input File: include/cppad/example/atomic_four/vector/add_op.hpp

</body>
</html>
