<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Link to Speed Test Sparse Hessian</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Link to Speed Test Sparse Hessian">
<meta name="keywords" id="keywords" content=" link to speed test sparse hessian syntax prototype namespace method sparsity pattern size repeat x row col major lower triangular n_color double ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_link_sparse_hessian_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="link_poly.htm" target="_top">Prev</a>
</td><td><a href="link_sparse_jacobian.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_main</option>
<option>link_routines</option>
<option>link_sparse_hessian</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_speed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_speed_main_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_link_routines_htm.js'></script>
</td>
<td>link_sparse_hessian</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Prototype</option>
<option>Namespace</option>
<option>Method</option>
<option>Sparsity Pattern</option>
<option>size</option>
<option>repeat</option>
<option>x</option>
<option>row</option>
<option>col</option>
<option>Row Major</option>
<option>Lower Triangular</option>
<option>hessian</option>
<option>n_color</option>
<option>---..double</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@




<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Link to Speed Test Sparse Hessian</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;link_sparse_hessian(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>size</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>repeat</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>hessian</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_color</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
)</span></font></code>


<br>
<br>
<b><big><a name="Prototype" id="Prototype">Prototype</a></big></b>

<pre><tt>
<b><font color="#0000FF">extern</font></b> <font color="#009900">bool</font> <b><font color="#000000">link_sparse_hessian</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font>                           size      <font color="#990000">,</font>
    <font color="#008080">size_t</font>                           repeat    <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font>     row       <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font>     col       <font color="#990000">,</font>
    CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>           x         <font color="#990000">,</font>
    CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>           hessian   <font color="#990000">,</font>
    size_t<font color="#990000">&amp;</font>                          n_color
<font color="#990000">);</font></tt></pre>
<br>
<b><big><a name="Namespace" id="Namespace">Namespace</a></big></b>
<br>
The function <code><font color="blue">link_sparse_hessian</font></code> is in the global namespace,
not the <code><font color="blue">CppAD</font></code> namespace.

<br>
<br>
<b><big><a name="Method" id="Method">Method</a></big></b>
<br>
Given a row index vector <small>@(@
row
@)@</small>
and a second column vector <small>@(@
col
@)@</small>,
the corresponding function
<small>@(@
f : \B{R}^n \rightarrow \B{R}
@)@</small>
is defined by <a href="sparse_hes_fun.htm" target="_top"><span style='white-space: nowrap'>sparse_hes_fun</span></a>
.
The non-zero entries in the Hessian of this function have
one of the following forms:
<small>@[@

    \DD{f}{x[row[k]]}{x[row[k]]}
    \; , \;
    \DD{f}{x[row[k]]}{x[col[k]]}
    \; , \;
    \DD{f}{x[col[k]]}{x[row[k]]}
    \; , \;
    \DD{f}{x[col[k]]}{x[col[k]]}

@]@</small>
for some <small>@(@
k
@)@</small> between zero and <small>@(@
K-1
@)@</small>.
All the other terms of the Hessian are zero.

<br>
<br>
<b><big><a name="Sparsity Pattern" id="Sparsity Pattern">Sparsity Pattern</a></big></b>
<br>
The combination of 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
 determine
the sparsity pattern for the Hessian that is computed.
The calculation of this sparsity pattern,
if necessary to compute the Hessian,
is intended to be part of the timing for this test.

<br>
<br>
<b><big><a name="size" id="size">size</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>size</span></font></i></code>
, referred to as <small>@(@
n
@)@</small> below,
is the dimension of the domain space for <small>@(@
f(x)
@)@</small>.

<br>
<br>
<b><big><a name="repeat" id="repeat">repeat</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>repeat</span></font></i></code>
 is the number of times
to repeat the test
(with a different value for 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 corresponding to
each repetition).

<br>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
The size of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 is <small>@(@
n
@)@</small>; i.e., 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>size</span></font></i></code>
.
The input value of the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 does not matter.
On output, it has been set to the
argument value for which the function,
or its derivative, is being evaluated.
The value of this vector need not change with each repetition.

<br>
<br>
<b><big><a name="row" id="row">row</a></big></b>
<br>
The size of the vector 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
 defines the value <small>@(@
K
@)@</small>.
The input value of its elements does not matter.
On output,
all the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
 are between zero and <small>@(@
n-1
@)@</small>.

<br>
<br>
<b><big><a name="col" id="col">col</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
 is a vector with size <small>@(@
K
@)@</small>.
The input value of its elements does not matter.
On output,
all the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
 are between zero and <small>@(@
n-1
@)@</small>.

<br>
<br>
<b><big><a name="Row Major" id="Row Major">Row Major</a></big></b>
<br>
The indices 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
 are in row major order; i.e.,
for each 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()-2</span></font></code>


<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]<br>
</span></font></code>
and if 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]</span></font></code>
 then

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]<br>
</span></font></code>
<br>
<b><big><a name="Lower Triangular" id="Lower Triangular">Lower Triangular</a></big></b>
<br>
Only the lower triangle of the Hessian is included.

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
.


<br>
<br>
<b><big><a name="hessian" id="hessian">hessian</a></big></b>
<br>
The size of 
<code><i><font color="black"><span style='white-space: nowrap'>hessian</span></font></i></code>
 is 
<code><i><font color="black"><span style='white-space: nowrap'>K</span></font></i></code>
.
The input value of its elements does not matter.
The output value of its elements is the Hessian of the function <small>@(@
f(x)
@)@</small>.
To be more specific, for
<small>@(@
k = 0 , \ldots , K-1
@)@</small>,
<small>@[@

    \DD{f}{ x[ \R{row}[k] ] }{ x[ \R{col}[k] ]} = \R{hessian} [k]

@]@</small>

<br>
<br>
<b><big><a name="n_color" id="n_color">n_color</a></big></b>
<br>
The input value of 
<code><i><font color="black"><span style='white-space: nowrap'>n_color</span></font></i></code>
 does not matter. On output,
it is the value <a href="sparse_hessian.htm#n_sweep" target="_top"><span style='white-space: nowrap'>n_sweep</span></a>
 corresponding
to the evaluation of 
<code><i><font color="black"><span style='white-space: nowrap'>hessian</span></font></i></code>
.
This is also the number of colors corresponding to the
<a href="sparse_hessian.htm#work.color_method" target="_top"><span style='white-space: nowrap'>coloring&nbsp;method</span></a>
,
which can be set to <a href="speed_main.htm#Sparsity Options.colpack" target="_top"><span style='white-space: nowrap'>colpack</span></a>
,
and is otherwise <code><font color="blue">cppad</font></code>.


<br>
<br>
<big><a name="n_color.double" id="n_color.double">double</a></big>
<br>
In the case where 
<code><i><font color="black"><span style='white-space: nowrap'>package</span></font></i></code>
 is <code><font color="blue">double</font></code>,
only the first element of 
<code><i><font color="black"><span style='white-space: nowrap'>hessian</span></font></i></code>
 is used and it is actually
the value of <small>@(@
f(x)
@)@</small> (derivatives are not computed).


<hr>Input File: speed/src/link_sparse_hessian.hpp

</body>
</html>
