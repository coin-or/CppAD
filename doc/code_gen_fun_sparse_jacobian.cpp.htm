<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Evaluate Sparse Jacobian of a Code Gen Function: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Evaluate Sparse Jacobian of a Code Gen Function: Example and Test">
<meta name="keywords" id="keywords" content=" evaluate sparse jacobian code gen function: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_code_gen_fun_sparse_jacobian.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="code_gen_fun_jac_as_fun.cpp.htm" target="_top">Prev</a>
</td><td><a href="code_gen_fun_sparse_jac_as_fun.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>General</option>
<option>code_gen_fun</option>
<option>code_gen_fun_sparse_jacobian.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_example_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_general_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_code_gen_fun_htm.js'></script>
</td>
<td>code_gen_fun_sparse_jacobian.cpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Evaluate Sparse Jacobian of a Code Gen Function: Example and Test</big></big></b></center>
<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/example/code_gen_fun.hpp&gt;</font>

<font color="#009900">bool</font> <b><font color="#000000">sparse_jacobian</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font>cg<font color="#990000">::</font><font color="#008080">CG&lt;double&gt;</font>     c_double<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">AD&lt;c_double&gt;</font>      ac_double<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">vector&lt;double&gt;</font>     d_vector<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> CppAD<font color="#990000">::</font><font color="#008080">vector&lt;ac_double&gt;</font> ac_vector<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <font color="#009900">double</font> eps99 <font color="#990000">=</font> <font color="#993399">99.0</font> <font color="#990000">*</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>

    <i><font color="#9A1900">// domain space vector</font></i>
    <font color="#008080">size_t</font> n  <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
    <font color="#008080">ac_vector</font> <b><font color="#000000">ac_x</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
        ac_x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font> <font color="#990000">/</font> <font color="#009900">double</font><font color="#990000">(</font>j <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>

    <i><font color="#9A1900">// declare independent variables and start tape recording</font></i>
    CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>ac_x<font color="#990000">);</font>

    <i><font color="#9A1900">// range space vector</font></i>
    <font color="#008080">size_t</font> m <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>
    <font color="#008080">ac_vector</font> <b><font color="#000000">ac_y</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
        ac_y<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>i <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">*</font> <b><font color="#000000">sin</font></b><font color="#990000">(</font> ac_x<font color="#990000">[</font>i <font color="#990000">%</font> n<font color="#990000">]</font> <font color="#990000">);</font>

    <i><font color="#9A1900">// create c_f: x -&gt; y and stop tape recording</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;c_double&gt;</font> <b><font color="#000000">c_f</font></b><font color="#990000">(</font>ac_x<font color="#990000">,</font> ac_y<font color="#990000">);</font>

    <i><font color="#9A1900">// create compiled version of c_f</font></i>
    std<font color="#990000">::</font><font color="#008080">string</font> file_name <font color="#990000">=</font> <font color="#FF0000">"example_lib"</font><font color="#990000">;</font>
    code_gen_fun<font color="#990000">::</font><font color="#008080">evaluation_enum</font> eval_jac <font color="#990000">=</font> code_gen_fun<font color="#990000">::</font>sparse_enum<font color="#990000">;</font>
    <font color="#008080">code_gen_fun</font> <b><font color="#000000">f</font></b><font color="#990000">(</font>file_name<font color="#990000">,</font> c_f<font color="#990000">,</font> eval_jac<font color="#990000">);</font>

    <i><font color="#9A1900">// evaluate the compiled sparse_jacobian</font></i>
    <font color="#008080">d_vector</font> <b><font color="#000000">x</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
        x<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font> <font color="#990000">/</font> <font color="#009900">double</font><font color="#990000">(</font>j <font color="#990000">+</font> <font color="#993399">2</font><font color="#990000">);</font>
    CppAD<font color="#990000">::</font><font color="#008080">sparse_rcv&lt; CppAD::vector&lt;size_t&gt;, CppAD::vector&lt;double&gt; &gt;</font> Jrcv<font color="#990000">;</font>
    <i><font color="#9A1900">// This assignment uses move semantics</font></i>
    Jrcv <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">sparse_jacobian</font></b><font color="#990000">(</font>x<font color="#990000">);</font>

    <i><font color="#9A1900">// check Jaociban values</font></i>
    ok <font color="#990000">&amp;=</font> Jrcv<font color="#990000">.</font><b><font color="#000000">nr</font></b><font color="#990000">()</font> <font color="#990000">==</font> m<font color="#990000">;</font>
    ok <font color="#990000">&amp;=</font> Jrcv<font color="#990000">.</font><b><font color="#000000">nc</font></b><font color="#990000">()</font> <font color="#990000">==</font> n<font color="#990000">;</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font> <b><font color="#000000">row</font></b><font color="#990000">(</font> Jrcv<font color="#990000">.</font><b><font color="#000000">row</font></b><font color="#990000">()</font> <font color="#990000">);</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font> <b><font color="#000000">col</font></b><font color="#990000">(</font> Jrcv<font color="#990000">.</font><b><font color="#000000">col</font></b><font color="#990000">()</font> <font color="#990000">);</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> <b><font color="#000000">val</font></b><font color="#990000">(</font> Jrcv<font color="#990000">.</font><b><font color="#000000">val</font></b><font color="#990000">()</font> <font color="#990000">);</font>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;size_t&gt;</font> row_major <font color="#990000">=</font> Jrcv<font color="#990000">.</font><b><font color="#000000">row_major</font></b><font color="#990000">();</font>
    <font color="#008080">size_t</font> k <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> m<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#0000FF">if</font></b><font color="#990000">(</font> j <font color="#990000">==</font> i <font color="#990000">%</font> n <font color="#990000">)</font>
            <font color="#FF0000">{</font>   <font color="#009900">double</font> check <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>i <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">*</font> <b><font color="#000000">cos</font></b><font color="#990000">(</font> x<font color="#990000">[</font>i <font color="#990000">%</font> n<font color="#990000">]</font> <font color="#990000">);</font>
                <font color="#008080">size_t</font> ell <font color="#990000">=</font> row_major<font color="#990000">[</font>k<font color="#990000">];</font>
                ok <font color="#990000">&amp;=</font> row<font color="#990000">[</font>ell<font color="#990000">]</font> <font color="#990000">==</font> i<font color="#990000">;</font>
                ok <font color="#990000">&amp;=</font> col<font color="#990000">[</font>ell<font color="#990000">]</font> <font color="#990000">==</font> j<font color="#990000">;</font>
                ok <font color="#990000">&amp;=</font> CppAD<font color="#990000">::</font><b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>val<font color="#990000">[</font>ell<font color="#990000">]</font> <font color="#990000">,</font> check<font color="#990000">,</font> eps99<font color="#990000">,</font> eps99<font color="#990000">);</font>
                <font color="#990000">++</font>k<font color="#990000">;</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    ok <font color="#990000">&amp;=</font> Jrcv<font color="#990000">.</font><b><font color="#000000">nnz</font></b><font color="#990000">()</font> <font color="#990000">==</font> k<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/code_gen_fun/sparse_jacobian.cpp

</body>
</html>
