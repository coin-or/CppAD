<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Speed Testing Sparse Jacobians</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Speed Testing Sparse Jacobians">
<meta name="keywords" id="keywords" content=" speed testing sparse jacobians prototype method sparsity pattern job size repeat m row col major x jacobian n_color double ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_link_sparse_jacobian_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="link_sparse_hessian.htm" target="_top">Prev</a>
</td><td><a href="speed_utility.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_main</option>
<option>link_routines</option>
<option>link_sparse_jacobian</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_speed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_speed_main_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_link_routines_htm.js'></script>
</td>
<td>link_sparse_jacobian</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Prototype</option>
<option>Method</option>
<option>Sparsity Pattern</option>
<option>job</option>
<option>size</option>
<option>repeat</option>
<option>m</option>
<option>row</option>
<option>col</option>
<option>Row Major</option>
<option>x</option>
<option>jacobian</option>
<option>n_color</option>
<option>---..double</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@




<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Speed Testing Sparse Jacobians</big></big></b></center>
<br>
<b><big><a name="Prototype" id="Prototype">Prototype</a></big></b>

<pre><tt>
<b><font color="#0000FF">extern</font></b> <font color="#009900">bool</font> <b><font color="#000000">link_sparse_jacobian</font></b><font color="#990000">(</font>
    <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font>                job       <font color="#990000">,</font>
    <font color="#008080">size_t</font>                            size      <font color="#990000">,</font>
    <font color="#008080">size_t</font>                            repeat    <font color="#990000">,</font>
    <font color="#008080">size_t</font>                            m         <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font>      row       <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font>size_t<font color="#990000">&gt;&amp;</font>      col       <font color="#990000">,</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>      x         <font color="#990000">,</font>
          CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font>      jacobian  <font color="#990000">,</font>
          size_t<font color="#990000">&amp;</font>                     n_color
<font color="#990000">);</font></tt></pre>
<br>
<b><big><a name="Method" id="Method">Method</a></big></b>
<br>
Given a range space dimension 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>

the row index vector <small>@(@
row
@)@</small>, and column index vector <small>@(@
col
@)@</small>,
a corresponding function <small>@(@
f : \B{R}^n \rightarrow \B{R}^m
@)@</small>
is defined by <a href="sparse_jac_fun.htm" target="_top"><span style='white-space: nowrap'>sparse_jac_fun</span></a>
.
The non-zero entries in the Jacobian of this function have the form
<small>@[@

    \D{f[row[k]]}{x[col[k]]]}

@]@</small>
for some <small>@(@
k
@)@</small> between zero and 
<code><i><font color="black"><span style='white-space: nowrap'>K</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()-1</span></font></code>
.
All the other terms of the Jacobian are zero.

<br>
<br>
<b><big><a name="Sparsity Pattern" id="Sparsity Pattern">Sparsity Pattern</a></big></b>
<br>
The combination of 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
 determine
the sparsity pattern for the Jacobian that is differentiated.
The calculation of this sparsity pattern,
if necessary to compute the Jacobian,
is intended to be part of the timing for this test.

<br>
<br>
<b><big><a name="job" id="job">job</a></big></b>
<br>
See the standard link specifications for <a href="link_routines.htm#job" target="_top"><span style='white-space: nowrap'>job</span></a>
.

<br>
<br>
<b><big><a name="size" id="size">size</a></big></b>
<br>
See the standard link specifications for <a href="link_routines.htm#size" target="_top"><span style='white-space: nowrap'>size</span></a>
.
In addition, 
<code><i><font color="black"><span style='white-space: nowrap'>size</span></font></i></code>
 is referred to as <small>@(@
n
@)@</small> below,
is the dimension of the domain space for <small>@(@
f(x)
@)@</small>.

<br>
<br>
<b><big><a name="repeat" id="repeat">repeat</a></big></b>
<br>
See the standard link specifications for <a href="link_routines.htm#repeat" target="_top"><span style='white-space: nowrap'>repeat</span></a>
.

<br>
<br>
<b><big><a name="m" id="m">m</a></big></b>
<br>
Is the dimension of the range space for the function <small>@(@
f(x)
@)@</small>.

<br>
<br>
<b><big><a name="row" id="row">row</a></big></b>
<br>
The size of the vector 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
 defines the value <small>@(@
K
@)@</small>.
The input value of its elements does not matter.
On output,
all the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
 are between zero and <small>@(@
m-1
@)@</small>.

<br>
<br>
<b><big><a name="col" id="col">col</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
 is a vector with size <small>@(@
K
@)@</small>.
The input value of its elements does not matter.
On output,
all the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
 are between zero and <small>@(@
n-1
@)@</small>.

<br>
<br>
<b><big><a name="Row Major" id="Row Major">Row Major</a></big></b>
<br>
The indices 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
 are in row major order; i.e.,
for each 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()-2</span></font></code>


<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]<br>
</span></font></code>
and if 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]</span></font></code>
 then

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]<br>
</span></font></code>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;CppAD::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and its size is <small>@(@
n
@)@</small>; i.e., 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>size</span></font></i></code>
.
The input value of the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 does not matter.
On output, it has been set to the
argument value for which the function,
or its derivative, is being evaluated and placed in 
<code><i><font color="black"><span style='white-space: nowrap'>jacobian</span></font></i></code>
.
The value of this vector need not change with each repetition.

<br>
<br>
<b><big><a name="jacobian" id="jacobian">jacobian</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>jacobian</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;CppAD::vector&lt;double&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>jacobian</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and its size is 
<code><i><font color="black"><span style='white-space: nowrap'>K</span></font></i></code>
.
The input value of its elements does not matter.
The output value of its elements is the Jacobian of the function <small>@(@
f(x)
@)@</small>.
To be more specific, for
<small>@(@
k = 0 , \ldots , K - 1
@)@</small>,
<small>@[@

    \D{f[ \R{row}[k] ]}{x[ \R{col}[k] ]} (x) = \R{jacobian} [k]

@]@</small>

<br>
<br>
<b><big><a name="n_color" id="n_color">n_color</a></big></b>
<br>
The input value of 
<code><i><font color="black"><span style='white-space: nowrap'>n_color</span></font></i></code>
 does not matter. On output,
it has value zero or <a href="sparse_jacobian.htm#n_sweep" target="_top"><span style='white-space: nowrap'>n_sweep</span></a>
 corresponding
to the evaluation of 
<code><i><font color="black"><span style='white-space: nowrap'>jacobian</span></font></i></code>
.
This is also the number of colors corresponding to the
<a href="sparse_jacobian.htm#work.color_method" target="_top"><span style='white-space: nowrap'>coloring&nbsp;method</span></a>
,
which can be set to <a href="speed_main.htm#Sparsity Options.colpack" target="_top"><span style='white-space: nowrap'>colpack</span></a>
,
and is otherwise <code><font color="blue">cppad</font></code>.
If this routine returns an non-zero 
<code><i><font color="black"><span style='white-space: nowrap'>n_color</span></font></i></code>
 for
any 
<code><i><font color="black"><span style='white-space: nowrap'>job</span></font></i></code>
 value, the non-zero value will be reported for this test.

<br>
<br>
<big><a name="n_color.double" id="n_color.double">double</a></big>
<br>
In the case where 
<code><i><font color="black"><span style='white-space: nowrap'>package</span></font></i></code>
 is <code><font color="blue">double</font></code>,
only the first <small>@(@
m
@)@</small>
elements of 
<code><i><font color="black"><span style='white-space: nowrap'>jacobian</span></font></i></code>
 are used and they are set to
the value of <small>@(@
f(x)
@)@</small>.


<hr>Input File: speed/src/link_sparse_jacobian.hpp

</body>
</html>
