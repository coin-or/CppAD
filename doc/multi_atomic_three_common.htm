<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Multi-Threaded atomic_three Common Information</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Multi-Threaded atomic_three Common Information">
<meta name="keywords" id="keywords" content=" multi-threaded atomic_three common information purpose source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_multi_atomic_three_common_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="multi_atomic_three_user.htm" target="_top">Prev</a>
</td><td><a href="multi_atomic_three_setup.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>multi_atomic_three.cpp</option>
<option>multi_atomic_three_common</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_multi_thread_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_thread_test.cpp_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_multi_atomic_three.cpp_htm.js'></script>
</td>
<td>multi_atomic_three_common</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Multi-Threaded atomic_three Common Information</big></big></b></center>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This source code defines the common variables that are used by
the 
<code><font color="blue"><span style='white-space: nowrap'>multi_atomic_three_</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 functions.

<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
    <i><font color="#9A1900">// Number of threads, set by multi_atomic_three_time</font></i>
    <i><font color="#9A1900">// (zero means one thread with no multi-threading setup)</font></i>
    <font color="#008080">size_t</font> num_threads_ <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>

    <i><font color="#9A1900">// Number of Newton iterations, set by multi_atomic_three_time</font></i>
    <font color="#008080">size_t</font> num_itr_<font color="#990000">;</font>

    <i><font color="#9A1900">// We can use one atomic_atomic function for all threads because</font></i>
    <i><font color="#9A1900">// there is no member data that gets changed during worker call.</font></i>
    <i><font color="#9A1900">// This needs to stay in scope for as long as a recording will use it.</font></i>
    <i><font color="#9A1900">// We cannot be in parallel mode when this object is created or deleted.</font></i>
    <i><font color="#9A1900">// We use a pointer so that there is no left over memory in thread zero.</font></i>
    atomic_user<font color="#990000">*</font> a_square_root_ <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>

    <i><font color="#9A1900">// structure with information for one thread</font></i>
    <b><font color="#0000FF">typedef</font></b> <b><font color="#0000FF">struct</font></b> <font color="#FF0000">{</font>
        <i><font color="#9A1900">// used by worker to compute the square root, set by multi_atomic_three_setup</font></i>
        CppAD<font color="#990000">::</font>ADFun<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;*</font> fun<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// value we are computing square root of, set by multi_atomic_three_setup</font></i>
        vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;*</font> y_squared<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// square root, set by worker</font></i>
        vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;*</font> square_root<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        <i><font color="#9A1900">// false if an error occurs, true otherwise, set by worker</font></i>
        <font color="#009900">bool</font> ok<font color="#990000">;</font>
    <font color="#FF0000">}</font> work_one_t<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// Vector with information for all threads</font></i>
    <i><font color="#9A1900">// (uses pointers instead of values to avoid false sharing)</font></i>
    <i><font color="#9A1900">// allocated by multi_atomic_three_setup, freed by multi_atomic_three_takedown</font></i>
    work_one_t<font color="#990000">*</font> work_all_<font color="#990000">[</font>CPPAD_MAX_NUM_THREADS<font color="#990000">];</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/multi_thread/multi_atomic_three.cpp

</body>
</html>
