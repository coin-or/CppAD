<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Run the Speed Examples</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Run the Speed Examples">
<meta name="keywords" id="keywords" content=" run the speed examples running tests ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_speed_example.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="general.cpp.htm" target="_top">Prev</a>
</td><td><a href="lu_vec_ad.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>ExampleUtility</option>
<option>speed_example.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_example_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_exampleutility_htm.js'></script>
</td>
<td>speed_example.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Running Tests</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Run the Speed Examples</big></big></b></center>
<br>
<b><big><a name="Running Tests" id="Running Tests">Running Tests</a></big></b>
<br>
To build this program and run its correctness tests see <a href="cmake_check.htm" target="_top"><span style='white-space: nowrap'>cmake_check</span></a>
.


<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>

<i><font color="#9A1900">// various example routines</font></i>
<b><font color="#0000FF">extern</font></b> <font color="#009900">bool</font> <b><font color="#000000">det_of_minor</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
<b><font color="#0000FF">extern</font></b> <font color="#009900">bool</font> <b><font color="#000000">det_by_lu</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
<b><font color="#0000FF">extern</font></b> <font color="#009900">bool</font> <b><font color="#000000">det_by_minor</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
<b><font color="#0000FF">extern</font></b> <font color="#009900">bool</font> <b><font color="#000000">elapsed_seconds</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
<b><font color="#0000FF">extern</font></b> <font color="#009900">bool</font> <b><font color="#000000">mat_sum_sq</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
<b><font color="#0000FF">extern</font></b> <font color="#009900">bool</font> <b><font color="#000000">ode_evaluate</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
<b><font color="#0000FF">extern</font></b> <font color="#009900">bool</font> <b><font color="#000000">sparse_hes_fun</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
<b><font color="#0000FF">extern</font></b> <font color="#009900">bool</font> <b><font color="#000000">sparse_jac_fun</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
<b><font color="#0000FF">extern</font></b> <font color="#009900">bool</font> <b><font color="#000000">speed_test</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>
<b><font color="#0000FF">extern</font></b> <font color="#009900">bool</font> <b><font color="#000000">time_test</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">);</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
    <i><font color="#9A1900">// function that runs one test</font></i>
    <font color="#008080">size_t</font> Run_ok_count    <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <font color="#008080">size_t</font> Run_error_count <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <b><font color="#0000FF">const</font></b> <font color="#009900">char</font><font color="#990000">*</font> exception_list<font color="#990000">[]</font> <font color="#990000">=</font> <font color="#FF0000">{</font>
        <font color="#FF0000">"elapsed_seconds"</font><font color="#990000">,</font>
        <font color="#FF0000">"speed_test"</font><font color="#990000">,</font>
        <font color="#FF0000">"time_test"</font>
    <font color="#FF0000">}</font><font color="#990000">;</font>
    <font color="#008080">size_t</font> n_exception <font color="#990000">=</font> <b><font color="#0000FF">sizeof</font></b><font color="#990000">(</font>exception_list<font color="#990000">)</font> <font color="#990000">/</font> <b><font color="#0000FF">sizeof</font></b><font color="#990000">(</font>exception_list<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]);</font>
    <font color="#009900">bool</font> <b><font color="#000000">Run</font></b><font color="#990000">(</font><font color="#009900">bool</font> <b><font color="#000000">TestOk</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">),</font> std<font color="#990000">::</font><font color="#008080">string</font> name<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <font color="#009900">bool</font> ok               <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
        std<font color="#990000">::</font><font color="#008080">streamsize</font> width <font color="#990000">=</font>  <font color="#993399">20</font><font color="#990000">;</font>
        std<font color="#990000">::</font>cout<font color="#990000">.</font><b><font color="#000000">width</font></b><font color="#990000">(</font> width <font color="#990000">);</font>
        std<font color="#990000">::</font>cout<font color="#990000">.</font><b><font color="#000000">setf</font></b><font color="#990000">(</font> std<font color="#990000">::</font>ios_base<font color="#990000">::</font>left <font color="#990000">);</font>
        std<font color="#990000">::</font>cout <font color="#990000">&lt;&lt;</font> name<font color="#990000">;</font>
        <font color="#009900">bool</font> exception <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_exception<font color="#990000">;</font> i<font color="#990000">++)</font>
            exception <font color="#990000">|=</font> exception_list<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">==</font> name<font color="#990000">;</font>
        <i><font color="#9A1900">//</font></i>
        ok <font color="#990000">&amp;=</font> name<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">&lt;</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font>width<font color="#990000">);</font>
        ok <font color="#990000">&amp;=</font> <b><font color="#000000">TestOk</font></b><font color="#990000">();</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> ok <font color="#990000">)</font>
        <font color="#FF0000">{</font>   std<font color="#990000">::</font>cout <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"OK"</font> <font color="#990000">&lt;&lt;</font> std<font color="#990000">::</font>endl<font color="#990000">;</font>
            Run_ok_count<font color="#990000">++;</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">else</font></b> <b><font color="#0000FF">if</font></b> <font color="#990000">(</font> exception <font color="#990000">)</font>
        <font color="#FF0000">{</font>   std<font color="#990000">::</font>cout <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"Error: perhaps too many other programs running"</font><font color="#990000">;</font>
            std<font color="#990000">::</font>cout <font color="#990000">&lt;&lt;</font> std<font color="#990000">::</font>endl<font color="#990000">;</font>
            <i><font color="#9A1900">// no change to Run_ok_count</font></i>
            ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">else</font></b>
        <font color="#FF0000">{</font>   std<font color="#990000">::</font>cout <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"Error"</font> <font color="#990000">&lt;&lt;</font> std<font color="#990000">::</font>endl<font color="#990000">;</font>
            Run_error_count<font color="#990000">++;</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
    <font color="#FF0000">}</font>
<font color="#FF0000">}</font>

<i><font color="#9A1900">// main program that runs all the tests</font></i>
<font color="#009900">int</font> <b><font color="#000000">main</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> std<font color="#990000">::</font>cout<font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> std<font color="#990000">::</font>endl<font color="#990000">;</font>

    <i><font color="#9A1900">// This line used by test_one.sh</font></i>

    ok <font color="#990000">&amp;=</font> <b><font color="#000000">Run</font></b><font color="#990000">(</font>det_of_minor<font color="#990000">,</font>          <font color="#FF0000">"det_of_minor"</font>   <font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">Run</font></b><font color="#990000">(</font>det_by_minor<font color="#990000">,</font>         <font color="#FF0000">"det_by_minor"</font>    <font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">Run</font></b><font color="#990000">(</font>det_by_lu<font color="#990000">,</font>               <font color="#FF0000">"det_by_lu"</font>    <font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">Run</font></b><font color="#990000">(</font>elapsed_seconds<font color="#990000">,</font>   <font color="#FF0000">"elapsed_seconds"</font>    <font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">Run</font></b><font color="#990000">(</font>mat_sum_sq<font color="#990000">,</font>             <font color="#FF0000">"mat_sum_sq"</font>    <font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">Run</font></b><font color="#990000">(</font>ode_evaluate<font color="#990000">,</font>         <font color="#FF0000">"ode_evaluate"</font>    <font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">Run</font></b><font color="#990000">(</font>sparse_hes_fun<font color="#990000">,</font>    <font color="#FF0000">"sparse_hes_fun"</font>     <font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">Run</font></b><font color="#990000">(</font>sparse_jac_fun<font color="#990000">,</font>    <font color="#FF0000">"sparse_jac_fun"</font>     <font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">Run</font></b><font color="#990000">(</font>speed_test<font color="#990000">,</font>             <font color="#FF0000">"speed_test"</font>    <font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <b><font color="#000000">Run</font></b><font color="#990000">(</font>time_test<font color="#990000">,</font>               <font color="#FF0000">"time_test"</font>    <font color="#990000">);</font>
    <b><font color="#000000">assert</font></b><font color="#990000">(</font> ok <font color="#990000">||</font> <font color="#990000">(</font>Run_error_count <font color="#990000">&gt;</font> <font color="#993399">0</font><font color="#990000">)</font> <font color="#990000">);</font>

    <i><font color="#9A1900">// check for memory leak in previous calculations</font></i>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> CppAD<font color="#990000">::</font>thread_alloc<font color="#990000">::</font><b><font color="#000000">free_all</font></b><font color="#990000">()</font> <font color="#990000">)</font>
    <font color="#FF0000">{</font>   ok <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
        cout <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"Error: memroy leak detected"</font> <font color="#990000">&lt;&lt;</font> endl<font color="#990000">;</font>
    <font color="#FF0000">}</font>

    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> ok <font color="#990000">)</font>
    <font color="#FF0000">{</font>   cout <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"Check above to see if all "</font> <font color="#990000">&lt;&lt;</font> <font color="#009900">int</font><font color="#990000">(</font>Run_ok_count<font color="#990000">)</font>
        <font color="#990000">&lt;&lt;</font> <font color="#FF0000">" tests passed.</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
        cout <font color="#990000">&lt;&lt;</font> <font color="#FF0000">"possible exceptions are: "</font> <font color="#990000">&lt;&lt;</font> exception_list<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_exception<font color="#990000">;</font> <font color="#990000">++</font>i<font color="#990000">)</font>
            cout <font color="#990000">&lt;&lt;</font> <font color="#FF0000">", "</font> <font color="#990000">&lt;&lt;</font> exception_list<font color="#990000">[</font>i<font color="#990000">];</font>
        cout <font color="#990000">&lt;&lt;</font> endl<font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">else</font></b>
        cout <font color="#990000">&lt;&lt;</font> <font color="#009900">int</font><font color="#990000">(</font>Run_error_count<font color="#990000">)</font> <font color="#990000">&lt;&lt;</font> <font color="#FF0000">" tests failed."</font><font color="#990000">;</font>
    cout <font color="#990000">&lt;&lt;</font> endl<font color="#990000">;</font>

    <b><font color="#0000FF">if</font></b><font color="#990000">(</font>ok<font color="#990000">)</font>
      <b><font color="#0000FF">return</font></b> EXIT_SUCCESS<font color="#990000">;</font>
    <b><font color="#0000FF">else</font></b>
      <b><font color="#0000FF">return</font></b> EXIT_FAILURE<font color="#990000">;</font>
<font color="#FF0000">}</font>
</tt></pre>

<hr>Input File: speed/example/example.cpp

</body>
</html>
