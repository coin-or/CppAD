<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Take Down Multi-threaded Newton Method</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Take Down Multi-threaded Newton Method">
<meta name="keywords" id="keywords" content=" take down multi-threaded newton method syntax purpose thread xout source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_multi_newton_takedown_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="multi_newton_worker.htm" target="_top">Prev</a>
</td><td><a href="multi_newton_run.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>multi_newton.cpp</option>
<option>multi_newton_takedown</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_multi_thread_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_thread_test.cpp_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_multi_newton.cpp_htm.js'></script>
</td>
<td>multi_newton_takedown</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Thread</option>
<option>xout</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Take Down Multi-threaded Newton Method</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;harmonic_takedown(</span></font><i><font color="black"><span style='white-space: nowrap'>xout</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This routine does the takedown for splitting the Newton method into
sub-intervals.

<br>
<br>
<b><big><a name="Thread" id="Thread">Thread</a></big></b>
<br>
It is assumed that this function is called by thread zero,
and all the other threads have completed their work and are blocked (waiting).

<br>
<br>
<b><big><a name="xout" id="xout">xout</a></big></b>
<br>
See <a href="multi_newton_run.htm#xout" target="_top"><span style='white-space: nowrap'>multi_newton_run</span></a>
.

<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
<font color="#009900">bool</font> <b><font color="#000000">multi_newton_takedown</font></b><font color="#990000">(</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> xout<font color="#990000">)</font>
<font color="#FF0000">{</font>   <i><font color="#9A1900">// number of threads in the calculation</font></i>
    <font color="#008080">size_t</font> num_threads  <font color="#990000">=</font> std<font color="#990000">::</font><b><font color="#000000">max</font></b><font color="#990000">(</font>num_threads_<font color="#990000">,</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">));</font>

    <i><font color="#9A1900">// remove duplicates and points that are not solutions</font></i>
    xout<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>
    <font color="#009900">bool</font>   ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    ok       <font color="#990000">&amp;=</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">thread_num</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>

    <i><font color="#9A1900">// initialize as more that sub_length_ / 2 from any possible solution</font></i>
    <font color="#009900">double</font> xlast <font color="#990000">=</font> <font color="#990000">-</font> sub_length_<font color="#990000">;</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> thread_num <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> thread_num <font color="#990000">&lt;</font> num_threads<font color="#990000">;</font> thread_num<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> x <font color="#990000">=</font> work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>x<font color="#990000">;</font>

        <font color="#008080">size_t</font> i<font color="#990000">;</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font> i<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// check for case where this point is lower limit for this</font></i>
            <i><font color="#9A1900">// thread and upper limit for previous thread</font></i>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <b><font color="#000000">fabs</font></b><font color="#990000">(</font>x<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">-</font> xlast<font color="#990000">)</font> <font color="#990000">&gt;=</font> sub_length_ <font color="#990000">)</font>
            <font color="#FF0000">{</font>   xout<font color="#990000">.</font><b><font color="#000000">push_back</font></b><font color="#990000">(</font> x<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">);</font>
                xlast <font color="#990000">=</font> x<font color="#990000">[</font>i<font color="#990000">];</font>
            <font color="#FF0000">}</font>
            <b><font color="#0000FF">else</font></b>
            <font color="#FF0000">{</font>   <font color="#009900">double</font> fcur<font color="#990000">,</font> flast<font color="#990000">,</font> df<font color="#990000">;</font>
                <b><font color="#000000">fun_</font></b><font color="#990000">(</font>x<font color="#990000">[</font>i<font color="#990000">],</font>   fcur<font color="#990000">,</font> df<font color="#990000">);</font>
                <b><font color="#000000">fun_</font></b><font color="#990000">(</font>xlast<font color="#990000">,</font> flast<font color="#990000">,</font> df<font color="#990000">);</font>
                <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <b><font color="#000000">fabs</font></b><font color="#990000">(</font>fcur<font color="#990000">)</font> <font color="#990000">&lt;</font> <b><font color="#000000">fabs</font></b><font color="#990000">(</font>flast<font color="#990000">)</font> <font color="#990000">)</font>
                <font color="#FF0000">{</font>   xout<font color="#990000">[</font> xout<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">-</font> <font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font>i<font color="#990000">];</font>
                    xlast                  <font color="#990000">=</font> x<font color="#990000">[</font>i<font color="#990000">];</font>
                <font color="#FF0000">}</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
        <i><font color="#9A1900">// check that this thread was ok with the work it did</font></i>
        ok <font color="#990000">&amp;=</font> work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>ok<font color="#990000">;</font>
    <font color="#FF0000">}</font>

    <i><font color="#9A1900">// go down so free memory for other threads before memory for master</font></i>
    <font color="#008080">size_t</font> thread_num <font color="#990000">=</font> num_threads<font color="#990000">;</font>
    <b><font color="#0000FF">while</font></b><font color="#990000">(</font>thread_num<font color="#990000">--)</font>
    <font color="#FF0000">{</font>
<b><font color="#000080"># if</font></b> USE_THREAD_ALLOC_FOR_WORK_ALL
        <i><font color="#9A1900">// call the destructor for vector destructor</font></i>
        work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>x<font color="#990000">.~</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;();</font>
        <i><font color="#9A1900">// delete the raw memory allocation</font></i>
        <font color="#009900">void</font><font color="#990000">*</font> v_ptr <font color="#990000">=</font> <b><font color="#0000FF">static_cast</font></b><font color="#990000">&lt;</font><font color="#009900">void</font><font color="#990000">*&gt;(</font> work_all_<font color="#990000">[</font>thread_num<font color="#990000">]</font> <font color="#990000">);</font>
        thread_alloc<font color="#990000">::</font><b><font color="#000000">return_memory</font></b><font color="#990000">(</font> v_ptr <font color="#990000">);</font>
<b><font color="#000080"># else</font></b>
        <b><font color="#0000FF">delete</font></b> work_all_<font color="#990000">[</font>thread_num<font color="#990000">];</font>
<b><font color="#000080"># endif</font></b>
        <i><font color="#9A1900">// Note that xout corresponds to memroy that is inuse by master</font></i>
        <i><font color="#9A1900">// (so we can only chech have freed all their memory).</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> thread_num <font color="#990000">&gt;</font> <font color="#993399">0</font> <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// check that there is no longer any memory inuse by this thread</font></i>
            ok <font color="#990000">&amp;=</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">inuse</font></b><font color="#990000">(</font>thread_num<font color="#990000">)</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
            <i><font color="#9A1900">// return all memory being held for future use by this thread</font></i>
            thread_alloc<font color="#990000">::</font><b><font color="#000000">free_available</font></b><font color="#990000">(</font>thread_num<font color="#990000">);</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// now we are done with the work_all_ vector so free its memory</font></i>
    <i><font color="#9A1900">// (because it is a static variable)</font></i>
    work_all_<font color="#990000">.</font><b><font color="#000000">clear</font></b><font color="#990000">();</font>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/multi_thread/multi_newton.cpp

</body>
</html>
