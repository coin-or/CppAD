<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Reverse Mode Using Subgraphs</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Reverse Mode Using Subgraphs">
<meta name="keywords" id="keywords" content=" reverse mode using subgraphs syntax purpose notation basevector boolvector sizevector select_domain q ell col dw clear_subgraph example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_subgraph_reverse_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="rev_checkpoint.cpp.htm" target="_top">Prev</a>
</td><td><a href="subgraph_reverse.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>Reverse</option>
<option>subgraph_reverse</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_reverse_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_subgraph_reverse_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Notation</option>
<option>BaseVector</option>
<option>BoolVector</option>
<option>SizeVector</option>
<option>select_domain</option>
<option>q</option>
<option>ell</option>
<option>col</option>
<option>dw</option>
<option>clear_subgraph</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Reverse Mode Using Subgraphs</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.subgraph_reverse(</span></font><i><font color="black"><span style='white-space: nowrap'>select_domain</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.subgraph_reverse(</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dw</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.clear_subgraph()<br>
</span></font></code>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
We use <small>@(@
F : \B{R}^n \rightarrow \B{R}^m
@)@</small> to denote the
<a href="glossary.htm#AD Function" target="_top"><span style='white-space: nowrap'>AD&nbsp;function</span></a>
 corresponding to 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.
Reverse mode computes the derivative of the <a href="forward.htm" target="_top"><span style='white-space: nowrap'>Forward</span></a>
 mode
<a href="glossary.htm#Taylor Coefficient" target="_top"><span style='white-space: nowrap'>Taylor&nbsp;coefficients</span></a>

with respect to the domain variable <small>@(@
x
@)@</small>.

<br>
<br>
<b><big><a name="Notation" id="Notation">Notation</a></big></b>
<br>
We use the reverse mode
<a href="reverse_any.htm#Notation" target="_top"><span style='white-space: nowrap'>notation</span></a>
 with the following change:
the vector
<a href="reverse_any.htm#Notation.w^(k)" target="_top"><span style='white-space: nowrap'>w^(k)</span></a>
 is defined
<small>@[@

w_i^{(k)} = \left\{ \begin{array}{ll}
    1 & {\rm if} \; k = q-1 \; \R{and} \; i = \ell
    \\
    0       & {\rm otherwise}
\end{array} \right.

@]@</small>

<br>
<br>
<b><big><a name="BaseVector" id="BaseVector">BaseVector</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>BaseVector</span></font></i></code>
 must be a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with
<a href="simplevector.htm#Elements of Specified Type" target="_top"><span style='white-space: nowrap'>elements&nbsp;of&nbsp;type</span></a>


<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
.
The routine <a href="checksimplevector.htm" target="_top"><span style='white-space: nowrap'>CheckSimpleVector</span></a>
 will generate an error message
if this is not the case.

<br>
<br>
<b><big><a name="BoolVector" id="BoolVector">BoolVector</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>BoolVector</span></font></i></code>
 is a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with
<a href="simplevector.htm#Elements of Specified Type" target="_top"><span style='white-space: nowrap'>elements&nbsp;of&nbsp;type</span></a>

<code><font color="blue">bool</font></code>.

<br>
<br>
<b><big><a name="SizeVector" id="SizeVector">SizeVector</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i></code>
 is a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with
<a href="simplevector.htm#Elements of Specified Type" target="_top"><span style='white-space: nowrap'>elements&nbsp;of&nbsp;type</span></a>

<code><font color="blue">size_t</font></code>.

<br>
<br>
<b><big><a name="select_domain" id="select_domain">select_domain</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>select_domain</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>BoolVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>select_domain</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It has size <small>@(@
n
@)@</small> and specifies which independent variables
to include in future <code><font color="blue">subgraph_reverse</font></code> calculations.
If 
<code><i><font color="black"><span style='white-space: nowrap'>select_domain</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 is false,
it is assumed that <small>@(@
u^{(k)}_j = 0
@)@</small> for <small>@(@
k > 0
@)@</small>; i.e.,
the <code><i>j</i></code>-th component of the Taylor coefficient for <small>@(@
x
@)@</small>,
with order greater that zero, are zero; see
<a href="reverse_any.htm#Notation.u^(k)" target="_top"><span style='white-space: nowrap'>u^(k)</span></a>
.

<br>
<br>
<b><big><a name="q" id="q">q</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and specifies the number of Taylor coefficient orders to be differentiated.

<br>
<br>
<b><big><a name="ell" id="ell">ell</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and specifies the dependent variable index that we are computing
the derivatives for; i.e. <small>@(@
\ell
@)@</small>.
This index can only be used once per, and after, a call that selects
the independent variables using 
<code><i><font color="black"><span style='white-space: nowrap'>select_domain</span></font></i></code>
.

<br>
<br>
<b><big><a name="col" id="col">col</a></big></b>
<br>
This argument 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The input size and value of its elements do not matter.
The 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>.resize</span></font></code>
 member function is used to change its size
to the number the number of possible non-zero derivative components.
For each 
<code><i><font color="black"><span style='white-space: nowrap'>c</span></font></i></code>
,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>select_domain</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>c</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;]&nbsp;==&nbsp;true<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>c</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]&nbsp;&gt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>c</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
and the derivative with respect to the <code><i>j</i></code>-th independent
variable is possibly non-zero where

<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>c</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
.

<br>
<br>
<b><big><a name="dw" id="dw">dw</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>dw</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dw</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
Its input size and value does not matter.
Upon return,
it is a vector with size <small>@(@
n \times q
@)@</small>.
For <small>@(@
c = 0 , \ldots , %col%.size()-1
@)@</small>,
and <small>@(@
k = 0, \ldots , q-1
@)@</small>,
<small>@[@

    dw[ j * q + k ] = W^{(1)} ( x )_{j,k}

@]@</small>
is the derivative of the specified Taylor coefficients w.r.t the <code><i>j</i></code>-th
independent variable where 
<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>c</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
.
Note that this corresponds to the <a href="reverse_any.htm" target="_top"><span style='white-space: nowrap'>reverse_any</span></a>
 convention when
<a href="reverse_any.htm#w" target="_top"><span style='white-space: nowrap'>w</span></a>
 has size 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i></code>
.

<br>
<br>
<b><big><a name="clear_subgraph" id="clear_subgraph">clear_subgraph</a></big></b>
<br>
Calling this routine will free memory that holds
information between calls to subgraph calculations so that
it does not need to be recalculated.
(This memory is automatically freed when 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 is deleted.)
You cannot free this memory between calls that select the domain
and corresponding calls that compute reverse mode derivatives.
Some of this information is also used by <a href="subgraph_sparsity.htm" target="_top"><span style='white-space: nowrap'>subgraph_sparsity</span></a>
.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
The file
<a href="subgraph_reverse.cpp.htm" target="_top"><span style='white-space: nowrap'>subgraph_reverse.cpp</span></a>

contains an example and test of this operation.


<hr>Input File: include/cppad/core/subgraph_reverse.hpp

</body>
</html>
