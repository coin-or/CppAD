<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Zero Order Forward Mode: Function Values</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Zero Order Forward Mode: Function Values">
<meta name="keywords" id="keywords" content=" zero order forward mode: function values syntax purpose f x0 s y0 vector example special case ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_forward_zero_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="new_dynamic.cpp.htm" target="_top">Prev</a>
</td><td><a href="forward_one.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>Forward</option>
<option>forward_zero</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_forward_htm.js'></script>
</td>
<td>forward_zero</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>f</option>
<option>x0</option>
<option>s</option>
<option>y0</option>
<option>Vector</option>
<option>Example</option>
<option>Special Case</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Zero Order Forward Mode: Function Values</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>y0</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Forward(0,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x0</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>y0</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Forward(0,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x0</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
We use <small>@(@
F : \B{R}^n \rightarrow \B{R}^m
@)@</small> to denote the
<a href="glossary.htm#AD Function" target="_top"><span style='white-space: nowrap'>AD&nbsp;function</span></a>
 corresponding to 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.
The result of the syntax above is
<small>@[@

    y0 = F(x0)

@]@</small>
See the <a href="funcheck.htm#Discussion" target="_top"><span style='white-space: nowrap'>FunCheck&nbsp;discussion</span></a>
 for
possible differences between <small>@(@
F(x)
@)@</small> and the algorithm that defined
the operation sequence.

<br>
<br>
<b><big><a name="f" id="f">f</a></big></b>
<br>
The object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
Note that the <a href="adfun.htm" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 is not <code><font color="blue">const</font></code>.
After this call to <code><font color="blue">Forward</font></code>, the value returned by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_order()<br>
</span></font></code>
will be equal to one (see <a href="size_order.htm" target="_top"><span style='white-space: nowrap'>size_order</span></a>
).

<br>
<br>
<b><big><a name="x0" id="x0">x0</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>x0</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x0</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
(see <a href="forward_zero.htm#Vector" target="_top"><span style='white-space: nowrap'>Vector</span></a>
 below)
and its size must be equal to 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
, the dimension of the
<a href="fun_property.htm#Domain" target="_top"><span style='white-space: nowrap'>domain</span></a>
 space for 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.

<br>
<br>
<b><big><a name="s" id="s">s</a></big></b>
<br>
If the argument 
<code><i><font color="black"><span style='white-space: nowrap'>s</span></font></i></code>
 is not present, <code><font color="blue">std::cout</font></code>
is used in its place.
Otherwise, this argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;std::ostream&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies where the output corresponding to <a href="printfor.htm" target="_top"><span style='white-space: nowrap'>PrintFor</span></a>
,
and this zero order forward mode call, will be written.

<br>
<br>
<b><big><a name="y0" id="y0">y0</a></big></b>
<br>
The result 
<code><i><font color="black"><span style='white-space: nowrap'>y0</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y0</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
(see <a href="forward_zero.htm#Vector" target="_top"><span style='white-space: nowrap'>Vector</span></a>
 below)
and its value is <small>@(@
F(x)
@)@</small> at 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x0</span></font></i></code>
.
The size of 
<code><i><font color="black"><span style='white-space: nowrap'>y0</span></font></i></code>
 is equal to 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
, the dimension of the
<a href="fun_property.htm#Range" target="_top"><span style='white-space: nowrap'>range</span></a>
 space for 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.

<br>
<br>
<b><big><a name="Vector" id="Vector">Vector</a></big></b>
<br>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>Vector</span></font></i></code>
 must be a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with
<a href="simplevector.htm#Elements of Specified Type" target="_top"><span style='white-space: nowrap'>elements&nbsp;of&nbsp;type</span></a>


<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
.
The routine <a href="checksimplevector.htm" target="_top"><span style='white-space: nowrap'>CheckSimpleVector</span></a>
 will generate an error message
if this is not the case.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file
<a href="forward.cpp.htm" target="_top"><span style='white-space: nowrap'>forward.cpp</span></a>

contains an example and test of this operation.

<br>
<br>
<b><big><a name="Special Case" id="Special Case">Special Case</a></big></b>
<br>
This is special case of <a href="forward_order.htm" target="_top"><span style='white-space: nowrap'>forward_order</span></a>
 where
<small>@[@

\begin{array}{rcl}
Y(t) & = & F[ X(t) ]
\\
X(t) & = & x^{(0)} t^0 + x^{(1)} * t^1 + \cdots, + x^{(q)} * t^q + o( t^q )
\\
Y(t) & = & y^{(0)} t^0 + y^{(1)} * t^1 + \cdots, + y^{(q)} * t^q + o( t^q )
\end{array}

@]@</small>
and <small>@(@
o( t^q ) * t^{-q} \rightarrow 0
@)@</small> as <small>@(@
t \rightarrow 0
@)@</small>.
For this special case, <small>@(@
q = 0
@)@</small>,
<small>@(@
x^{(0)}
@)@</small> 
<code><font color="blue"><span style='white-space: nowrap'>=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x0</span></font></i></code>
,
<small>@(@
X(t) = x^{(0)}
@)@</small>, and
<small>@[@

    y^{(0)} = Y(t) = F[ X(t) ] = F( x^{(0)} )

@]@</small>
which agrees with the specifications for

<code><i><font color="black"><span style='white-space: nowrap'>y0</span></font></i></code>
 in the <a href="forward_zero.htm#Purpose" target="_top"><span style='white-space: nowrap'>purpose</span></a>
 above.




<hr>Input File: include/cppad/core/forward/forward_zero.omh

</body>
</html>
