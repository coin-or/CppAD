<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Json AD Graph Operator Definitions</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Json AD Graph Operator Definitions">
<meta name="keywords" id="keywords" content=" json ad graph operator definitions notation op_code arguments unary operators example binary add azmul div mul pow sub sum conditional expressions cexp_eq cexp_le cexp_lt other comparisons compare n_result n_arg left right comp_eq comp_le comp_lt comp_ne discrete functions name arg atomic three four call_id first_arg ... last_arg print before after notpos value ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_json_graph_op_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="json_ad_graph.htm" target="_top">Prev</a>
</td><td><a href="json_unary_op.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>other_adfun</option>
<option>json_ad_graph</option>
<option>json_graph_op</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_other_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_json_ad_graph_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_json_graph_op_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Notation</option>
<option>---..op_code</option>
<option>---..Arguments</option>
<option>Unary Operators</option>
<option>---..Example</option>
<option>Binary Operators</option>
<option>---..add</option>
<option>---..azmul</option>
<option>---..div</option>
<option>---..mul</option>
<option>---..pow</option>
<option>---..sub</option>
<option>sum</option>
<option>---..Example</option>
<option>Conditional Expressions</option>
<option>---..cexp_eq</option>
<option>---..cexp_le</option>
<option>---..cexp_lt</option>
<option>---..Other Comparisons</option>
<option>---..Example</option>
<option>Compare Operators</option>
<option>---..n_result</option>
<option>---..n_arg</option>
<option>---..left, right</option>
<option>---..comp_eq</option>
<option>---..comp_le</option>
<option>---..comp_lt</option>
<option>---..comp_ne</option>
<option>---..Other Comparisons</option>
<option>---..Example</option>
<option>Discrete Functions</option>
<option>---..name</option>
<option>---..n_result</option>
<option>---..n_arg</option>
<option>---..arg</option>
<option>---..Example</option>
<option>Atomic Functions</option>
<option>---..Atomic Three</option>
<option>---..Atomic Four</option>
<option>---..name</option>
<option>---..call_id</option>
<option>---..n_result</option>
<option>---..n_arg</option>
<option>---..first_arg, ..., last_arg</option>
<option>---..Example</option>
<option>Print</option>
<option>---..before</option>
<option>---..after</option>
<option>---..n_result</option>
<option>---..n_arg</option>
<option>---..notpos</option>
<option>---..value</option>
<option>---..Example</option>
<option>Contents</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Json AD Graph Operator Definitions</big></big></b></center>
<br>
<b><big><a name="Notation" id="Notation">Notation</a></big></b>


<br>
<br>
<big><a name="Notation.op_code" id="Notation.op_code">op_code</a></big>
<br>
Each operator definition has a 
<code><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i></code>
 value that
is used to identify it for a particular 
<code><i><font color="black"><span style='white-space: nowrap'>json_ad_graph</span></font></i></code>
.

<br>
<br>
<big><a name="Notation.Arguments" id="Notation.Arguments">Arguments</a></big>
<br>
The values 
<code><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i></code>
, ... ,
<a href="json_ad_graph.htm#op_usage.first_arg, ..., last_arg" target="_top"><span style='white-space: nowrap'>last_arg</span></a>

are the node indices for arguments to an operator.

<br>
<br>
<b><big><a name="Unary Operators" id="Unary Operators">Unary Operators</a></big></b>
<br>
All these operations create one result node and
have the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;n_arg&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1<br>
}<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 is a <a href="json_ad_graph.htm#Token.String" target="_top"><span style='white-space: nowrap'>string</span></a>
.
A corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage</span></font></i></code>
 has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>arg</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]<br>
</span></font></code>
The possible values for the string 
<code><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 are listed
in the table below.
The corresponding result is the node value as a function of the argument value.


<table><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
   </td><td align='left'  valign='top'>
 result                           </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">abs</font></code>     </td><td align='left'  valign='top'>
 absolute value                   </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">acos</font></code>    </td><td align='left'  valign='top'>
 inverse cosine                   </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">acosh</font></code>   </td><td align='left'  valign='top'>
 inverse hyperbolic cosine        </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">asin</font></code>    </td><td align='left'  valign='top'>
 inverse sine                     </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">asinh</font></code>   </td><td align='left'  valign='top'>
 inverse hyperbolic sine          </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">atan</font></code>    </td><td align='left'  valign='top'>
 inverse tangent                  </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">atanh</font></code>   </td><td align='left'  valign='top'>
 inverse hyperbolic sine          </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">cos</font></code>     </td><td align='left'  valign='top'>
 cosine                           </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">cosh</font></code>    </td><td align='left'  valign='top'>
 hyperbolic cosine                </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">erf</font></code>     </td><td align='left'  valign='top'>
 error functions                  </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">erfc</font></code>    </td><td align='left'  valign='top'>
 complementary error function     </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">exp</font></code>     </td><td align='left'  valign='top'>
 exponential                      </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">expm1</font></code>   </td><td align='left'  valign='top'>
 minus one plus the exponential   </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">log</font></code>     </td><td align='left'  valign='top'>
 logarithm                        </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">log1p</font></code>   </td><td align='left'  valign='top'>
 log  plus one                    </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">neg</font></code>     </td><td align='left'  valign='top'>
 negative                         </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">sign</font></code>    </td><td align='left'  valign='top'>
 sign function                    </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">sin</font></code>     </td><td align='left'  valign='top'>
 sine                             </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">sinh</font></code>    </td><td align='left'  valign='top'>
 hyperbolic sine                  </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">sqrt</font></code>    </td><td align='left'  valign='top'>
 square root                      </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">tan</font></code>     </td><td align='left'  valign='top'>
 tangent                          </td></tr><tr><td align='left'  valign='top'>

<code><font color="blue">tanh</font></code>    </td><td align='left'  valign='top'>
 hyperbolic tangent
</td></tr>
</table>
<br>
<big><a name="Unary Operators.Example" id="Unary Operators.Example">Example</a></big>
<br>
The file <a href="json_unary_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_unary_op.cpp</span></a>
 is an example and test
for one of these operators.

<br>
<br>
<b><big><a name="Binary Operators" id="Binary Operators">Binary Operators</a></big></b>
<br>
All these operations create one result node and
have the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;n_arg&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2<br>
}<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 is a <a href="json_ad_graph.htm#Token.String" target="_top"><span style='white-space: nowrap'>string</span></a>
.
A corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage</span></font></i></code>
 has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>second_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]<br>
</span></font></code>
The possible values for the string 
<code><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 are listed below:

<br>
<br>
<big><a name="Binary Operators.add" id="Binary Operators.add">add</a></big>
<br>
The result is
the first argument value plus the second argument value; see
the example and test <a href="json_add_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_add_op.cpp</span></a>
.

<br>
<br>
<big><a name="Binary Operators.azmul" id="Binary Operators.azmul">azmul</a></big>
<br>
If the first argument value is zero, the result is zero
(even if the second argument value is nan).
Otherwise the result is
the first argument value times the second argument value; see
the example and test <a href="json_azmul_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_azmul_op.cpp</span></a>
.

<br>
<br>
<big><a name="Binary Operators.div" id="Binary Operators.div">div</a></big>
<br>
The result is
the first argument value divided by the second argument value; see
the example and test <a href="json_div_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_div_op.cpp</span></a>
.

<br>
<br>
<big><a name="Binary Operators.mul" id="Binary Operators.mul">mul</a></big>
<br>
The result is
the first argument value times the second argument value; see
the example and test <a href="json_mul_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_mul_op.cpp</span></a>
.

<br>
<br>
<big><a name="Binary Operators.pow" id="Binary Operators.pow">pow</a></big>
<br>
The result is
the first argument value raised to the second argument value; see
the example and test <a href="json_pow_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_pow_op.cpp</span></a>
.

<br>
<br>
<big><a name="Binary Operators.sub" id="Binary Operators.sub">sub</a></big>
<br>
The result is
the first argument value minus the second argument value; see
the example and test <a href="json_sub_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_sub_op.cpp</span></a>
.

<br>
<br>
<b><big><a name="sum" id="sum">sum</a></big></b>
<br>
This operator has the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;sum&quot;<br>
}<br>
</span></font></code>
A corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage</span></font></i></code>
 has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>last_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]&nbsp;]<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i></code>
 is always <code><font color="blue">1</font></code>.
This operation creates one node with value equal to
the sum of values corresponding to all of its argument nodes.

<br>
<br>
<big><a name="sum.Example" id="sum.Example">Example</a></big>
<br>
The file <a href="json_sum_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_sum_op.cpp</span></a>
 is an example and test
of this operation.

<br>
<br>
<b><big><a name="Conditional Expressions" id="Conditional Expressions">Conditional Expressions</a></big></b>
<br>
These operators are <a href="condexp.htm" target="_top"><span style='white-space: nowrap'>conditional&nbsp;expressions</span></a>

and have the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;cexp_</span></font><i><font color="black"><span style='white-space: nowrap'>rel</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;n_arg&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4<br>
}<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>rel</span></font></i></code>
 is <code><font color="blue">eq</font></code> (equal),
<code><font color="blue">le</font></code> (less than or equal), or
<code><font color="blue">lt</font></code> (less than).
The first argument is <a href="condexp.htm#left" target="_top"><span style='white-space: nowrap'>left</span></a>
,
the second is <a href="condexp.htm#right" target="_top"><span style='white-space: nowrap'>right</span></a>
,
the third is <a href="condexp.htm#if_true" target="_top"><span style='white-space: nowrap'>if_true</span></a>
,
the fourth is <a href="condexp.htm#if_false" target="_top"><span style='white-space: nowrap'>if_false</span></a>
,
the result is given by

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cop</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>result</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>if_true</span></font></i><font color="blue"><span style='white-space: nowrap'>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>result</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>if_false</span></font></i><font color="blue"><span style='white-space: nowrap'>;<br>
</span></font></code>
where the comparison 
<code><i><font color="black"><span style='white-space: nowrap'>cop</span></font></i></code>
 is define by the cases below:

<br>
<br>
<big><a name="Conditional Expressions.cexp_eq" id="Conditional Expressions.cexp_eq">cexp_eq</a></big>
<br>
For this operator 
<code><i><font color="black"><span style='white-space: nowrap'>cop</span></font></i></code>
 is <code><font color="blue">==</font></code>

<br>
<br>
<big><a name="Conditional Expressions.cexp_le" id="Conditional Expressions.cexp_le">cexp_le</a></big>
<br>
For this operator 
<code><i><font color="black"><span style='white-space: nowrap'>cop</span></font></i></code>
 is <code><font color="blue">&lt;=</font></code>

<br>
<br>
<big><a name="Conditional Expressions.cexp_lt" id="Conditional Expressions.cexp_lt">cexp_lt</a></big>
<br>
For this operator 
<code><i><font color="black"><span style='white-space: nowrap'>cop</span></font></i></code>
 is <code><font color="blue">&lt;</font></code>

<br>
<br>
<big><a name="Conditional Expressions.Other Comparisons" id="Conditional Expressions.Other Comparisons">Other Comparisons</a></big>
<br>
Note that

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;CondExpGt(</span></font><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>if_true</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>if_false</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
is equivalent to

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;CondExpLe(</span></font><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>if_false</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>if_true</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
Similar conversions can be used for all the possible
<a href="condexp.htm" target="_top"><span style='white-space: nowrap'>conditional&nbsp;expressions</span></a>
.

<br>
<br>
<big><a name="Conditional Expressions.Example" id="Conditional Expressions.Example">Example</a></big>
<br>
The file <a href="json_cexp_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_cexp_op.cpp</span></a>
 is an example and test
for one of these operators.

<br>
<br>
<b><big><a name="Compare Operators" id="Compare Operators">Compare Operators</a></big></b>
<br>
These are <a href="compare.htm" target="_top"><span style='white-space: nowrap'>comparison</span></a>
 operators
and have the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;comp_</span></font><i><font color="black"><span style='white-space: nowrap'>rel</span></font></i><font color="blue"><span style='white-space: nowrap'>&quot;<br>
}<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>rel</span></font></i></code>
 is <code><font color="blue">eq</font></code> (equal),
<code><font color="blue">ne</font></code> (not equal),
<code><font color="blue">le</font></code> (less than or equal), or
<code><font color="blue">lt</font></code> (less than).
A corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage</span></font></i></code>
 has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]&nbsp;]<br>
</span></font></code>
<br>
<big><a name="Compare Operators.n_result" id="Compare Operators.n_result">n_result</a></big>
<br>
This is always zero because a comparison operator does not create
any new nodes.

<br>
<br>
<big><a name="Compare Operators.n_arg" id="Compare Operators.n_arg">n_arg</a></big>
<br>
This is always two because a comparison operator has two argument nodes
corresponding to the left and right operands.

<br>
<br>
<big><a name="Compare Operators.left, right" id="Compare Operators.left, right">left, right</a></big>
<br>
The logical comparison is defined as the logical expression

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cop</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The comparison 
<code><i><font color="black"><span style='white-space: nowrap'>cop</span></font></i></code>
 is define by the cases below.
The Json graph corresponds to the comparison being true.
If, for a value of the independent parameters and variables,
the comparison is false,
the Json graph may no longer be valid.
For example, the Json graph may only contain the code for the true case below:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cop</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>source&nbsp;code&nbsp;when&nbsp;result&nbsp;is&nbsp;true</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;}<br>
&nbsp;&nbsp;&nbsp;&nbsp;else<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>source&nbsp;code&nbsp;when&nbsp;result&nbsp;is&nbsp;false</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;}<br>
</span></font></code>
Including this operator enables CppAD to detect when the graph
may no longer be a valid representation of the intended function.

<br>
<br>
<big><a name="Compare Operators.comp_eq" id="Compare Operators.comp_eq">comp_eq</a></big>
<br>
For this operator 
<code><i><font color="black"><span style='white-space: nowrap'>cop</span></font></i></code>
 is <code><font color="blue">==</font></code>

<br>
<br>
<big><a name="Compare Operators.comp_le" id="Compare Operators.comp_le">comp_le</a></big>
<br>
For this operator 
<code><i><font color="black"><span style='white-space: nowrap'>cop</span></font></i></code>
 is <code><font color="blue">&lt;=</font></code>

<br>
<br>
<big><a name="Compare Operators.comp_lt" id="Compare Operators.comp_lt">comp_lt</a></big>
<br>
For this operator 
<code><i><font color="black"><span style='white-space: nowrap'>cop</span></font></i></code>
 is <code><font color="blue">&lt;</font></code>

<br>
<br>
<big><a name="Compare Operators.comp_ne" id="Compare Operators.comp_ne">comp_ne</a></big>
<br>
For this operator 
<code><i><font color="black"><span style='white-space: nowrap'>cop</span></font></i></code>
 is <code><font color="blue">!=</font></code>

<br>
<br>
<big><a name="Compare Operators.Other Comparisons" id="Compare Operators.Other Comparisons">Other Comparisons</a></big>
<br>
The comparison result true for 
<code><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i></code>

is equivalent to the comparison result true for 
<code><i><font color="black"><span style='white-space: nowrap'>right</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>left</span></font></i></code>
.
The comparison result false for 
<code><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i></code>

is equivalent to the comparison result true for 
<code><i><font color="black"><span style='white-space: nowrap'>left</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>right</span></font></i></code>
.
In a similar fashion, all the possible comparisons results
can be converted to a true result for one of the comparisons above.

<br>
<br>
<big><a name="Compare Operators.Example" id="Compare Operators.Example">Example</a></big>
<br>
The file <a href="json_comp_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_comp_op.cpp</span></a>
 is an example and test
for one of these operators.

<br>
<br>
<b><big><a name="Discrete Functions" id="Discrete Functions">Discrete Functions</a></big></b>
<br>
This operator has the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;discrete&quot;<br>
}<br>
</span></font></code>
A corresponding op_usage has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>arg</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]&nbsp;&nbsp;]<br>
</span></font></code>
<br>
<big><a name="Discrete Functions.name" id="Discrete Functions.name">name</a></big>
<br>
The value 
<code><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 is a
<a href="json_ad_graph.htm#Token.String" target="_top"><span style='white-space: nowrap'>string</span></a>
 specifying the
<a href="discrete.htm#name" target="_top"><span style='white-space: nowrap'>name</span></a>
 of the discrete function that is called.

<br>
<br>
<big><a name="Discrete Functions.n_result" id="Discrete Functions.n_result">n_result</a></big>
<br>
This is always <code><font color="blue">1</font></code> because a discrete function
creates one new node.
The result node value is the specified discrete function of the argument value.

<br>
<br>
<big><a name="Discrete Functions.n_arg" id="Discrete Functions.n_arg">n_arg</a></big>
<br>
This is always <code><font color="blue">1</font></code> because a discrete function has
one argument node.

<br>
<br>
<big><a name="Discrete Functions.arg" id="Discrete Functions.arg">arg</a></big>
<br>
is the node index for the argument to the discrete function.

<br>
<br>
<big><a name="Discrete Functions.Example" id="Discrete Functions.Example">Example</a></big>
<br>
the example and test <a href="json_discrete_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_discrete_op.cpp</span></a>
.


<br>
<br>
<b><big><a name="Atomic Functions" id="Atomic Functions">Atomic Functions</a></big></b>
<br>
These operators create 
<code><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i></code>
 nodes with values determined by
an evaluation of the an <a href="atomic_three.htm" target="_top"><span style='white-space: nowrap'>atomic_three</span></a>
 or <a href="atomic_four.htm" target="_top"><span style='white-space: nowrap'>atomic_four</span></a>
 function.

<br>
<br>
<big><a name="Atomic Functions.Atomic Three" id="Atomic Functions.Atomic Three">Atomic Three</a></big>
<br>
This operator has the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;atom&quot;<br>
}<br>
</span></font></code>
A corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage</span></font></i></code>
 has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>last_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;]<br>
</span></font></code>
<br>
<big><a name="Atomic Functions.Atomic Four" id="Atomic Functions.Atomic Four">Atomic Four</a></big>
<br>
This operator has the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;atom4&quot;<br>
}<br>
</span></font></code>
A corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage</span></font></i></code>
 has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>call_id</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>last_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]<br>
&nbsp;&nbsp;&nbsp;&nbsp;]<br>
</span></font></code>
<br>
<big><a name="Atomic Functions.name" id="Atomic Functions.name">name</a></big>
<br>
The value 
<code><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 is a
<a href="json_ad_graph.htm#Token.String" target="_top"><span style='white-space: nowrap'>string</span></a>
 specifying the
<a href="atomic_three_ctor.htm#atomic_three.name" target="_top"><span style='white-space: nowrap'>name</span></a>

of the <code><font color="blue">atomic_three</font></code> function that is called.

<br>
<br>
<big><a name="Atomic Functions.call_id" id="Atomic Functions.call_id">call_id</a></big>
<br>
is a <a href="json_ad_graph.htm#Token.Non-Negative Integer" target="_top"><span style='white-space: nowrap'>non-negative&nbsp;integer</span></a>

specifying the <a href="atomic_four_call.htm#call_id" target="_top"><span style='white-space: nowrap'>call_id</span></a>
 for an
atomic four function.

<br>
<br>
<big><a name="Atomic Functions.n_result" id="Atomic Functions.n_result">n_result</a></big>
<br>
is the number of results for this function; i.e.,
its range space dimension.

<br>
<br>
<big><a name="Atomic Functions.n_arg" id="Atomic Functions.n_arg">n_arg</a></big>
<br>
is the number of arguments to this function; i.e.,
its domain space dimension.

<br>
<br>
<big><a name="Atomic Functions.first_arg, ..., last_arg" id="Atomic Functions.first_arg, ..., last_arg">first_arg, ..., last_arg</a></big>
<br>
The values corresponding to the node indices

<code><i><font color="black"><span style='white-space: nowrap'>first_arg</span></font></i></code>
, ..., 
<code><i><font color="black"><span style='white-space: nowrap'>last_arg</span></font></i></code>
 are the
arguments (independent variables) for the atomic function evaluation.
In the case where the atomic function is a <code><font color="blue">chkpoint_two</font></code> function,
the independent dynamic parameters are specified by calling its
<a href="chkpoint_two.htm#Syntax.new_dynamic" target="_top"><span style='white-space: nowrap'>new_dynamic</span></a>
 routine.

<br>
<br>
<big><a name="Atomic Functions.Example" id="Atomic Functions.Example">Example</a></big>
<br>
the example and test <a href="json_atom_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_atom_op.cpp</span></a>
.

<br>
<br>
<b><big><a name="Print" id="Print">Print</a></big></b>
<br>
This operator has the following Json definition:

<code><font color="blue"><span style='white-space: nowrap'><br>
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;op_code&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;print&quot;<br>
}<br>
</span></font></code>
A corresponding 
<code><i><font color="black"><span style='white-space: nowrap'>op_usage</span></font></i></code>
 has the form

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>op_code</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>before</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>after</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_result</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_arg</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>notpos</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>value</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]&nbsp;]<br>
</span></font></code>
<br>
<big><a name="Print.before" id="Print.before">before</a></big>
<br>
is a <a href="json_ad_graph.htm#Token.String" target="_top"><span style='white-space: nowrap'>string</span></a>
 that is printed
<a href="printfor.htm#before" target="_top"><span style='white-space: nowrap'>before</span></a>
 the value for this operator.

<br>
<br>
<big><a name="Print.after" id="Print.after">after</a></big>
<br>
is a <a href="json_ad_graph.htm#Token.String" target="_top"><span style='white-space: nowrap'>string</span></a>
 that is printed
<a href="printfor.htm#after" target="_top"><span style='white-space: nowrap'>after</span></a>
 the value for this operator.

<br>
<br>
<big><a name="Print.n_result" id="Print.n_result">n_result</a></big>
<br>
This is always zero because a print operator does not create
any new nodes.

<br>
<br>
<big><a name="Print.n_arg" id="Print.n_arg">n_arg</a></big>
<br>
This is always two because a print operator has two argument nodes.

<br>
<br>
<big><a name="Print.notpos" id="Print.notpos">notpos</a></big>
<br>
This is <a href="printfor.htm#notpos" target="_top"><span style='white-space: nowrap'>notpos</span></a>

which determines if the value is printed.

<br>
<br>
<big><a name="Print.value" id="Print.value">value</a></big>
<br>
This is the <a href="printfor.htm#value" target="_top"><span style='white-space: nowrap'>value</span></a>
 that is printed.

<br>
<br>
<big><a name="Print.Example" id="Print.Example">Example</a></big>
<br>
The file <a href="json_print_op.cpp.htm" target="_top"><span style='white-space: nowrap'>json_print_op.cpp</span></a>
 is an example and test
of this operator.

<br>
<br>
<b><big><a name="Contents" id="Contents">Contents</a></big></b>
<br>
<table>
<tr><td><a href="json_unary_op.cpp.htm" target="_top">json_unary_op.cpp</a></td><td>Json&nbsp;Unary&nbsp;Operators:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="json_add_op.cpp.htm" target="_top">json_add_op.cpp</a></td><td>Json&nbsp;add&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="json_azmul_op.cpp.htm" target="_top">json_azmul_op.cpp</a></td><td>Json&nbsp;azmul&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="json_div_op.cpp.htm" target="_top">json_div_op.cpp</a></td><td>Json&nbsp;div&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="json_mul_op.cpp.htm" target="_top">json_mul_op.cpp</a></td><td>Json&nbsp;mul&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="json_pow_op.cpp.htm" target="_top">json_pow_op.cpp</a></td><td>Json&nbsp;pow&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="json_sub_op.cpp.htm" target="_top">json_sub_op.cpp</a></td><td>Json&nbsp;sub&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="json_sum_op.cpp.htm" target="_top">json_sum_op.cpp</a></td><td>Json&nbsp;sum&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="json_cexp_op.cpp.htm" target="_top">json_cexp_op.cpp</a></td><td>Json&nbsp;Conditional&nbsp;Expressions:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="json_comp_op.cpp.htm" target="_top">json_comp_op.cpp</a></td><td>Json&nbsp;Comparison&nbsp;Operators:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="json_discrete_op.cpp.htm" target="_top">json_discrete_op.cpp</a></td><td>Json&nbsp;add&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="json_atom_op.cpp.htm" target="_top">json_atom_op.cpp</a></td><td>Json&nbsp;Atomic&nbsp;Function&nbsp;Three&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="json_atom4_op.cpp.htm" target="_top">json_atom4_op.cpp</a></td><td>Json&nbsp;Atomic&nbsp;Function&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr><tr><td><a href="json_print_op.cpp.htm" target="_top">json_print_op.cpp</a></td><td>Json&nbsp;AD&nbsp;Graph&nbsp;print&nbsp;Operator:&nbsp;Example&nbsp;and&nbsp;Test</td></tr></table>
<hr>Input File: include/cppad/core/graph/json_graph_op.omh

</body>
</html>
