<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>abs_normal: Minimize a Linear Abs-normal Approximation</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="abs_normal: Minimize a Linear Abs-normal Approximation">
<meta name="keywords" id="keywords" content=" abs_normal: minimize linear abs-normal approximation syntax prototype source purpose dblvector sizevector f level n m s g g_hat g_jac hessian bound epsilon maxitr delta_x method sigma cutting planes iteration example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_abs_min_quad_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="qp_box.hpp.htm" target="_top">Prev</a>
</td><td><a href="abs_min_quad.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>other_adfun</option>
<option>abs_normal_fun</option>
<option>example_abs_normal</option>
<option>abs_min_quad</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_other_adfun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_abs_normal_fun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_example_abs_normal_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_abs_min_quad_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Prototype</option>
<option>Source</option>
<option>Purpose</option>
<option>DblVector</option>
<option>SizeVector</option>
<option>f</option>
<option>level</option>
<option>n</option>
<option>m</option>
<option>s</option>
<option>g</option>
<option>g_hat</option>
<option>g_jac</option>
<option>hessian</option>
<option>bound</option>
<option>epsilon</option>
<option>maxitr</option>
<option>delta_x</option>
<option>Method</option>
<option>---..sigma</option>
<option>---..Cutting Planes</option>
<option>---..Iteration</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>abs_normal: Minimize a Linear Abs-normal Approximation</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;abs_min_quad(<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>level</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s</span></font></i><font color="blue"><span style='white-space: nowrap'>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>g_hat</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>g_jac</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>hessian</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>bound</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>maxitr</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>delta_x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
)</span></font></code>


<br>
<br>
<b><big><a name="Prototype" id="Prototype">Prototype</a></big></b>

<pre><tt>
<b><font color="#0000FF">template</font></b> <font color="#990000">&lt;</font><b><font color="#0000FF">class</font></b> <font color="#008080">DblVector</font><font color="#990000">,</font> <b><font color="#0000FF">class</font></b> <font color="#008080">SizeVector</font><font color="#990000">&gt;</font>
<font color="#009900">bool</font> <b><font color="#000000">abs_min_quad</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font>            level   <font color="#990000">,</font>
    <font color="#008080">size_t</font>            n       <font color="#990000">,</font>
    <font color="#008080">size_t</font>            m       <font color="#990000">,</font>
    <font color="#008080">size_t</font>            s       <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> DblVector<font color="#990000">&amp;</font>  g_hat   <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> DblVector<font color="#990000">&amp;</font>  g_jac   <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> DblVector<font color="#990000">&amp;</font>  hessian <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> DblVector<font color="#990000">&amp;</font>  bound   <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> DblVector<font color="#990000">&amp;</font>  epsilon <font color="#990000">,</font>
    <b><font color="#0000FF">const</font></b> SizeVector<font color="#990000">&amp;</font> maxitr  <font color="#990000">,</font>
    DblVector<font color="#990000">&amp;</font>        delta_x <font color="#990000">)</font></tt></pre>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>
<br>
This following is a link to the source code for this example:
<a href="abs_min_quad.hpp.htm" target="_top"><span style='white-space: nowrap'>abs_min_quad.hpp</span></a>
.

<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
We are given a point <small>@(@
\hat{x} \in \B{R}^n
@)@</small> and
use the notation <small>@(@
\tilde{f} (x)
@)@</small> for the abs-normal
<a href="abs_normal_fun.htm#Abs-normal Approximation.Approximating f(x)" target="_top"><span style='white-space: nowrap'>approximation&nbsp;for&nbsp;f(x)</span></a>

near <small>@(@
\hat{x}
@)@</small>.
We are also given a vector <small>@(@
b \in \B{R}_+^n
@)@</small>
and a positive definite matrix <small>@(@
H \in \B{R}^{n \times n}
@)@</small>.
This routine solves the problem
<small>@[@

\begin{array}{lll}
\R{minimize} &
    \Delta x^T H \Delta x / 2 + \tilde{f}( \hat{x} + \Delta x ) &
    \R{w.r.t} \; \Delta x \in \B{R}^n
\\
\R{subject \; to} & | \Delta x_j | \leq b_j & j = 0 , \ldots , n-1
\end{array}

@]@</small>

<br>
<br>
<b><big><a name="DblVector" id="DblVector">DblVector</a></big></b>
<br>
is a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with elements of type <code><font color="blue">double</font></code>.

<br>
<br>
<b><big><a name="SizeVector" id="SizeVector">SizeVector</a></big></b>
<br>
is a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with elements of type <code><font color="blue">size_t</font></code>.

<br>
<br>
<b><big><a name="f" id="f">f</a></big></b>
<br>
We use the notation 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 for the original function; see
<a href="abs_normal_fun.htm#f" target="_top"><span style='white-space: nowrap'>f</span></a>
.

<br>
<br>
<b><big><a name="level" id="level">level</a></big></b>
<br>
This value is less that or equal 3.
If 
<code><i><font color="black"><span style='white-space: nowrap'>level</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;==&nbsp;0</span></font></code>
,
no tracing of the optimization is printed.
If 
<code><i><font color="black"><span style='white-space: nowrap'>level</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;=&nbsp;1</span></font></code>
,
a trace of each iteration of <code><font color="blue">abs_min_quad</font></code> is printed.
If 
<code><i><font color="black"><span style='white-space: nowrap'>level</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;=&nbsp;2</span></font></code>
,
a trace of the <a href="qp_box.htm" target="_top"><span style='white-space: nowrap'>qp_box</span></a>
 sub-problem is printed.
If 
<code><i><font color="black"><span style='white-space: nowrap'>level</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&gt;=&nbsp;3</span></font></code>
,
a trace of the <a href="qp_interior.htm" target="_top"><span style='white-space: nowrap'>qp_interior</span></a>
 sub-problem is printed.

<br>
<br>
<b><big><a name="n" id="n">n</a></big></b>
<br>
This is the dimension of the domain space for 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
; see
<a href="abs_normal_fun.htm#f.n" target="_top"><span style='white-space: nowrap'>n</span></a>
.

<br>
<br>
<b><big><a name="m" id="m">m</a></big></b>
<br>
This is the dimension of the range space for 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
; see
<a href="abs_normal_fun.htm#f.m" target="_top"><span style='white-space: nowrap'>m</span></a>
. This must be one so that <small>@(@
f
@)@</small>
is an objective function.

<br>
<br>
<b><big><a name="s" id="s">s</a></big></b>
<br>
This is the number of absolute value terms in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
; see
<a href="abs_normal_fun.htm#f.s" target="_top"><span style='white-space: nowrap'>s</span></a>
.

<br>
<br>
<b><big><a name="g" id="g">g</a></big></b>
<br>
We use the notation 
<code><i><font color="black"><span style='white-space: nowrap'>g</span></font></i></code>
 for the abs-normal representation of 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
;
see <a href="abs_normal_fun.htm#g" target="_top"><span style='white-space: nowrap'>g</span></a>
.

<br>
<br>
<b><big><a name="g_hat" id="g_hat">g_hat</a></big></b>
<br>
This vector has size 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s</span></font></i></code>
 and is the value of

<code><i><font color="black"><span style='white-space: nowrap'>g(x,&nbsp;u)</span></font></i></code>
 at <small>@(@
x = \hat{x}
@)@</small> and <small>@(@
u = a( \hat{x} )
@)@</small>.

<br>
<br>
<b><big><a name="g_jac" id="g_jac">g_jac</a></big></b>
<br>
This vector has size 
<code><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s</span></font></i><font color="blue"><span style='white-space: nowrap'>)&nbsp;*&nbsp;(</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>s</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
 and is the Jacobian of
<small>@(@
g(x, u)
@)@</small> at <small>@(@
x = \hat{x}
@)@</small> and <small>@(@
u = a( \hat{x} )
@)@</small>.

<br>
<br>
<b><big><a name="hessian" id="hessian">hessian</a></big></b>
<br>
This vector has size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;*&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
It is a <a href="glossary.htm#Row-major Representation" target="_top"><span style='white-space: nowrap'>row-major</span></a>
 representation
of the matrix <small>@(@
H \in \B{R}^{n \times n}
@)@</small>.

<br>
<br>
<b><big><a name="bound" id="bound">bound</a></big></b>
<br>
This vector has size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 and is the vector <small>@(@
b \in \B{R}^n
@)@</small>.
The trust region is defined as the set of <small>@(@
\Delta x
@)@</small> such that
<small>@[@

    | \Delta x | \leq b_j

@]@</small>
for <small>@(@
j = 0 , \ldots , n-1
@)@</small>.

<br>
<br>
<b><big><a name="epsilon" id="epsilon">epsilon</a></big></b>
<br>
The value 
<code><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i><font color="blue"><span style='white-space: nowrap'>[0]</span></font></code>
 is convergence criteria in terms
of the infinity norm of the difference of 
<code><i><font color="black"><span style='white-space: nowrap'>delta_x</span></font></i></code>

between iterations.
The value 
<code><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i><font color="blue"><span style='white-space: nowrap'>[1]</span></font></code>
 is convergence criteria in terms
of the derivative of the objective; i.e.
<small>@[@

    \Delta x^T H \Delta x / 2 + \tilde{f}( \hat{x} + \Delta x)

@]@</small>

<br>
<br>
<b><big><a name="maxitr" id="maxitr">maxitr</a></big></b>
<br>
This is a vector with size 2.
The value 
<code><i><font color="black"><span style='white-space: nowrap'>maxitr</span></font></i><font color="blue"><span style='white-space: nowrap'>[0]</span></font></code>
 is the maximum number of
<code><font color="blue">abs_min_quad</font></code> iterations to try before giving up on convergence.
The value 
<code><i><font color="black"><span style='white-space: nowrap'>maxitr</span></font></i><font color="blue"><span style='white-space: nowrap'>[1]</span></font></code>
 is the maximum number of iterations in
the <a href="qp_interior.htm#maxitr" target="_top"><span style='white-space: nowrap'>qp_interior</span></a>
 sub-problems.

<br>
<br>
<b><big><a name="delta_x" id="delta_x">delta_x</a></big></b>
<br>
This vector <small>@(@
\Delta x
@)@</small> has size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
The input value of its elements does not matter.
Upon return,
the approximate minimizer of the objective with respect to the trust region.

<br>
<br>
<b><big><a name="Method" id="Method">Method</a></big></b>


<br>
<br>
<big><a name="Method.sigma" id="Method.sigma">sigma</a></big>
<br>
We use the notation
<small>@[@

    \sigma (x) = \R{sign} ( z[ x , a(x) ] )

@]@</small>
where
<a href="abs_normal_fun.htm#a.a(x)" target="_top"><span style='white-space: nowrap'>a(x)</span></a>
 and
<a href="abs_normal_fun.htm#g.z(x, u)" target="_top"><span style='white-space: nowrap'>z(x,&nbsp;u)</span></a>

are as defined in the abs-normal representation of <small>@(@
f(x)
@)@</small>.

<br>
<br>
<big><a name="Method.Cutting Planes" id="Method.Cutting Planes">Cutting Planes</a></big>
<br>
At each iteration,
we are given affine functions <small>@(@
p_k (x)
@)@</small>
such that <small>@(@
p_k ( x_k ) = \tilde{f}( x_k )
@)@</small>  and
<small>@(@
p_k^{(1)} ( x_k )
@)@</small> is the derivative <small>@(@
\tilde{f}^{(1)} ( x_k )
@)@</small>
corresponding to <small>@(@
\sigma ( x_k )
@)@</small>.

<br>
<br>
<big><a name="Method.Iteration" id="Method.Iteration">Iteration</a></big>
<br>
At iteration <small>@(@
k
@)@</small>, we solve the problem
<small>@[@

\begin{array}{lll}
\R{minimize}
& \Delta x^T H \Delta x / 2 +
    \max \{ p_k ( \hat{x} + \Delta x) \W{:} k = 0 , \ldots , K-1 \}
& \R{w.r.t} \; \Delta x
\\
\R{subject \; to} & - b \leq \Delta x \leq + b
\end{array}

@]@</small>
The solution is the new point <small>@(@
x_K
@)@</small>
at which the new affine approximation
<small>@(@
p_K (x)
@)@</small> is constructed.
This process is iterated until the difference
<small>@(@
x_K - x_{K-1}
@)@</small> is small enough.



<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="abs_min_quad.cpp.htm" target="_top"><span style='white-space: nowrap'>abs_min_quad.cpp</span></a>
 contains an example and test of
<code><font color="blue">abs_min_quad</font></code>.


<hr>Input File: example/abs_normal/abs_min_quad.hpp

</body>
</html>
