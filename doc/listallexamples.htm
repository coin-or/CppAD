<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>List All (Except Deprecated) CppAD Examples</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="List All (Except Deprecated) CppAD Examples">
<meta name="keywords" id="keywords" content=" list all (except deprecated) cppad examples ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_listallexamples_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="get_started.cpp.htm" target="_top">Prev</a>
</td><td><a href="general.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>ListAllExamples</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_example_htm.js'></script>
</td>
<td>ListAllExamples</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@


<center><b><big><big>List All (Except Deprecated) CppAD Examples</big></big></b></center>
<table><tr><td align='left'  valign='top'>
<a href="addeq.cpp.htm" target="_top">AddEq.cpp</a></td><td>
AD Compound Assignment Addition: Example and Test</td></tr>
<tr><td>
<a href="rombergmul.cpp.htm" target="_top">Rombergmul.cpp</a></td><td>
One Dimensional Romberg Integration: Example and Test</td></tr>
<tr><td>
<a href="a11c_bthread.cpp.htm" target="_top">a11c_bthread.cpp</a></td><td>
A Simple Boost Thread Example and Test</td></tr>
<tr><td>
<a href="a11c_openmp.cpp.htm" target="_top">a11c_openmp.cpp</a></td><td>
A Simple OpenMP Example and Test</td></tr>
<tr><td>
<a href="a11c_pthread.cpp.htm" target="_top">a11c_pthread.cpp</a></td><td>
A Simple Parallel Pthread Example and Test</td></tr>
<tr><td>
<a href="abort_recording.cpp.htm" target="_top">abort_recording.cpp</a></td><td>
Abort Current Recording: Example and Test</td></tr>
<tr><td>
<a href="abs_eval.cpp.htm" target="_top">abs_eval.cpp</a></td><td>
abs_eval: Example and Test</td></tr>
<tr><td>
<a href="abs_eval.hpp.htm" target="_top">abs_eval.hpp</a></td><td>
abs_eval Source Code</td></tr>
<tr><td>
<a href="abs_get_started.cpp.htm" target="_top">abs_get_started.cpp</a></td><td>
abs_normal Getting Started: Example and Test</td></tr>
<tr><td>
<a href="abs_min_linear.cpp.htm" target="_top">abs_min_linear.cpp</a></td><td>
abs_min_linear: Example and Test</td></tr>
<tr><td>
<a href="abs_min_linear.hpp.htm" target="_top">abs_min_linear.hpp</a></td><td>
abs_min_linear Source Code</td></tr>
<tr><td>
<a href="abs_min_quad.cpp.htm" target="_top">abs_min_quad.cpp</a></td><td>
abs_min_quad: Example and Test</td></tr>
<tr><td>
<a href="abs_min_quad.hpp.htm" target="_top">abs_min_quad.hpp</a></td><td>
abs_min_quad Source Code</td></tr>
<tr><td>
<a href="acos.cpp.htm" target="_top">acos.cpp</a></td><td>
The AD acos Function: Example and Test</td></tr>
<tr><td>
<a href="acosh.cpp.htm" target="_top">acosh.cpp</a></td><td>
The AD acosh Function: Example and Test</td></tr>
<tr><td>
<a href="ad_assign.cpp.htm" target="_top">ad_assign.cpp</a></td><td>
AD Assignment: Example and Test</td></tr>
<tr><td>
<a href="ad_ctor.cpp.htm" target="_top">ad_ctor.cpp</a></td><td>
AD Constructors: Example and Test</td></tr>
<tr><td>
<a href="ad_fun.cpp.htm" target="_top">ad_fun.cpp</a></td><td>
Creating Your Own Interface to an ADFun Object</td></tr>
<tr><td>
<a href="ad_in_c.cpp.htm" target="_top">ad_in_c.cpp</a></td><td>
Example and Test Linking CppAD to Languages Other than C++</td></tr>
<tr><td>
<a href="ad_input.cpp.htm" target="_top">ad_input.cpp</a></td><td>
AD Output Operator: Example and Test</td></tr>
<tr><td>
<a href="ad_output.cpp.htm" target="_top">ad_output.cpp</a></td><td>
AD Output Operator: Example and Test</td></tr>
<tr><td>
<a href="add.cpp.htm" target="_top">add.cpp</a></td><td>
AD Binary Addition: Example and Test</td></tr>
<tr><td>
<a href="asin.cpp.htm" target="_top">asin.cpp</a></td><td>
The AD asin Function: Example and Test</td></tr>
<tr><td>
<a href="asinh.cpp.htm" target="_top">asinh.cpp</a></td><td>
The AD asinh Function: Example and Test</td></tr>
<tr><td>
<a href="atan.cpp.htm" target="_top">atan.cpp</a></td><td>
The AD atan Function: Example and Test</td></tr>
<tr><td>
<a href="atan2.cpp.htm" target="_top">atan2.cpp</a></td><td>
The AD atan2 Function: Example and Test</td></tr>
<tr><td>
<a href="atanh.cpp.htm" target="_top">atanh.cpp</a></td><td>
The AD atanh Function: Example and Test</td></tr>
<tr><td>
<a href="atomic_four_dynamic.cpp.htm" target="_top">atomic_four_dynamic.cpp</a></td><td>
Atomic Functions with Dynamic Parameters: Example and Test</td></tr>
<tr><td>
<a href="atomic_four_forward.cpp.htm" target="_top">atomic_four_forward.cpp</a></td><td>
Atomic Functions and Forward Mode: Example and Test</td></tr>
<tr><td>
<a href="atomic_four_get_started.cpp.htm" target="_top">atomic_four_get_started.cpp</a></td><td>
Getting Started with Atomic Functions: Example and Test</td></tr>
<tr><td>
<a href="atomic_four_lin_ode_forward.cpp.htm" target="_top">atomic_four_lin_ode_forward.cpp</a></td><td>
Atomic Linear ODE Forward Mode: Example and Test</td></tr>
<tr><td>
<a href="atomic_four_lin_ode_rev_depend.cpp.htm" target="_top">atomic_four_lin_ode_rev_depend.cpp</a></td><td>
Atomic Linear ODE Reverse Dependency Analysis: Example and Test</td></tr>
<tr><td>
<a href="atomic_four_lin_ode_reverse.cpp.htm" target="_top">atomic_four_lin_ode_reverse.cpp</a></td><td>
Atomic Linear ODE Reverse Mode: Example and Test</td></tr>
<tr><td>
<a href="atomic_four_lin_ode_sparsity.cpp.htm" target="_top">atomic_four_lin_ode_sparsity.cpp</a></td><td>
Atomic Linear ODE Sparsity Calculations: Example and Test</td></tr>
<tr><td>
<a href="atomic_four_mat_mul_forward.cpp.htm" target="_top">atomic_four_mat_mul_forward.cpp</a></td><td>
Atomic Matrix Multiply Forward Mode: Example and Test</td></tr>
<tr><td>
<a href="atomic_four_mat_mul_identical_zero.cpp.htm" target="_top">atomic_four_mat_mul_identical_zero.cpp</a></td><td>
Atomic Matrix Multiply Identical Zero: Example and Test</td></tr>
<tr><td>
<a href="atomic_four_mat_mul_rev_depend.cpp.htm" target="_top">atomic_four_mat_mul_rev_depend.cpp</a></td><td>
Atomic Matrix Multiply Reverse Dependency: Example and Test</td></tr>
<tr><td>
<a href="atomic_four_mat_mul_reverse.cpp.htm" target="_top">atomic_four_mat_mul_reverse.cpp</a></td><td>
Atomic Matrix Multiply Reverse Mode: Example and Test</td></tr>
<tr><td>
<a href="atomic_four_mat_mul_sparsity.cpp.htm" target="_top">atomic_four_mat_mul_sparsity.cpp</a></td><td>
Atomic Matrix Multiply Sparsity Patterns: Example and Test</td></tr>
<tr><td>
<a href="atomic_four_norm_sq.cpp.htm" target="_top">atomic_four_norm_sq.cpp</a></td><td>
Atomic Euclidean Norm Squared: Example and Test</td></tr>
<tr><td>
<a href="atomic_four_vector.hpp.htm" target="_top">atomic_four_vector.hpp</a></td><td>
Atomic Vector Class: Example Implementation</td></tr>
<tr><td>
<a href="atomic_four_vector_add.cpp.htm" target="_top">atomic_four_vector_add.cpp</a></td><td>
Atomic Vector Addition Example</td></tr>
<tr><td>
<a href="atomic_four_vector_add_op.hpp.htm" target="_top">atomic_four_vector_add_op.hpp</a></td><td>
Atomic Vector Add Operator: Example Implementation</td></tr>
<tr><td>
<a href="atomic_four_vector_div.cpp.htm" target="_top">atomic_four_vector_div.cpp</a></td><td>
Atomic Vector Division Example</td></tr>
<tr><td>
<a href="atomic_four_vector_div_op.hpp.htm" target="_top">atomic_four_vector_div_op.hpp</a></td><td>
Atomic Vector Divide Operator: Example Implementation</td></tr>
<tr><td>
<a href="atomic_four_vector_for_type.hpp.htm" target="_top">atomic_four_vector_for_type.hpp</a></td><td>
Atomic Vector Forward Type Calculation: Example Implementation</td></tr>
<tr><td>
<a href="atomic_four_vector_forward_op.hpp.htm" target="_top">atomic_four_vector_forward_op.hpp</a></td><td>
Atomic Vector Forward Mode: Example Implementation</td></tr>
<tr><td>
<a href="atomic_four_vector_hes_sparsity.cpp.htm" target="_top">atomic_four_vector_hes_sparsity.cpp</a></td><td>
Atomic Vector Sparsity Patterns Example</td></tr>
<tr><td>
<a href="atomic_four_vector_hes_sparsity.hpp.htm" target="_top">atomic_four_vector_hes_sparsity.hpp</a></td><td>
Atomic Vector Hessian Sparsity Pattern: Example Implementation</td></tr>
<tr><td>
<a href="atomic_four_vector_jac_sparsity.cpp.htm" target="_top">atomic_four_vector_jac_sparsity.cpp</a></td><td>
Atomic Vector Sparsity Patterns Example</td></tr>
<tr><td>
<a href="atomic_four_vector_jac_sparsity.hpp.htm" target="_top">atomic_four_vector_jac_sparsity.hpp</a></td><td>
Atomic Vector Jacobian Sparsity Pattern: Example Implementation</td></tr>
<tr><td>
<a href="atomic_four_vector_mul.cpp.htm" target="_top">atomic_four_vector_mul.cpp</a></td><td>
Atomic Vector Multiplication Example</td></tr>
<tr><td>
<a href="atomic_four_vector_mul_op.hpp.htm" target="_top">atomic_four_vector_mul_op.hpp</a></td><td>
Atomic Vector Multiply Operator: Example Implementation</td></tr>
<tr><td>
<a href="atomic_four_vector_neg.cpp.htm" target="_top">atomic_four_vector_neg.cpp</a></td><td>
Atomic Vector Negation Example</td></tr>
<tr><td>
<a href="atomic_four_vector_neg_op.hpp.htm" target="_top">atomic_four_vector_neg_op.hpp</a></td><td>
Atomic Vector Negative Operator: Example Implementation</td></tr>
<tr><td>
<a href="atomic_four_vector_rev_depend.cpp.htm" target="_top">atomic_four_vector_rev_depend.cpp</a></td><td>
Example Optimizing Atomic Vector Usage</td></tr>
<tr><td>
<a href="atomic_four_vector_rev_depend.hpp.htm" target="_top">atomic_four_vector_rev_depend.hpp</a></td><td>
Atomic Vector Forward Type Calculation: Example Implementation</td></tr>
<tr><td>
<a href="atomic_four_vector_reverse_op.hpp.htm" target="_top">atomic_four_vector_reverse_op.hpp</a></td><td>
Atomic Vector Forward Mode: Example Implementation</td></tr>
<tr><td>
<a href="atomic_four_vector_sub.cpp.htm" target="_top">atomic_four_vector_sub.cpp</a></td><td>
Atomic Vector Subtraction Example</td></tr>
<tr><td>
<a href="atomic_four_vector_sub_op.hpp.htm" target="_top">atomic_four_vector_sub_op.hpp</a></td><td>
Atomic Vector Subtract Operator: Example Implementation</td></tr>
<tr><td>
<a href="atomic_three_base2ad.cpp.htm" target="_top">atomic_three_base2ad.cpp</a></td><td>
base2ad with Atomic Operations: Example and Test</td></tr>
<tr><td>
<a href="atomic_three_dynamic.cpp.htm" target="_top">atomic_three_dynamic.cpp</a></td><td>
Atomic Functions with Dynamic Parameters: Example and Test</td></tr>
<tr><td>
<a href="atomic_three_forward.cpp.htm" target="_top">atomic_three_forward.cpp</a></td><td>
Atomic Functions and Forward Mode: Example and Test</td></tr>
<tr><td>
<a href="atomic_three_get_started.cpp.htm" target="_top">atomic_three_get_started.cpp</a></td><td>
Getting Started with Atomic Functions: Example and Test</td></tr>
<tr><td>
<a href="atomic_three_hes_sparsity.cpp.htm" target="_top">atomic_three_hes_sparsity.cpp</a></td><td>
Atomic Forward Hessian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="atomic_three_jac_sparsity.cpp.htm" target="_top">atomic_three_jac_sparsity.cpp</a></td><td>
Atomic Function Jacobian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="atomic_three_mat_mul.cpp.htm" target="_top">atomic_three_mat_mul.cpp</a></td><td>
User Atomic Matrix Multiply: Example and Test</td></tr>
<tr><td>
<a href="atomic_three_mat_mul.hpp.htm" target="_top">atomic_three_mat_mul.hpp</a></td><td>
Matrix Multiply as an Atomic Operation</td></tr>
<tr><td>
<a href="atomic_three_norm_sq.cpp.htm" target="_top">atomic_three_norm_sq.cpp</a></td><td>
Atomic Euclidean Norm Squared: Example and Test</td></tr>
<tr><td>
<a href="atomic_three_reciprocal.cpp.htm" target="_top">atomic_three_reciprocal.cpp</a></td><td>
Reciprocal as an Atomic Operation: Example and Test</td></tr>
<tr><td>
<a href="atomic_three_rev_depend.cpp.htm" target="_top">atomic_three_rev_depend.cpp</a></td><td>
Atomic Functions Reverse Dependency Analysis: Example and Test</td></tr>
<tr><td>
<a href="atomic_three_reverse.cpp.htm" target="_top">atomic_three_reverse.cpp</a></td><td>
Atomic Functions and Reverse Mode: Example and Test</td></tr>
<tr><td>
<a href="atomic_three_tangent.cpp.htm" target="_top">atomic_three_tangent.cpp</a></td><td>
Tan and Tanh as User Atomic Operations: Example and Test</td></tr>
<tr><td>
<a href="atomic_two_eigen_cholesky.cpp.htm" target="_top">atomic_two_eigen_cholesky.cpp</a></td><td>
Atomic Eigen Cholesky Factorization: Example and Test</td></tr>
<tr><td>
<a href="atomic_two_eigen_cholesky.hpp.htm" target="_top">atomic_two_eigen_cholesky.hpp</a></td><td>
atomic_two Eigen Cholesky Factorization Class</td></tr>
<tr><td>
<a href="atomic_two_eigen_mat_inv.cpp.htm" target="_top">atomic_two_eigen_mat_inv.cpp</a></td><td>
Atomic Eigen Matrix Inverse: Example and Test</td></tr>
<tr><td>
<a href="atomic_two_eigen_mat_inv.hpp.htm" target="_top">atomic_two_eigen_mat_inv.hpp</a></td><td>
atomic_two Eigen Matrix Inversion Class</td></tr>
<tr><td>
<a href="atomic_two_eigen_mat_mul.cpp.htm" target="_top">atomic_two_eigen_mat_mul.cpp</a></td><td>
Atomic Eigen Matrix Multiply: Example and Test</td></tr>
<tr><td>
<a href="atomic_two_eigen_mat_mul.hpp.htm" target="_top">atomic_two_eigen_mat_mul.hpp</a></td><td>
atomic_two Eigen Matrix Multiply Class</td></tr>
<tr><td>
<a href="azmul.cpp.htm" target="_top">azmul.cpp</a></td><td>
AD Absolute Zero Multiplication: Example and Test</td></tr>
<tr><td>
<a href="base2ad.cpp.htm" target="_top">base2ad.cpp</a></td><td>
Taylor's Ode Solver: base2ad Example and Test</td></tr>
<tr><td>
<a href="base2vec_ad.cpp.htm" target="_top">base2vec_ad.cpp</a></td><td>
Using base2ad and VecAD together: Example and Test</td></tr>
<tr><td>
<a href="base_adolc.hpp.htm" target="_top">base_adolc.hpp</a></td><td>
Enable use of AD&lt;Base&gt; where Base is Adolc's adouble Type</td></tr>
<tr><td>
<a href="base_alloc.hpp.htm" target="_top">base_alloc.hpp</a></td><td>
Example AD&lt;Base&gt; Where Base Constructor Allocates Memory</td></tr>
<tr><td>
<a href="base_complex.hpp.htm" target="_top">base_complex.hpp</a></td><td>
Enable use of AD&lt;Base&gt; where Base is std::complex&lt;double&gt;</td></tr>
<tr><td>
<a href="base_require.cpp.htm" target="_top">base_require.cpp</a></td><td>
Using a User Defined AD Base Type: Example and Test</td></tr>
<tr><td>
<a href="bender_quad.cpp.htm" target="_top">bender_quad.cpp</a></td><td>
BenderQuad: Example and Test</td></tr>
<tr><td>
<a href="bool_fun.cpp.htm" target="_top">bool_fun.cpp</a></td><td>
AD Boolean Functions: Example and Test</td></tr>
<tr><td>
<a href="capacity_order.cpp.htm" target="_top">capacity_order.cpp</a></td><td>
Controlling Taylor Coefficient Memory Allocation: Example and Test</td></tr>
<tr><td>
<a href="change_param.cpp.htm" target="_top">change_param.cpp</a></td><td>
Computing a Jacobian With Constants that Change</td></tr>
<tr><td>
<a href="check_for_nan.cpp.htm" target="_top">check_for_nan.cpp</a></td><td>
ADFun Checking For Nan: Example and Test</td></tr>
<tr><td>
<a href="check_numeric_type.cpp.htm" target="_top">check_numeric_type.cpp</a></td><td>
The CheckNumericType Function: Example and Test</td></tr>
<tr><td>
<a href="check_simple_vector.cpp.htm" target="_top">check_simple_vector.cpp</a></td><td>
The CheckSimpleVector Function: Example and Test</td></tr>
<tr><td>
<a href="chkpoint_two_base2ad.cpp.htm" target="_top">chkpoint_two_base2ad.cpp</a></td><td>
Checkpointing With base2ad: Example and Test</td></tr>
<tr><td>
<a href="chkpoint_two_compare.cpp.htm" target="_top">chkpoint_two_compare.cpp</a></td><td>
Compare With and Without Checkpointing: Example and Test</td></tr>
<tr><td>
<a href="chkpoint_two_dynamic.cpp.htm" target="_top">chkpoint_two_dynamic.cpp</a></td><td>
Checkpoint Functions with Dynamic Parameters: Example and Test</td></tr>
<tr><td>
<a href="chkpoint_two_get_started.cpp.htm" target="_top">chkpoint_two_get_started.cpp</a></td><td>
Get Started Checkpointing: Example and Test</td></tr>
<tr><td>
<a href="chkpoint_two_ode.cpp.htm" target="_top">chkpoint_two_ode.cpp</a></td><td>
Checkpointing an ODE Solver: Example and Test</td></tr>
<tr><td>
<a href="code_gen_fun_file.cpp.htm" target="_top">code_gen_fun_file.cpp</a></td><td>
File Store and Retrieve a Code Gen Function: Example and Test</td></tr>
<tr><td>
<a href="code_gen_fun_function.cpp.htm" target="_top">code_gen_fun_function.cpp</a></td><td>
Evaluate a Code Gen Function: Example and Test</td></tr>
<tr><td>
<a href="code_gen_fun_jac_as_fun.cpp.htm" target="_top">code_gen_fun_jac_as_fun.cpp</a></td><td>
Pass Jacobian as Code Gen Function: Example and Test</td></tr>
<tr><td>
<a href="code_gen_fun_jacobian.cpp.htm" target="_top">code_gen_fun_jacobian.cpp</a></td><td>
Evaluate Jacobian of a Code Gen Function: Example and Test</td></tr>
<tr><td>
<a href="code_gen_fun_sparse_jac_as_fun.cpp.htm" target="_top">code_gen_fun_sparse_jac_as_fun.cpp</a></td><td>
Pass Sparse Jacobian as Code Gen Function: Example and Test</td></tr>
<tr><td>
<a href="code_gen_fun_sparse_jacobian.cpp.htm" target="_top">code_gen_fun_sparse_jacobian.cpp</a></td><td>
Evaluate Sparse Jacobian of a Code Gen Function: Example and Test</td></tr>
<tr><td>
<a href="colpack_hes.cpp.htm" target="_top">colpack_hes.cpp</a></td><td>
ColPack: Sparse Hessian Example and Test</td></tr>
<tr><td>
<a href="colpack_hessian.cpp.htm" target="_top">colpack_hessian.cpp</a></td><td>
ColPack: Sparse Hessian Example and Test</td></tr>
<tr><td>
<a href="colpack_jac.cpp.htm" target="_top">colpack_jac.cpp</a></td><td>
ColPack: Sparse Jacobian Example and Test</td></tr>
<tr><td>
<a href="colpack_jacobian.cpp.htm" target="_top">colpack_jacobian.cpp</a></td><td>
ColPack: Sparse Jacobian Example and Test</td></tr>
<tr><td>
<a href="compare.cpp.htm" target="_top">compare.cpp</a></td><td>
AD Binary Comparison Operators: Example and Test</td></tr>
<tr><td>
<a href="compare_change.cpp.htm" target="_top">compare_change.cpp</a></td><td>
CompareChange and Re-Tape: Example and Test</td></tr>
<tr><td>
<a href="complex_poly.cpp.htm" target="_top">complex_poly.cpp</a></td><td>
Complex Polynomial: Example and Test</td></tr>
<tr><td>
<a href="con_dyn_var.cpp.htm" target="_top">con_dyn_var.cpp</a></td><td>
AD Parameter and Variable Functions: Example and Test</td></tr>
<tr><td>
<a href="cond_exp.cpp.htm" target="_top">cond_exp.cpp</a></td><td>
Conditional Expressions: Example and Test</td></tr>
<tr><td>
<a href="conj_grad.cpp.htm" target="_top">conj_grad.cpp</a></td><td>
Differentiate Conjugate Gradient Algorithm: Example and Test</td></tr>
<tr><td>
<a href="cos.cpp.htm" target="_top">cos.cpp</a></td><td>
The AD cos Function: Example and Test</td></tr>
<tr><td>
<a href="cosh.cpp.htm" target="_top">cosh.cpp</a></td><td>
The AD cosh Function: Example and Test</td></tr>
<tr><td>
<a href="cppad_eigen.hpp.htm" target="_top">cppad_eigen.hpp</a></td><td>
Enable Use of Eigen Linear Algebra Package with CppAD</td></tr>
<tr><td>
<a href="cppad_vector.cpp.htm" target="_top">cppad_vector.cpp</a></td><td>
CppAD::vector Template Class: Example and Test</td></tr>
<tr><td>
<a href="dependency.cpp.htm" target="_top">dependency.cpp</a></td><td>
Computing Dependency: Example and Test</td></tr>
<tr><td>
<a href="det_by_lu.cpp.htm" target="_top">det_by_lu.cpp</a></td><td>
Determinant Using Lu Factorization: Example and Test</td></tr>
<tr><td>
<a href="det_by_minor.cpp.htm" target="_top">det_by_minor.cpp</a></td><td>
Determinant Using Expansion by Minors: Example and Test</td></tr>
<tr><td>
<a href="det_of_minor.cpp.htm" target="_top">det_of_minor.cpp</a></td><td>
Determinant of a Minor: Example and Test</td></tr>
<tr><td>
<a href="div.cpp.htm" target="_top">div.cpp</a></td><td>
AD Binary Division: Example and Test</td></tr>
<tr><td>
<a href="div_eq.cpp.htm" target="_top">div_eq.cpp</a></td><td>
AD Compound Assignment Division: Example and Test</td></tr>
<tr><td>
<a href="eigen_array.cpp.htm" target="_top">eigen_array.cpp</a></td><td>
Using Eigen Arrays: Example and Test</td></tr>
<tr><td>
<a href="eigen_det.cpp.htm" target="_top">eigen_det.cpp</a></td><td>
Using Eigen To Compute Determinant: Example and Test</td></tr>
<tr><td>
<a href="elapsed_seconds.cpp.htm" target="_top">elapsed_seconds.cpp</a></td><td>
Elapsed Seconds: Example and Test</td></tr>
<tr><td>
<a href="equal_op_seq.cpp.htm" target="_top">equal_op_seq.cpp</a></td><td>
EqualOpSeq: Example and Test</td></tr>
<tr><td>
<a href="erf.cpp.htm" target="_top">erf.cpp</a></td><td>
The AD erf Function: Example and Test</td></tr>
<tr><td>
<a href="erfc.cpp.htm" target="_top">erfc.cpp</a></td><td>
The AD erfc Function: Example and Test</td></tr>
<tr><td>
<a href="error_handler.cpp.htm" target="_top">error_handler.cpp</a></td><td>
Replacing The CppAD Error Handler: Example and Test</td></tr>
<tr><td>
<a href="exp.cpp.htm" target="_top">exp.cpp</a></td><td>
The AD exp Function: Example and Test</td></tr>
<tr><td>
<a href="expm1.cpp.htm" target="_top">expm1.cpp</a></td><td>
The AD exp Function: Example and Test</td></tr>
<tr><td>
<a href="expm1.cpp.htm" target="_top">expm1.cpp</a></td><td>
The AD exp Function: Example and Test</td></tr>
<tr><td>
<a href="fabs.cpp.htm" target="_top">fabs.cpp</a></td><td>
AD Absolute Value Function: Example and Test</td></tr>
<tr><td>
<a href="for_hes_sparsity.cpp.htm" target="_top">for_hes_sparsity.cpp</a></td><td>
Forward Mode Hessian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="for_jac_sparsity.cpp.htm" target="_top">for_jac_sparsity.cpp</a></td><td>
Forward Mode Jacobian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="for_one.cpp.htm" target="_top">for_one.cpp</a></td><td>
First Order Partial Driver: Example and Test</td></tr>
<tr><td>
<a href="for_sparse_hes.cpp.htm" target="_top">for_sparse_hes.cpp</a></td><td>
Forward Mode Hessian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="for_sparse_jac.cpp.htm" target="_top">for_sparse_jac.cpp</a></td><td>
Forward Mode Jacobian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="for_two.cpp.htm" target="_top">for_two.cpp</a></td><td>
Subset of Second Order Partials: Example and Test</td></tr>
<tr><td>
<a href="forward.cpp.htm" target="_top">forward.cpp</a></td><td>
Forward Mode: Example and Test</td></tr>
<tr><td>
<a href="forward_dir.cpp.htm" target="_top">forward_dir.cpp</a></td><td>
Forward Mode: Example and Test of Multiple Directions</td></tr>
<tr><td>
<a href="forward_order.cpp.htm" target="_top">forward_order.cpp</a></td><td>
Forward Mode: Example and Test of Multiple Orders</td></tr>
<tr><td>
<a href="from_json.cpp.htm" target="_top">from_json.cpp</a></td><td>
Convert Jason Graph to an ADFun Object: Example and Test</td></tr>
<tr><td>
<a href="fun_assign.cpp.htm" target="_top">fun_assign.cpp</a></td><td>
ADFun Assignment: Example and Test</td></tr>
<tr><td>
<a href="fun_check.cpp.htm" target="_top">fun_check.cpp</a></td><td>
ADFun Check and Re-Tape: Example and Test</td></tr>
<tr><td>
<a href="fun_property.cpp.htm" target="_top">fun_property.cpp</a></td><td>
ADFun Function Properties: Example and Test</td></tr>
<tr><td>
<a href="function_name.cpp.htm" target="_top">function_name.cpp</a></td><td>
ADFun Function Name: Example and Test</td></tr>
<tr><td>
<a href="general.cpp.htm" target="_top">general.cpp</a></td><td>
CppAD Examples and Tests</td></tr>
<tr><td>
<a href="get_started.cpp.htm" target="_top">get_started.cpp</a></td><td>
Getting Started Using CppAD to Compute Derivatives</td></tr>
<tr><td>
<a href="graph_add_op.cpp.htm" target="_top">graph_add_op.cpp</a></td><td>
C++ AD Graph add Operator: Example and Test</td></tr>
<tr><td>
<a href="graph_atom4_op.cpp.htm" target="_top">graph_atom4_op.cpp</a></td><td>
C++ AD Graph Atomic Four Functions: Example and Test</td></tr>
<tr><td>
<a href="graph_atom_op.cpp.htm" target="_top">graph_atom_op.cpp</a></td><td>
C++ AD Graph Atomic Three Functions: Example and Test</td></tr>
<tr><td>
<a href="graph_azmul_op.cpp.htm" target="_top">graph_azmul_op.cpp</a></td><td>
C++ AD Graph add Operator: Example and Test</td></tr>
<tr><td>
<a href="graph_cexp_op.cpp.htm" target="_top">graph_cexp_op.cpp</a></td><td>
C++ AD Graph Conditional Expressions: Example and Test</td></tr>
<tr><td>
<a href="graph_comp_op.cpp.htm" target="_top">graph_comp_op.cpp</a></td><td>
C++ AD Graph Comparison Operators: Example and Test</td></tr>
<tr><td>
<a href="graph_discrete_op.cpp.htm" target="_top">graph_discrete_op.cpp</a></td><td>
C++ AD Graph add Operator: Example and Test</td></tr>
<tr><td>
<a href="graph_div_op.cpp.htm" target="_top">graph_div_op.cpp</a></td><td>
C++ AD Graph div Operator: Example and Test</td></tr>
<tr><td>
<a href="graph_mul_op.cpp.htm" target="_top">graph_mul_op.cpp</a></td><td>
C++ AD Graph mul Operator: Example and Test</td></tr>
<tr><td>
<a href="graph_pow_op.cpp.htm" target="_top">graph_pow_op.cpp</a></td><td>
C++ AD Graph pow Operator: Example and Test</td></tr>
<tr><td>
<a href="graph_print_op.cpp.htm" target="_top">graph_print_op.cpp</a></td><td>
C++ AD Graph print Operator: Example and Test</td></tr>
<tr><td>
<a href="graph_sub_op.cpp.htm" target="_top">graph_sub_op.cpp</a></td><td>
C++ AD Graph sub Operator: Example and Test</td></tr>
<tr><td>
<a href="graph_sum_op.cpp.htm" target="_top">graph_sum_op.cpp</a></td><td>
C++ AD Graph sum Operator: Example and Test</td></tr>
<tr><td>
<a href="graph_unary_op.cpp.htm" target="_top">graph_unary_op.cpp</a></td><td>
Graph Unary Operator: Example and Test</td></tr>
<tr><td>
<a href="harmonic.cpp.htm" target="_top">harmonic.cpp</a></td><td>
Multi-Threading Harmonic Summation Example / Test</td></tr>
<tr><td>
<a href="hes_lagrangian.cpp.htm" target="_top">hes_lagrangian.cpp</a></td><td>
Hessian of Lagrangian and ADFun Default Constructor: Example and Test</td></tr>
<tr><td>
<a href="hes_lu_det.cpp.htm" target="_top">hes_lu_det.cpp</a></td><td>
Gradient of Determinant Using LU Factorization: Example and Test</td></tr>
<tr><td>
<a href="hes_minor_det.cpp.htm" target="_top">hes_minor_det.cpp</a></td><td>
Gradient of Determinant Using Expansion by Minors: Example and Test</td></tr>
<tr><td>
<a href="hes_times_dir.cpp.htm" target="_top">hes_times_dir.cpp</a></td><td>
Hessian Times Direction: Example and Test</td></tr>
<tr><td>
<a href="hessian.cpp.htm" target="_top">hessian.cpp</a></td><td>
Hessian: Example and Test</td></tr>
<tr><td>
<a href="independent.cpp.htm" target="_top">independent.cpp</a></td><td>
Independent and ADFun Constructor: Example and Test</td></tr>
<tr><td>
<a href="index_sort.cpp.htm" target="_top">index_sort.cpp</a></td><td>
Index Sort: Example and Test</td></tr>
<tr><td>
<a href="integer.cpp.htm" target="_top">integer.cpp</a></td><td>
Convert From AD to Integer: Example and Test</td></tr>
<tr><td>
<a href="interface2c.cpp.htm" target="_top">interface2c.cpp</a></td><td>
Interfacing to C: Example and Test</td></tr>
<tr><td>
<a href="interp_onetape.cpp.htm" target="_top">interp_onetape.cpp</a></td><td>
Interpolation With Out Retaping: Example and Test</td></tr>
<tr><td>
<a href="interp_retape.cpp.htm" target="_top">interp_retape.cpp</a></td><td>
Interpolation With Retaping: Example and Test</td></tr>
<tr><td>
<a href="ipopt_solve_get_started.cpp.htm" target="_top">ipopt_solve_get_started.cpp</a></td><td>
Nonlinear Programming Using CppAD and Ipopt: Example and Test</td></tr>
<tr><td>
<a href="ipopt_solve_ode_inverse.cpp.htm" target="_top">ipopt_solve_ode_inverse.cpp</a></td><td>
ODE Inverse Problem Definitions: Source Code</td></tr>
<tr><td>
<a href="ipopt_solve_retape.cpp.htm" target="_top">ipopt_solve_retape.cpp</a></td><td>
Nonlinear Programming Retaping: Example and Test</td></tr>
<tr><td>
<a href="jac_lu_det.cpp.htm" target="_top">jac_lu_det.cpp</a></td><td>
Gradient of Determinant Using Lu Factorization: Example and Test</td></tr>
<tr><td>
<a href="jac_minor_det.cpp.htm" target="_top">jac_minor_det.cpp</a></td><td>
Gradient of Determinant Using Expansion by Minors: Example and Test</td></tr>
<tr><td>
<a href="jacobian.cpp.htm" target="_top">jacobian.cpp</a></td><td>
Jacobian: Example and Test</td></tr>
<tr><td>
<a href="json_add_op.cpp.htm" target="_top">json_add_op.cpp</a></td><td>
Json add Operator: Example and Test</td></tr>
<tr><td>
<a href="json_atom4_op.cpp.htm" target="_top">json_atom4_op.cpp</a></td><td>
Json Atomic Function Operator: Example and Test</td></tr>
<tr><td>
<a href="json_atom_op.cpp.htm" target="_top">json_atom_op.cpp</a></td><td>
Json Atomic Function Three Operator: Example and Test</td></tr>
<tr><td>
<a href="json_azmul_op.cpp.htm" target="_top">json_azmul_op.cpp</a></td><td>
Json azmul Operator: Example and Test</td></tr>
<tr><td>
<a href="json_cexp_op.cpp.htm" target="_top">json_cexp_op.cpp</a></td><td>
Json Conditional Expressions: Example and Test</td></tr>
<tr><td>
<a href="json_comp_op.cpp.htm" target="_top">json_comp_op.cpp</a></td><td>
Json Comparison Operators: Example and Test</td></tr>
<tr><td>
<a href="json_discrete_op.cpp.htm" target="_top">json_discrete_op.cpp</a></td><td>
Json add Operator: Example and Test</td></tr>
<tr><td>
<a href="json_div_op.cpp.htm" target="_top">json_div_op.cpp</a></td><td>
Json div Operator: Example and Test</td></tr>
<tr><td>
<a href="json_get_started.cpp.htm" target="_top">json_get_started.cpp</a></td><td>
Json Get Started: Example and Test</td></tr>
<tr><td>
<a href="json_mul_op.cpp.htm" target="_top">json_mul_op.cpp</a></td><td>
Json mul Operator: Example and Test</td></tr>
<tr><td>
<a href="json_pow_op.cpp.htm" target="_top">json_pow_op.cpp</a></td><td>
Json pow Operator: Example and Test</td></tr>
<tr><td>
<a href="json_print_op.cpp.htm" target="_top">json_print_op.cpp</a></td><td>
Json AD Graph print Operator: Example and Test</td></tr>
<tr><td>
<a href="json_sparse.cpp.htm" target="_top">json_sparse.cpp</a></td><td>
Json Representation of a Sparse Matrix: Example and Test</td></tr>
<tr><td>
<a href="json_sub_op.cpp.htm" target="_top">json_sub_op.cpp</a></td><td>
Json sub Operator: Example and Test</td></tr>
<tr><td>
<a href="json_sum_op.cpp.htm" target="_top">json_sum_op.cpp</a></td><td>
Json sum Operator: Example and Test</td></tr>
<tr><td>
<a href="json_unary_op.cpp.htm" target="_top">json_unary_op.cpp</a></td><td>
Json Unary Operators: Example and Test</td></tr>
<tr><td>
<a href="log.cpp.htm" target="_top">log.cpp</a></td><td>
The AD log Function: Example and Test</td></tr>
<tr><td>
<a href="log10.cpp.htm" target="_top">log10.cpp</a></td><td>
The AD log10 Function: Example and Test</td></tr>
<tr><td>
<a href="log1p.cpp.htm" target="_top">log1p.cpp</a></td><td>
The AD log1p Function: Example and Test</td></tr>
<tr><td>
<a href="lp_box.cpp.htm" target="_top">lp_box.cpp</a></td><td>
abs_normal lp_box: Example and Test</td></tr>
<tr><td>
<a href="lp_box.hpp.htm" target="_top">lp_box.hpp</a></td><td>
lp_box Source Code</td></tr>
<tr><td>
<a href="lu_factor.cpp.htm" target="_top">lu_factor.cpp</a></td><td>
LuFactor: Example and Test</td></tr>
<tr><td>
<a href="lu_invert.cpp.htm" target="_top">lu_invert.cpp</a></td><td>
LuInvert: Example and Test</td></tr>
<tr><td>
<a href="lu_ratio.cpp.htm" target="_top">lu_ratio.cpp</a></td><td>
LuRatio: Example and Test</td></tr>
<tr><td>
<a href="lu_solve.cpp.htm" target="_top">lu_solve.cpp</a></td><td>
LuSolve With Complex Arguments: Example and Test</td></tr>
<tr><td>
<a href="lu_vec_ad_ok.cpp.htm" target="_top">lu_vec_ad_ok.cpp</a></td><td>
Lu Factor and Solve With Recorded Pivoting: Example and Test</td></tr>
<tr><td>
<a href="mat_sum_sq.cpp.htm" target="_top">mat_sum_sq.cpp</a></td><td>
Sum of the Elements of the Square of a Matrix: Example and Test</td></tr>
<tr><td>
<a href="min_nso_linear.cpp.htm" target="_top">min_nso_linear.cpp</a></td><td>
abs_normal min_nso_linear: Example and Test</td></tr>
<tr><td>
<a href="min_nso_linear.hpp.htm" target="_top">min_nso_linear.hpp</a></td><td>
min_nso_linear Source Code</td></tr>
<tr><td>
<a href="min_nso_quad.cpp.htm" target="_top">min_nso_quad.cpp</a></td><td>
abs_normal min_nso_quad: Example and Test</td></tr>
<tr><td>
<a href="min_nso_quad.hpp.htm" target="_top">min_nso_quad.hpp</a></td><td>
min_nso_quad Source Code</td></tr>
<tr><td>
<a href="mul.cpp.htm" target="_top">mul.cpp</a></td><td>
AD Binary Multiplication: Example and Test</td></tr>
<tr><td>
<a href="mul_eq.cpp.htm" target="_top">mul_eq.cpp</a></td><td>
AD Compound Assignment Multiplication: Example and Test</td></tr>
<tr><td>
<a href="mul_level.cpp.htm" target="_top">mul_level.cpp</a></td><td>
Multiple Level of AD: Example and Test</td></tr>
<tr><td>
<a href="mul_level_adolc.cpp.htm" target="_top">mul_level_adolc.cpp</a></td><td>
Using Adolc with Multiple Levels of Taping: Example and Test</td></tr>
<tr><td>
<a href="mul_level_adolc_ode.cpp.htm" target="_top">mul_level_adolc_ode.cpp</a></td><td>
Taylor's Ode Solver: A Multi-Level Adolc Example and Test</td></tr>
<tr><td>
<a href="mul_level_ode.cpp.htm" target="_top">mul_level_ode.cpp</a></td><td>
Taylor's Ode Solver: A Multi-Level AD Example and Test</td></tr>
<tr><td>
<a href="multi_atomic_three.cpp.htm" target="_top">multi_atomic_three.cpp</a></td><td>
Multi-Threading atomic_three Example / Test</td></tr>
<tr><td>
<a href="multi_atomic_two.cpp.htm" target="_top">multi_atomic_two.cpp</a></td><td>
Multi-Threading atomic_two Example / Test</td></tr>
<tr><td>
<a href="multi_chkpoint_one.cpp.htm" target="_top">multi_chkpoint_one.cpp</a></td><td>
Multi-Threading chkpoint_one Example / Test</td></tr>
<tr><td>
<a href="multi_chkpoint_two.cpp.htm" target="_top">multi_chkpoint_two.cpp</a></td><td>
Multi-Threading chkpoint_two Example / Test</td></tr>
<tr><td>
<a href="multi_newton.cpp.htm" target="_top">multi_newton.cpp</a></td><td>
Multi-Threaded Newton Method Example / Test</td></tr>
<tr><td>
<a href="nan.cpp.htm" target="_top">nan.cpp</a></td><td>
nan: Example and Test</td></tr>
<tr><td>
<a href="near_equal.cpp.htm" target="_top">near_equal.cpp</a></td><td>
NearEqual Function: Example and Test</td></tr>
<tr><td>
<a href="near_equal_ext.cpp.htm" target="_top">near_equal_ext.cpp</a></td><td>
Compare AD with Base Objects: Example and Test</td></tr>
<tr><td>
<a href="new_dynamic.cpp.htm" target="_top">new_dynamic.cpp</a></td><td>
Dynamic Parameters: Example and Test</td></tr>
<tr><td>
<a href="num_limits.cpp.htm" target="_top">num_limits.cpp</a></td><td>
Numeric Limits: Example and Test</td></tr>
<tr><td>
<a href="number_skip.cpp.htm" target="_top">number_skip.cpp</a></td><td>
Number of Variables That Can be Skipped: Example and Test</td></tr>
<tr><td>
<a href="numeric_type.cpp.htm" target="_top">numeric_type.cpp</a></td><td>
The NumericType: Example and Test</td></tr>
<tr><td>
<a href="ode_err_control.cpp.htm" target="_top">ode_err_control.cpp</a></td><td>
OdeErrControl: Example and Test</td></tr>
<tr><td>
<a href="ode_err_maxabs.cpp.htm" target="_top">ode_err_maxabs.cpp</a></td><td>
OdeErrControl: Example and Test Using Maxabs Argument</td></tr>
<tr><td>
<a href="ode_evaluate.cpp.htm" target="_top">ode_evaluate.cpp</a></td><td>
ode_evaluate: Example and test</td></tr>
<tr><td>
<a href="ode_gear.cpp.htm" target="_top">ode_gear.cpp</a></td><td>
OdeGear: Example and Test</td></tr>
<tr><td>
<a href="ode_gear_control.cpp.htm" target="_top">ode_gear_control.cpp</a></td><td>
OdeGearControl: Example and Test</td></tr>
<tr><td>
<a href="ode_stiff.cpp.htm" target="_top">ode_stiff.cpp</a></td><td>
A Stiff Ode: Example and Test</td></tr>
<tr><td>
<a href="opt_val_hes.cpp.htm" target="_top">opt_val_hes.cpp</a></td><td>
opt_val_hes: Example and Test</td></tr>
<tr><td>
<a href="optimize_compare_op.cpp.htm" target="_top">optimize_compare_op.cpp</a></td><td>
Optimize Comparison Operators: Example and Test</td></tr>
<tr><td>
<a href="optimize_conditional_skip.cpp.htm" target="_top">optimize_conditional_skip.cpp</a></td><td>
Optimize Conditional Expressions: Example and Test</td></tr>
<tr><td>
<a href="optimize_cumulative_sum.cpp.htm" target="_top">optimize_cumulative_sum.cpp</a></td><td>
Optimize Cumulative Sum Operations: Example and Test</td></tr>
<tr><td>
<a href="optimize_forward_active.cpp.htm" target="_top">optimize_forward_active.cpp</a></td><td>
Optimize Forward Activity Analysis: Example and Test</td></tr>
<tr><td>
<a href="optimize_nest_conditional.cpp.htm" target="_top">optimize_nest_conditional.cpp</a></td><td>
Optimize Nested Conditional Expressions: Example and Test</td></tr>
<tr><td>
<a href="optimize_print_for.cpp.htm" target="_top">optimize_print_for.cpp</a></td><td>
Optimize Print Forward Operators: Example and Test</td></tr>
<tr><td>
<a href="optimize_reverse_active.cpp.htm" target="_top">optimize_reverse_active.cpp</a></td><td>
Optimize Reverse Activity Analysis: Example and Test</td></tr>
<tr><td>
<a href="optimize_twice.cpp.htm" target="_top">optimize_twice.cpp</a></td><td>
Optimizing Twice: Example and Test</td></tr>
<tr><td>
<a href="poly.cpp.htm" target="_top">poly.cpp</a></td><td>
Polynomial Evaluation: Example and Test</td></tr>
<tr><td>
<a href="pow.cpp.htm" target="_top">pow.cpp</a></td><td>
The AD Power Function: Example and Test</td></tr>
<tr><td>
<a href="pow_int.cpp.htm" target="_top">pow_int.cpp</a></td><td>
The Pow Integer Exponent: Example and Test</td></tr>
<tr><td>
<a href="pow_nan.cpp.htm" target="_top">pow_nan.cpp</a></td><td>
pow: Nan in Result of Pow Function: Example and Test</td></tr>
<tr><td>
<a href="print_for_cout.cpp.htm" target="_top">print_for_cout.cpp</a></td><td>
Printing During Forward Mode: Example and Test</td></tr>
<tr><td>
<a href="print_for_string.cpp.htm" target="_top">print_for_string.cpp</a></td><td>
Print During Zero Order Forward Mode: Example and Test</td></tr>
<tr><td>
<a href="print_graph.cpp.htm" target="_top">print_graph.cpp</a></td><td>
Print a C++ AD Graph: Example and Test</td></tr>
<tr><td>
<a href="qp_box.cpp.htm" target="_top">qp_box.cpp</a></td><td>
abs_normal qp_box: Example and Test</td></tr>
<tr><td>
<a href="qp_box.hpp.htm" target="_top">qp_box.hpp</a></td><td>
qp_box Source Code</td></tr>
<tr><td>
<a href="qp_interior.cpp.htm" target="_top">qp_interior.cpp</a></td><td>
abs_normal qp_interior: Example and Test</td></tr>
<tr><td>
<a href="qp_interior.hpp.htm" target="_top">qp_interior.hpp</a></td><td>
qp_interior Source Code</td></tr>
<tr><td>
<a href="rc_sparsity.cpp.htm" target="_top">rc_sparsity.cpp</a></td><td>
Preferred Sparsity Patterns: Row and Column Indices: Example and Test</td></tr>
<tr><td>
<a href="rev_checkpoint.cpp.htm" target="_top">rev_checkpoint.cpp</a></td><td>
Reverse Mode General Case (Checkpointing): Example and Test</td></tr>
<tr><td>
<a href="rev_hes_sparsity.cpp.htm" target="_top">rev_hes_sparsity.cpp</a></td><td>
Reverse Mode Hessian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="rev_jac_sparsity.cpp.htm" target="_top">rev_jac_sparsity.cpp</a></td><td>
Reverse Mode Jacobian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="rev_one.cpp.htm" target="_top">rev_one.cpp</a></td><td>
First Order Derivative Driver: Example and Test</td></tr>
<tr><td>
<a href="rev_sparse_hes.cpp.htm" target="_top">rev_sparse_hes.cpp</a></td><td>
Reverse Mode Hessian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="rev_sparse_jac.cpp.htm" target="_top">rev_sparse_jac.cpp</a></td><td>
Reverse Mode Jacobian Sparsity: Example and Test</td></tr>
<tr><td>
<a href="rev_two.cpp.htm" target="_top">rev_two.cpp</a></td><td>
Second Partials Reverse Driver: Example and Test</td></tr>
<tr><td>
<a href="reverse_one.cpp.htm" target="_top">reverse_one.cpp</a></td><td>
First Order Reverse Mode: Example and Test</td></tr>
<tr><td>
<a href="reverse_three.cpp.htm" target="_top">reverse_three.cpp</a></td><td>
Third Order Reverse Mode: Example and Test</td></tr>
<tr><td>
<a href="reverse_two.cpp.htm" target="_top">reverse_two.cpp</a></td><td>
Second Order Reverse ModeExample and Test</td></tr>
<tr><td>
<a href="romberg_one.cpp.htm" target="_top">romberg_one.cpp</a></td><td>
One Dimensional Romberg Integration: Example and Test</td></tr>
<tr><td>
<a href="rosen_34.cpp.htm" target="_top">rosen_34.cpp</a></td><td>
rosen_34: Example and Test</td></tr>
<tr><td>
<a href="runge45_1.cpp.htm" target="_top">runge45_1.cpp</a></td><td>
Runge45: Example and Test</td></tr>
<tr><td>
<a href="runge_45.cpp.htm" target="_top">runge_45.cpp</a></td><td>
Runge45: Example and Test</td></tr>
<tr><td>
<a href="set_union.cpp.htm" target="_top">set_union.cpp</a></td><td>
Set Union: Example and Test</td></tr>
<tr><td>
<a href="simple_ad_bthread.cpp.htm" target="_top">simple_ad_bthread.cpp</a></td><td>
A Simple Boost Threading AD: Example and Test</td></tr>
<tr><td>
<a href="simple_ad_openmp.cpp.htm" target="_top">simple_ad_openmp.cpp</a></td><td>
A Simple OpenMP AD: Example and Test</td></tr>
<tr><td>
<a href="simple_ad_pthread.cpp.htm" target="_top">simple_ad_pthread.cpp</a></td><td>
A Simple pthread AD: Example and Test</td></tr>
<tr><td>
<a href="simple_vector.cpp.htm" target="_top">simple_vector.cpp</a></td><td>
Simple Vector Template Class: Example and Test</td></tr>
<tr><td>
<a href="simplex_method.cpp.htm" target="_top">simplex_method.cpp</a></td><td>
abs_normal simplex_method: Example and Test</td></tr>
<tr><td>
<a href="simplex_method.hpp.htm" target="_top">simplex_method.hpp</a></td><td>
simplex_method Source Code</td></tr>
<tr><td>
<a href="sin.cpp.htm" target="_top">sin.cpp</a></td><td>
The AD sin Function: Example and Test</td></tr>
<tr><td>
<a href="sinh.cpp.htm" target="_top">sinh.cpp</a></td><td>
The AD sinh Function: Example and Test</td></tr>
<tr><td>
<a href="sparse2eigen.cpp.htm" target="_top">sparse2eigen.cpp</a></td><td>
Converting CppAD Sparse Matrix to Eigen Format: Example and Test</td></tr>
<tr><td>
<a href="sparse_hes.cpp.htm" target="_top">sparse_hes.cpp</a></td><td>
Computing Sparse Hessian: Example and Test</td></tr>
<tr><td>
<a href="sparse_hes_fun.cpp.htm" target="_top">sparse_hes_fun.cpp</a></td><td>
sparse_hes_fun: Example and test</td></tr>
<tr><td>
<a href="sparse_hessian.cpp.htm" target="_top">sparse_hessian.cpp</a></td><td>
Sparse Hessian: Example and Test</td></tr>
<tr><td>
<a href="sparse_jac_for.cpp.htm" target="_top">sparse_jac_for.cpp</a></td><td>
Computing Sparse Jacobian Using Forward Mode: Example and Test</td></tr>
<tr><td>
<a href="sparse_jac_fun.cpp.htm" target="_top">sparse_jac_fun.cpp</a></td><td>
sparse_jac_fun: Example and test</td></tr>
<tr><td>
<a href="sparse_jac_rev.cpp.htm" target="_top">sparse_jac_rev.cpp</a></td><td>
Computing Sparse Jacobian Using Reverse Mode: Example and Test</td></tr>
<tr><td>
<a href="sparse_jacobian.cpp.htm" target="_top">sparse_jacobian.cpp</a></td><td>
Sparse Jacobian: Example and Test</td></tr>
<tr><td>
<a href="sparse_rc.cpp.htm" target="_top">sparse_rc.cpp</a></td><td>
sparse_rc: Example and Test</td></tr>
<tr><td>
<a href="sparse_rcv.cpp.htm" target="_top">sparse_rcv.cpp</a></td><td>
sparse_rcv: Example and Test</td></tr>
<tr><td>
<a href="sparse_sub_hes.cpp.htm" target="_top">sparse_sub_hes.cpp</a></td><td>
Subset of a Sparse Hessian: Example and Test</td></tr>
<tr><td>
<a href="sparsity_sub.cpp.htm" target="_top">sparsity_sub.cpp</a></td><td>
Sparsity Patterns For a Subset of Variables: Example and Test</td></tr>
<tr><td>
<a href="speed_example.cpp.htm" target="_top">speed_example.cpp</a></td><td>
Run the Speed Examples</td></tr>
<tr><td>
<a href="speed_program.cpp.htm" target="_top">speed_program.cpp</a></td><td>
Example Use of SpeedTest</td></tr>
<tr><td>
<a href="speed_test.cpp.htm" target="_top">speed_test.cpp</a></td><td>
speed_test: Example and test</td></tr>
<tr><td>
<a href="sqrt.cpp.htm" target="_top">sqrt.cpp</a></td><td>
The AD sqrt Function: Example and Test</td></tr>
<tr><td>
<a href="stack_machine.cpp.htm" target="_top">stack_machine.cpp</a></td><td>
Example Differentiating a Stack Machine Interpreter</td></tr>
<tr><td>
<a href="sub.cpp.htm" target="_top">sub.cpp</a></td><td>
AD Binary Subtraction: Example and Test</td></tr>
<tr><td>
<a href="sub_eq.cpp.htm" target="_top">sub_eq.cpp</a></td><td>
AD Compound Assignment Subtraction: Example and Test</td></tr>
<tr><td>
<a href="sub_sparse_hes.cpp.htm" target="_top">sub_sparse_hes.cpp</a></td><td>
Computing Sparse Hessian for a Subset of Variables</td></tr>
<tr><td>
<a href="subgraph_hes2jac.cpp.htm" target="_top">subgraph_hes2jac.cpp</a></td><td>
Sparse Hessian Using Subgraphs and Jacobian: Example and Test</td></tr>
<tr><td>
<a href="subgraph_jac_rev.cpp.htm" target="_top">subgraph_jac_rev.cpp</a></td><td>
Computing Sparse Jacobian Using Reverse Mode: Example and Test</td></tr>
<tr><td>
<a href="subgraph_reverse.cpp.htm" target="_top">subgraph_reverse.cpp</a></td><td>
Computing Reverse Mode on Subgraphs: Example and Test</td></tr>
<tr><td>
<a href="subgraph_sparsity.cpp.htm" target="_top">subgraph_sparsity.cpp</a></td><td>
Subgraph Dependency Sparsity Patterns: Example and Test</td></tr>
<tr><td>
<a href="switch_var_dyn.cpp.htm" target="_top">switch_var_dyn.cpp</a></td><td>
Switching Between Variables and Dynamic Parameters: Example and Test</td></tr>
<tr><td>
<a href="tan.cpp.htm" target="_top">tan.cpp</a></td><td>
The AD tan Function: Example and Test</td></tr>
<tr><td>
<a href="tanh.cpp.htm" target="_top">tanh.cpp</a></td><td>
The AD tanh Function: Example and Test</td></tr>
<tr><td>
<a href="tape_index.cpp.htm" target="_top">tape_index.cpp</a></td><td>
Taping Array Index Operation: Example and Test</td></tr>
<tr><td>
<a href="taylor_ode.cpp.htm" target="_top">taylor_ode.cpp</a></td><td>
Taylor's Ode Solver: An Example and Test</td></tr>
<tr><td>
<a href="team_bthread.cpp.htm" target="_top">team_bthread.cpp</a></td><td>
Boost Thread Implementation of a Team of AD Threads</td></tr>
<tr><td>
<a href="team_example.cpp.htm" target="_top">team_example.cpp</a></td><td>
Using a Team of AD Threads: Example and Test</td></tr>
<tr><td>
<a href="team_openmp.cpp.htm" target="_top">team_openmp.cpp</a></td><td>
OpenMP Implementation of a Team of AD Threads</td></tr>
<tr><td>
<a href="team_pthread.cpp.htm" target="_top">team_pthread.cpp</a></td><td>
Pthread Implementation of a Team of AD Threads</td></tr>
<tr><td>
<a href="team_thread.hpp.htm" target="_top">team_thread.hpp</a></td><td>
Specifications for A Team of AD Threads</td></tr>
<tr><td>
<a href="thread_alloc.cpp.htm" target="_top">thread_alloc.cpp</a></td><td>
Fast Multi-Threading Memory Allocator: Example and Test</td></tr>
<tr><td>
<a href="thread_test.cpp.htm" target="_top">thread_test.cpp</a></td><td>
Run Multi-Threading Examples and Speed Tests</td></tr>
<tr><td>
<a href="time_test.cpp.htm" target="_top">time_test.cpp</a></td><td>
time_test: Example and test</td></tr>
<tr><td>
<a href="to_json.cpp.htm" target="_top">to_json.cpp</a></td><td>
Convert an ADFun Object to a Json AD Graph: Example and Test</td></tr>
<tr><td>
<a href="to_string.cpp.htm" target="_top">to_string.cpp</a></td><td>
to_string: Example and Test</td></tr>
<tr><td>
<a href="unary_minus.cpp.htm" target="_top">unary_minus.cpp</a></td><td>
AD Unary Minus Operator: Example and Test</td></tr>
<tr><td>
<a href="unary_plus.cpp.htm" target="_top">unary_plus.cpp</a></td><td>
AD Unary Plus Operator: Example and Test</td></tr>
<tr><td>
<a href="value.cpp.htm" target="_top">value.cpp</a></td><td>
Convert From AD to its Base Type: Example and Test</td></tr>
<tr><td>
<a href="var2par.cpp.htm" target="_top">var2par.cpp</a></td><td>
Convert a Variable or Dynamic Parameter a Constant: Example and Test</td></tr>
<tr><td>
<a href="vec_ad.cpp.htm" target="_top">vec_ad.cpp</a></td><td>
AD Vectors that Record Index Operations: Example and Test</td></tr>
<tr><td>
<a href="vector_bool.cpp.htm" target="_top">vector_bool.cpp</a></td><td>
CppAD::vectorBool Class: Example and Test</td></tr>
<tr><td>
</td></tr>
</table>

<hr>Input File: omh/example_list.omh

</body>
</html>
