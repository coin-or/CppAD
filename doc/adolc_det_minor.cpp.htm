<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Adolc Speed: Gradient of Determinant by Minor Expansion</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Adolc Speed: Gradient of Determinant by Minor Expansion">
<meta name="keywords" id="keywords" content=" adolc speed: gradient determinant minor expansion specifications implementation ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_adolc_det_minor.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="speed_adolc.htm" target="_top">Prev</a>
</td><td><a href="adolc_det_lu.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>speed</option>
<option>speed_adolc</option>
<option>adolc_det_minor.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_speed_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_speed_adolc_htm.js'></script>
</td>
<td>adolc_det_minor.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Specifications</option>
<option>Implementation</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Adolc Speed: Gradient of Determinant by Minor Expansion</big></big></b></center>
<br>
<b><big><a name="Specifications" id="Specifications">Specifications</a></big></b>
<br>
See <a href="link_det_minor.htm" target="_top"><span style='white-space: nowrap'>link_det_minor</span></a>
.

<br>
<br>
<b><big><a name="Implementation" id="Implementation">Implementation</a></big></b>

<pre><tt><i><font color="#9A1900">// suppress conversion warnings before other includes</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/wno_conversion.hpp&gt;</font>
<i><font color="#9A1900">//</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;adolc/adolc.h&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/utility/vector.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/speed/det_by_minor.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/speed/uniform_01.hpp&gt;</font>

<i><font color="#9A1900">// list of possible options</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;map&gt;</font>
<b><font color="#0000FF">extern</font></b> std<font color="#990000">::</font><font color="#008080">map&lt;std::string, bool&gt;</font> global_option<font color="#990000">;</font>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
    <font color="#009900">void</font> <b><font color="#000000">setup</font></b><font color="#990000">(</font><font color="#009900">int</font> tag<font color="#990000">,</font> <font color="#008080">size_t</font> size<font color="#990000">,</font> <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> matrix<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// number of independent variables</font></i>
        <font color="#009900">int</font> n <font color="#990000">=</font> size <font color="#990000">*</font> size<font color="#990000">;</font>

        <i><font color="#9A1900">// object for computing determinant</font></i>
        CppAD<font color="#990000">::</font><font color="#008080">det_by_minor&lt;adouble&gt;</font> <b><font color="#000000">a_det</font></b><font color="#990000">(</font>size<font color="#990000">);</font>

        <i><font color="#9A1900">// declare independent variables</font></i>
        <font color="#009900">int</font> keep <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> <i><font color="#9A1900">// keep forward mode results</font></i>
        <b><font color="#000000">trace_on</font></b><font color="#990000">(</font>tag<font color="#990000">,</font> keep<font color="#990000">);</font>
        CppAD<font color="#990000">::</font><font color="#008080">vector&lt;adouble&gt;</font> <b><font color="#000000">a_A</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#009900">int</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> n<font color="#990000">;</font> <font color="#990000">++</font>j<font color="#990000">)</font>
            a_A<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">&lt;&lt;=</font> matrix<font color="#990000">[</font>j<font color="#990000">];</font>

        <i><font color="#9A1900">// AD computation of the determinant</font></i>
        <font color="#008080">adouble</font> a_detA <font color="#990000">=</font> <b><font color="#000000">a_det</font></b><font color="#990000">(</font>a_A<font color="#990000">);</font>

        <i><font color="#9A1900">// create function object f : A -&gt; detA</font></i>
        <font color="#009900">double</font> f<font color="#990000">;</font>
        a_detA <font color="#990000">&gt;&gt;=</font> f<font color="#990000">;</font>
        <b><font color="#000000">trace_off</font></b><font color="#990000">();</font>
    <font color="#FF0000">}</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">link_det_minor</font></b><font color="#990000">(</font>
    <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>string<font color="#990000">&amp;</font>         job      <font color="#990000">,</font>
    <font color="#008080">size_t</font>                     size     <font color="#990000">,</font>
    <font color="#008080">size_t</font>                     repeat   <font color="#990000">,</font>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;double&gt;</font>     <font color="#990000">&amp;</font>matrix   <font color="#990000">,</font>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;double&gt;</font>     <font color="#990000">&amp;</font>gradient <font color="#990000">)</font>
<font color="#FF0000">{</font>
    <i><font color="#9A1900">// --------------------------------------------------------------------</font></i>
    <i><font color="#9A1900">// check global options</font></i>
    <i><font color="#9A1900">// Allow colpack true even though it is not used below because it is</font></i>
    <i><font color="#9A1900">// true durng the adolc correctness tests.</font></i>
    <b><font color="#0000FF">const</font></b> <font color="#009900">char</font><font color="#990000">*</font> valid<font color="#990000">[]</font> <font color="#990000">=</font> <font color="#FF0000">{</font> <font color="#FF0000">"onetape"</font><font color="#990000">,</font> <font color="#FF0000">"optimize"</font><font color="#990000">,</font> <font color="#FF0000">"colpack"</font><font color="#FF0000">}</font><font color="#990000">;</font>
    <font color="#008080">size_t</font> n_valid <font color="#990000">=</font> <b><font color="#0000FF">sizeof</font></b><font color="#990000">(</font>valid<font color="#990000">)</font> <font color="#990000">/</font> <b><font color="#0000FF">sizeof</font></b><font color="#990000">(</font>valid<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]);</font>
    <b><font color="#0000FF">typedef</font></b> std<font color="#990000">::</font>map<font color="#990000">&lt;</font>std<font color="#990000">::</font>string<font color="#990000">,</font> <font color="#009900">bool</font><font color="#990000">&gt;::</font><font color="#008080">iterator</font> iterator<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">iterator</font> itr<font color="#990000">=</font>global_option<font color="#990000">.</font><b><font color="#000000">begin</font></b><font color="#990000">();</font> itr<font color="#990000">!=</font>global_option<font color="#990000">.</font><b><font color="#000000">end</font></b><font color="#990000">();</font> <font color="#990000">++</font>itr<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">if</font></b><font color="#990000">(</font> itr<font color="#990000">-&gt;</font>second <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_valid<font color="#990000">;</font> i<font color="#990000">++)</font>
                ok <font color="#990000">|=</font> itr<font color="#990000">-&gt;</font>first <font color="#990000">==</font> valid<font color="#990000">[</font>i<font color="#990000">];</font>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> <font color="#990000">!</font> ok <font color="#990000">)</font>
                <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// -----------------------------------------------------</font></i>
    <i><font color="#9A1900">// size corresponding to current tape</font></i>
    <b><font color="#0000FF">static</font></b> <font color="#008080">size_t</font> static_size <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// number of independent variables</font></i>
    <font color="#009900">int</font> n <font color="#990000">=</font> size <font color="#990000">*</font> size<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// tape identifier</font></i>
    <font color="#009900">int</font> tag  <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <font color="#009900">bool</font> onetape <font color="#990000">=</font> global_option<font color="#990000">[</font><font color="#FF0000">"onetape"</font><font color="#990000">];</font>
    <i><font color="#9A1900">// ----------------------------------------------------------------------</font></i>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> job <font color="#990000">==</font> <font color="#FF0000">"setup"</font> <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">if</font></b><font color="#990000">(</font> onetape <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// get a matrix</font></i>
            CppAD<font color="#990000">::</font><b><font color="#000000">uniform_01</font></b><font color="#990000">(</font><b><font color="#000000">size_t</font></b><font color="#990000">(</font>n<font color="#990000">),</font> matrix<font color="#990000">);</font>
            <i><font color="#9A1900">//</font></i>
            <i><font color="#9A1900">// recrod the tape</font></i>
            <b><font color="#000000">setup</font></b><font color="#990000">(</font>tag<font color="#990000">,</font> size<font color="#990000">,</font> matrix<font color="#990000">);</font>
            static_size <font color="#990000">=</font> size<font color="#990000">;</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">else</font></b>
        <font color="#FF0000">{</font>   static_size <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
        <font color="#FF0000">}</font>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> job <font color="#990000">==</font> <font color="#FF0000">"teardown"</font> <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// 2DO: How does one free an adolc tape ?</font></i>
        <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// ----------------------------------------------------------------------</font></i>
    <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> job <font color="#990000">==</font> <font color="#FF0000">"run"</font> <font color="#990000">);</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// number of dependent variables</font></i>
    <font color="#009900">int</font> m    <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
    <i><font color="#9A1900">// vectors of reverse mode weights</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;double&gt;</font> <b><font color="#000000">u</font></b><font color="#990000">(</font>m<font color="#990000">);</font>
    u<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
    <i><font color="#9A1900">//</font></i>
    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> onetape <font color="#990000">)</font> <b><font color="#0000FF">while</font></b><font color="#990000">(</font>repeat<font color="#990000">--)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">if</font></b><font color="#990000">(</font> size <font color="#990000">!=</font> static_size <font color="#990000">)</font>
        <font color="#FF0000">{</font>   <b><font color="#000000">CPPAD_ASSERT_UNKNOWN</font></b><font color="#990000">(</font> size <font color="#990000">==</font> static_size <font color="#990000">);</font>
        <font color="#FF0000">}</font>

        <i><font color="#9A1900">// choose a matrix</font></i>
        CppAD<font color="#990000">::</font><b><font color="#000000">uniform_01</font></b><font color="#990000">(</font>n<font color="#990000">,</font> matrix<font color="#990000">);</font>

        <i><font color="#9A1900">// evaluate the determinant at the new matrix value</font></i>
        <font color="#009900">int</font> keep <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> <i><font color="#9A1900">// keep this forward mode result</font></i>
        <font color="#009900">double</font> f<font color="#990000">;</font>     <i><font color="#9A1900">// function result</font></i>
        <b><font color="#000000">zos_forward</font></b><font color="#990000">(</font>tag<font color="#990000">,</font> m<font color="#990000">,</font> n<font color="#990000">,</font> keep<font color="#990000">,</font> matrix<font color="#990000">.</font><b><font color="#000000">data</font></b><font color="#990000">(),</font> <font color="#990000">&amp;</font>f<font color="#990000">);</font>

        <i><font color="#9A1900">// evaluate and return gradient using reverse mode</font></i>
        <b><font color="#000000">fos_reverse</font></b><font color="#990000">(</font>tag<font color="#990000">,</font> m<font color="#990000">,</font> n<font color="#990000">,</font> u<font color="#990000">.</font><b><font color="#000000">data</font></b><font color="#990000">(),</font> gradient<font color="#990000">.</font><b><font color="#000000">data</font></b><font color="#990000">());</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">else</font></b> <b><font color="#0000FF">while</font></b><font color="#990000">(</font>repeat<font color="#990000">--)</font>
    <font color="#FF0000">{</font>
        <i><font color="#9A1900">// choose a matrix</font></i>
        CppAD<font color="#990000">::</font><b><font color="#000000">uniform_01</font></b><font color="#990000">(</font>n<font color="#990000">,</font> matrix<font color="#990000">);</font>

        <i><font color="#9A1900">// record the tape</font></i>
        <b><font color="#000000">setup</font></b><font color="#990000">(</font>tag<font color="#990000">,</font> size<font color="#990000">,</font> matrix<font color="#990000">);</font>

        <i><font color="#9A1900">// evaluate and return gradient using reverse mode</font></i>
        <b><font color="#000000">fos_reverse</font></b><font color="#990000">(</font>tag<font color="#990000">,</font> m<font color="#990000">,</font> n<font color="#990000">,</font> u<font color="#990000">.</font><b><font color="#000000">data</font></b><font color="#990000">(),</font> gradient<font color="#990000">.</font><b><font color="#000000">data</font></b><font color="#990000">());</font>
    <font color="#FF0000">}</font>
    <i><font color="#9A1900">// --------------------------------------------------------------------</font></i>
    <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: speed/adolc/det_minor.cpp

</body>
</html>
