<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Complex Polynomial: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Complex Polynomial: Example and Test">
<meta name="keywords" id="keywords" content=" complex polynomial: example test poly ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_complex_poly.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="base_complex.hpp.htm" target="_top">Prev</a>
</td><td><a href="adfun.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>base_require</option>
<option>base_example</option>
<option>base_complex.hpp</option>
<option>complex_poly.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_base_require_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_base_example_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_base_complex.hpp_htm.js'></script>
</td>
<td>complex_poly.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Poly</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Complex Polynomial: Example and Test</big></big></b></center>
<br>
<b><big><a name="Poly" id="Poly">Poly</a></big></b>
<br>
Select this link to view specifications for <a href="poly.htm" target="_top"><span style='white-space: nowrap'>Poly</span></a>
:

<pre><tt><i><font color="#9A1900">// Complex examples should supppress conversion warnings</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/wno_conversion.hpp&gt;</font>

<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/cppad.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;complex&gt;</font>

<font color="#009900">bool</font> <b><font color="#000000">complex_poly</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok    <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
    <font color="#008080">size_t</font> deg <font color="#990000">=</font> <font color="#993399">4</font><font color="#990000">;</font>

    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>Poly<font color="#990000">;</font>
    <b><font color="#0000FF">typedef</font></b> std<font color="#990000">::</font><font color="#008080">complex&lt;double&gt;</font> Complex<font color="#990000">;</font>

    <i><font color="#9A1900">// polynomial coefficients</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font> Complex <font color="#990000">)</font>   <b><font color="#000000">a</font></b>   <font color="#990000">(</font>deg <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font> <i><font color="#9A1900">// coefficients for p(z)</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>AD<font color="#990000">&lt;</font>Complex<font color="#990000">&gt;)</font> <b><font color="#000000">A</font></b>   <font color="#990000">(</font>deg <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">);</font>
    <font color="#008080">size_t</font> i<font color="#990000">;</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;=</font> deg<font color="#990000">;</font> i<font color="#990000">++)</font>
        A<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> a<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">Complex</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">(</font>i<font color="#990000">),</font> <font color="#009900">double</font><font color="#990000">(</font>i<font color="#990000">));</font>

    <i><font color="#9A1900">// independent variable vector</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>AD<font color="#990000">&lt;</font>Complex<font color="#990000">&gt;)</font> <b><font color="#000000">Z</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
    <font color="#008080">Complex</font> z <font color="#990000">=</font> <b><font color="#000000">Complex</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">.,</font> <font color="#993399">2</font><font color="#990000">.);</font>
    Z<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>      <font color="#990000">=</font> z<font color="#990000">;</font>
    <b><font color="#000000">Independent</font></b><font color="#990000">(</font>Z<font color="#990000">);</font>

    <i><font color="#9A1900">// dependent variable vector and indices</font></i>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>AD<font color="#990000">&lt;</font>Complex<font color="#990000">&gt;)</font> <b><font color="#000000">P</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>

    <i><font color="#9A1900">// dependent variable values</font></i>
    P<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#000000">Poly</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> A<font color="#990000">,</font> Z<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]);</font>

    <i><font color="#9A1900">// create f: Z -&gt; P and vectors used for derivative calculations</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">ADFun&lt;Complex&gt;</font> <b><font color="#000000">f</font></b><font color="#990000">(</font>Z<font color="#990000">,</font> P<font color="#990000">);</font>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>Complex<font color="#990000">)</font> <b><font color="#000000">v</font></b><font color="#990000">(</font> f<font color="#990000">.</font><b><font color="#000000">Domain</font></b><font color="#990000">()</font> <font color="#990000">);</font>
    <b><font color="#000000">CPPAD_TESTVECTOR</font></b><font color="#990000">(</font>Complex<font color="#990000">)</font> <b><font color="#000000">w</font></b><font color="#990000">(</font> f<font color="#990000">.</font><b><font color="#000000">Range</font></b><font color="#990000">()</font> <font color="#990000">);</font>

    <i><font color="#9A1900">// check first derivative w.r.t z</font></i>
    v<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>      <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
    w         <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">,</font> v<font color="#990000">);</font>
    <font color="#008080">Complex</font> p <font color="#990000">=</font> <b><font color="#000000">Poly</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">,</font> a<font color="#990000">,</font> z<font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font> w<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>  <font color="#990000">==</font> p <font color="#990000">);</font>

    <i><font color="#9A1900">// second derivative w.r.t z is 2 times its second order Taylor coeff</font></i>
    v<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>
    w    <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">Forward</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">,</font> v<font color="#990000">);</font>
    p    <font color="#990000">=</font> <b><font color="#000000">Poly</font></b><font color="#990000">(</font><font color="#993399">2</font><font color="#990000">,</font> a<font color="#990000">,</font> z<font color="#990000">);</font>
    ok <font color="#990000">&amp;=</font> <font color="#990000">(</font> <font color="#993399">2</font><font color="#990000">.</font> <font color="#990000">*</font> w<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>  <font color="#990000">==</font> p <font color="#990000">);</font>

    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
</tt></pre>

<hr>Input File: example/general/complex_poly.cpp

</body>
</html>
