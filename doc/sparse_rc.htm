<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Row and Column Index Sparsity Patterns</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Row and Column Index Sparsity Patterns">
<meta name="keywords" id="keywords" content=" row column index sparsity patterns syntax include constructor assignment equality setting scalars vectors output sizevector empty pattern other move semantics swap nr nc nnz resize set push_back k r c col row_major set_row_major get_row_major col_major set_col_major get_col_major example os ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_sparse_rc_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="sparse2eigen.cpp.htm" target="_top">Prev</a>
</td><td><a href="sparse_rc.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>utility</option>
<option>sparse_rc</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_utility_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_sparse_rc_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>---..include</option>
<option>---..Constructor</option>
<option>---..Assignment</option>
<option>---..Equality</option>
<option>---..Setting</option>
<option>---..Scalars</option>
<option>---..Vectors</option>
<option>---..Output</option>
<option>SizeVector</option>
<option>empty</option>
<option>pattern</option>
<option>other</option>
<option>---..Assignment and Constructor</option>
<option>---..Move Semantics Assignment and Constructor</option>
<option>---..swap</option>
<option>---..Equality</option>
<option>nr</option>
<option>nc</option>
<option>nnz</option>
<option>resize</option>
<option>set</option>
<option>push_back</option>
<option>---..k</option>
<option>---..r</option>
<option>---..c</option>
<option>row</option>
<option>col</option>
<option>row_major</option>
<option>set_row_major</option>
<option>get_row_major</option>
<option>col_major</option>
<option>set_col_major</option>
<option>get_col_major</option>
<option>Example</option>
<option>os</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<center><b><big><big>Row and Column Index Sparsity Patterns</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>


<br>
<br>
<big><a name="Syntax.include" id="Syntax.include">include</a></big>

<br>

<code><font color="blue"><span style='white-space: nowrap'>#&nbsp;include&nbsp;&lt;cppad/utility/sparse_rc.hpp&gt;<br>
</span></font></code>
<br>
<big><a name="Syntax.Constructor" id="Syntax.Constructor">Constructor</a></big>

<br>

<code><font color="blue"><span style='white-space: nowrap'>sparse_rc&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>empty</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>sparse_rc&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>nr</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nc</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>sparse_rc&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
<br>
<big><a name="Syntax.Assignment" id="Syntax.Assignment">Assignment</a></big>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.swap(</span></font><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
<br>
<big><a name="Syntax.Equality" id="Syntax.Equality">Equality</a></big>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>equal</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
.

<br>
<br>
<big><a name="Syntax.Setting" id="Syntax.Setting">Setting</a></big>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>resize</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>nr</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nc</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.set(</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>r</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>c</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.push_back(</span></font><i><font color="black"><span style='white-space: nowrap'>r</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>c</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.set_row_major()<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.set_col_major()<br>
</span></font></code>
<br>
<big><a name="Syntax.Scalars" id="Syntax.Scalars">Scalars</a></big>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.nr()<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.nc()<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.nnz()<br>
</span></font></code>
<br>
<big><a name="Syntax.Vectors" id="Syntax.Vectors">Vectors</a></big>

<br>

<code><font color="blue"><span style='white-space: nowrap'>const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.row()&nbsp;)<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.col()&nbsp;)<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i><font color="blue"><span style='white-space: nowrap'>(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.get_row_major()&nbsp;)<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>const&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i><font color="blue"><span style='white-space: nowrap'>(&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.get_col_major()&nbsp;)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.row_major()<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.col_major()<br>
</span></font></code>
<br>
<big><a name="Syntax.Output" id="Syntax.Output">Output</a></big>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>os</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="SizeVector" id="SizeVector">SizeVector</a></big></b>
<br>
We use 
<code><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i></code>
 to denote <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class
<a href="simplevector.htm#Elements of Specified Type" target="_top"><span style='white-space: nowrap'>with&nbsp;elements&nbsp;of&nbsp;type</span></a>

<code><font color="blue">size_t</font></code>.
In addition, 
<code><i><font color="black"><span style='white-space: nowrap'>SimpleVector</span></font></i></code>
 must support the <code><font color="blue">swap</font></code> operation
between two of its vectors.

<br>
<br>
<b><big><a name="empty" id="empty">empty</a></big></b>
<br>
This is an empty sparsity pattern. To be specific,
the corresponding number of rows 
<code><i><font color="black"><span style='white-space: nowrap'>nr</span></font></i></code>
,
number of columns 
<code><i><font color="black"><span style='white-space: nowrap'>nc</span></font></i></code>
,
and number of possibly non-zero values 
<code><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i></code>
,
are all zero.

<br>
<br>
<b><big><a name="pattern" id="pattern">pattern</a></big></b>
<br>
This object is used to hold a sparsity pattern for a matrix.
The sparsity 
<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i></code>
 is <code><font color="blue">const</font></code>
except during its constructor, <code><font color="blue">resize</font></code>, and <code><font color="blue">set</font></code>.

<br>
<br>
<b><big><a name="other" id="other">other</a></big></b>


<br>
<br>
<big><a name="other.Assignment and Constructor" id="other.Assignment and Constructor">Assignment and Constructor</a></big>
<br>
In the assignment and constructor, 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;sparse_rc&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&amp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
After the assignment and constructor, 
<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i></code>
 is an independent copy
of 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
; i.e. it has all the same values as 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>

and changes to 
<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i></code>
 do not affect 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
.

<br>
<br>
<big><a name="other.Move Semantics Assignment and Constructor" id="other.Move Semantics Assignment and Constructor">Move Semantics Assignment and Constructor</a></big>
<br>
In the assignment and constructor, if 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;sparse_rc&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&amp;&amp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
A move semantics version of the assignment or constructor is used; e.g.,
when 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
 is a function return value.

<br>
<br>
<big><a name="other.swap" id="other.swap">swap</a></big>
<br>
In the swap operation, 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;sparse_rc&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&amp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
After the swap operation 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
 (
<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i></code>
) is equivalent
to 
<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i></code>
 (
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
) before the operation.

<br>
<br>
<big><a name="other.Equality" id="other.Equality">Equality</a></big>
<br>
In the equality operation, 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;sparse_rc&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&amp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The two sparsity patterns are equal if the following conditions hold:
<ol type="1"><li>
The number of rows

<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.nr()</span></font></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'>.nr()</span></font></code>
 are equal.
</li><li>

The number of columns

<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.nc()</span></font></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'>.nc()</span></font></code>
 are equal.
</li><li>

The number of non-zero values

<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.nnz()</span></font></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i><font color="blue"><span style='white-space: nowrap'>.nnz()</span></font></code>
 are equal.
</li><li>

The set of (row, column) pairs corresponding to

<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>other</span></font></i></code>
, are equal.
</li></ol>

Determining equality requires sorting both patterns

<br>
<br>
<b><big><a name="nr" id="nr">nr</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nr</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the number of rows in the sparsity pattern.
The function call <code><font color="blue">nr()</font></code> returns the value of 
<code><i><font color="black"><span style='white-space: nowrap'>nr</span></font></i></code>
.

<br>
<br>
<b><big><a name="nc" id="nc">nc</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nc</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the number of columns in the sparsity pattern.
The function call <code><font color="blue">nc()</font></code> returns the value of 
<code><i><font color="black"><span style='white-space: nowrap'>nc</span></font></i></code>
.

<br>
<br>
<b><big><a name="nnz" id="nnz">nnz</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the number of possibly non-zero
index pairs in the sparsity pattern.
The function call <code><font color="blue">nnz()</font></code> returns the value of 
<code><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i></code>
.

<br>
<br>
<b><big><a name="resize" id="resize">resize</a></big></b>
<br>
The current sparsity pattern is lost and a new one is started
with the specified parameters. The elements in the 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>

and 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
 vectors should be assigned using <code><font color="blue">set</font></code>.

<br>
<br>
<b><big><a name="set" id="set">set</a></big></b>
<br>
This function sets the values

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>r</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>c</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="push_back" id="push_back">push_back</a></big></b>
<br>
This function  the value 
<code><i><font color="black"><span style='white-space: nowrap'>r</span></font></i></code>
 to the back of 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i></code>
,
the value 
<code><i><font color="black"><span style='white-space: nowrap'>c</span></font></i></code>
 to the back of 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i></code>
,
and increases 
<code><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i></code>
 by one.
This operation requires 
<code><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i></code>
 to support the
<code><font color="blue">push_back</font></code> operation
(which is not part of the SimpleVector requirements).

<br>
<br>
<big><a name="push_back.k" id="push_back.k">k</a></big>
<br>
This argument has type

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and must be less than 
<code><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i></code>
.

<br>
<br>
<big><a name="push_back.r" id="push_back.r">r</a></big>
<br>
This argument has type

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>r</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the value assigned to 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 and must
be less than 
<code><i><font color="black"><span style='white-space: nowrap'>nr</span></font></i></code>
.

<br>
<br>
<big><a name="push_back.c" id="push_back.c">c</a></big>
<br>
This argument has type

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>c</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the value assigned to 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 and must
be less than 
<code><i><font color="black"><span style='white-space: nowrap'>nc</span></font></i></code>
.

<br>
<br>
<b><big><a name="row" id="row">row</a></big></b>
<br>
This vector has size 
<code><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i></code>
 and

<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>

is the row index of the <code><i>k</i></code>-th possibly non-zero
index pair in the sparsity pattern.

<br>
<br>
<b><big><a name="col" id="col">col</a></big></b>
<br>
This vector has size 
<code><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i></code>
 and

<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]</span></font></code>
 is the column index of the <code><i>k</i></code>-th possibly non-zero
index pair in the sparsity pattern.

<br>
<br>
<b><big><a name="row_major" id="row_major">row_major</a></big></b>
<br>
This vector has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and its size 
<code><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i></code>
.
It sorts the sparsity pattern in row-major order.
To be specific,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;]&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]&nbsp;]<br>
</span></font></code>
and if 
<code><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;]&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]&nbsp;]</span></font></code>
,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;]&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]&nbsp;]<br>
</span></font></code>
This routine generates an assert if there are two entries with the same
row and column values (if <code><font color="blue">NDEBUG</font></code> is not defined).

<br>
<br>
<b><big><a name="set_row_major" id="set_row_major">set_row_major</a></big></b>
<br>
Store the current row major order in 
<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i></code>
.
This can be used by the row_major function and the equality function
to avoid re-sorting the pattern each time.

<br>
<br>
<b><big><a name="get_row_major" id="get_row_major">get_row_major</a></big></b>
<br>
Retrieve the row major order stored in 
<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i></code>

by the previous <code><font color="blue">set_row_major</font></code>.
If this order is no longer valid, the return value

<code><i><font color="black"><span style='white-space: nowrap'>row_major</span></font></i></code>
 has size zero.


<br>
<br>
<b><big><a name="col_major" id="col_major">col_major</a></big></b>
<br>
This vector has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and its size 
<code><i><font color="black"><span style='white-space: nowrap'>nnz</span></font></i></code>
.
It sorts the sparsity pattern in column-major order.
To be specific,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;]&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]&nbsp;]<br>
</span></font></code>
and if 
<code><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;]&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>row</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]&nbsp;]</span></font></code>
,

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;]&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>+1]&nbsp;]<br>
</span></font></code>
This routine generates an assert if there are two entries with the same
row and column values (if <code><font color="blue">NDEBUG</font></code> is not defined).

<br>
<br>
<b><big><a name="set_col_major" id="set_col_major">set_col_major</a></big></b>
<br>
Store the current row major order in 
<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i></code>
.
This can be used by the col_major function and the equality function
to avoid re-sorting the pattern each time.

<br>
<br>
<b><big><a name="get_col_major" id="get_col_major">get_col_major</a></big></b>
<br>
Retrieve the row major order stored in 
<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i></code>

by the previous <code><font color="blue">set_col_major</font></code>.
If this order is no longer valid, the return value

<code><i><font color="black"><span style='white-space: nowrap'>col_major</span></font></i></code>
 has size zero.


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="sparse_rc.cpp.htm" target="_top"><span style='white-space: nowrap'>sparse_rc.cpp</span></a>

contains an example and test of this class.

<br>
<br>
<b><big><a name="os" id="os">os</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>os</span></font></i></code>
 is an <code><font color="blue">std::ostream</font></code>, the operation

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>os</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
outputs 
<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i></code>
 to the 
<code><i><font color="black"><span style='white-space: nowrap'>os</span></font></i></code>
 stream.
The output begins with a left brace <code><font color="blue">{</font></code>
and ends with a right brace <code><font color="blue">}</font></code>.
The output is in row major order and has one line for each row.
The row index is output at the beginning of a line
and the column indices follow.


<hr>Input File: include/cppad/utility/sparse_rc.hpp

</body>
</html>
