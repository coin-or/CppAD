<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Atomic Function Constructor</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Atomic Function Constructor">
<meta name="keywords" id="keywords" content=" atomic function constructor syntax atomic_user ctor_arg_list afun implementation atomic_base restrictions base name sparsity ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_atomic_two_ctor_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="atomic_two.htm" target="_top">Prev</a>
</td><td><a href="atomic_two_option.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>deprecated</option>
<option>atomic_two</option>
<option>atomic_two_ctor</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_appendix_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_deprecated_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_atomic_two_htm.js'></script>
</td>
<td>atomic_two_ctor</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>atomic_user</option>
<option>---..ctor_arg_list</option>
<option>---..afun</option>
<option>---..Implementation</option>
<option>atomic_base</option>
<option>---..Restrictions</option>
<option>---..Base</option>
<option>---..name</option>
<option>---..sparsity</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Atomic Function Constructor</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>atomic_user&nbsp;afun</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>ctor_arg_list</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>atomic_base&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;(</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sparsity</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
<br>
<b><big><a name="atomic_user" id="atomic_user">atomic_user</a></big></b>


<br>
<br>
<big><a name="atomic_user.ctor_arg_list" id="atomic_user.ctor_arg_list">ctor_arg_list</a></big>
<br>
Is a list of arguments for the 
<code><i><font color="black"><span style='white-space: nowrap'>atomic_user</span></font></i></code>
 constructor.

<br>
<br>
<big><a name="atomic_user.afun" id="atomic_user.afun">afun</a></big>
<br>
The object 
<code><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i></code>
 must stay in scope for as long
as the corresponding atomic function is used.
This includes use by any <a href="adfun.htm" target="_top"><span style='white-space: nowrap'>ADFun&lt;Base&gt;</span></a>
 that
has this 
<code><i><font color="black"><span style='white-space: nowrap'>atomic_user</span></font></i></code>
 operation in its
<a href="glossary.htm#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&nbsp;sequence</span></a>
.

<br>
<br>
<big><a name="atomic_user.Implementation" id="atomic_user.Implementation">Implementation</a></big>
<br>
The user defined 
<code><i><font color="black"><span style='white-space: nowrap'>atomic_user</span></font></i></code>
 class is a publicly derived class of

<code><font color="blue"><span style='white-space: nowrap'>atomic_base&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
.
It should be declared as follows:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>atomic_user</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;:&nbsp;public&nbsp;CppAD::atomic_base&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;public:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>atomic_user</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>ctor_arg_list</span></font></i><font color="blue"><span style='white-space: nowrap'>)&nbsp;:&nbsp;atomic_base&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;(</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sparsity</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>...</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;};<br>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>...</span></font></i></code>

denotes the rest of the implementation of the derived class.
This includes completing the constructor and
all the virtual functions that have their
<code><font color="blue">atomic_base</font></code> implementations replaced by

<code><i><font color="black"><span style='white-space: nowrap'>atomic_user</span></font></i></code>
 implementations.

<br>
<br>
<b><big><a name="atomic_base" id="atomic_base">atomic_base</a></big></b>


<br>
<br>
<big><a name="atomic_base.Restrictions" id="atomic_base.Restrictions">Restrictions</a></big>
<br>
The <code><font color="blue">atomic_base</font></code> constructor and destructor cannot be called in
<a href="ta_in_parallel.htm" target="_top"><span style='white-space: nowrap'>parallel</span></a>
 mode.

<br>
<br>
<big><a name="atomic_base.Base" id="atomic_base.Base">Base</a></big>
<br>
The template parameter determines the

<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 type for this 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 atomic operation.

<br>
<br>
<big><a name="atomic_base.name" id="atomic_base.name">name</a></big>
<br>
This <code><font color="blue">atomic_base</font></code> constructor argument has the following prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;std::string&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>name</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is the name for this atomic function and is used for error reporting.
The suggested value for 
<code><i><font color="black"><span style='white-space: nowrap'>name</span></font></i></code>
 is 
<code><i><font color="black"><span style='white-space: nowrap'>afun</span></font></i></code>
 or 
<code><i><font color="black"><span style='white-space: nowrap'>atomic_user</span></font></i></code>
,
i.e., the name of the corresponding atomic object or class.

<br>
<br>
<big><a name="atomic_base.sparsity" id="atomic_base.sparsity">sparsity</a></big>
<br>
This <code><font color="blue">atomic_base</font></code> constructor argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;atomic_base&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;::option_enum&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>sparsity</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The current 
<code><i><font color="black"><span style='white-space: nowrap'>sparsity</span></font></i></code>
 for an <code><font color="blue">atomic_base</font></code> object
determines which type of sparsity patterns it uses
and its value is one of the following:
<table><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>sparsity</span></font></i></code>
   </td><td align='left'  valign='top'>
 sparsity patterns </td></tr><tr><td align='left'  valign='top'>


<code><font color="blue"><span style='white-space: nowrap'>atomic_base&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;::pack_sparsity_enum</span></font></code>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>

    <a href="cppad_vector.htm#vectorBool" target="_top"><span style='white-space: nowrap'>vectorBool</span></a>

</td></tr><tr><td align='left'  valign='top'>


<code><font color="blue"><span style='white-space: nowrap'>atomic_base&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;::bool_sparsity_enum</span></font></code>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>

    <a href="cppad_vector.htm" target="_top"><span style='white-space: nowrap'>vector</span></a>
<code><font color="blue">&lt;bool&gt;</font></code>
</td></tr><tr><td align='left'  valign='top'>


<code><font color="blue"><span style='white-space: nowrap'>atomic_base&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;::set_sparsity_enum</span></font></code>
 <code><span style='white-space: nowrap'>&nbsp;&nbsp;</span></code> </td><td align='left'  valign='top'>

    <a href="cppad_vector.htm" target="_top"><span style='white-space: nowrap'>vector</span></a>
<code><font color="blue">&lt;std::set&lt;std::size_t&gt; &gt;</font></code>
</td></tr>
</table>
There is a default value for 
<code><i><font color="black"><span style='white-space: nowrap'>sparsity</span></font></i></code>
 if it is not
included in the constructor (which may be either the bool or set option).


<hr>Input File: include/cppad/core/atomic/two/ctor.hpp

</body>
</html>
