<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Enable use of AD&lt;Base&gt; where Base is std::complex&lt;double&gt;</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Enable use of AD&lt;Base&gt; where Base is std::complex&lt;double&gt;">
<meta name="keywords" id="keywords" content=" enable use ad&lt;base&gt; where base is std::complex&lt;double&gt; example include order condexpop condexprel equalopseq identical ordered integer azmul isnan valid unary math invalid pow numeric_limits to_string ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_base_complex.hpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="base_double.hpp.htm" target="_top">Prev</a>
</td><td><a href="complex_poly.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>base_require</option>
<option>base_example</option>
<option>base_complex.hpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_ad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_base_require_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_base_example_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_base_complex.hpp_htm.js'></script>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Example</option>
<option>Include Order</option>
<option>CondExpOp</option>
<option>CondExpRel</option>
<option>EqualOpSeq</option>
<option>Identical</option>
<option>Ordered</option>
<option>Integer</option>
<option>azmul</option>
<option>isnan</option>
<option>Valid Unary Math</option>
<option>Invalid Unary Math</option>
<option>pow</option>
<option>numeric_limits</option>
<option>to_string</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@




<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io/en/latest/user_guide.html" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Enable use of AD&lt;Base&gt; where Base is std::complex&lt;double&gt;</big></big></b></center>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <a href="complex_poly.cpp.htm" target="_top"><span style='white-space: nowrap'>complex_poly.cpp</span></a>
 contains an example use of
<code><font color="blue">std::complex&lt;double&gt;</font></code> type for a CppAD 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 type.

<br>
<br>
<b><big><a name="Include Order" id="Include Order">Include Order</a></big></b>
<br>
This file is included before <code><font color="blue">&lt;cppad/cppad.hpp&gt;</font></code>
so it is necessary to define the error handler
in addition to including
<a href="base_require.htm#Include Order" target="_top"><span style='white-space: nowrap'>base_require.hpp</span></a>

<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;limits&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;complex&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/base_require.hpp&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/core/cppad_assert.hpp&gt;</font>
</tt></pre>
<b><big><a name="CondExpOp" id="CondExpOp">CondExpOp</a></big></b>
<br>
The type <code><font color="blue">std::complex&lt;double&gt;</font></code> does not supports the
<code><font color="blue">&lt;</font></code>, <code><font color="blue">&lt;=</font></code>, <code><font color="blue">==</font></code>, <code><font color="blue">&gt;=</font></code>, and <code><font color="blue">&gt;</font></code> operators; see
<a href="base_cond_exp.htm#CondExpTemplate.Not Ordered" target="_top"><span style='white-space: nowrap'>not&nbsp;ordered</span></a>
.
Hence its <code><font color="blue">CondExpOp</font></code> function is defined by
<pre><tt><b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font>
    <b><font color="#0000FF">inline</font></b> std<font color="#990000">::</font><font color="#008080">complex&lt;double&gt;</font> <b><font color="#000000">CondExpOp</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">enum</font></b> <font color="#008080">CppAD</font><font color="#990000">::</font><font color="#008080">CompareOp</font>      cop        <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font><font color="#008080">complex&lt;double&gt;</font> <font color="#990000">&amp;</font>left      <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font><font color="#008080">complex&lt;double&gt;</font> <font color="#990000">&amp;</font>right     <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font><font color="#008080">complex&lt;double&gt;</font> <font color="#990000">&amp;</font>trueCase  <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font><font color="#008080">complex&lt;double&gt;</font> <font color="#990000">&amp;</font>falseCase <font color="#990000">)</font>
    <font color="#FF0000">{</font>   CppAD<font color="#990000">::</font>ErrorHandler<font color="#990000">::</font><b><font color="#000000">Call</font></b><font color="#990000">(</font>
            <b><font color="#0000FF">true</font></b>     <font color="#990000">,</font> __LINE__ <font color="#990000">,</font> __FILE__ <font color="#990000">,</font>
            <font color="#FF0000">"std::complex&lt;float&gt; CondExpOp(...)"</font><font color="#990000">,</font>
            <font color="#FF0000">"Error: cannot use CondExp with a complex type"</font>
        <font color="#990000">);</font>
        <b><font color="#0000FF">return</font></b> std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;(</font><font color="#993399">0</font><font color="#990000">);</font>
    <font color="#FF0000">}</font>
<font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="CondExpRel" id="CondExpRel">CondExpRel</a></big></b>
<br>
The <a href="base_cond_exp.htm#CondExpRel" target="_top"><span style='white-space: nowrap'>CPPAD_COND_EXP_REL</span></a>
 macro invocation
<pre style='display:inline'><tt>
<b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font>
    <b><font color="#000000">CPPAD_COND_EXP_REL</font></b><font color="#990000">(</font> std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font>
<font color="#FF0000">}</font>
</tt></pre>
used <code><font color="blue">CondExpOp</font></code> above to
define 
<code><font color="blue"><span style='white-space: nowrap'>CondExp</span></font><i><font color="black"><span style='white-space: nowrap'>Rel</span></font></i></code>
 for <code><font color="blue">std::complex&lt;double&gt;</font></code> arguments
and 
<code><i><font color="black"><span style='white-space: nowrap'>Rel</span></font></i></code>
 equal to
<code><font color="blue">Lt</font></code>, <code><font color="blue">Le</font></code>, <code><font color="blue">Eq</font></code>, <code><font color="blue">Ge</font></code>, and <code><font color="blue">Gt</font></code>.

<br>
<br>
<b><big><a name="EqualOpSeq" id="EqualOpSeq">EqualOpSeq</a></big></b>
<br>
Complex numbers do not carry operation sequence information.
Thus they are equal in this sense if and only if there values are equal.
<pre><tt><b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font>
    <b><font color="#0000FF">inline</font></b> <font color="#009900">bool</font> <b><font color="#000000">EqualOpSeq</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font><font color="#008080">complex&lt;double&gt;</font> <font color="#990000">&amp;</font>x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font><font color="#008080">complex&lt;double&gt;</font> <font color="#990000">&amp;</font>y <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> x <font color="#990000">==</font> y<font color="#990000">;</font>
    <font color="#FF0000">}</font>
<font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="Identical" id="Identical">Identical</a></big></b>
<br>
Complex numbers do not carry operation sequence information.
Thus they are all parameters so the identical functions just check values.
<pre><tt><b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font>
    <b><font color="#0000FF">inline</font></b> <font color="#009900">bool</font> <b><font color="#000000">IdenticalCon</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font><font color="#008080">complex&lt;double&gt;</font> <font color="#990000">&amp;</font>x<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">true</font></b><font color="#990000">;</font> <font color="#FF0000">}</font>
    <b><font color="#0000FF">inline</font></b> <font color="#009900">bool</font> <b><font color="#000000">IdenticalZero</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font><font color="#008080">complex&lt;double&gt;</font> <font color="#990000">&amp;</font>x<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> <font color="#990000">(</font>x <font color="#990000">==</font> std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;(</font><font color="#993399">0</font><font color="#990000">.,</font> <font color="#993399">0</font><font color="#990000">.)</font> <font color="#990000">);</font> <font color="#FF0000">}</font>
    <b><font color="#0000FF">inline</font></b> <font color="#009900">bool</font> <b><font color="#000000">IdenticalOne</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font><font color="#008080">complex&lt;double&gt;</font> <font color="#990000">&amp;</font>x<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> <font color="#990000">(</font>x <font color="#990000">==</font> std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;(</font><font color="#993399">1</font><font color="#990000">.,</font> <font color="#993399">0</font><font color="#990000">.)</font> <font color="#990000">);</font> <font color="#FF0000">}</font>
    <b><font color="#0000FF">inline</font></b> <font color="#009900">bool</font> <b><font color="#000000">IdenticalEqualCon</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font><font color="#008080">complex&lt;double&gt; &amp;x, const std::complex&lt;double&gt;</font> <font color="#990000">&amp;</font>y<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> <font color="#990000">(</font>x <font color="#990000">==</font> y<font color="#990000">);</font> <font color="#FF0000">}</font>
<font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="Ordered" id="Ordered">Ordered</a></big></b>
<br>
Complex types do not support comparison operators,
<pre><tt><b><font color="#000080"># undef</font></b>  CPPAD_USER_MACRO
<b><font color="#000080"># define</font></b> <b><font color="#000000">CPPAD_USER_MACRO</font></b><font color="#990000">(</font>Fun<font color="#990000">)</font>                                     <font color="#990000">\</font>
<b><font color="#0000FF">inline</font></b> <font color="#009900">bool</font> <b><font color="#000000">Fun</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> x<font color="#990000">)</font>                     <font color="#990000">\</font>
<font color="#FF0000">{</font>      CppAD<font color="#990000">::</font>ErrorHandler<font color="#990000">::</font><b><font color="#000000">Call</font></b><font color="#990000">(</font>                                  <font color="#990000">\</font>
               <b><font color="#0000FF">true</font></b>     <font color="#990000">,</font> __LINE__ <font color="#990000">,</font> __FILE__ <font color="#990000">,</font>                    <font color="#990000">\</font>
<b><font color="#000080">               #Fun</font></b><font color="#FF0000">"(x)"</font><font color="#990000">,</font>                                          <font color="#990000">\</font>
               <font color="#FF0000">"Error: cannot use "</font> #Fun <font color="#FF0000">" with x complex&lt;double&gt; "</font> <font color="#990000">\</font>
       <font color="#990000">);</font>                                                          <font color="#990000">\</font>
       <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>                                               <font color="#990000">\</font>
<font color="#FF0000">}</font>
<b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font>
    <b><font color="#000000">CPPAD_USER_MACRO</font></b><font color="#990000">(</font>LessThanZero<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_USER_MACRO</font></b><font color="#990000">(</font>LessThanOrZero<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_USER_MACRO</font></b><font color="#990000">(</font>GreaterThanOrZero<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_USER_MACRO</font></b><font color="#990000">(</font>GreaterThanZero<font color="#990000">)</font>
    <b><font color="#0000FF">inline</font></b> <font color="#009900">bool</font> <b><font color="#000000">abs_geq</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> y <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> std<font color="#990000">::</font><b><font color="#000000">abs</font></b><font color="#990000">(</font>x<font color="#990000">)</font> <font color="#990000">&gt;=</font> std<font color="#990000">::</font><b><font color="#000000">abs</font></b><font color="#990000">(</font>y<font color="#990000">);</font> <font color="#FF0000">}</font>
<font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="Integer" id="Integer">Integer</a></big></b>
<br>
The implementation of this function must agree
with the CppAD user specifications for complex arguments to the
<a href="integer.htm#x.Complex Types" target="_top"><span style='white-space: nowrap'>Integer</span></a>
 function:
<pre><tt><b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font>
    <b><font color="#0000FF">inline</font></b> <font color="#009900">int</font> <b><font color="#000000">Integer</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font><font color="#008080">complex&lt;double&gt;</font> <font color="#990000">&amp;</font>x<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> <b><font color="#0000FF">static_cast</font></b><font color="#990000">&lt;</font><font color="#009900">int</font><font color="#990000">&gt;(</font> x<font color="#990000">.</font><b><font color="#000000">real</font></b><font color="#990000">()</font> <font color="#990000">);</font> <font color="#FF0000">}</font>
<font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="azmul" id="azmul">azmul</a></big></b>

<pre style='display:inline'><tt>
<b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font>
    <b><font color="#000000">CPPAD_AZMUL</font></b><font color="#990000">(</font> std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;</font> <font color="#990000">)</font>
<font color="#FF0000">}</font>
</tt></pre>
<br>
<b><big><a name="isnan" id="isnan">isnan</a></big></b>
<br>
The gcc 4.1.1 complier defines the function

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;std::complex&lt;double&gt;::isnan(&nbsp;std::complex&lt;double&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>z</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;)<br>
</span></font></code>
(which is not specified in the C++ 1998 standard ISO/IEC 14882).
This causes an ambiguity between the function above and the CppAD
<a href="nan.htm" target="_top"><span style='white-space: nowrap'>isnan</span></a>
 template function.
We avoid this ambiguity by defining a non-template version of
this function in the CppAD namespace.
<pre><tt><b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font>
    <b><font color="#0000FF">inline</font></b> <font color="#009900">bool</font> <b><font color="#000000">isnan</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> z<font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> <font color="#990000">(</font>z <font color="#990000">!=</font> z<font color="#990000">);</font>
    <font color="#FF0000">}</font>
<font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="Valid Unary Math" id="Valid Unary Math">Valid Unary Math</a></big></b>
<br>
The following macro invocations define the standard unary
math functions that are valid with complex arguments and are
required to use <code><font color="blue">AD&lt; std::complex&lt;double&gt; &gt;</font></code>.
<pre><tt><b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font>
    <b><font color="#000000">CPPAD_STANDARD_MATH_UNARY</font></b><font color="#990000">(</font>std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;,</font> cos<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_STANDARD_MATH_UNARY</font></b><font color="#990000">(</font>std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;,</font> cosh<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_STANDARD_MATH_UNARY</font></b><font color="#990000">(</font>std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;,</font> exp<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_STANDARD_MATH_UNARY</font></b><font color="#990000">(</font>std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;,</font> log<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_STANDARD_MATH_UNARY</font></b><font color="#990000">(</font>std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;,</font> sin<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_STANDARD_MATH_UNARY</font></b><font color="#990000">(</font>std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;,</font> sinh<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_STANDARD_MATH_UNARY</font></b><font color="#990000">(</font>std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;,</font> sqrt<font color="#990000">)</font>
<font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="Invalid Unary Math" id="Invalid Unary Math">Invalid Unary Math</a></big></b>
<br>
The following macro definition and invocations define the standard unary
math functions that are invalid with complex arguments and are
required to use <code><font color="blue">AD&lt; std::complex&lt;double&gt; &gt;</font></code>.
<pre><tt><b><font color="#000080"># undef</font></b>  CPPAD_USER_MACRO
<b><font color="#000080"># define</font></b> <b><font color="#000000">CPPAD_USER_MACRO</font></b><font color="#990000">(</font>Fun<font color="#990000">)</font>                                     <font color="#990000">\</font>
<b><font color="#0000FF">inline</font></b> std<font color="#990000">::</font><font color="#008080">complex&lt;double&gt;</font> <b><font color="#000000">Fun</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> x<font color="#990000">)</font>     <font color="#990000">\</font>
<font color="#FF0000">{</font>      CppAD<font color="#990000">::</font>ErrorHandler<font color="#990000">::</font><b><font color="#000000">Call</font></b><font color="#990000">(</font>                                  <font color="#990000">\</font>
               <b><font color="#0000FF">true</font></b>     <font color="#990000">,</font> __LINE__ <font color="#990000">,</font> __FILE__ <font color="#990000">,</font>                    <font color="#990000">\</font>
<b><font color="#000080">               #Fun</font></b><font color="#FF0000">"(x)"</font><font color="#990000">,</font>                                          <font color="#990000">\</font>
               <font color="#FF0000">"Error: cannot use "</font> #Fun <font color="#FF0000">" with x complex&lt;double&gt; "</font> <font color="#990000">\</font>
       <font color="#990000">);</font>                                                          <font color="#990000">\</font>
       <b><font color="#0000FF">return</font></b> std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;(</font><font color="#993399">0</font><font color="#990000">);</font>                             <font color="#990000">\</font>
<font color="#FF0000">}</font>
<b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font>
    <b><font color="#000000">CPPAD_USER_MACRO</font></b><font color="#990000">(</font>abs<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_USER_MACRO</font></b><font color="#990000">(</font>fabs<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_USER_MACRO</font></b><font color="#990000">(</font>acos<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_USER_MACRO</font></b><font color="#990000">(</font>asin<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_USER_MACRO</font></b><font color="#990000">(</font>atan<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_USER_MACRO</font></b><font color="#990000">(</font>sign<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_USER_MACRO</font></b><font color="#990000">(</font>asinh<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_USER_MACRO</font></b><font color="#990000">(</font>acosh<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_USER_MACRO</font></b><font color="#990000">(</font>atanh<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_USER_MACRO</font></b><font color="#990000">(</font>erf<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_USER_MACRO</font></b><font color="#990000">(</font>erfc<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_USER_MACRO</font></b><font color="#990000">(</font>expm1<font color="#990000">)</font>
    <b><font color="#000000">CPPAD_USER_MACRO</font></b><font color="#990000">(</font>log1p<font color="#990000">)</font>
<font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="pow" id="pow">pow</a></big></b>
<br>
The following defines a <code><font color="blue">CppAD::pow</font></code> function that
is required to use <code><font color="blue">AD&lt; std::complex&lt;double&gt; &gt;</font></code>:
<pre><tt><b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font>
    <b><font color="#0000FF">inline</font></b> std<font color="#990000">::</font><font color="#008080">complex&lt;double&gt;</font> <b><font color="#000000">pow</font></b><font color="#990000">(</font>
        <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font><font color="#008080">complex&lt;double&gt;</font> <font color="#990000">&amp;</font>x <font color="#990000">,</font>
        <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font><font color="#008080">complex&lt;double&gt;</font> <font color="#990000">&amp;</font>y <font color="#990000">)</font>
    <font color="#FF0000">{</font>   <b><font color="#0000FF">return</font></b> std<font color="#990000">::</font><b><font color="#000000">pow</font></b><font color="#990000">(</font>x<font color="#990000">,</font> y<font color="#990000">);</font> <font color="#FF0000">}</font>
<font color="#FF0000">}</font></tt></pre>
<br>
<b><big><a name="numeric_limits" id="numeric_limits">numeric_limits</a></big></b>
<br>
The following defines the CppAD <a href="numeric_limits.htm" target="_top"><span style='white-space: nowrap'>numeric_limits</span></a>

for the type <code><font color="blue">std::complex&lt;double&gt;</font></code>:
<pre style='display:inline'><tt>
<b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font>
    <b><font color="#000000">CPPAD_NUMERIC_LIMITS</font></b><font color="#990000">(</font><font color="#009900">double</font><font color="#990000">,</font> std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;)</font>
<font color="#FF0000">}</font>
</tt></pre>
<br>
<b><big><a name="to_string" id="to_string">to_string</a></big></b>
<br>
The following defines the function CppAD <a href="to_string.htm" target="_top"><span style='white-space: nowrap'>to_string</span></a>

for the type <code><font color="blue">std::complex&lt;double&gt;</font></code>:
<pre style='display:inline'><tt>
<b><font color="#0000FF">namespace</font></b> CppAD <font color="#FF0000">{</font>
    <b><font color="#000000">CPPAD_TO_STRING</font></b><font color="#990000">(</font>std<font color="#990000">::</font>complex<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;)</font>
<font color="#FF0000">}</font>
</tt></pre>

<hr>Input File: include/cppad/core/base_complex.hpp

</body>
</html>
