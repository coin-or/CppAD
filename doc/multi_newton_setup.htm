<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Set Up Multi-Threaded Newton Method</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Set Up Multi-Threaded Newton Method">
<meta name="keywords" id="keywords" content=" set up multi-threaded newton method syntax purpose thread num_sub xlow xup epsilon max_itr num_threads source ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_multi_newton_setup_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="multi_newton_common.htm" target="_top">Prev</a>
</td><td><a href="multi_newton_worker.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>multi_thread</option>
<option>thread_test.cpp</option>
<option>multi_newton.cpp</option>
<option>multi_newton_setup</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_multi_thread_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_thread_test.cpp_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_multi_newton.cpp_htm.js'></script>
</td>
<td>multi_newton_setup</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Thread</option>
<option>num_sub</option>
<option>xlow</option>
<option>xup</option>
<option>epsilon</option>
<option>max_itr</option>
<option>num_threads</option>
<option>Source</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@<b>This is old CppAD documentation:</b> Here is a link to its
<a href="http://coin-or.github.io/CppAD" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Set Up Multi-Threaded Newton Method</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ok</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;multi_newton_setup(<br>
&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>num_sub</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xlow</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xup</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>max_itr</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
)</span></font></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
These routine does the setup for splitting finding all the zeros in an
interval into separate sub-intervals, one for each thread.

<br>
<br>
<b><big><a name="Thread" id="Thread">Thread</a></big></b>
<br>
It is assumed that this function is called by thread zero,
and all the other threads are blocked (waiting).

<br>
<br>
<b><big><a name="num_sub" id="num_sub">num_sub</a></big></b>
<br>
See 
<code><i><font color="black"><span style='white-space: nowrap'>num_sub</span></font></i></code>
 in <a href="multi_newton_run.htm#num_sub" target="_top"><span style='white-space: nowrap'>multi_newton_run</span></a>
.

<br>
<br>
<b><big><a name="xlow" id="xlow">xlow</a></big></b>
<br>
See 
<code><i><font color="black"><span style='white-space: nowrap'>xlow</span></font></i></code>
 in <a href="multi_newton_run.htm#xlow" target="_top"><span style='white-space: nowrap'>multi_newton_run</span></a>
.

<br>
<br>
<b><big><a name="xup" id="xup">xup</a></big></b>
<br>
See 
<code><i><font color="black"><span style='white-space: nowrap'>xup</span></font></i></code>
 in <a href="multi_newton_run.htm#xup" target="_top"><span style='white-space: nowrap'>multi_newton_run</span></a>
.

<br>
<br>
<b><big><a name="epsilon" id="epsilon">epsilon</a></big></b>
<br>
See 
<code><i><font color="black"><span style='white-space: nowrap'>epsilon</span></font></i></code>
 in <a href="multi_newton_run.htm#epsilon" target="_top"><span style='white-space: nowrap'>multi_newton_run</span></a>
.

<br>
<br>
<b><big><a name="max_itr" id="max_itr">max_itr</a></big></b>
<br>
See 
<code><i><font color="black"><span style='white-space: nowrap'>max_itr</span></font></i></code>
 in <a href="multi_newton_run.htm#max_itr" target="_top"><span style='white-space: nowrap'>multi_newton_run</span></a>
.

<br>
<br>
<b><big><a name="num_threads" id="num_threads">num_threads</a></big></b>
<br>
See 
<code><i><font color="black"><span style='white-space: nowrap'>num_threads</span></font></i></code>
 in
<a href="multi_newton_run.htm#num_threads" target="_top"><span style='white-space: nowrap'>multi_newton_run</span></a>
.

<br>
<br>
<b><big><a name="Source" id="Source">Source</a></big></b>

<pre><tt>
<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
<font color="#009900">bool</font> <b><font color="#000000">multi_newton_setup</font></b><font color="#990000">(</font>
    <font color="#008080">size_t</font> num_sub                              <font color="#990000">,</font>
    <font color="#009900">double</font> xlow                                 <font color="#990000">,</font>
    <font color="#009900">double</font> xup                                  <font color="#990000">,</font>
    <font color="#009900">double</font> epsilon                              <font color="#990000">,</font>
    <font color="#008080">size_t</font> max_itr                              <font color="#990000">,</font>
    <font color="#008080">size_t</font> num_threads                          <font color="#990000">)</font>
<font color="#FF0000">{</font>
    num_threads  <font color="#990000">=</font> std<font color="#990000">::</font><b><font color="#000000">max</font></b><font color="#990000">(</font>num_threads_<font color="#990000">,</font> <b><font color="#000000">size_t</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">));</font>
    <font color="#009900">bool</font> ok      <font color="#990000">=</font> num_threads <font color="#990000">==</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">num_threads</font></b><font color="#990000">();</font>
    ok          <font color="#990000">&amp;=</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">thread_num</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>

    <i><font color="#9A1900">// inputs that are same for all threads</font></i>
    epsilon_ <font color="#990000">=</font> epsilon<font color="#990000">;</font>
    max_itr_ <font color="#990000">=</font> max_itr<font color="#990000">;</font>

    <i><font color="#9A1900">// resize the work vector to accomidate the number of threads</font></i>
    ok <font color="#990000">&amp;=</font> work_all_<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
    work_all_<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font>num_threads<font color="#990000">);</font>

    <i><font color="#9A1900">// length of each sub interval</font></i>
    sub_length_ <font color="#990000">=</font> <font color="#990000">(</font>xup <font color="#990000">-</font> xlow<font color="#990000">)</font> <font color="#990000">/</font> <font color="#009900">double</font><font color="#990000">(</font>num_sub<font color="#990000">);</font>

    <i><font color="#9A1900">// determine values that are specific to each thread</font></i>
    <font color="#008080">size_t</font> num_min   <font color="#990000">=</font> num_sub <font color="#990000">/</font> num_threads<font color="#990000">;</font> <i><font color="#9A1900">// minimum num_sub</font></i>
    <font color="#008080">size_t</font> num_more  <font color="#990000">=</font> num_sub <font color="#990000">%</font> num_threads<font color="#990000">;</font> <i><font color="#9A1900">// number that have one more</font></i>
    <font color="#008080">size_t</font> sum_num   <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>  <i><font color="#9A1900">// sum with respect to thread of num_sub</font></i>
    <font color="#008080">size_t</font> thread_num<font color="#990000">,</font> num_sub_thread<font color="#990000">;</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>thread_num <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> thread_num <font color="#990000">&lt;</font> num_threads<font color="#990000">;</font> thread_num<font color="#990000">++)</font>
    <font color="#FF0000">{</font>
<b><font color="#000080"># if</font></b>  USE_THREAD_ALLOC_FOR_WORK_ALL
        <i><font color="#9A1900">// allocate separate memory for this thread to avoid false sharing</font></i>
        <font color="#008080">size_t</font> <b><font color="#000000">min_bytes</font></b><font color="#990000">(</font><b><font color="#0000FF">sizeof</font></b><font color="#990000">(</font>work_one_t<font color="#990000">)),</font> cap_bytes<font color="#990000">;</font>
        <font color="#009900">void</font><font color="#990000">*</font> v_ptr <font color="#990000">=</font> thread_alloc<font color="#990000">::</font><b><font color="#000000">get_memory</font></b><font color="#990000">(</font>min_bytes<font color="#990000">,</font> cap_bytes<font color="#990000">);</font>
        work_all_<font color="#990000">[</font>thread_num<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">static_cast</font></b><font color="#990000">&lt;</font>work_one_t<font color="#990000">*&gt;(</font>v_ptr<font color="#990000">);</font>

        <i><font color="#9A1900">// thread_alloc is a raw memory allocator; i.e., it does not call</font></i>
        <i><font color="#9A1900">// the constructor for the objects it creates. The vector</font></i>
        <i><font color="#9A1900">// class requires it's constructor to be called so we do it here</font></i>
        <b><font color="#0000FF">new</font></b><font color="#990000">(&amp;</font> <font color="#990000">(</font>work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>x<font color="#990000">)</font> <font color="#990000">)</font> vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;();</font>
<b><font color="#000080"># else</font></b>
        work_all_<font color="#990000">[</font>thread_num<font color="#990000">]</font> <font color="#990000">=</font> <b><font color="#0000FF">new</font></b> work_one_t<font color="#990000">;</font>
<b><font color="#000080"># endif</font></b>

        <i><font color="#9A1900">// number of sub-intervalse for this thread</font></i>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> thread_num <font color="#990000">&lt;</font> num_more  <font color="#990000">)</font>
            num_sub_thread <font color="#990000">=</font> num_min <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">;</font>
        <b><font color="#0000FF">else</font></b>
            num_sub_thread <font color="#990000">=</font> num_min<font color="#990000">;</font>

        <i><font color="#9A1900">// when thread_num == 0, xlow_thread == xlow</font></i>
        <font color="#009900">double</font> xlow_thread <font color="#990000">=</font> xlow <font color="#990000">+</font> <font color="#009900">double</font><font color="#990000">(</font>sum_num<font color="#990000">)</font> <font color="#990000">*</font> sub_length_<font color="#990000">;</font>

        <i><font color="#9A1900">// when thread_num == num_threads - 1, xup_thread = xup</font></i>
        <font color="#009900">double</font> xup_thread <font color="#990000">=</font>
            xlow <font color="#990000">+</font> <font color="#009900">double</font><font color="#990000">(</font>sum_num <font color="#990000">+</font> num_sub_thread<font color="#990000">)</font> <font color="#990000">*</font> sub_length_<font color="#990000">;</font>
        <b><font color="#0000FF">if</font></b><font color="#990000">(</font> thread_num <font color="#990000">==</font> num_threads <font color="#990000">-</font> <font color="#993399">1</font> <font color="#990000">)</font>
            xup_thread <font color="#990000">=</font> xup<font color="#990000">;</font>

        <i><font color="#9A1900">// update sum_num for next time through loop</font></i>
        sum_num <font color="#990000">+=</font> num_sub_thread<font color="#990000">;</font>

        <i><font color="#9A1900">// input information specific to this thread</font></i>
        work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>num_sub <font color="#990000">=</font> num_sub_thread<font color="#990000">;</font>
        work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>xlow    <font color="#990000">=</font> xlow_thread<font color="#990000">;</font>
        work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>xup     <font color="#990000">=</font> xup_thread<font color="#990000">;</font>
        ok <font color="#990000">&amp;=</font> work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>

        <i><font color="#9A1900">// in case this thread does not get called</font></i>
        work_all_<font color="#990000">[</font>thread_num<font color="#990000">]-&gt;</font>ok <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
    <font color="#FF0000">}</font>
    ok <font color="#990000">&amp;=</font> sum_num <font color="#990000">==</font> num_sub<font color="#990000">;</font>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/multi_thread/multi_newton.cpp

</body>
</html>
