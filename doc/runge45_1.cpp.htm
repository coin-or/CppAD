<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Runge45: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Runge45: Example and Test">
<meta name="keywords" id="keywords" content=" runge45: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_runge45_1.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://coin-or.github.io/CppAD" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="runge45.htm" target="_top">Prev</a>
</td><td><a href="runge_45.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>utility</option>
<option>Runge45</option>
<option>runge45_1.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_utility_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_runge45_htm.js'></script>
</td>
<td>runge45_1.cpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\W}[1]{ \; #1 \; }
\newcommand{\R}[1]{ {\rm #1} }
\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\D}[2]{ \frac{\partial #1}{\partial #2} }
\newcommand{\DD}[3]{ \frac{\partial^2 #1}{\partial #2 \partial #3} }
\newcommand{\Dpow}[2]{ \frac{\partial^{#1}}{\partial  {#2}^{#1}} }
\newcommand{\dpow}[2]{ \frac{ {\rm d}^{#1}}{{\rm d}\, {#2}^{#1}} }@)@



<b>This is cppad-20221105 documentation</b>. Here is a link to its
<a href="https://cppad.readthedocs.io" target="_top"><span style='white-space: nowrap'>current&nbsp;documentation</span></a>
.

<center><b><big><big>Runge45: Example and Test</big></big></b></center>
Define
<small>@(@
X : \B{R} \rightarrow \B{R}^n
@)@</small> by
<small>@[@

    X_i (t) =  t^{i+1}

@]@</small>
for <small>@(@
i = 1 , \ldots , n-1
@)@</small>.
It follows that
<small>@[@

\begin{array}{rclr}
X_i(0)       & = & 0                           & {\rm for \; all \;} i \\
X_i ' (t)  & = & 1                             & {\rm if \;} i = 0      \\
X_i '(t)   & = & (i+1) t^i = (i+1) X_{i-1} (t) & {\rm if \;} i > 0
\end{array}

@]@</small>
The example tests Runge45 using the relations above:

<pre><tt>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cstddef&gt;</font>                 <i><font color="#9A1900">// for size_t</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/utility/near_equal.hpp&gt;</font>    <i><font color="#9A1900">// for CppAD::NearEqual</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/utility/vector.hpp&gt;</font>        <i><font color="#9A1900">// for CppAD::vector</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/utility/runge_45.hpp&gt;</font>      <i><font color="#9A1900">// for CppAD::Runge45</font></i>

<i><font color="#9A1900">// Runge45 requires fabs to be defined (not std::fabs)</font></i>
<i><font color="#9A1900">// &lt;cppad/cppad.hpp&gt; defines this for doubles, but runge_45.hpp does not.</font></i>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;math.h&gt;</font>      <i><font color="#9A1900">// for fabs without std in front</font></i>

<b><font color="#0000FF">namespace</font></b> <font color="#FF0000">{</font>
    <b><font color="#0000FF">class</font></b> <font color="#008080">Fun</font> <font color="#FF0000">{</font>
    <b><font color="#0000FF">public</font></b><font color="#990000">:</font>
        <i><font color="#9A1900">// constructor</font></i>
        <b><font color="#000000">Fun</font></b><font color="#990000">(</font><font color="#009900">bool</font> use_x_<font color="#990000">)</font> <font color="#990000">:</font> <b><font color="#000000">use_x</font></b><font color="#990000">(</font>use_x_<font color="#990000">)</font>
        <font color="#FF0000">{</font> <font color="#FF0000">}</font>

        <i><font color="#9A1900">// set f = x'(t)</font></i>
        <font color="#009900">void</font> <b><font color="#000000">Ode</font></b><font color="#990000">(</font>
            <b><font color="#0000FF">const</font></b> <font color="#009900">double</font>                <font color="#990000">&amp;</font>t<font color="#990000">,</font>
            <b><font color="#0000FF">const</font></b> CppAD<font color="#990000">::</font><font color="#008080">vector&lt;double&gt;</font> <font color="#990000">&amp;</font>x<font color="#990000">,</font>
            CppAD<font color="#990000">::</font><font color="#008080">vector&lt;double&gt;</font>       <font color="#990000">&amp;</font>f<font color="#990000">)</font>
        <font color="#FF0000">{</font>   <font color="#008080">size_t</font> n  <font color="#990000">=</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
            <font color="#009900">double</font> ti <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
            f<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>      <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">.;</font>
            <font color="#008080">size_t</font> i<font color="#990000">;</font>
            <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">;</font> i<font color="#990000">++)</font>
            <font color="#FF0000">{</font>   ti <font color="#990000">*=</font> t<font color="#990000">;</font>
                <b><font color="#0000FF">if</font></b><font color="#990000">(</font> use_x <font color="#990000">)</font>
                    f<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>i<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">*</font> x<font color="#990000">[</font>i<font color="#990000">-</font><font color="#993399">1</font><font color="#990000">];</font>
                <b><font color="#0000FF">else</font></b>
                    f<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#009900">double</font><font color="#990000">(</font>i<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">*</font> ti<font color="#990000">;</font>
            <font color="#FF0000">}</font>
        <font color="#FF0000">}</font>
    <b><font color="#0000FF">private</font></b><font color="#990000">:</font>
        <b><font color="#0000FF">const</font></b> <font color="#009900">bool</font> use_x<font color="#990000">;</font>

    <font color="#FF0000">}</font><font color="#990000">;</font>
<font color="#FF0000">}</font>

<font color="#009900">bool</font> <b><font color="#000000">runge_45_1</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font>
<font color="#FF0000">{</font>   <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>     <i><font color="#9A1900">// initial return value</font></i>
    <font color="#008080">size_t</font> i<font color="#990000">;</font>           <i><font color="#9A1900">// temporary indices</font></i>

    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>NearEqual<font color="#990000">;</font>
    <font color="#009900">double</font> eps99 <font color="#990000">=</font> <font color="#993399">99.0</font> <font color="#990000">*</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>

    <font color="#008080">size_t</font>  n <font color="#990000">=</font> <font color="#993399">5</font><font color="#990000">;</font>      <i><font color="#9A1900">// number components in X(t) and order of method</font></i>
    <font color="#008080">size_t</font>  M <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>      <i><font color="#9A1900">// number of Runge45 steps in [ti, tf]</font></i>
    <font color="#009900">double</font> ti <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>     <i><font color="#9A1900">// initial time</font></i>
    <font color="#009900">double</font> tf <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">.;</font>     <i><font color="#9A1900">// final time</font></i>

    <i><font color="#9A1900">// xi = X(0)</font></i>
    CppAD<font color="#990000">::</font><font color="#008080">vector&lt;double&gt;</font> <b><font color="#000000">xi</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font>n<font color="#990000">;</font> i<font color="#990000">++)</font>
        xi<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">.;</font>

    <font color="#008080">size_t</font> use_x<font color="#990000">;</font>
    <b><font color="#0000FF">for</font></b><font color="#990000">(</font> use_x <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> use_x <font color="#990000">&lt;</font> <font color="#993399">2</font><font color="#990000">;</font> use_x<font color="#990000">++)</font>
    <font color="#FF0000">{</font>   <i><font color="#9A1900">// function object depends on value of use_x</font></i>
        <font color="#008080">Fun</font> <b><font color="#000000">F</font></b><font color="#990000">(</font>use_x <font color="#990000">&gt;</font> <font color="#993399">0</font><font color="#990000">);</font>

        <i><font color="#9A1900">// compute Runge45 approximation for X(tf)</font></i>
        CppAD<font color="#990000">::</font><font color="#008080">vector&lt;double&gt;</font> <b><font color="#000000">xf</font></b><font color="#990000">(</font>n<font color="#990000">),</font> <b><font color="#000000">e</font></b><font color="#990000">(</font>n<font color="#990000">);</font>
        xf <font color="#990000">=</font> CppAD<font color="#990000">::</font><b><font color="#000000">Runge45</font></b><font color="#990000">(</font>F<font color="#990000">,</font> M<font color="#990000">,</font> ti<font color="#990000">,</font> tf<font color="#990000">,</font> xi<font color="#990000">,</font> e<font color="#990000">);</font>

        <font color="#009900">double</font> check <font color="#990000">=</font> tf<font color="#990000">;</font>
        <b><font color="#0000FF">for</font></b><font color="#990000">(</font>i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n<font color="#990000">;</font> i<font color="#990000">++)</font>
        <font color="#FF0000">{</font>   <i><font color="#9A1900">// check that error is always positive</font></i>
            ok    <font color="#990000">&amp;=</font> <font color="#990000">(</font>e<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">&gt;=</font> <font color="#993399">0</font><font color="#990000">.);</font>
            <i><font color="#9A1900">// 5th order method is exact for i &lt; 5</font></i>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> i <font color="#990000">&lt;</font> <font color="#993399">5</font> <font color="#990000">)</font> ok <font color="#990000">&amp;=</font>
                <b><font color="#000000">NearEqual</font></b><font color="#990000">(</font>xf<font color="#990000">[</font>i<font color="#990000">],</font> check<font color="#990000">,</font> eps99<font color="#990000">,</font> eps99<font color="#990000">);</font>
            <i><font color="#9A1900">// 4th order method is exact for i &lt; 4</font></i>
            <b><font color="#0000FF">if</font></b><font color="#990000">(</font> i <font color="#990000">&lt;</font> <font color="#993399">4</font> <font color="#990000">)</font>
                ok <font color="#990000">&amp;=</font> <font color="#990000">(</font>e<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">&lt;=</font> eps99<font color="#990000">);</font>

            <i><font color="#9A1900">// check value for next i</font></i>
            check <font color="#990000">*=</font> tf<font color="#990000">;</font>
        <font color="#FF0000">}</font>
    <font color="#FF0000">}</font>
    <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font>
</tt></pre>

<hr>Input File: example/utility/runge45_1.cpp

</body>
</html>
