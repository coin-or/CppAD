{xrst_spell_off}
{xrst_comment
   SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-or-later
   SPDX-FileCopyrightText: Bradley M. Bell <bradbell@seanet.com>
   SPDX-FileContributor: 2003-25 Bradley M. Bell
}
{xrst_spell_on}

{xrst_comment: This is an xrst template file.

The content of this file is all below its first header:

It has the following xrst_template replacements:
@op_info_t@ : is the type for this optimization operator information class
@=========@ : is rst underlining with = and same length as op_info_t.
@op_info@   : name in italic (* surrounding name) used for a op_info_t object
}

Class Requirements for Optimization
***********************************

Syntax
======
| |tab| *n_op* = @op_info@ . *n_op* ( )
| |tab| *con_all* = @op_info@ . *con_all* ( )
| |tab| @op_info@ . ``get_`` (
| |tab| |tab| *i_op* ,
| |tab| |tab| *op_enum*,
| |tab| |tab| *is_constant*
| |tab| |tab| *is_commutative*
| |tab| |tab| *arg_one*
| |tab| |tab| *is_var_one*
| |tab| )

Types
=====
Each of the types listed below are defined in the @op_info_t@ class;
i.e. if *type* is one of the types below then ``@op_info_t@`` :: *type* is
defined as described below.
The vector types must support indexing
and the ``size`` and ``resize`` member functions.

index_t
-------
is the type used for indices in the tape.

op_enum_t
---------
is the enum type that separates the different operators.
We use operator to denote an enum type together with its arguments.

vec_index_t
-----------
is a vector type with ``index_t`` elements.

vec_bool_t
----------
is a vector type with ``bool`` elements.

value_t
-------
is the type of the values that these operators compute with.
This type does not matter when *is_constant* is always false.

vec_value_t
-----------
is a vector type with ``value_t`` elements.

n_op
====
is an ``index_t`` equal to the number of operators in the tape.

con_all
=======
is a ``const vec_value_t&`` containing the constants used by operators
in the tape.
This vector is only used when *is_constant* is true.
If *is_constant* is always false, it should be the empty vector.

get
===

i_op
----
is an ``index_t`` that identifies this operator, *i_op* < *n_op* .
Note that this is the only by value arguments to ``get`` .
The rest of the arguments to this function are by reference.

op_enum
-------
is an ``op_enum_t&`` that is set to the enum value for this operator.

is_constant
-----------
is a ``bool&`` that is set to true (false) if this is (is not)
a constant operator.
A constant operator must have *arg_one* . ``size`` ()  equal to one and
*is_var_one* [0] equal to false.
The value of the constant is::

   con_all[ arg_one[0] ]

is_commutative
--------------
is a ``bool&`` that is set to true (false) if this is (is not)
a commutative operator.
A commutative operator must have *arg_one* . ``size`` ()  equal to two.

arg_one
-------
is a ``vec_index_t&`` that is set to the arguments for this operator;
i.e., *arg_one*\ . ``size`` () is the number arguments and
*arg_one*\ [ *k* ] is the k-th argument.

is_var_one
----------
is a ``vec_bool_t&`` that identifies which argument are variable indices.
The value *is_var_one*\ . ``size`` () is the number arguments and
*is_var_one*\ [ *k* ] is true (false) if the k-th argument
is (is not) a variable index.
