{xrst_spell_off}
{xrst_comment
   SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-or-later
   SPDX-FileCopyrightText: Bradley M. Bell <bradbell@seanet.com>
   SPDX-FileContributor: 2003-25 Bradley M. Bell
}
{xrst_spell_on}

{xrst_comment: This is an xrst template file.

The content of this file is all below its first header:

It has the following xrst_template replacements:
@op_info_t@ : is the type for this optimization operator information class
@=========@ : is rst underlining with = and same length as op_info_t.
@op_info@   : name in italic (* surrounding name) used for a op_info_t object
}

Class Requirements for Optimization
***********************************

Syntax
======
| |tab| *n_op* = @op_info@ . *n_op* ( )
| |tab| @op_info@ . ``get_`` (
| |tab| |tab| *i_op* ,
| |tab| |tab| *op_enum*,
| |tab| |tab| *commutative*,
| |tab| |tab| *arg_one*
| |tab| |tab| *is_res_one*
| |tab| )

Types
=====
i.e. if *type* is one of the types below then ``@op_info_t@`` :: *type* is
defined as described below.

op_enum_t
---------
This type must be defined in the @op_info_t@ class.
It is the enum type that separates the different operators.
We use operator to denote an enum type together with its arguments.

vec_bool_t
----------
This type must be defined in the @op_info_t@ class.
It is a vector type with ``bool`` elements.
This vector must support indexing
and the ``size`` and ``resize`` member functions.

n_op
====
is an ``addr_t`` equal to the number of operators in the tape.

get
===

i_op
----
is an ``addr_t`` index that identifies this operator, *i_op* < *n_op* .
Note that this is the only by value arguments to ``get`` .
The rest of the arguments to this function are by reference.

op_enum
-------
is an ``op_enum_t&`` that is set to the enum value for this operator.

commutative
-----------
is a ``bool&`` that is set to true (false) if the operator is commutative
(not commutative); i.e., it has two operands and switching the order
of the operands does not affect the result.

arg_one
-------
is a :ref:`const_subvector-name` or :ref:`mutable_subvector-name`
that contains the arguments for this operator;
i.e., *arg_one*\ . ``size`` () is the number arguments and
*arg_one*\ [ *k* ] is the k-th argument.


is_res_one
----------
is a ``vec_bool_t&`` that identifies which argument are result indices.
(Results are usually the result of operators and if operators are replaced,
the corresponding result indices get replaced.)
The value *is_res_one*\ . ``size`` () is the number arguments and
*is_res_one*\ [ *k* ] is true (false) if the k-th argument
is (is not) a result index.
