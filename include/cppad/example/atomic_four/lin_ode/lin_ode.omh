/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-22 Bradley M. Bell

CppAD is distributed under the terms of the
             Eclipse Public License Version 2.0.

This Source Code may also be made available under the following
Secondary License when the conditions for such availability set forth
in the Eclipse Public License, Version 2.0 are satisfied:
      GNU General Public License, Version 2.0 or later.
---------------------------------------------------------------------------- */
$begin atomic_four_lin_ode$$
$spell
    nr
    nc
    mul
    lin
    Rosen
    Simpson
    nnz
    vk
    CppAD
$$

$nospell
$bold This is old CppAD documentation:$$ Here is a link to its
$href%http://coin-or.github.io/CppAD%current documentation%$$.
$$
$section
    Atomic First Order Linear ODE Method: Example Implementation
$$

$head Syntax$$
$codei%atomic_lin_ode %ode%(%name%)
%$$
$icode%call_id% = %lin_ode%.set(%r%, %step%, %pattern%, %transpose%)
%$$
$icode%lin_ode%.get(%call_id%, %r%, %step%, %pattern%, %transpose%)
%$$
$icode%lin_ode%.base_solver(%r%, %step%, %pattern%, %transpose%, %x%, %y%)
%$$
$icode%lin_ode%(%call_id%, %ax%, %ay%)
%$$

$head z(t, x)$$
Construct an atomic operation that computes an
approximate solution of the first order linear initial value ODE
$latex \[
    z_t (t, x) = A(x) z(t, x) \W{,} z(0, x) = b(x)
\] $$
where
$latex z : \B{R} \times \B{R}^n \rightarrow \B{R}^m$$,
$latex A : \B{R}^n \rightarrow \B{R}^{m \times m}$$,
$latex b : \B{R}^n \rightarrow  \B{R}^m$$,
and the subscript $latex t$$ denotes partial differentiation w.r.t $latex t$$.

$head call_id$$
This is a return value (argument) for the $code set$$ ($code get$$) routine.

$head r$$
This is the value of $icode t$$ at which we are approximating $latex z(t, x)$$.
This is a argument (return value) for the $code set$$ ($code get$$) routine.

$head step$$
This is a positive maximum step size to use when solving the ODE.

$head pattern$$
This is a sparsity pattern.
This is a argument (return value) for the $code set$$ ($code get$$) routine.

$subhead nnz$$
We use $icode nnz$$ to denote $icode%pattern%.nnz()%$$.

$subhead row$$
We use $icode row$$ to denote $icode%pattern%.row()%$$.

$subhead col$$
We use $icode col$$ to denote $icode%pattern%.col()%$$.

$head transpose$$
If $icode transpose$$ is true (false) the sparsity pattern is for
$latex A(x)^\R{T}$$ ($latex A(x)$$).
This is a argument (return value) for the $code set$$ ($code get$$) routine.

$head x$$
We use $icode x$$ to denote the argument to the atomic function.
In the call to $code base_solver$$ it is a CppAD vector with elements
of type $icode Base$$.

$subhead n$$
The size of the vector $icode x$$ is
$latex n = nnz + m$$.

$subhead A(x)$$
This matrix stored in the same order as $icode pattern$$
at the beginning of the vector $icode x$$.
To be specific,
if $icode transpose$$ is true (false),
for $icode%k% = 0, %...%, %nnz%-1%$$,
$latex A_{j,i} (x)$$ ( $latex A_{i,j} (x)$$ ) is equal to
$latex x[k]$$ where $icode%i% = %row%[%k%]%$$ and  $icode%j% = %col%[%k%]%$$.

$subhead b(x)$$
This vector is stored at the end of
$icode x$$; i.e. its $th j$$ element is
$latex b_j (x) = x[ nnz + j ]$$

$head y(x)$$
We use $latex y(x)$$ to denote the final value of the ODE; i.e.,
$latex y(x) = z(r, x)$$.

$subhead m$$
We use $icode m$$ to denote the size of the vector $icode y(x)$$.
This is the number of equations in the ODE.

$subhead y$$
In the call to $code base_solver$$,
$icode y$$ is a CppAD vector with elements of type $icode Base$$.
The input value of its elements does not matter.
Upon return it contains the value $latex y(x)$$.

$head ax$$
In the call to $icode lin_ode$$, $icode ax$$
is a simple vector with elements of type $codei%AD<%Base%>%$$.
The elements of $icode ax$$ have the same meaning as $icode x$$.

$head ay$$
In the call to $icode lin_ode$$, $icode ay$$
is a simple vector with elements of type $codei%AD<%Base%>%$$.
The input value of its elements does not matter.
Upon return it represents the solution $icode%y%(%ax%)%$$.

$head vk(x)$$
We sometimes use the following representation for $latex y(x)$$:
$latex \[
y(x) = \exp [ r A(x) ] b(x) = \sum_{k=0}^\infty \frac{r^k}{k!} A(x)^k b(x)
\] $$
Define $latex v^0 (x) = b(x)$$ and for $latex k = 1, 2, \ldots$$,
$latex v^k (x) = (r / k) A(x) v^{k-1} (x)$$.
Using this notation,
$latex \[
y(x) = \sum_{k=0}^\infty v^k (x)
\] $$


$head Approximations$$

$subhead Rosen34$$
The $cref/Rosen34/atomic_four_lin_ode_base_solver.hpp/Rosen34/$$ routine
is used to approximate the solution of the ODE.
Any initial value ODE solver can be used for this purpose.

$subhead Simpson's Rule$$
$cref/Simpson's rule/atomic_four_lin_ode_reverse.hpp/Simpson's Rule/$$
is used to approximate the integral
$latex \[
    \int_0^r \lambda_i (t, x) z_j (r, x) \R{d} t
\] $$
Any other approximation for this integral can be used.

$childtable%
    include/cppad/example/atomic_four/lin_ode/implement.omh
    %example/atomic_four/lin_ode/forward.cpp
    %example/atomic_four/lin_ode/reverse.cpp
    %example/atomic_four/lin_ode/sparsity.cpp
    %example/atomic_four/lin_ode/rev_depend.cpp
%$$

$end
