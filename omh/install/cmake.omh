/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-22 Bradley M. Bell

  CppAD is distributed under the terms of the
               Eclipse Public License Version 2.0.

  This Source Code may also be made available under the following
  Secondary License when the conditions for such availability set forth
  in the Eclipse Public License, Version 2.0 are satisfied:
        GNU General Public License, Version 2.0 or later.
-------------------------------------------------------------------------- */

$begin cmake$$
$escape $$
$spell
    bitwise
    Wno
    github
    Rel
    cppadcg
    msys
    Hsc
    autotools
    mkdir
    vcvarsall
    cstdint
    uint
    pkgconfig
    ctor
    op
    arg
    sizeof
    testvector
    std
    Wshadow
    namespace
    adouble
    colpack
    dir
    makefile
    usr
    hpp
    xml
    ipopt
    libcppad
    CppAD
    txt
    Microsoft
    Makefiles
    cmake
    Dcmake
    cppad
    adolc
    boost
    eigen
    fadbad
    sacado
    datadir
    docdir
    includedirs
    libdirs
    cxx
    max num
    postfix
    id
    addr
    grep
    VecAD
    minsys
    mingw
    pacman
    gcc
    yyyymmdd
    yyyy
    mm
    dd
    dylib
    gprof
    sed
    rmdir
    nmake
    exe
    config
$$

$nospell
$bold This is old CppAD documentation:$$ Here is a link to its
$href%http://coin-or.github.io/CppAD%current documentation%$$.
$$
$section Using CMake to Configure CppAD$$


$head The CMake Program$$
The
$href%http://www.cmake.org/cmake/help/install.html%cmake%$$
program enables one to create a single set of scripts,
called $code CMakeLists.txt$$,
that can be used to test and install a program on Unix, Microsoft, or
Apple operating systems.
For example, one can use it to automatically generate Microsoft project files.

$head Build Directory$$
Create $code build$$, a subdirectory of the
$cref/distribution directory/download/Distribution Directory/$$,
change into the $code build$$.

$head CMake Command$$

$subhead Simple$$
The simplest version of the $code cmake$$ command is
$codei%
    cmake ..
%$$
This assumes that you are starting in the $code build$$ directory
(so that $code ..$$ refers to the distribution directory).
The command also assumes that $code cmake$$ is in your execution
path with version greater than or equal 2.8.
If not, you can put the path to the version of $code cmake$$
in font the command.
It is suggested that you should start with the simple version of the
cmake command above and then add options one at a time.

$subhead Warning$$
Version 3.10.2 of cmake will generates the following warning if boost
is not present your system:
$codei%
CMake Warning at /usr/share/cmake-3.10/Modules/FindBoost.cmake:567 (message):
  Imported targets and dependency information not available for Boost version
  (all versions older than 1.33)
  %...%
%$$
This is not a problem because CppAD will automatically exclude the
examples and tests that use boost.
Newer version of cmake; e.g., 3.13.4, do not generate this warning
(when boost is not present on your system).

$subhead Options$$
The full version of the command, with all its optional arguments is:
$codei%
cmake %%                                                                     \
    -D CMAKE_VERBOSE_MAKEFILE=%cmake_verbose_makefile%                       \
    -D CMAKE_BUILD_TYPE=%cmake_build_type%                                   \
    -G %generator%                                                           \
    \
    -D cppad_prefix=%cppad_prefix%                                           \
    -D cppad_postfix=%cppad_postfix%                                         \
    \
    -D cmake_install_includedirs=%cmake_install_includedirs%                 \
    -D cmake_install_libdirs=%cmake_install_libdirs%                         \
    \
    -D cmake_install_datadir=%cmake_install_datadir%                         \
    -D cmake_install_docdir=%cmake_install_docdir%                           \
    \
    -D cmake_defined_ok=%cmake_defined_ok%                                   \
    -D cmake_needs_dot_slash=%cmake_needs_dot_slash%                         \
    \
    -D include_adolc=%true_or_false%                                         \
    -D include_eigen=%true_or_false%                                         \
    -D include_ipopt=%true_or_false%                                         \
    -D include_cppadcg=%true_or_false%                                       \
    \
    -D eigen_prefix=%eigen_prefix%
    -D colpack_prefix=%colpack_prefix%                                       \
    -D fadbad_prefix=%fadbad_prefix%                                         \
    -D sacado_prefix=%sacado_prefix%                                         \
    \
    -D cppad_cxx_flags=%cppad_cxx_flags%                                     \
    -D cppad_profile_flag=%cppad_profile_flag%                               \
    -D cppad_testvector=%cppad_testvector%                                   \
    -D cppad_max_num_threads=%cppad_max_num_threads%                         \
    -D cppad_tape_id_type=%cppad_tape_id_type%                               \
    -D cppad_tape_addr_type=%cppad_tape_addr_type%                           \
    -D cppad_debug_which=%cppad_debug_which%                                 \
    \
    ..
%$$

$subhead msys2$$
The $href%https://www.msys2.org/%msys2%$$ system,
with $code mingw-64$$ and $code g++$$,
the following seems to work:
Use $code pacman$$ to install
$code make$$, $code gcc$$, and $code mingw-w64-x86_64-cmake$$.

$subhead Visual Studio$$
$list number$$
Launch the Visual Studio
$href%https://docs.microsoft.com/en-us/dotnet/framework/tools/developer-command-prompt-for-vs%
    developer command prompt
%$$
$lnext
Use the command
$codep
    where cmake.exe
$$
to see if $code cmake.exe$$ comes with your version of Visual Studio.
If not, download and install the win64-x64 version of
$href%https://cmake.org/download/%cmake%$$.
Make sure you select the box that adds $code cmake$$ to your execution path.
$lnext
In the command window, change into the directory where the cppad git
repository is located and run the following commands.
$srcfile%bin/build.bat%$$
$lend
Note that when using windows DLL's, CppAD builds a static version
of $code cppad_lib$$. There are problems using a DLL for $code cppad_lib$$
because Windows makes separate copies of static class member functions,
one for library and one for the rest of the program.


$subhead autotools$$
The autotools build with the Visual Studio compiler should work
with the following configure and test commands
$codep
    mkdir build
    cd build
    ../configure CC=cl CXX=cl CXX_FLAGS="-DEBUG"
    make test
$$
An optimized versions was tested using
$codep
    ../configure CXX=cl CC=cl CXX_FLAGS="-DNDEBUG -O2 -EHsc"
    make test
$$
The commands above need to be run a Dos window,
that has the $code vcvarsall.bat$$ settings,
extend path that includes the $code msys2$$ bin directory,
and was running the bash shell inside the Doc window.
It is highly recommended that you use the $code cmake$$ commands above,
an not $code ../configure$$, when building with Visual Studio.

$head make check$$
Important information about the CppAD configuration is output
by this command. If you have the $code grep$$ program,
and store the output in $code cmake.log$$, you can get a list of
all the test options with the command:
$codep
    grep 'make check' cmake.log
$$

$head cmake_verbose_makefile$$
This value should be either $code true$$ or $code false$$.
The default value, when it is not present, is $code NO$$.
If it is $code true$$, then the output of the $code make$$ commands
will include all of the files and flags used to run the compiler
and linker. This can be useful for seeing how to compile and link
your own applications.

$head cmake_build_type$$
This value should be one of the valid CMake build types; e.g.,
$code Debug$$,
$code Release$$,
$code RelWithDebInfo$$,
$code MinSizeRel$$.
If this value is specified,
$cref/cppad_debug_which/cmake/cppad_debug_which/$$
must not be the empty string.

$head cmake_needs_dot_slash$$
This value should be either $code true$$ or $code false$$.
The default value, when it is not present, is $code false$$.
If you get an error saying that an executable program could not be found,
try setting this to true.
CMake gets confused on some systems and needs $code ./$$ in front
of the name of the executable corresponding to a cmake
$code ADD_CUSTOM_COMMAND$$. For example, in the github actions version of
$href%https://www.msys2.org/docs/ci/%using msys2 in ci%$$.

$head generator$$
The CMake program is capable of generating different kinds of files.
Below is a table with a few of the possible files
$table
$icode generator$$ $cnext Description $rnext
$code "Unix Makefiles"$$   $cnext make files for unix operating system $rnext
$code "NMake Makefiles"$$  $cnext make files for Visual Studio
$tend
Other generator choices are available; see the cmake
$href%http://www.cmake.org/cmake/help/cmake2.6docs.html#section_Generators%
generators%$$ documentation.

$head cppad_prefix$$
This is the top level absolute path below which
all of the CppAD files are installed by the command
$codei%
    make install
%$$
For example,
if $icode cppad_prefix$$ is $code /usr$$,
$icode cmake_install_includedirs$$ is $code include$$, and
$icode cppad_postfix$$ is not specified,
the file $code cppad.hpp$$ is installed in the location
$codei%
    /usr/include/cppad/cppad.hpp
%$$
The default value for $icode cppad_prefix$$ is the value of
$icode CMAKE_INSTALL_PREFIX$$; see the cmake documentation.
(Before 2019-10-02 the default value was $code /usr$$; see
the heading 10-02 on $cref/whats_new_19/whats_new_19/10-02/$$.)

$head cppad_postfix$$
This is the bottom level relative path below which
all of the CppAD files are installed.
For example,
if $icode cppad_prefix$$ is $code /usr$$,
$icode cmake_install_includedirs$$ is $code include$$, and
$icode cppad_postfix$$ is $code coin-or$$,
the file $code cppad.hpp$$ is installed in the location
$codei%
    /usr/include/coin-or/cppad/cppad.hpp
%$$
The default value for $icode cppad_postfix$$ is empty; i.e,
there is no bottom level relative directory for the installed files.


$head cmake_install_includedirs$$
This is one directory, or a list of directories separated
by spaces or by semi-colons.
This first entry in the list is the middle level relative path below which
the CppAD include files are installed.
The entire list is used for searching for include files.
For example,
if $icode cppad_prefix$$ is $code /usr$$,
$icode cmake_install_includedirs$$ is $code include$$, and
$icode cppad_postfix$$ is not specified,
the file $code cppad.hpp$$ is installed in the location
$codei%
    /usr/include/cppad/cppad.hpp
%$$
The default value for this directory list is $code include$$.


$head cmake_install_libdirs$$
This is one directory, or a list of directories separated
by spaces or by semi-colons.
This first entry in the list is the middle level relative path below which
the CppAD library files are installed.
The entire list is used for searching for library files.
The default value for this directory list is $code lib$$.

$subhead cppad_lib$$
As an example of where the CppAD library is installed,
if $icode cppad_prefix$$ is $code /usr$$,
$icode cmake_install_libdirs$$ is $code lib$$,
$icode cppad_postfix$$ is not specified,
the CppAD library is installed in
$codei%
    /usr/lib/libcppad_lib.%ext%.%major%.%release%
%$$
Here $icode major$$ is the major library version number,
$icode release$$ is the release number for this version,
and $icode ext$$ is the extension for shared libraries on this system.
If $icode yyyymmdd$$ is the CppAD $cref/version/download/Version/$$ number,
the major CppAD library version number is
$codei%
    %major% = %dd% - 1 + 31 * ( %mm% - 1 + 12 * ( %yyyy% - 2019) )
%$$
If there is no $cref/release/download/Release/$$ for this version of CppAD,
the CppAD library is installed in
$codei%
    /usr/lib/libcppad_lib.%ext%.%major%
%$$
The Mac is special, $icode ext$$ is $code dylib$$ and comes
at the end of the file name for that system.

$head cmake_install_datadir$$
This is the middle level relative path below which
the CppAD data files are installed.
For example,
if $icode cppad_prefix$$ is $code /usr$$,
$icode cmake_install_datadir$$ is $code share$$, and
$icode cppad_postfix$$ is not specified,
the $cref pkgconfig$$ file $code cppad.pc$$ is installed in the location
$codei%
    /usr/share/pkgconfig/cppad.pc
%$$
The default value for $icode cmake_install_datadir$$ is $code share$$.

$head cmake_install_docdir$$
This is the middle level relative path below which
the CppAD documentation files are installed.
For example,
if $icode cppad_prefix$$ is $code /usr$$,
$icode cmake_install_docdir$$ is $code share/doc$$, and
$icode cppad_postfix$$ is not specified,
the file $code cppad.xml$$ is installed in the location
$codei%
    /usr/share/doc/cppad/cppad.xml
%$$
There is no default value for $icode cmake_install_docdir$$.
If it is not specified, the documentation files are not installed.

$head cmake_defined_ok$$
This must be true when running cmake with a non-empty
$code CMakeCache.txt$$ file.
If it is false, some checks will be made to make sure
certain variables are not defined twice.
The default value for $icode cmake_defined_ok$$ is true.


$head include_adolc$$
The $cref adolc$$ examples
will be compiled and tested if $code include_adolc=true$$
is in the command line.

$head include_eigen$$
The $cref eigen$$ examples
will be compiled and tested if $code include_eigen=true$$
is on the command line.
In addition, the $cref sparse2eigen$$ utility will be installed.

$head include_ipopt$$
The $cref ipopt$$ examples
will be compiled and tested if $code include_ipopt=true$$
is on the command line.
In addition, $cref ipopt_solve$$ and $cref cppad_ipopt_nlp$$
will be installed.

$head include_cppadcg$$
The $cref cppadcg$$ examples
will be compiled and tested if $code include_cppadcg=true$$
is on the command line.
$bold Warning$$ :
Do not use this option when installing cppad because
the cppadcg package depends on cppad and using this option
makes cppad depend on cppadcg.
This option, and the script $cref get_cppadcg.sh$$ are only intended
for testing purposes.

$head eigen_prefix$$
This specifies the $cref/eigen_prefix/eigen/eigen_prefix/$$.
It must not be set when $icode include_eigen$$ is true
(because $code pkg-config$$ will be used to determine this information).

$head package_prefix$$
Each of these packages do not have $code pkg-config$$ files
corresponding to optional CppAD examples.
If a prefix listed below is on the command line,
the corresponding examples will be compiled and run:
$table
$rref colpack_prefix$$
$rref fadbad_prefix$$
$rref sacado_prefix$$
$tend

$head cppad_cxx_flags$$
This specifies the compiler flags
that are used when compiling the CppAD examples, tests, and library.
This flags are in addition to the flags automatically generated by
cmake for debug and release build; i.e.,
$icode CMAKE_CXX_FLAGS_DEBUG$$ and $icode CMAKE_CXX_FLAGS_RELEASE$$.
The default value for these flags is the empty string $code ""$$.
These flags must be valid for the C++ compiler
on your system.
For example, if you are using $code g++$$ you could specify
$codep
    -D cppad_cxx_flags="-Wall -ansi -pedantic-errors -std=c++17 -Wshadow"
$$
$subhead C++17$$
In order for the compiler to take advantage of features that are in C++17
,but not in C++11, the $icode cppad_cxx_flags$$ must enable these features.

$subhead debug and release$$
The CppAD examples and tests decide which files to compile for debugging
and which to compile for release. Hence debug and release flags should
not be included in $icode cppad_cxx_flags$$.
See also the
$cref/CPPAD_DEBUG_AND_RELEASE
    /preprocessor
    /Documented Here
    /CPPAD_DEBUG_AND_RELEASE
/$$
compiler flag (which should not be included in $icode cppad_cxx_flags$$).

$subhead clang$$
Clang is giving warnings for bitwise operations with logical operands.
These operations are used by CppAD for speed because they do not require
branching which can slow down some processors. You can suppress these
warnings by including $code -Wno-bitwise-instead-of-logical$$
in $icode cppad_cxx_flags$$.

$head cppad_profile_flag$$
This specifies an addition compiler and link flag that is used
for $cref/profiling/speed_main/package/profile/$$ the speed tests.
A profile version of the speed test is only build when this argument
is present.
If this flag is specified, you can run the gnu profiler with the following
command:
$codei%
    cd build/speed/profile
    make check_speed_profile
    ./speed_profile %test seed option_list%
    gprof -b speed_profile | sed -f gprof.sed
%$$

$head cppad_testvector$$
See $tref cppad_testvector$$.

$head cppad_max_num_threads$$
The value $icode cppad_max_num_threads$$
must be greater than or equal to four; i.e.,
$icode%max_num_threads% >= 4%$$.
The current default value for $icode cppad_max_num_threads$$ is 48,
but it may change in future versions of CppAD.
The value $icode cppad_max_num_threads$$ in turn specifies
the default value for the preprocessor symbol
$cref/CPPAD_MAX_NUM_THREADS/multi_thread/CPPAD_MAX_NUM_THREADS/$$.

$head cppad_tape_id_type$$
The type $icode cppad_tape_id_type$$
is used for identifying different tapes.
The valid values for this type are
$code unsigned char$$,
$code unsigned short int$$,
$code unsigned int$$, and
$code size_t$$.
The smaller the value of $codei%sizeof(%cppad_tape_id_type%)%$$,
the less memory is used.
On the other hand, the value
$codei%
    std::numeric_limits<%cppad_tape_id_type%>::max()
%$$
must be larger than the maximum number of tapes used by one thread times
$cref/CPPAD_MAX_NUM_THREADS/multi_thread/CPPAD_MAX_NUM_THREADS/$$.

$subhead cstdint$$
If all of the following $code cstdint$$ types are defined,
they can also be used as the value of $icode cppad_tape_addr_type$$:
$code uint8_t$$,
$code uint16_t$$,
$code uint32_t$$,
$code uint64_t$$.

$head cppad_tape_addr_type$$
The type $icode cppad_tape_addr_type$$
is used for address in the AD recordings (tapes).
The valid values for this argument are
$code unsigned char$$,
$code unsigned short int$$,
$code unsigned int$$,
$code size_t$$.
The smaller the value of $codei%sizeof(%cppad_tape_addr_type%)%$$,
the less memory is used.
On the other hand, the value
$codei%
    std::numeric_limits<%cppad_tape_addr_type%>::max()
%$$
must be larger than any of the following:
$cref/size_op/fun_property/size_op/$$,
$cref/size_op_arg/fun_property/size_op_arg/$$,
$cref/size_par/fun_property/size_par/$$,
$cref/size_text/fun_property/size_text/$$,
$cref/size_VecAD/fun_property/size_VecAD/$$.

$subhead cstdint$$
If all of the following $code cstdint$$ types are defined,
they can also be used as the value of $icode cppad_tape_addr_type$$:
$code uint8_t$$,
$code uint16_t$$,
$code uint32_t$$,
$code uint64_t$$.

$head cppad_debug_which$$
All of the CppAD examples and test can optionally be tested
in debug or release mode (see exception below).
This option controls which mode is chosen for the corresponding files.
The value $icode cppad_debug_which$$ be one of the following:
$table
$icode cppad_debug_which$$ $cnext $icode CMAKE_BUILD_TYPE$$ $rnext
$code debug_all$$          $cnext $code Debug$$             $rnext
$code debug_none$$         $cnext $code Release$$           $rnext
$code debug_even$$         $cnext not specified             $rnext
$code debug_odd$$          $cnext not specified             $rnext
empty string               $cnext not changed               $rnext
$tend
If $code CMAKE_BUILD_TYPE$$ is specified on the command line,
then $icode cppad_debug_which$$ must be the empty string (its default value).

$children%
    bin/get_optional.sh%
    omh/install/adolc.omh%
    omh/install/eigen.omh%
    omh/install/cppadcg.omh%
    omh/install/ipopt.omh%
    omh/install/fadbad_prefix.omh%
    omh/install/sacado_prefix.omh%
    omh/install/colpack_prefix.omh%
    omh/install/testvector.omh
%$$


$end
