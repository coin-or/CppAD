/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-22 Bradley M. Bell

  CppAD is distributed under the terms of the
               Eclipse Public License Version 2.0.

  This Source Code may also be made available under the following
  Secondary License when the conditions for such availability set forth
  in the Eclipse Public License, Version 2.0 are satisfied:
        GNU General Public License, Version 2.0 or later.
-------------------------------------------------------------------------- */

$begin whats_new_22$$
$spell
    CppAD
    op
    neg
    mul
    div
    iterator
    iterators
    cppad_lib
    hpp
    rc
    json
    cmake
    nx
    af
    Vec
    Jacobian
    ident
    tmpnam
    nullptr
    cppadcg
    eigen
    isinf
    isnan
    std
    namespace
    hes
    lin
    rel
    txt
    Simpson
    Tc
    msys
    jit
    csrc
    Num
    Op
$$

$section Changes and Additions to CppAD During 2022$$

$head 07-05$$
Merge in pull_155 branch.
This enabled the use of binary operators with Eigen matrices of
type $codei%AD<%Base%>%$$ and type $icode Base$$;
see $cref/ScalarBinaryOpTraits/cppad_eigen.hpp/Eigen ScalarBinaryOpTraits/$$
in $code cppad_eigen.hpp$$.

$head 06-23$$
$list number$$
Change $icode x$$ to $cref/u/to_csrc/u/$$ in the $code to_csrc$$ operation
and add specifications as the position of the independent dynamic
parameters and variables in $icode u$$.
$lnext
Add the $cref jit_dynamic.cpp$$ and $cref jit_compile.cpp$$ examples.
$lnext
Remove some remaining uses of $code CPPAD_TEST_VECTOR$$.
$lnext
Deprecate use of the following symbols:
$codei%CPPAD_%package%VECTOR%$$ for $icode package$$ equal to
$code CPPAD$$, $code STD$$, $code BOOST$$, $code EIGEN$$.
$lnext
Add the $cref/cmake_defined_ok/cmake/cmake_defined_ok/$$ symbol
to the cmake command line.
This enables one to run cmake with a $code CMakeCache.txt$$ file.
$lend

$head 06-22$$
$list number$$
Modify the $cref/msys2/cmake/CMake Command/msys2/$$
and $cref/visual studio/cmake/CMake Command/Visual Studio/$$
install suggestions.
$lnext
Split the JIT function type
$icode%type%_forward_zero%$$ into
$codei%jit_%type%$$ for $cref/JIT functions/to_csrc/JIT Functions/$$, and
$codei%atomic_%type%$$ for $cref/atomic callbacks/to_csrc/Atomic Callbacks/$$.
$lnext
Add the $cref jit_atomic.cpp$$ example.
$lnext
The $code CPPAD_TEST_VECTOR$$ macro was removed
(it was deprecated on 2012-07-03).
$lnext
Remove the following symbols from the $cref testvector$$ documentation:
$codei%CPPAD_%package%VECTOR%$$ for $icode package$$ equal to
$code CPPAD$$, $code STD$$, $code BOOST$$, $code EIGEN$$.
$lend

$head 06-21$$
Change the visual C++ JIT compile flag $code /Tc$$ to the flag $code /TC$$,
so that the C source file need not follow directly after in the compile
command. This fixed a test failure when using that compiler.

$head 06-20$$
JIT C source code generation, compilation, and linking were added using
the following new features, examples, and speed tests:
$table
$rref to_csrc$$
$rref create_dll_lib$$
$rref link_dll_lib$$
$rref example_jit$$
$rref cppad_jit_det_minor.cpp$$
$tend
The following improvements were made to existing features:
$list number$$
Fix a clang++ compiler warning in the file check_for_nan.hpp.
$lend

$head 05-27$$
Add the theory, but not implementation, for the atomic linear ODE
second order reverse mode; see
$cref atomic_four_lin_ode_reverse_2$$.

$head 05-26$$
$list number$$
The atomic linear ODE maximum $cref/step/atomic_four_lin_ode/step/$$ size
was not being enforced during the reverse mode
$cref/Simpson's rule/atomic_four_lin_ode_reverse.hpp/Simpson's Rule/$$
integral approximation.
This has been fixed.
$lnext
Make $cref/extend_ode/atomic_four_lin_ode_forward.hpp/extend_ode/$$
a separate function in the atomic linear ODE example.
$lend

$head 05-20$$
Merge in the pull_144 branch.
This fixed some problems with the windows visual studio build; see
the corresponding pull request.

$head 05-19$$
$list number$$
The atomic four $code base_lin_ode$$ function was changed to
$cref/base_solver/atomic_four_lin_ode_base_solver.hpp/$$.
In addition, a maximum $cref/step/atomic_four_lin_ode/step/$$
size was added to this atomic linear ODE solver.
$lnext
Fix setting of debug and release flags in
$code test_more/debug_rel/CMakeLists.txt$$.
$lend

$head 05-17$$
The $cref atomic_four_lin_ode_rev_depend.hpp$$ example was added.
In addition, remove the Under Construction headings from the
$cref atomic_four_lin_ode$$ sections (it is ready for use).

$head 05-16$$
$list number$$
The $cref/ident_zero_x/atomic_four_hes_sparsity/ident_zero_x/$$ argument
was added to the atomic four Hessian sparsity callback.
The previous version of this callback still works but is deprecated.
$lnext
Add $cref Var2Par$$ set in the $code cppad_eigen.hpp$$
$cref/std Definitions/cppad_eigen.hpp/std Definitions/$$ of the AD versions of
$code isinf$$ and $code isnan$$.
$lnext
Change the atomic four example Hessian sparsity callbacks to use the
$cref/ident_zero_x/atomic_four_hes_sparsity/ident_zero_x/$$.
In the special case of $cref atomic_four_norm_sq.cpp$$,
do not include $icode ident_zero_x$$ and mention that this version
of the callback is deprecated.
$lend

$head 05-15$$

$list number$$
Merge in the pull_140 branch.
This extended CppAD $cref base_limits$$ and $cref numeric_limits$$
to include $code infinity()$$.
In addition,  $code cppad_eigen.hpp$$ added $code isinf$$
and $code isnan$$ for AD types to the std namespace; see
$cref/std Definitions/cppad_eigen.hpp/std Definitions/$$.

$lnext
Fix a long standing bug in the $cref for_hes_sparsity$$ routine.
For example,
the function called $code case_seven$$ in
$code test_more/general/hes_sparsity.cpp/$$ tests a case
where this bug occurred.

$lnext
Add the $cref atomic_four_lin_ode_hes_sparsity.hpp$$ example.

$lend

$head 05-13$$
The $cref/code_gen_fun examples/code_gen_fun/Examples/$$ were
not being built even when
$cref/include_cppadcg/cmake/include_cppadcg/$$
was specified on the cmake command line.
This has been fixed.

$head 05-12$$
The $cref cmake$$ script $code cmake/compile_source_test.cmake$$ was not
working properly on Darwin systems which resulted in the following warning:
$codei%
    warning: 'tmpnam' is deprecated:  %...%
        file_name = tmpnam( nullptr );
%$$
This has been fixed.


$head 05-11$$
A mathematical $cref/theory/atomic_four_lin_ode_jac_sparsity.hpp/Theory/$$
was added to the linear ODE Jacobian sparsity pattern example.
In addition, the corresponding code was changed to match the theory.
This may, or may not, have fixed some bugs in the previous version
of this routine.

$head 05-10$$
The $cref/ident_zero_x/atomic_four_jac_sparsity/ident_zero_x/$$ argument
was added to the atomic four Jacobian sparsity callback.
The previous version of this callback still works but is deprecated.

$head 05-09$$
$list number$$
Add a theory section to the linear ODE
$cref/for_type/atomic_four_lin_ode_for_type.hpp/Theory/$$ section.
In addition more the linear ODE theory for forward and reverse mode to the
corresponding
$cref/forward/atomic_four_lin_ode_forward.hpp/Theory/$$ and
$cref/reverse/atomic_four_lin_ode_reverse.hpp/First Order Theory/$$ sections.
$lnext
Back out an incorrect change on 04-15 to the meaning of
$cref/select_x/atomic_four_jac_sparsity/select_x/$$ and
$cref/select_y/atomic_four_jac_sparsity/select_y/$$ in the
atomic four Jacobian sparsity documentation.
$lnext
Add the specification that the atomic four
$cref/for_type/atomic_four_call/for_type/$$ callback
will be called once for each atomic function call and before any other
of the callbacks for the atomic function call.
$lend

$head 05-07$$
Add the $cref base2vec_ad.cpp$$ example demonstrating that $cref base2ad$$
does not convert $cref VecAD$$ operations as might be expected.
Add a link to this example in both the base2ad and VecAD documentation
and a $cref/base2ad wish_list/wish_list/base2ad/$$ item about this.

$head 05-06$$
There was a bug in combining the $cref discrete$$ functions with the
$cref base2ad$$ operation.
To be specific, if a discrete function was used during the recording of
$icode f$$ and $icode%af% = %f%.base2ad()%$$, the following assert
would happen during forward mode calculations using the $icode af$$ function:
$codei%
    error from unknown source
    Error detected by false result for
        index < List().size()
    at line 325 in the file
    %...% discrete.hpp
%$$
This bug has been fixed.

$head 04-21$$
$list number$$
Modify $cref atomic_four_lin_ode_set.hpp$$ and
$cref atomic_four_lin_ode_get.hpp$$ to re-use sparsity patterns
instead of creating a new one for every call.
This makes use of
$cref/set_row_major/sparse_rc/set_row_major/$$ to speed up checking
for equality of sparsity patterns.
$lnext
In the $cref atomic_four_lin_ode_implement$$ files, change $code assert$$ to
$cref/CPPAD_ASSERT_UNKNOWN/cppad_assert/Unknown/$$.
$lend


$head 04-20$$
Add the
$cref/set_row_major/sparse_rc/set_row_major/$$,
$cref/get_row_major/sparse_rc/get_row_major/$$,
$cref/set_col_major/sparse_rc/set_col_major/$$,
$cref/get_col_major/sparse_rc/get_col_major/$$,
functions to the $code sparse_rc$$ template class.

$head 04-19$$
Change the ODE solver in $cref atomic_four_lin_ode$$ from
$cref runge45$$ to $cref rosen34$$.

$head 04-15$$
$list number$$
Add $cref atomic_four_lin_ode$$ an example of making the solution
of an ODE an atomic operation.
As with the other atomic four examples, the $codei%AD<%Base%>%$$
version of the derivative calculations a done using atomic operations.
$lnext
Add the $cref/equality/sparse_rc/other/Equality/$$ operator
to the sparsity pattern template class.
$lend

$head 03-29$$
Add the $cref atomic_four_lin_ode$$ example
which is not yet complete.

$head 03-26$$
Change $code y(nx)$$ to $code y(ny)$$ in
$cref  atomic_four_mat_mul_forward.cpp$$.

$head 03-25$$
$list number$$
Fix $cref atomic_four_mat_mul$$ by changing it's base class
from $code atomic_four<double>$$ to $codei%atomic_four<%Base%>%$$;
see $cref atomic_four_mat_mul.hpp$$.
$lnext
Remove under construction warning from $cref atomic_four_mat_mul$$.
$lnext
Change $code atomic_vector$$ to $cref atomic_four_vector$$.
$lend

$head 03-24$$
Fix $cref atomic_four_vector$$ by changing it's base class
from $code atomic_four<double>$$ to $codei%atomic_four<%Base%>%$$.
Make some other similar corrections in $cref atomic_four_vector.hpp$$.

$head 03-23$$
Improve error detection and message when both
$cref/cmake_build_type/cmake/cmake_build_type/$$ and
$cref/cppad_debug_which/cmake/cppad_debug_which/$$ are chosen
during the install procedure.

$head 02-21$$
Extend the json graph representation to include
$cref/atomic four/json_graph_op/Atomic Functions/Atomic Four/$$ functions.
For example, see $cref json_atom4_op.cpp$$.

$head 02-19$$
Extend the C++ graph representation to include atomic four
$cref/atomic functions/graph_op_enum/Atomic Function/$$.
For example, see $cref graph_atom4_op.cpp$$.

$head 02-18$$
Fixed the value of $icode%after%[%i%]%$$ in the
$cref/print_graph_op/cpp_ad_graph/operator_arg/print_graph_op/$$ documentation.
To be specific, $code - 2$$ was changed to $code - 1$$.

$head 02-17$$
Add $code identical_zero$$ to the possible
$cref/ad_type/atomic_four_for_type/ad_type/$$ values in
the atomic four $code for_type$$ function.
See $cref atomic_four_vector_for_type.hpp$$,
$cref atomic_four_mat_mul_for_type.hpp$$, and
$cref atomic_four_mat_mul_identical_zero.cpp$$
for an examples using this feature.

$head 02-16$$
Use the $cref atomic_four_norm_sq.cpp$$ overrides
as examples for the virtual functions in the $cref atomic_four$$
base class.

$head 02-13$$
$list number$$
The $cref atomic_four_mat_mul$$ example class was added.
$lnext
The $cref atomic_four_vector$$ include path has changed to
$codei%
    # include <cppad/example/atomic_four/vector.hpp>
%$$
$lend

$head 02-12$$
Add the $cref/push_back/sparse_rc/push_back/$$ and
output stream (see $cref/os/sparse_rc/os/$$) operations
to the $code sparse_rc$$ template class.

$head 02-11$$
The value of $code Libs:$$ in the $code cppad.pc$$ $cref pkgconfig$$ file
was not being set correctly for some cases. This has been fixed.

$head 02-01$$
Fix a possible integer overflow in the $cref to_string.cpp$$ example
(might cause the test to fail).

$head 01-27$$
Convert $cref atomic_four_forward.cpp$$ from an atomic_three
to an atomic_four example.

$head 01-25$$
Convert $cref atomic_four_dynamic.cpp$$ from an atomic_three
to an atomic_four example.

$head 01-23$$
$list number$$
Add $cref atomic_four$$, a simpler interface to atomic functions.
This has the optional $cref/call_id/atomic_four_call/call_id/$$ argument
which can be used to attach extra information to an atomic function call.
$lnext
The $cref atomic_four_vector$$ is a good example that uses
$icode call_id$$ to specify which
element by element operator is being called; see
$cref/call_id/atomic_four_vector/op/$$.
$lnext
Remove element-by-element atomic operations from $cref wish_list$$
(completed by the atomic_vector class).
$lend


$head 01-19$$
Edit wish_list cppad_lib
$cref/requirement/wish_list/cppad_lib/Requirement/$$ item.
Add an $cref/atomic functions/wish_list/Optimization/Atomic Functions/$$
item to the optimization wish list.

$head 01-15$$
$list number$$
Fix some conversion warnings generated by the clang compiler
for the $cref atomic_four_vector$$ example.
$lnext
Correct the order of p, q in function calls in
$cref atomic_four_vector_forward_op.hpp$$.
$lend

$head 01-06$$
$list number$$
Fix the $code []$$ operator using CppAD vector
$cref/iterators/CppAD_vector/Iterators/operator[]/$$.
In addition it was extended to include $code size_t$$ indices.
$lnext
Add reverse mode to the $cref atomic_four_vector$$,  mul, div, operators
and fix some warning used $code size_t$$ iterator indices.
$lend

$head 01-04$$
$list number$$
Add the neg operator to $cref atomic_four_vector$$.
$lnext
Add reverse mode to the atomic_vector,  add, sub, and neg operators.
$lend

$head 01-01$$
The $code example/atomic_three/vector_op.cpp$$ example
(see $cref atomic_four_vector$$) was split into multiple files and moved into the
$code example/atomic_vector$$ directory.

$end
