/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-22 Bradley M. Bell

  CppAD is distributed under the terms of the
               Eclipse Public License Version 2.0.

  This Source Code may also be made available under the following
  Secondary License when the conditions for such availability set forth
  in the Eclipse Public License, Version 2.0 are satisfied:
        GNU General Public License, Version 2.0 or later.
-------------------------------------------------------------------------- */
$begin preprocessor$$
$spell
    Microsoft
    const
    nullptr
    Vec
    ifndef
    endif
    Bool
    Cpp
$$

$nospell
$bold This is cppad-20221105 documentation$$. Here is a link to its
$href%https://cppad.readthedocs.io/en/latest/user_guide.html%current documentation%$$.
$$
$section CppAD API Preprocessor Symbols$$

$head Rule$$
The CppAD include files defines preprocessor symbols all of which begin
with $code CPPAD_$$.
Note that there are some old, deprecated preprocessor symbols that
begin with $code CppAD$$.
In this section we list all of the CppAD preprocessor symbols that
are part of the CppAD Application Interface (API).

$head NOMINMAX, windows.h$$
There is one exception to the rule above,
when using the Microsoft Visual Studio compiler
and including $code windows.h$$,
it is done as follows:
$codep
    # ifndef NOMINMAX
    # define NOMINMAX
    # endif
    # include <windows.h>
$$

$head Documented Here$$

$subhead CPPAD_DEBUG_AND_RELEASE$$
This flag is an exception because it is defined (or not) by the user
during the inclusion of the CppAD header files; e.g., when using $code g++$$
one could put $code -D CPPAD_DEBUG_AND_RELEASE$$ on the complier command line.
If it is defined, less error checking is done and the
debug and release versions of CppAD can be mixed in the same program.
Of particular note is that $cref thread_alloc$$ does less error checking.
For programs that do a lot of memory allocation,
this can be a significant time savings when $code NDEBUG$$ is defined.
$comment
# undef CPPAD_DEBUG_AND_RELEASE
$$

$head CPPAD_NULL$$
Deprecated 2020-12-03:
This preprocessor symbol was used for a null pointer before c++11.
Replace it by $code nullptr$$.
$comment
# undef CPPAD_NULL
$$

$subhead CPPAD_PACKAGE_STRING$$
Is a $code const char*$$ representation of this version of CppAD.
$comment
# undef CPPAD_PACKAGE_STRING
$$

$head CPPAD_USE_CPLUSPLUS_2011$$
Deprecated 2020-12-03:
Is it OK for CppAD to use C++11 features. This is always 1 (for true).
$comment
# undef CPPAD_USE_CPLUSPLUS_2011
$$

$head CPPAD_USE_CPLUSPLUS_2017$$
Is it OK for CppAD to use C++17 features.
$comment
# undef CPPAD_USE_CPLUSPLUS_2017
$$

$head Documented Elsewhere$$
$table
$cref/CPPAD_BOOL_BINARY/BoolFun/Create Binary/$$
$rnext
$cref/CPPAD_BOOL_UNARY/BoolFun/Create Unary/$$
$rnext
$cref/CPPAD_DISCRETE_FUNCTION/Discrete/$$
$rnext
$cref/CPPAD_MAX_NUM_THREADS/multi_thread/CPPAD_MAX_NUM_THREADS/$$
$rnext
$cref/CPPAD_NUMERIC_LIMITS/base_limits/CPPAD_NUMERIC_LIMITS/$$
$rnext
$cref/CPPAD_STANDARD_MATH_UNARY/base_std_math/CPPAD_STANDARD_MATH_UNARY/$$
$rnext
$cref/CPPAD_TAPE_ADDR_TYPE/cmake/cppad_tape_addr_type/$$
$rnext
$cref/CPPAD_TAPE_ID_TYPE/cmake/cppad_tape_id_type/$$
$rnext
$cref/CPPAD_TESTVECTOR/testvector/$$
$rnext
$cref/CPPAD_TO_STRING/base_to_string/CPPAD_TO_STRING/$$
$tend
$comment
# undef CPPAD_BOOL_BINARY
# undef CPPAD_BOOL_UNARY
# undef CPPAD_DISCRETE_FUNCTION
# undef CPPAD_MAX_NUM_THREADS
# undef CPPAD_NUMERIC_LIMITS
# undef CPPAD_STANDARD_MATH_UNARY
# undef CPPAD_TAPE_ADDR_TYPE
# undef CPPAD_TAPE_ID_TYPE
# undef CPPAD_TESTVECTOR
# undef CPPAD_TO_STRING
$$

$subhead Deprecated$$
$table
$cref/CppADCreateDiscrete/Discrete/CppADCreateDiscrete Deprecated 2007-07-28/$$
$rnext
$cref/CPPAD_TRACK_NEW_VEC/TrackNewDel/TrackNewVec/Macro/$$
$rnext
$cref/CPPAD_TRACK_DEL_VEC/TrackNewDel/TrackDelVec/Macro/$$
$rnext
$cref/CPPAD_TRACK_EXTEND/TrackNewDel/TrackExtend/Macro/$$
$rnext
$cref/CPPAD_TRACK_COUNT/TrackNewDel/TrackCount/Macro/$$
$rnext
$cref/CPPAD_USER_ATOMIC/atomic_one/$$
$rnext
$cref/CppADTrackNewVec/TrackNewDel/TrackNewVec/Previously Deprecated/$$
$rnext
$cref/CppADTrackDelVec/TrackNewDel/TrackDelVec/Previously Deprecated/$$
$rnext
$cref/CppADTrackExtend/TrackNewDel/TrackExtend/Previously Deprecated/$$
$rnext
$cref/CppADTrackCount/TrackNewDel/TrackCount/Previously Deprecated/$$
$rnext
$cref/CppADCreateBinaryBool/BoolFun/Deprecated 2007-07-31/$$
$rnext
$cref/CppADCreateUnaryBool/BoolFun/Deprecated 2007-07-31/$$
$rnext
$cref/CPPAD_USER_ATOMIC/atomic_one/Deprecated 2013-05-27/$$
$rnext
$cref/
    CPPAD_CPPADVECTOR/
    testvector/
    CppAD::vector/
    CPPAD_CPPADVECTOR, Deprecated 2022-06-22
/$$
$rnext
$cref/
    CPPAD_STDVECTOR/
    testvector/
    std::vector/
    CPPAD_STDVECTOR, Deprecated 2022-06-22
/$$
$rnext
$cref/
    CPPAD_EIGENVECTOR/
    testvector/
    CppAD::eigen_vector/
    CPPAD_EIGENVECTOR, Deprecated 2022-06-22
/$$
$rnext
$cref/
    CPPAD_BOOSTVECTOR/
    testvector/
    boost::numeric::ublas::vector/
    CPPAD_BOOSTVECTOR, Deprecated 2022-06-22
/$$
$tend
$comment
# undef CppADCreateDiscrete
# undef CPPAD_TRACK_NEW_VEC
# undef CPPAD_TRACK_DEL_VEC
# undef CPPAD_TRACK_EXTEND
# undef CPPAD_TRACK_COUNT
# undef CPPAD_USER_ATOMIC
# undef CppADTrackNewVec
# undef CppADTrackDelVec
# undef CppADTrackExtend
# undef CppADTrackCount
# undef CppADCreateBinaryBool
# undef CppADCreateUnaryBool
# undef CPPAD_USER_ATOMIC
# undef CPPAD_CPPADVECTOR
# undef CPPAD_STDVECTOR
# undef CPPAD_EIGENVECTOR
# undef CPPAD_BOOSTVECTOR
$$

$end
